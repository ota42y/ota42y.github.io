<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>おおたの物置</title>
    <link>http://ota42y.com/</link>
    <description>Recent content on おおたの物置</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 29 Jul 2015 23:25:20 +0900</lastBuildDate>
    <atom:link href="http://ota42y.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugoのブログテーマを作った</title>
      <link>http://ota42y.com/blog/2015/07/29/blog_theme/</link>
      <pubDate>Wed, 29 Jul 2015 23:25:20 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/07/29/blog_theme/</guid>
      <description>&lt;p&gt;ブログテーマ更新を更新しました。&lt;br /&gt;
今回は、Bootstrapを元にした&lt;a href=&#34;http://honokak.osaka/&#34;&gt;Honoka&lt;/a&gt;を利用して作りました。&lt;/p&gt;

&lt;p&gt;リポジトリはこちら&lt;br /&gt;
&lt;a href=&#34;https://github.com/ota42y/honokichi&#34;&gt;https://github.com/ota42y/honokichi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bootstrapの作りにあったHTMLを出力するようにテンプレートを作ると、&lt;br /&gt;
ほぼそれっぽいデザインになったためとても楽でした。&lt;br /&gt;
一応、ブログでよく使う見出し間の間隔や、記事一覧画面でのマージンをちょっと変更しています。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年30週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-30/</link>
      <pubDate>Mon, 27 Jul 2015 23:09:42 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-30/</guid>
      <description>

&lt;h1 id=&#34;ブログ修正中:83c0250635adb9b49b05de588a8ee0a4&#34;&gt;ブログ修正中&lt;/h1&gt;

&lt;p&gt;Bootstrapを使って構築し直してます。&lt;br /&gt;
ついでにHugoをv0.14に上げたところ、いくつかdeprecatedになっていたので修正してます。&lt;/p&gt;

&lt;h1 id=&#34;freeコマンドの出力が変わってる:83c0250635adb9b49b05de588a8ee0a4&#34;&gt;freeコマンドの出力が変わってる&lt;/h1&gt;

&lt;p&gt;freeするとavailableなる見慣れない出力が出ます…&lt;br /&gt;
おそらく空きメモリを示しているようですが、ちょっと調べる必要がありそうです。&lt;/p&gt;

&lt;h1 id=&#34;evernoteの代わりを探し中:83c0250635adb9b49b05de588a8ee0a4&#34;&gt;Evernoteの代わりを探し中&lt;/h1&gt;

&lt;p&gt;昨日ちょうどEvernoteプレミアムが切れてしまい、慌てて延長しました。&lt;/p&gt;

&lt;p&gt;このとき、一時的に容量超過状態になったため、説明には「コンテンツのアップロードが出来ません」と出ていましたが、&lt;br /&gt;
ローカルのEvernoteクライアント上での編集や新規ノートの作成など、アップロード以外の作業が全て出来なくなっていました。&lt;br /&gt;
また、その際の挙動も編集できないのでは無く、従来通り編集可能ですが保存されないため、&lt;br /&gt;
別の操作をしたタイミングでデータが消滅するというかなり危険な挙動をしていました。&lt;/p&gt;

&lt;p&gt;今回はたまたまオンラインに繋げる環境にいたので大事には至りませんでしたが、&lt;br /&gt;
もしオフライン環境だったらと思うと一大事です…&lt;/p&gt;

&lt;p&gt;Evernoteはオフラインでもそこに保存しておけば次にオンラインになった時に同期されるという仕様のため、&lt;br /&gt;
オフライン環境で特によく使い、その上プレミアムを戻しても非プレミアム中にやった変更は消滅するため、かなり被害が大きいです。&lt;/p&gt;

&lt;p&gt;というわけで、Evernoteは参照オンリーの情報だけ保存するようにし、&lt;br /&gt;
変更が必要なノートなどは別の方式で管理しようと思います。&lt;br /&gt;
元々ノートの容量増加に伴って、Evernoteクライアントの反応速度が低下しつつありましたし、
良い頃合いかと思います。&lt;/p&gt;

&lt;p&gt;おそらくDropbox内に置いたファイルを上手く閲覧するような感じになると思います。&lt;br /&gt;
此方の場合は最悪でもローカルファイルになるだけなので、Evernoteのように変更不可能になることはないため、何かあった場合でも大丈夫です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年29週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-29/</link>
      <pubDate>Tue, 21 Jul 2015 17:56:49 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-29/</guid>
      <description>

&lt;h1 id=&#34;cpuの特権レベルについて調べた:c2d0a3130aad94273f8f684d791e0140&#34;&gt;CPUの特権レベルについて調べた&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/CPU%E3%83%A2%E3%83%BC%E3%83%89&#34;&gt;CPUモード&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%B3%E3%82%B0%E3%83%97%E3%83%AD%E3%83%86%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3&#34;&gt;リングプロテクション&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CPUには複数のモードが存在し、特定の機能やメモリ領域にアクセスできるかどうかがこのモードで制御されるらしいです。&lt;/p&gt;

&lt;p&gt;通常、ユーザのプログラムはレベル３、カーネルがレベル０で動いており、&lt;br /&gt;
ユーザのプログラムはレベル０で動いています。&lt;br /&gt;
そのため、 レベル０用のリソースを使うためにはカーネルに処理をお願いする必要があるそうです。&lt;/p&gt;

&lt;h1 id=&#34;goのビルドツールについて調べる:c2d0a3130aad94273f8f684d791e0140&#34;&gt;goのビルドツールについて調べる&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;go build&lt;/code&gt;を実行することで、コンパイルとリンクをまとめて行うことが出来ます。&lt;br /&gt;
ですが、goではそれを別々に実行することも出来ます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go tool 8g&lt;/code&gt;もしくは&lt;code&gt;go tool 6g&lt;/code&gt;を使うことで、goのソースコードからオブジェクトファイルを作成できます。&lt;br /&gt;
(どちらかは使用しているマシンのアーキテクチャによります)&lt;/p&gt;

&lt;p&gt;生成されるオブジェクトファイルは.8もしくは.6の拡張子になります。&lt;br /&gt;
このファイルを&lt;code&gt;go tool 8l&lt;/code&gt;もしくは&lt;code&gt;go tool 6l&lt;/code&gt;を使ってリンクすることで、実行ファイルを作成できます。&lt;br /&gt;
実行ファイルはファイル名を指定しない場合、8.outもしくは6.outになります。&lt;/p&gt;

&lt;h1 id=&#34;レーベンシュタイン距離計算を実装した:c2d0a3130aad94273f8f684d791e0140&#34;&gt;レーベンシュタイン距離計算を実装した&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/ota42y/29dc71841f4388957020&#34;&gt;https://gist.github.com/ota42y/29dc71841f4388957020&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;二つの文字列のうち、片方をどれくらい編集したらもう片方の文字列に出来るかを求めるやつです。&lt;br /&gt;
アルゴリズム的には凄い簡単ですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年28週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-28/</link>
      <pubDate>Mon, 13 Jul 2015 23:25:27 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-28/</guid>
      <description>

&lt;h1 id=&#34;シェル環境を改善中:581fc548323f605be65cf3be104399ee&#34;&gt;シェル環境を改善中&lt;/h1&gt;

&lt;p&gt;tmux plugin managerを導入しました。&lt;br /&gt;
&lt;a href=&#34;https://github.com/tmux-plugins/tpm&#34;&gt;https://github.com/tmux-plugins/tpm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;tmuxのconfファイルでやる設定をある程度共通化し、
プラグインのインストールだけで使えるようにするものです。&lt;br /&gt;
公式でいくつか便利なものが提供されているので入れてみました。&lt;br /&gt;
プラグインは自分で作れるので、swap-paneもこれで管理したいな…と思います。&lt;/p&gt;

&lt;h1 id=&#34;pecoの導入:581fc548323f605be65cf3be104399ee&#34;&gt;pecoの導入&lt;/h1&gt;

&lt;p&gt;入力からインクリメンタルに行を検索できるツールです。&lt;br /&gt;
goなのでバイナリ単体で簡単に動き、インストールが簡単なのが特徴です。&lt;br /&gt;
&lt;a href=&#34;https://github.com/peco/peco&#34;&gt;https://github.com/peco/peco&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ota42y/dotfiles/commit/62ea2fa76cfa0fab8ee8076e0eb59f3b1421b42e&#34;&gt;前にいたディレクトリをたどる設定&lt;/a&gt;や、
&lt;a href=&#34;https://github.com/ota42y/dotfiles/commit/2d16f36f14520862eb5292b05c278016d180bdf3&#34;&gt;git statusから指定したファイルをinsertする設定&lt;/a&gt;をしました。&lt;/p&gt;

&lt;h1 id=&#34;markdown-modeが便利:581fc548323f605be65cf3be104399ee&#34;&gt;markdown-modeが便利&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://jblevins.org/projects/markdown-mode/&#34;&gt;http://jblevins.org/projects/markdown-mode/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;emacs上でmarkdownのハイライトやスニペット入力が出来る便利モードです。&lt;br /&gt;
個人的には見出しをorg-modeのように折りたたみが出来るので、&lt;br /&gt;
アウトラインエディタとしてものすごく便利です。&lt;/p&gt;

&lt;h1 id=&#34;mecab-ipadicをいじっていた:581fc548323f605be65cf3be104399ee&#34;&gt;mecab-ipadicをいじっていた&lt;/h1&gt;

&lt;p&gt;形態素解析をいじってみたくて、igoとmecab-ipadicについて調べていました。&lt;/p&gt;

&lt;h2 id=&#34;igoとは:581fc548323f605be65cf3be104399ee&#34;&gt;igoとは&lt;/h2&gt;

&lt;p&gt;igoとはjava製の形態素解析です。
&lt;a href=&#34;http://igo.osdn.jp/&#34;&gt;http://igo.osdn.jp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;javaとantがあれば直ぐに使えるため、インストールがとても楽です。&lt;br /&gt;
なお、辞書は同梱されていないため、mecabの辞書を取ってくる必要があります。&lt;br /&gt;
&lt;a href=&#34;http://taku910.github.io/mecab/&#34;&gt;http://taku910.github.io/mecab/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;辞書が組み込みではないので普通に使う分にはちょっと面倒ですが、
今回のように辞書をいじって動きを観察する用途にとても便利でした。&lt;/p&gt;

&lt;h2 id=&#34;ipadicを変更してみる:581fc548323f605be65cf3be104399ee&#34;&gt;ipadicを変更してみる&lt;/h2&gt;

&lt;p&gt;igoの動かし方はサイトの通りなので省略します。&lt;/p&gt;

&lt;p&gt;ipadicから解析用のバイナリ辞書を生成する手順がありますが、&lt;br /&gt;
このときipadicのフォルダに辞書ファイルを追加する事で、新たな辞書を追加する事が出来ます。&lt;br /&gt;
また、既存のファイルを削除することで単語の登録をさせないことが出来るため、&lt;br /&gt;
自分が作った辞書だけにすることで、正しく使えるかどうかを調べることが出来ます。&lt;/p&gt;

&lt;p&gt;なお、バイナリ辞書作成時はフォルダの中のcsvを全て読み込むらしく、&lt;br /&gt;
追加時に必要な設定などは無いようです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年27週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-27/</link>
      <pubDate>Mon, 06 Jul 2015 22:42:53 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-27/</guid>
      <description>

&lt;h1 id=&#34;tmux環境を整えた:26038bc9325a7e1e74b9ae9d9fc662f9&#34;&gt;tmux環境を整えた&lt;/h1&gt;

&lt;p&gt;画像のように、tmux内でemacsを開きつつ、zshを表示するようにしました。&lt;br /&gt;
ただペインを分けているだけでなく、ペインの中身はウィンドウなので、&lt;br /&gt;
ウィンドウを作って入れ換えたり、左右の中身を入れ換えたり出来ます。&lt;/p&gt;

&lt;p&gt;具体的にはこんな感じで、分割を維持したまま各シェルを入れ換え可能です。
&lt;img src=&#34;http://ota42y.com/images/blog/2015/2015-07-06-tmux.png&#34; alt=&#34;2015-07-06-tmux.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;入れ替えはswap-paneを利用しています。&lt;br /&gt;
&lt;a href=&#34;https://github.com/abicky/swap-pane&#34;&gt;https://github.com/abicky/swap-pane&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;gemのannotateが便利:26038bc9325a7e1e74b9ae9d9fc662f9&#34;&gt;gemのAnnotateが便利&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ctran/annotate_models&#34;&gt;https://github.com/ctran/annotate_models&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DBからSchemaを読み取り、対応するモデルが書かれたファイルにその情報を書き込むgemです。&lt;br /&gt;
このモデルにどんなカラムがあったっけ？って時に、schemeファイルから探し出す必要がなくなるので大変便利です。&lt;br /&gt;
また、情報はコメントに追加されるため、既存のコードの邪魔になったり勝手にアクセサが追加されたりしないのも便利です。&lt;/p&gt;

&lt;h1 id=&#34;emacsのパッケージ管理:26038bc9325a7e1e74b9ae9d9fc662f9&#34;&gt;emacsのパッケージ管理&lt;/h1&gt;

&lt;p&gt;現在私のemacsはpackage.el、el-get、init-loaderの3つを使ってパッケージ管理をしています。&lt;br /&gt;
package.el、el-getがパッケージのDLや読み込み、init-loaderが設定ファイルのロードをしています。&lt;/p&gt;

&lt;p&gt;具体的な使い方はググれば解るので省略するとして、使い分けとこの構成になった理由は以下の通りです。&lt;/p&gt;

&lt;p&gt;なお、以下のリポジトリに設定ファイルが置いてあります。
&lt;a href=&#34;https://github.com/ota42y/dotfiles&#34;&gt;https://github.com/ota42y/dotfiles&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;パッケージ本体の管理:26038bc9325a7e1e74b9ae9d9fc662f9&#34;&gt;パッケージ本体の管理&lt;/h2&gt;

&lt;p&gt;まず、package.elはMELPA等専用なため、そこにあるパッケージはこちらで管理します。&lt;br /&gt;
一方で、githubや個別のgitリポジトリで管理されているものはel-getでrecipeを書いて管理しています。&lt;br /&gt;
機能的にはel-getだけで完結しますが、package.elの方が楽なので基本はpackage.el、&lt;br /&gt;
そこでカバーできないものをel-getで管理させています。&lt;/p&gt;

&lt;p&gt;また、これらで管理されているものは自動でロードされるようになっているため、&lt;br /&gt;
設定ファイルに追加するだけでインストールが完了します。&lt;/p&gt;

&lt;h2 id=&#34;パッケージ設定の管理:26038bc9325a7e1e74b9ae9d9fc662f9&#34;&gt;パッケージ設定の管理&lt;/h2&gt;

&lt;p&gt;init-loderを使うことで、特定フォルダ内の設定ファイルを一気に読み込むことが出来ます。&lt;br /&gt;
このため、気軽に設定ファイルを分割できます。&lt;/p&gt;

&lt;p&gt;ファイル名に数字を入れる事で読み込む順番の設定も出来るため、&lt;br /&gt;
package.elがダウンロードし、読み込みが終了してからパッケージの設定ファイルを読み込むように設定しています。&lt;/p&gt;

&lt;p&gt;また、私の環境では、el-getでinit-loaderを管理しているため、&lt;br /&gt;
el-get&amp;gt;init-loder&amp;gt;package.el&amp;gt;その他の設定ファイルの順で実行をしています。&lt;br /&gt;
el-getも自動インストールするようにしているため、設定ファイルを持って行くだけで全て自動でインストールできます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:26038bc9325a7e1e74b9ae9d9fc662f9&#34;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;recipeに追加（必要なら）&lt;/li&gt;
&lt;li&gt;使用するパッケージを追加する

&lt;ul&gt;
&lt;li&gt;package.elの場合&lt;/li&gt;
&lt;li&gt;init-loderから読まれるpackage.el用の設定ファイル&lt;/li&gt;
&lt;li&gt;無ければ自動で読み込む&lt;/li&gt;
&lt;li&gt;el-getの場合&lt;/li&gt;
&lt;li&gt;emacs.dのinit.elに名前を書く&lt;/li&gt;
&lt;li&gt;recipeを元にDLする&lt;/li&gt;
&lt;li&gt;自動で読み込みも行われる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;設定をconf下に書く

&lt;ul&gt;
&lt;li&gt;init-loderが読み込む&lt;/li&gt;
&lt;li&gt;カスタマイズが必要ならば&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>dinoでrubyからArduinoを扱う</title>
      <link>http://ota42y.com/blog/2015/07/05/dino/</link>
      <pubDate>Sun, 05 Jul 2015 14:15:20 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/07/05/dino/</guid>
      <description>

&lt;h1 id=&#34;まとめ:97955e611a2d8858fe77d22ec1869f8a&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;PCからArduinoを制御するのは面倒

&lt;ul&gt;
&lt;li&gt;作業量が多い&lt;/li&gt;
&lt;li&gt;電子工作&lt;/li&gt;
&lt;li&gt;Arduinoプログラミング&lt;/li&gt;
&lt;li&gt;PCからArduinoを制御するプログラミング&lt;/li&gt;
&lt;li&gt;Arduinoプログラミングは専用言語&lt;/li&gt;
&lt;li&gt;学習コストがある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;dinoならrubyだけで全て完結できる

&lt;ul&gt;
&lt;li&gt;rubyからArduinoの全機能を制御するプログラムが付随&lt;/li&gt;
&lt;li&gt;rubyのオブジェクト操作でArduinoを制御出来る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;pcからarduinoを制御するのは面倒:97955e611a2d8858fe77d22ec1869f8a&#34;&gt;PCからArduinoを制御するのは面倒&lt;/h1&gt;

&lt;p&gt;Arduinoのおかげで、電子部品をプログラムから制御する際の敷居は大幅に下がりました。&lt;br /&gt;
ですが、Arduinoを制御するためにC/C++をベースとした専用の言語を覚える必要があります。&lt;/p&gt;

&lt;p&gt;PCとからArduinoを制御する場合、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;電子工作をしてArduinoと部品をつなげる&lt;/li&gt;
&lt;li&gt;Arduinoを制御したり、PCに情報を送るプログラムを書く&lt;/li&gt;
&lt;li&gt;PC側でArduinoからの情報を受け取って制御するプログラムを書く&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の3種類の別々の作業が必要になります。&lt;/p&gt;

&lt;p&gt;Arduino抜きでやるよりかは簡単になりましたが、これもまだまだ面倒です。&lt;br /&gt;
ここで、rubyのdinoというgemを使うと、Arduino本体のプログラミングを省略し、&lt;br /&gt;
rubyプログラムを書くだけでArduinoの制御が全てできるようになります。&lt;/p&gt;

&lt;p&gt;これにより、PC側のプログラムを書くだけでArduinoを制御出来ます。&lt;/p&gt;

&lt;h1 id=&#34;dino:97955e611a2d8858fe77d22ec1869f8a&#34;&gt;dino&lt;/h1&gt;

&lt;p&gt;Arduinoをrubyから扱うライブラリです。&lt;br /&gt;
&lt;a href=&#34;https://github.com/austinbv/dino&#34;&gt;https://github.com/austinbv/dino&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arduinoの全機能を外部から制御可能にするプログラムが付随しており、&lt;br /&gt;
これを書き込むことで、arduinoをruby上のオブジェクトとして扱うことができます。&lt;/p&gt;

&lt;h2 id=&#34;サンプルコード:97955e611a2d8858fe77d22ec1869f8a&#34;&gt;サンプルコード&lt;/h2&gt;

&lt;p&gt;A0ポートに対する入力を拾うプログラムは以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;board = Dino::Board.new(Dino::TxRx::Serial.new)
sensor = Dino::Components::Sensor.new(pin: &#39;A0&#39;, board: board)

sensor.when_data_received do |data|
  puts &amp;quot;data=#{data.to_i}&amp;quot;
end

sleep
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポートに対する入力があるたびにブロックが実行されます。&lt;/p&gt;

&lt;p&gt;このように、arduinoをほぼrubyのオブジェクトのように扱えるため、&lt;br /&gt;
PC上でrubyプログラムを書くだけで、電子部品を制御することができるようになります。&lt;/p&gt;

&lt;p&gt;ただし、当然ながらPCと接続して制御するものであり、&lt;br /&gt;
Arduino単体で動作させたい場合は今まで通りArduinoプログラムを書く必要があります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年26週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-26/</link>
      <pubDate>Mon, 29 Jun 2015 22:17:29 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-26/</guid>
      <description>

&lt;h1 id=&#34;fluentd-forwarderのビルドの仕組み:fb0b111ab341d72273c19a831f63e0c6&#34;&gt;fluentd-forwarderのビルドの仕組み&lt;/h1&gt;

&lt;p&gt;基本はREADMEの通りにすればビルド出来ますが、やっていることがちょっと複雑なのでメモ。&lt;br /&gt;
&lt;a href=&#34;https://github.com/fluent/fluentd-forwarder&#34;&gt;https://github.com/fluent/fluentd-forwarder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;READMEに書いてある一つ目の手順の、&lt;br /&gt;
&lt;code&gt;go get github.com/fluent/fluentd-forwarder/entrypoints/build_fluentd_forwarder&lt;/code&gt;&lt;br /&gt;
で、GOPATH以下にリポジトリがcloneし、&lt;br /&gt;
entrypoints/build_fluentd_forwarder内のビルド作業用バイナリが作られます。&lt;/p&gt;

&lt;p&gt;次に、&lt;code&gt;bin/build_fluentd_forwarder fluentd_forwarder&lt;/code&gt;を実行することで、&lt;br /&gt;
さっき作ったbuild_fluentd_forwarderが&lt;code&gt;go get -u&lt;/code&gt;を実行し、&lt;br /&gt;
リポジトリをcloneして(既にしているけど)、entrypoints/fluentd_forwarder下をビルドします。&lt;/p&gt;

&lt;p&gt;というわけで、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;go getでbuild_fluentd_forwarderをビルドする&lt;/li&gt;
&lt;li&gt;build_fluentd_forwarderがgo getでfluentd_forwarderをビルドする。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という流れになっています。&lt;/p&gt;

&lt;h1 id=&#34;fluentd-forwarderに手を加えてみる:fb0b111ab341d72273c19a831f63e0c6&#34;&gt;fluentd-forwarderに手を加えてみる&lt;/h1&gt;

&lt;h2 id=&#34;ローカルで変更する場合:fb0b111ab341d72273c19a831f63e0c6&#34;&gt;ローカルで変更する場合&lt;/h2&gt;

&lt;p&gt;fluentd-forwarderに手を加えたい場合、GOPATH下のfluent/fluentd-forwarderを書き換えてビルドするのが最も早い方法です。&lt;br /&gt;
build_fluentd_forwarderがcloneしますが、変更はそのままでビルド出来ます。&lt;/p&gt;

&lt;h2 id=&#34;forkしたリポジトリに変更を加える場合:fb0b111ab341d72273c19a831f63e0c6&#34;&gt;Forkしたリポジトリに変更を加える場合&lt;/h2&gt;

&lt;p&gt;Forkしてそこに対して変更をした場合、若干やっかいな事が起きます。&lt;/p&gt;

&lt;p&gt;前述したように、build_fluentd_forwarderはgo getを使い、リポジトリをクローンしてビルドします。&lt;br /&gt;
そのため、build_fluentd_forwarderの中に書いてあるリポジトリを書き換え、自分のリポジトリに変更する必要があります。&lt;/p&gt;

&lt;p&gt;また、entrypoints/fluentd_forwarderはリポジトリルートのファイルを外部ライブラリとしてインポートしています。&lt;br /&gt;
そのため、main.goでfluent/fluentd_folwarderをインポートしている部分も、自分のリポジトリに変更する必要があります。&lt;/p&gt;

&lt;p&gt;以上の変更を加えることで、Forkした自分のリポジトリからビルドすることが出来ます。&lt;/p&gt;

&lt;p&gt;まとめると以下のの2ステップになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;build_fluentd_forwarder内のリポジトリを書き換える

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fluent/fluentd-forwarder/blob/master/entrypoints/build_fluentd_forwarder/main.go&#34;&gt;https://github.com/fluent/fluentd-forwarder/blob/master/entrypoints/build_fluentd_forwarder/main.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ImportPathBaseを書き換える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;fluent/fluentd_forwarderをインポートしている部分を書き換える

&lt;ul&gt;
&lt;li&gt;entrypoints/fluentd_forwarder以下の2ファイル共&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前者はbueild_fluentd_forwarderを変えれば何とかなりそうですが、&lt;br /&gt;
後者はgoのimportの仕組みがリポジトリ名まで指定する仕組みのため、書き換える以外に良い解決方法が思いつきません。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年25週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-25/</link>
      <pubDate>Mon, 22 Jun 2015 22:09:20 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-25/</guid>
      <description>

&lt;h1 id=&#34;go-conに参加していた:4120373b776e428195f8931ca37ff809&#34;&gt;go conに参加していた&lt;/h1&gt;

&lt;p&gt;去年の秋と比べて、実際に使っている例が多くて、&lt;br /&gt;
もうプロダクション投入されてるなーという印象でした。
&lt;a href=&#34;http://ota42y.com/blog/2015/06/21/gocon-2015-summer/&#34;&gt;参加記録 Go Conference 2015 summer&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;atom-ioは辞めた:4120373b776e428195f8931ca37ff809&#34;&gt;atom.ioは辞めた&lt;/h1&gt;

&lt;p&gt;Atom.ioの現状の仕様は、プロジェクトごとにウィンドウを割り当てて使うようになっています。&lt;br /&gt;
ですが、MacではWindowsに比べて同じアプリ内のウィンドウを切り替えるのがとても大変であり、&lt;br /&gt;
このようにウィンドウを細かく分けられると著しく不便です。&lt;br /&gt;
Macのひどい仕様に負けるのはあまり良い気分ではないですが、&lt;br /&gt;
このあたりの仕様が変わるまでは私の使い方では使い物になりません…&lt;/p&gt;

&lt;p&gt;また、立ち上がりが重いのも大きな問題の1つです。&lt;br /&gt;
ビルド中はCPUをものすごく使っているおり、その状態でAtom.ioを立ち上げると起動まで十数秒かかります。&lt;br /&gt;
ただこの点に関しては、ネィティブではなくwebエンジニアであれば問題にならないとは思います。&lt;/p&gt;

&lt;h1 id=&#34;gosweepが便利そう:4120373b776e428195f8931ca37ff809&#34;&gt;gosweepが便利そう&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hailiang/gosweep&#34;&gt;https://github.com/hailiang/gosweep&lt;/a&gt;&lt;br /&gt;
gofmtやgolint等のgoの便利ツールを全て実行してくれる奴です。&lt;br /&gt;
便利＆go vetやgoimports等知らないのもあったので有用そうです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>参加記録 Go Conference 2015 summer</title>
      <link>http://ota42y.com/blog/2015/06/21/gocon-2015-summer/</link>
      <pubDate>Sun, 21 Jun 2015 23:43:02 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/06/21/gocon-2015-summer/</guid>
      <description>

&lt;p&gt;今回は日経さんとCAさんがスポンサーとのことですが、&lt;br /&gt;
かなりの人がいるのにwifiが普通に繋がっていて凄かったです…&lt;br /&gt;
なんか機械も見たことも無い凄い奴でしたし。&lt;/p&gt;

&lt;p&gt;実際に運用してる上での話が多く、goの時代が来ている…！&lt;br /&gt;
という感じを受けました。&lt;br /&gt;
お仕事でほぼ使ってないのでちゃんと使いたいですねー&lt;/p&gt;

&lt;p&gt;また、みんなcode generateに走っているのはおもしろかったです。&lt;br /&gt;
コピペになるようなコードはgenerateするってのはほぼ統一見解ですね。&lt;/p&gt;

&lt;h1 id=&#34;キーノート:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;キーノート&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;go1.5凄そうです&lt;/li&gt;
&lt;li&gt;go oracleのすごさ

&lt;ul&gt;
&lt;li&gt;関数がどこで使われているかが調べられる&lt;/li&gt;
&lt;li&gt;関数ポインタで呼ぶ場合も大丈夫&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;gomobile、早くiOSに対応してC++を駆逐してほしいです…&lt;/li&gt;
&lt;li&gt;公式の依存管理ツールも楽しみです&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;発表まとめ:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;発表まとめ&lt;/h1&gt;

&lt;p&gt;発表順は覚えてないので、タイムテーブルに順不同で並べられている順です。&lt;/p&gt;

&lt;h2 id=&#34;gaurun-a-general-push-notification-server-in-go:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Gaurun〜A general push notification server in Go〜&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/cubicdaiya/a-general-push-notification-server-in-go&#34;&gt;https://speakerdeck.com/cubicdaiya/a-general-push-notification-server-in-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;go製のpushサーバ&lt;/li&gt;
&lt;li&gt;モニタリング用のAPIを用意してるの、凄い良いなーと思いました。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;debugging-go-code-with-gdb:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Debugging Go Code with GDB&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kaneshin.hateblo.jp/entry/2015/06/21/202850&#34;&gt;http://kaneshin.hateblo.jp/entry/2015/06/21/202850&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GDB、あんまり使いこなしてないのでもっとちゃんと使わないと…と思った。&lt;/li&gt;
&lt;li&gt;Goはコンパイル早いし、落ちたときにちゃんとどの行で落ちたか出してくれるし、無くても何とかなる感はあります

&lt;ul&gt;
&lt;li&gt;使った方が何倍も楽なのでちゃんと使った方が良いかと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;go 1.5からコンパイラがgoで実装されるけど、吐き出されるバイナリにDWARFが入ってれば関係ないよね？

&lt;ul&gt;
&lt;li&gt;リリース直後はバグったDWARFになる可能性はありそう…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;フォントが$300ってwwwwww&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;generative-programming-in-go:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Generative programming in Go.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/monochromegane/generative-programming-in-go&#34;&gt;https://speakerdeck.com/monochromegane/generative-programming-in-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;reflection凄く遅いです…(直接呼ぶのと1000倍違う)&lt;/li&gt;
&lt;li&gt;金槌を持つと何でも釘に見える病…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gore-go-で-repl-のはなし:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;gore - Go で REPL のはなし&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;irbみたいにgoを対話的に実行できるやつの内部事情&lt;/li&gt;
&lt;li&gt;go runしてるだけ&lt;/li&gt;
&lt;li&gt;go runに失敗しないように色々前処理をがんばってるみたいです。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;goと電子工作とロボット:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Goと電子工作とロボット&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;goでロボット制御できて、しかもスタンドアロンで動いていて凄いです&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;goのastをいじくって新しいツールを作る:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;GoのASTをいじくって新しいツールを作る&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/vvakame/gocon-2015-summer&#34;&gt;http://www.slideshare.net/vvakame/gocon-2015-summer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;go/astを使うと、コード解析した結果みたいなのをとれるみたいです。

&lt;ul&gt;
&lt;li&gt;正規表現でがんばる！とかよりかは遙かに楽そう…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ただ、出力部分は気合いとのこと…&lt;/li&gt;
&lt;li&gt;怒りのスライドは良くわかります…

&lt;ul&gt;
&lt;li&gt;1byte=1文字、再帰的なパッケージ、err!=nilめんどい…(´･_･`)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;go言語でコマンドラインツールをつくるときに僕の語ること:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Go言語でコマンドラインツールをつくるときに僕の語ること&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/tcnksm/what-i-talk-about-when-i-talk-about-cli-tool-by-golang-number-gocon&#34;&gt;https://speakerdeck.com/tcnksm/what-i-talk-about-when-i-talk-about-cli-tool-by-golang-number-gocon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CLIツールは何となくこうした方が良いよね…って思ってたのがちゃんとまとめられてます&lt;/li&gt;
&lt;li&gt;さらに、それに沿ったテンプレートを作ってくれるものも作ったらしいです。凄い

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tcnksm/gcli&#34;&gt;https://github.com/tcnksm/gcli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;-vとかでバージョン確認したときに、最新バージョンをチェックするの頭良いですね

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tcnksm/go-latest&#34;&gt;https://github.com/tcnksm/go-latest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;patterns-for-building-a-scalable-testable-web-app-in-go:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Patterns for building a scalable, testable web app in Go&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcegraph.com/&#34;&gt;https://sourcegraph.com/&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;そもそもこのサービス知りませんでしたが、めっちゃ凄いです…(o゜▽゜)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ピクシブ社内広告サーバーでのgoの開発-運用:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;ピクシブ社内広告サーバーでのGoの開発・運用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://catatsuy.hateblo.jp/entry/2015/06/21/214229&#34;&gt;http://catatsuy.hateblo.jp/entry/2015/06/21/214229&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;goのサーバを実際に運用している上での知見が詰まってました。

&lt;ul&gt;
&lt;li&gt;nginxをフロントに立てることで、goサーバは特定の機能を素早く処理することに集中できるとか&lt;/li&gt;
&lt;li&gt;ホットデプロイするためにnginxとの間にunixソケット受付のアプリを立てておくとか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CPU Throttlingによって混んでないときはレスポンスが遅い話がおもしろかったです。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1binary-自己完結型の-形態素解析器-kagome-を-作ってみた話:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;1binary 自己完結型の 形態素解析器 kagome を 作ってみた話&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ikawaha.hateblo.jp/entry/2015/06/21/155636&#34;&gt;http://ikawaha.hateblo.jp/entry/2015/06/21/155636&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;辞書のエンコーディングに悩まなくて良いの凄く良いと思います。&lt;/li&gt;
&lt;li&gt;形態素解析説明が凄くわかりやすかったです

&lt;ul&gt;
&lt;li&gt;ただ、文脈IDをどう使ってるのか良くわかりませんでした…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;goで基盤システムつくってる話:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;GOで基盤システムつくってる話&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CAでLoL並の接続数を捌けるような基盤システムを作ってる話&lt;/li&gt;
&lt;li&gt;パッケージ管理やパッケージ構成…(´･_･`)&lt;/li&gt;
&lt;li&gt;標準パッケージは宝の山。goらしさを調べるにはうってつけとのこと

&lt;ul&gt;
&lt;li&gt;A Tour of GoやEffective Goの後に最適&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;lt:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;LT&lt;/h2&gt;

&lt;h3 id=&#34;goのパッケージ構成で試行錯誤してみた話:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Goのパッケージ構成で試行錯誤してみた話&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/fkmhrk/go-49650783&#34;&gt;http://www.slideshare.net/fkmhrk/go-49650783&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;パッケージの分け方は特にgo特有のやり方はなく、他の言語とおんなじっぽいです&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;appengine-for-go-unittest:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;AppEngine for Go Unittest&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;デバッグ用のサーバの立ち上げが遅いので、Unittestに時間がかかるそうです&lt;/li&gt;
&lt;li&gt;並列化しても最初の分の時間はやっぱりかかってしまうとのこと

&lt;ul&gt;
&lt;li&gt;起動しっぱなしにして、そこに接続して使うとかはダメなのでしょうか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;golangで始めるハードウェアプログラミング:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Golangで始めるハードウェアプログラミング&lt;/h3&gt;

&lt;p&gt;メモり損ねました…(´･_･`)&lt;/p&gt;

&lt;h3 id=&#34;vendoring-golang:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;vendoring @ golang&lt;/h3&gt;

&lt;p&gt;メモり損ねました…(´･_･`)&lt;/p&gt;

&lt;h3 id=&#34;gopherになれ:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;「Gopherになれ！」&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;この人&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;コミケにgopher君がいた &lt;a href=&#34;http://t.co/cMyhSFgIwy&#34;&gt;pic.twitter.com/cMyhSFgIwy&lt;/a&gt;&lt;/p&gt;&amp;mdash; ななやん (@7yan00) &lt;a href=&#34;https://twitter.com/7yan00/status/549767136445333504&#34;&gt;2014, 12月 30&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go製の拡張可能なslackbot-仮:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Go製の拡張可能なslackbot（仮）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kyokomi.hatenablog.com/entry/2015/06/21/213610&#34;&gt;http://kyokomi.hatenablog.com/entry/2015/06/21/213610&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pluginの拡張をどうしてるのか謎でしたが、コードを読んで納得

&lt;ul&gt;
&lt;li&gt;パッケージのinit関数で、pluginsパッケージが保有するプラグインのリストに自分を登録する&lt;/li&gt;
&lt;li&gt;botがpluginsの中を読み込んで動作する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;goの使われ処:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Goの使われ処&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/qt_luigi/gofalseshi-warechu-ri-ben-falsehui-she-bian&#34;&gt;https://speakerdeck.com/qt_luigi/gofalseshi-warechu-ri-ben-falsehui-she-bian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5分間ひたすら採用している会社を羅列していました&lt;/li&gt;
&lt;li&gt;想像以上に多くて、盛り上がってるなーと思いました&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;k0kubun-pp-についてと-reflectパッケージとメタプログラミング:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;k0kubun/pp についてと、reflectパッケージとメタプログラミング&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://k0kubun.hatenablog.com/entry/2015/06/21/195229&#34;&gt;http://k0kubun.hatenablog.com/entry/2015/06/21/195229&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ppをラップしただけの関数を定義しておくってのが凄い便利そうです

&lt;ul&gt;
&lt;li&gt;import書いたり消したりがとても面倒なので…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メタプログラミングは…やっぱり現実的じゃ無いですよね&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;golangはじめて半日後に野球のアプリ書いてltしてきた:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Golangはじめて半日後に野球のアプリ書いてLTしてきた&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://shinyorke.hatenablog.com/entry/2015/06/21/195656&#34;&gt;http://shinyorke.hatenablog.com/entry/2015/06/21/195656&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;やったことの時系列になってておもしろいです&lt;/li&gt;
&lt;li&gt;やっぱり学習コストは低いんですねー&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C言語でのスレッド処理</title>
      <link>http://ota42y.com/blog/2015/06/18/c-thread/</link>
      <pubDate>Thu, 18 Jun 2015 07:47:43 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/06/18/c-thread/</guid>
      <description>

&lt;p&gt;C言語でのスレッド処理と、ロックの仕方をまとめました。&lt;br /&gt;
他の言語のようにスレッド用のクラスを継承するのでは無く、&lt;br /&gt;
別スレッドで実行する関数のポインタと、&lt;br /&gt;
その関数に渡すデータのポインタを指定して実行するようです。&lt;/p&gt;

&lt;h1 id=&#34;スレッドによる並行処理:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;スレッドによる並行処理&lt;/h1&gt;

&lt;h2 id=&#34;スレッドの作成-pthread-create:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;スレッドの作成(pthread_create)&lt;/h2&gt;

&lt;p&gt;Cではpthread_createを利用することで、別スレッドで任意の関数を実行できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int pthread_create(pthread_t * thread,
	 pthread_attr_t * attr,
	 void * (*start_routine)(void *),
	 void * arg);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;thread

&lt;ul&gt;
&lt;li&gt;スレッド管理用のpthread_t型の変数&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;attr

&lt;ul&gt;
&lt;li&gt;スレッドの属性を指定する。&lt;/li&gt;
&lt;li&gt;NULLの場合はデフォルトが使われる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;(*start_routine)(void *)

&lt;ul&gt;
&lt;li&gt;別スレッドから呼び出される関数へのポインタ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;arg

&lt;ul&gt;
&lt;li&gt;start_routineの引数として渡すデータのポインタ&lt;/li&gt;
&lt;li&gt;元のスレッドからデータを送るのに使う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;スレッドの終了を待つ-pthread-join:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;スレッドの終了を待つ(pthread_join)&lt;/h2&gt;

&lt;p&gt;pthread_joinで、指定したスレッドが終了するまで待機することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int pthread_join(pthread_t th, void **thread_return);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;th

&lt;ul&gt;
&lt;li&gt;待機するスレッドをpthread_t型の変数で指定する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;**thread_return

&lt;ul&gt;
&lt;li&gt;スレッドの戻り値を格納する領域&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;サンプルコード:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;サンプルコード&lt;/h2&gt;

&lt;p&gt;以下の例はグローバルな値にメインとサブの2つのスレッドから加算処理を行っています。&lt;br /&gt;
排他制御をしていないため、スレッドによる並行処理が行われると、値がおかしくなる可能性があります。&lt;/p&gt;

&lt;p&gt;実際、何度か実行すると値がおかしくなり、並行処理が行われていることが確認できます。&lt;/p&gt;

&lt;p&gt;なお、コンパイルする際はは-pthreadオプションを指定する必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;quot;stdio.h&amp;quot;
#include &amp;quot;pthread.h&amp;quot;

int a = 0;

void *func_thread(void *p) {
  printf(&amp;quot;start %d\n&amp;quot;, *(int*)p);

  int i=0;
  for(i=0; i &amp;lt; 10000; i++){
	int next = a + 1;
	int now = a;
	a = next;
	if (now+1 != next) {
	  printf(&amp;quot;other theard change %d %d\n&amp;quot;, a+1, next);
	}
  }

  return 0;
}

int main(void) {
  printf(&amp;quot;test\n&amp;quot;);

  int b = 42;

  pthread_t pthread;
  pthread_create( &amp;amp;pthread, NULL, &amp;amp;func_thread, &amp;amp;b);

  int i=0;
  for(i=0; i &amp;lt; 10000; i++){
	int next = a + 1;
	int now = a;
	a = next;
	if (now+1 != next) {
	  printf(&amp;quot;other theard change %d %d\n&amp;quot;, a+1, next);
	}
  }

  pthread_join(pthread, NULL); // pthreadで作られたスレッドが終わるまで待つ
  printf(&amp;quot;a=%d\n&amp;quot;, a);

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;mutexによるロック処理:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;mutexによるロック処理&lt;/h1&gt;

&lt;h2 id=&#34;排他制御を行う:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;排他制御を行う&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;pthread_mutex_t&lt;/code&gt;型の変数に対して、&lt;code&gt;pthread_mutex_lock&lt;/code&gt;、&lt;code&gt;pthread_mutex_unlock&lt;/code&gt;を実行することで、&lt;br /&gt;
処理をロックすることができます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pthread_mutex_t&lt;/code&gt;型の変数は&lt;code&gt;pthread_mutex_init&lt;/code&gt;で初期化することができます。&lt;br /&gt;
このとき、第二引数にmutex属性を渡すことができ、NULLを渡した場合はデフォルト値が使われます。&lt;/p&gt;

&lt;h2 id=&#34;サンプルコード-1:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;サンプルコード&lt;/h2&gt;

&lt;p&gt;上記の例にロックによる排他制御を入れました。&lt;br /&gt;
そのため、並列処理を行っても値は正しく処理されるため、何度やっても結果が正しくなります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;stdio.h&amp;quot;
#include &amp;quot;pthread.h&amp;quot;

int a = 0;
pthread_mutex_t mutex;

void *func_thread(void *p) {
  printf(&amp;quot;start %d\n&amp;quot;, *(int*)p);

  int i=0;
  for(i=0; i &amp;lt; 10000; i++){
    pthread_mutex_lock(&amp;amp;mutex);
	int next = a + 1;
	int now = a;
	a = next;
    pthread_mutex_unlock(&amp;amp;mutex);

	if (now+1 != next) {
	  printf(&amp;quot;other theard change %d %d\n&amp;quot;, a+1, next);
	}
  }

  return 0;
}

int main(void) {
  pthread_mutex_init(&amp;amp;mutex, NULL);
  
  printf(&amp;quot;test\n&amp;quot;);

  int b = 42;

  pthread_t pthread;
  pthread_create( &amp;amp;pthread, NULL, &amp;amp;func_thread, &amp;amp;b);

  int i=0;
  for(i=0; i &amp;lt; 10000; i++){
    pthread_mutex_lock(&amp;amp;mutex);
	int next = a + 1;
	int now = a;
	a = next;
    pthread_mutex_unlock(&amp;amp;mutex);

	if (now+1 != next) {
	  printf(&amp;quot;other theard change %d %d\n&amp;quot;, a+1, next);
	}
  }

  pthread_join(pthread, NULL); // pthreadで作られたスレッドが終わるまで待つ
  printf(&amp;quot;a=%d\n&amp;quot;, a);

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2015年24週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-24/</link>
      <pubDate>Mon, 15 Jun 2015 22:37:01 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-24/</guid>
      <description>

&lt;h1 id=&#34;c-入出力の書式を制御する:b0204dc6a3868861d55079e7791d2606&#34;&gt;C++入出力の書式を制御する&lt;/h1&gt;

&lt;p&gt;c++でstreamを使って出力する場合、iomanipに用意されているものを利用することで、&lt;br /&gt;
入出力の書式を制御することが出来ます。&lt;/p&gt;

&lt;p&gt;設定はstreamに対して設定用のオブジェクトを送るように設定するみたいです。&lt;br /&gt;
なお、以下は出力の例です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;iomanip&amp;gt;

int main(void) {
  double a = 25252;
  int p = 2;

  std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; std::endl; // 25252
  std::cout &amp;lt;&amp;lt; std::setprecision(p); //浮動小数点の有効桁数を指定する
  std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; std::endl; // 2.5e+04

  std::cout &amp;lt;&amp;lt; std::oct; // 8進数表示
  std::cout &amp;lt;&amp;lt; 874 &amp;lt;&amp;lt; std::endl; // 1552

  std::cout &amp;lt;&amp;lt; std::showbase; // 基数を表示する
  std::cout &amp;lt;&amp;lt; std::hex; // 16進数表示
  std::cout &amp;lt;&amp;lt; 874 &amp;lt;&amp;lt; std::endl; // 0x36a
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2015年23週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-23/</link>
      <pubDate>Mon, 08 Jun 2015 23:41:38 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-23/</guid>
      <description>

&lt;h1 id=&#34;lock-freeって何:b762442d260e082e6120a3e456dc065a&#34;&gt;Lock Freeって何&lt;/h1&gt;

&lt;p&gt;複数スレッドや複数コアから同じデータを更新する場合、&lt;br /&gt;
通常はlockをかけて排他制御を行いますが、lockをかけずに行う方法があるらしいです。&lt;/p&gt;

&lt;p&gt;lockをかける場合、その間そのデータにはアクセスできず、並列処理を止めてしまうため、&lt;br /&gt;
並列数が大きくなるに従って性能が劣化していくそうです。&lt;br /&gt;
lockなしで排他処理を行う場合、並列数を増やしても性能の劣化が無くなるそうです。&lt;/p&gt;

&lt;p&gt;やっていることとしては、値をコピーして変更を加え、&lt;br /&gt;
「コピー前の値と現在の値が一緒かどうかをチェック」「変更した値を書き込む」を一括にやる命令を利用し、&lt;br /&gt;
比較と更新を同時にするというものだそうです。&lt;br /&gt;
(Compare-and-Swap、CAS命令)&lt;/p&gt;

&lt;p&gt;この比較して更新する命令があることで、&lt;br /&gt;
ロックせずに複数から値を変更しても一貫性が保たれるらしいです。&lt;br /&gt;
また、この命令が無いとlock freeが実現できない事が証明されているらしいです。&lt;br /&gt;
 &lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3%E3%83%9A%E3%82%A2%E3%83%BB%E3%82%A2%E3%83%B3%E3%83%89%E3%83%BB%E3%82%B9%E3%83%AF%E3%83%83%E3%83%97&#34;&gt;コンペア・アンド・スワップ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;i386ではCMPXCHG〜命令でこれが出来るらしく、&lt;br /&gt;
goのatomicパッケージでも利用されているようです。&lt;br /&gt;
&lt;a href=&#34;https://github.com/golang/go/blob/master/src/sync/atomic/asm_386.s#L34&#34;&gt;https://github.com/golang/go/blob/master/src/sync/atomic/asm_386.s#L34&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linuxのlocaleがおかしくなっていた</title>
      <link>http://ota42y.com/blog/2015/06/03/linux_local/</link>
      <pubDate>Wed, 03 Jun 2015 07:39:36 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/06/03/linux_local/</guid>
      <description>

&lt;p&gt;突然プログラムが起動しなくなったため、&lt;br /&gt;
原因を探ったところ、localesが壊れていました。&lt;br /&gt;
そのため、再インストールすることで直りました。&lt;br /&gt;
言語取得部分は動くけど、おかしい結果を返す壊れ方のため、&lt;br /&gt;
発見にわりと手間取りました。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:6e55b0bffb1729855201d3ad39c63b44&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;プログラム上でlocaleを参照する部分がおかしい結果を返す

&lt;ul&gt;
&lt;li&gt;常にANSI_X3.4-1968&lt;/li&gt;
&lt;li&gt;Debian 7.8&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;dpkg-reconfigure localesが何か壊れているメッセージを出す

&lt;ul&gt;
&lt;li&gt;localeをアップデートすると直る&lt;/li&gt;
&lt;li&gt;apt-get install locales&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;localeの取得がおかしい:6e55b0bffb1729855201d3ad39c63b44&#34;&gt;localeの取得がおかしい&lt;/h1&gt;

&lt;p&gt;pythonではgetpreferredencoding()で設定されている言語情報を取ってこれます。
ですが、&lt;br /&gt;
&lt;code&gt;LANG=&#39;ja_JP.UTF-8&#39; echo &#39;import locale; print locale.getpreferredencoding()&#39; | python&lt;/code&gt;&lt;br /&gt;
を実行しても、&lt;code&gt;ANSI_X3.4-1968&lt;/code&gt;が返ってきてしまい、日本語処理の部分でおかしくなっていました。&lt;br /&gt;
(前にそのプログラムは動いていたので、気がついたらおかしくなっていました)&lt;/p&gt;

&lt;p&gt;localeを実行してみたところ、以下のように表示されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;locale -a
locale: Cannot set LC_CTYPE to default locale: No such file or directory
locale: Cannot set LC_MESSAGES to default locale: No such file or directory
locale: Cannot set LC_COLLATE to default locale: No such file or directory
C
C.UTF-8
POSIX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうやら日本語のlocaleが有効ではないようです。&lt;/p&gt;

&lt;p&gt;ですが、&lt;code&gt;/etc/locale.gen&lt;/code&gt;では、ja_JP.UTF-8がコメントアウトされていて有効になっていました。&lt;/p&gt;

&lt;h1 id=&#34;原因は不明だがとりあえず直る:6e55b0bffb1729855201d3ad39c63b44&#34;&gt;原因は不明だがとりあえず直る&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;sudo su
export LC_ALL=C # jaは使えないのでCにする必要がある
export LANG=C # jaは使えないのでCにする必要がある
sudo dpkg-reconfigure locales
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;したら、localesが壊れているというメッセージが出てきました。&lt;/p&gt;

&lt;p&gt;そのため、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install locales
sudo dpkg-reconfigure locales
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、ja_JP.UTF-8を有効にしてリブートしたら上手くいくようになりました。&lt;/p&gt;

&lt;p&gt;おそらくlocales周りがおかしくなっており、新しいlocalesを入れる際にそれが直ったのだと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年22週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-22/</link>
      <pubDate>Mon, 01 Jun 2015 22:00:39 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-22/</guid>
      <description>

&lt;p&gt;今週まとめ&lt;/p&gt;

&lt;h1 id=&#34;cでのマルチスレッド処理を調べてる:68ba6b064e3726dd0f45c78184617ab0&#34;&gt;Cでのマルチスレッド処理を調べてる&lt;/h1&gt;

&lt;p&gt;Cにはクラスが無いので、Threadクラスを継承し、&lt;br /&gt;
runメソッドをオーバーライドするといった、いろんな言語でよくあるパターンは使えません。&lt;br /&gt;
代わりに、pthread_create関数にコールバック関数を渡すと、&lt;br /&gt;
別スレッドから呼び出してくれるため、それを利用して別スレッドを作るようです。&lt;/p&gt;

&lt;h1 id=&#34;cでのロック処理を調べている:68ba6b064e3726dd0f45c78184617ab0&#34;&gt;Cでのロック処理を調べている&lt;/h1&gt;

&lt;p&gt;ロック用変数を作り、pthread_mutex_lock関数を呼ぶことで、ロックをかけられます。&lt;/p&gt;

&lt;p&gt;他のスレッドから起こされるまで待つには、&lt;br /&gt;
mutexとcond変数を定義して、mutexのロックを取得して、&lt;br /&gt;
pthread_cond_waitを呼びます。&lt;/p&gt;

&lt;p&gt;一定時間たったら呼ばれて無くても起きて欲しい場合は、&lt;br /&gt;
pthread_cond_timedwaitを呼びます。&lt;/p&gt;

&lt;p&gt;なお、C++11からmutexオブジェクトといった、&lt;br /&gt;
ロックや排他制御が簡単にできる仕組みが導入されています。&lt;/p&gt;

&lt;h1 id=&#34;c-ではintに-演算が出来る:68ba6b064e3726dd0f45c78184617ab0&#34;&gt;C++ではintに[]演算が出来る&lt;/h1&gt;

&lt;p&gt;元ネタ&lt;br /&gt;
&lt;a href=&#34;http://twitter.com/mattn_jp/status/605245747429179392&#34;&gt;http://twitter.com/mattn_jp/status/605245747429179392&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;memory.h&amp;gt;

int main() {
  int v[] = {1, 2, 3};
  int off = 2;
  printf(&amp;quot;%d\n&amp;quot;, off[v]); // 3
  printf(&amp;quot;%d\n&amp;quot;, 1[v]); // 2
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C++では、intやenum型に対して[]が実行された場合、暗黙的な方変換によりstd::ptrdiff_tに変換されます。&lt;br /&gt;
そのため、a[b]は&lt;code&gt;*(a+b)&lt;/code&gt;と同義になり、上の例は&lt;code&gt;*(off+v)&lt;/code&gt;や&lt;code&gt;*(1+v)&lt;/code&gt;と解釈され、
正しく動くようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.cppreference.com/w/cpp/language/operator_member_access&#34;&gt;http://en.cppreference.com/w/cpp/language/operator_member_access&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年21週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-21/</link>
      <pubDate>Mon, 25 May 2015 22:09:32 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-21/</guid>
      <description>

&lt;h1 id=&#34;体調を崩した:63b972d7b8a9e5b8ecb6903994a97d8c&#34;&gt;体調を崩した&lt;/h1&gt;

&lt;p&gt;体調を崩して週の半分は倒れてた。&lt;br /&gt;
3日倒れるとやることリストが大変なことになるので、&lt;br /&gt;
体調がおかしい場合は速やかに医者に行って、薬をもらうべきだと再認識した。&lt;/p&gt;

&lt;h1 id=&#34;c-03以前ではオーバーロードされたコンストラクタが呼び出せない:63b972d7b8a9e5b8ecb6903994a97d8c&#34;&gt;C++03以前ではオーバーロードされたコンストラクタが呼び出せない&lt;/h1&gt;

&lt;p&gt;以下のように、コンストラクタから別のコンストラクタを呼び出すことで、&lt;br /&gt;
処理を共通化するのはわりと自然ではないかと思います。&lt;/p&gt;

&lt;p&gt;これはdelegate constructorとうい名前がついており、&lt;br /&gt;
残念ながらC++11以降じゃないと使えません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;struct A {
  A() : A(0) {}
  A(int num) : a(num) {}
  int a;
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>