<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>おおたの物置</title>
    <link>http://ota42y.com/</link>
    <description>Recent content on おおたの物置</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 21 Jun 2015 23:43:02 +0900</lastBuildDate>
    <atom:link href="http://ota42y.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>参加記録 Go Conference 2015 summer</title>
      <link>http://ota42y.com/blog/2015/06/21/gocon-2015-summer/</link>
      <pubDate>Sun, 21 Jun 2015 23:43:02 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/06/21/gocon-2015-summer/</guid>
      <description>

&lt;p&gt;今回は日経さんとCAさんがスポンサーとのことですが、&lt;br /&gt;
かなりの人がいるのにwifiが普通に繋がっていて凄かったです…&lt;br /&gt;
なんか機械も見たことも無い凄い奴でしたし。&lt;/p&gt;

&lt;p&gt;実際に運用してる上での話が多く、goの時代が来ている…！&lt;br /&gt;
という感じを受けました。&lt;br /&gt;
お仕事でほぼ使ってないのでちゃんと使いたいですねー&lt;/p&gt;

&lt;p&gt;また、みんなcode generateに走っているのはおもしろかったです。&lt;br /&gt;
コピペになるようなコードはgenerateするってのはほぼ統一見解ですね。&lt;/p&gt;

&lt;h1 id=&#34;キーノート:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;キーノート&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;go1.5凄そうです&lt;/li&gt;
&lt;li&gt;go oracleのすごさ

&lt;ul&gt;
&lt;li&gt;関数がどこで使われているかが調べられる&lt;/li&gt;
&lt;li&gt;関数ポインタで呼ぶ場合も大丈夫&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;gomobile、早くiOSに対応してC++を駆逐してほしいです…&lt;/li&gt;
&lt;li&gt;公式の依存管理ツールも楽しみです&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;発表まとめ:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;発表まとめ&lt;/h1&gt;

&lt;p&gt;発表順は覚えてないので、タイムテーブルに順不同で並べられている順です。&lt;/p&gt;

&lt;h2 id=&#34;gaurun-a-general-push-notification-server-in-go:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Gaurun〜A general push notification server in Go〜&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/cubicdaiya/a-general-push-notification-server-in-go&#34;&gt;https://speakerdeck.com/cubicdaiya/a-general-push-notification-server-in-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;go製のpushサーバ&lt;/li&gt;
&lt;li&gt;モニタリング用のAPIを用意してるの、凄い良いなーと思いました。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;debugging-go-code-with-gdb:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Debugging Go Code with GDB&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kaneshin.hateblo.jp/entry/2015/06/21/202850&#34;&gt;http://kaneshin.hateblo.jp/entry/2015/06/21/202850&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GDB、あんまり使いこなしてないのでもっとちゃんと使わないと…と思った。&lt;/li&gt;
&lt;li&gt;Goはコンパイル早いし、落ちたときにちゃんとどの行で落ちたか出してくれるし、無くても何とかなる感はあります

&lt;ul&gt;
&lt;li&gt;使った方が何倍も楽なのでちゃんと使った方が良いかと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;go 1.5からコンパイラがgoで実装されるけど、吐き出されるバイナリにDWARFが入ってれば関係ないよね？

&lt;ul&gt;
&lt;li&gt;リリース直後はバグったDWARFになる可能性はありそう…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;フォントが$300ってwwwwww&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;generative-programming-in-go:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Generative programming in Go.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/monochromegane/generative-programming-in-go&#34;&gt;https://speakerdeck.com/monochromegane/generative-programming-in-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;reflection凄く遅いです…(直接呼ぶのと1000倍違う)&lt;/li&gt;
&lt;li&gt;金槌を持つと何でも釘に見える病…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gore-go-で-repl-のはなし:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;gore - Go で REPL のはなし&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;irbみたいにgoを対話的に実行できるやつの内部事情&lt;/li&gt;
&lt;li&gt;go runしてるだけ&lt;/li&gt;
&lt;li&gt;go runに失敗しないように色々前処理をがんばってるみたいです。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;goと電子工作とロボット:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Goと電子工作とロボット&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;goでロボット制御できて、しかもスタンドアロンで動いていて凄いです&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;goのastをいじくって新しいツールを作る:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;GoのASTをいじくって新しいツールを作る&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/vvakame/gocon-2015-summer&#34;&gt;http://www.slideshare.net/vvakame/gocon-2015-summer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;go/astを使うと、コード解析した結果みたいなのをとれるみたいです。

&lt;ul&gt;
&lt;li&gt;正規表現でがんばる！とかよりかは遙かに楽そう…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ただ、出力部分は気合いとのこと…&lt;/li&gt;
&lt;li&gt;怒りのスライドは良くわかります…

&lt;ul&gt;
&lt;li&gt;1byte=1文字、再帰的なパッケージ、err!=nilめんどい…(´･_･`)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;go言語でコマンドラインツールをつくるときに僕の語ること:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Go言語でコマンドラインツールをつくるときに僕の語ること&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/tcnksm/what-i-talk-about-when-i-talk-about-cli-tool-by-golang-number-gocon&#34;&gt;https://speakerdeck.com/tcnksm/what-i-talk-about-when-i-talk-about-cli-tool-by-golang-number-gocon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CLIツールは何となくこうした方が良いよね…って思ってたのがちゃんとまとめられてます&lt;/li&gt;
&lt;li&gt;さらに、それに沿ったテンプレートを作ってくれるものも作ったらしいです。凄い

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tcnksm/gcli&#34;&gt;https://github.com/tcnksm/gcli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;-vとかでバージョン確認したときに、最新バージョンをチェックするの頭良いですね

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tcnksm/go-latest&#34;&gt;https://github.com/tcnksm/go-latest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;patterns-for-building-a-scalable-testable-web-app-in-go:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Patterns for building a scalable, testable web app in Go&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcegraph.com/&#34;&gt;https://sourcegraph.com/&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;そもそもこのサービス知りませんでしたが、めっちゃ凄いです…(o゜▽゜)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ピクシブ社内広告サーバーでのgoの開発-運用:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;ピクシブ社内広告サーバーでのGoの開発・運用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://catatsuy.hateblo.jp/entry/2015/06/21/214229&#34;&gt;http://catatsuy.hateblo.jp/entry/2015/06/21/214229&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;goのサーバを実際に運用している上での知見が詰まってました。

&lt;ul&gt;
&lt;li&gt;nginxをフロントに立てることで、goサーバは特定の機能を素早く処理することに集中できるとか&lt;/li&gt;
&lt;li&gt;ホットデプロイするためにnginxとの間にunixソケット受付のアプリを立てておくとか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CPU Throttlingによって混んでないときはレスポンスが遅い話がおもしろかったです。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1binary-自己完結型の-形態素解析器-kagome-を-作ってみた話:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;1binary 自己完結型の 形態素解析器 kagome を 作ってみた話&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ikawaha.hateblo.jp/entry/2015/06/21/155636&#34;&gt;http://ikawaha.hateblo.jp/entry/2015/06/21/155636&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;辞書のエンコーディングに悩まなくて良いの凄く良いと思います。&lt;/li&gt;
&lt;li&gt;形態素解析説明が凄くわかりやすかったです

&lt;ul&gt;
&lt;li&gt;ただ、文脈IDをどう使ってるのか良くわかりませんでした…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;goで基盤システムつくってる話:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;GOで基盤システムつくってる話&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CAでLoL並の接続数を捌けるような基盤システムを作ってる話&lt;/li&gt;
&lt;li&gt;パッケージ管理やパッケージ構成…(´･_･`)&lt;/li&gt;
&lt;li&gt;標準パッケージは宝の山。goらしさを調べるにはうってつけとのこと

&lt;ul&gt;
&lt;li&gt;A Tour of GoやEffective Goの後に最適&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;lt:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;LT&lt;/h2&gt;

&lt;h3 id=&#34;goのパッケージ構成で試行錯誤してみた話:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Goのパッケージ構成で試行錯誤してみた話&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/fkmhrk/go-49650783&#34;&gt;http://www.slideshare.net/fkmhrk/go-49650783&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;パッケージの分け方は特にgo特有のやり方はなく、他の言語とおんなじっぽいです&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;appengine-for-go-unittest:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;AppEngine for Go Unittest&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;デバッグ用のサーバの立ち上げが遅いので、Unittestに時間がかかるそうです&lt;/li&gt;
&lt;li&gt;並列化しても最初の分の時間はやっぱりかかってしまうとのこと

&lt;ul&gt;
&lt;li&gt;起動しっぱなしにして、そこに接続して使うとかはダメなのでしょうか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;golangで始めるハードウェアプログラミング:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Golangで始めるハードウェアプログラミング&lt;/h3&gt;

&lt;p&gt;メモり損ねました…(´･_･`)&lt;/p&gt;

&lt;h3 id=&#34;vendoring-golang:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;vendoring @ golang&lt;/h3&gt;

&lt;p&gt;メモり損ねました…(´･_･`)&lt;/p&gt;

&lt;h3 id=&#34;gopherになれ:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;「Gopherになれ！」&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;この人&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;コミケにgopher君がいた &lt;a href=&#34;http://t.co/cMyhSFgIwy&#34;&gt;pic.twitter.com/cMyhSFgIwy&lt;/a&gt;&lt;/p&gt;&amp;mdash; ななやん (@7yan00) &lt;a href=&#34;https://twitter.com/7yan00/status/549767136445333504&#34;&gt;2014, 12月 30&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go製の拡張可能なslackbot-仮:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Go製の拡張可能なslackbot（仮）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kyokomi.hatenablog.com/entry/2015/06/21/213610&#34;&gt;http://kyokomi.hatenablog.com/entry/2015/06/21/213610&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pluginの拡張をどうしてるのか謎でしたが、コードを読んで納得

&lt;ul&gt;
&lt;li&gt;パッケージのinit関数で、pluginsパッケージが保有するプラグインのリストに自分を登録する&lt;/li&gt;
&lt;li&gt;botがpluginsの中を読み込んで動作する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;goの使われ処:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Goの使われ処&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/qt_luigi/gofalseshi-warechu-ri-ben-falsehui-she-bian&#34;&gt;https://speakerdeck.com/qt_luigi/gofalseshi-warechu-ri-ben-falsehui-she-bian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5分間ひたすら採用している会社を羅列していました&lt;/li&gt;
&lt;li&gt;想像以上に多くて、盛り上がってるなーと思いました&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;k0kubun-pp-についてと-reflectパッケージとメタプログラミング:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;k0kubun/pp についてと、reflectパッケージとメタプログラミング&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://k0kubun.hatenablog.com/entry/2015/06/21/195229&#34;&gt;http://k0kubun.hatenablog.com/entry/2015/06/21/195229&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ppをラップしただけの関数を定義しておくってのが凄い便利そうです

&lt;ul&gt;
&lt;li&gt;import書いたり消したりがとても面倒なので…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メタプログラミングは…やっぱり現実的じゃ無いですよね&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;golangはじめて半日後に野球のアプリ書いてltしてきた:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Golangはじめて半日後に野球のアプリ書いてLTしてきた&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://shinyorke.hatenablog.com/entry/2015/06/21/195656&#34;&gt;http://shinyorke.hatenablog.com/entry/2015/06/21/195656&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;やったことの時系列になってておもしろいです&lt;/li&gt;
&lt;li&gt;やっぱり学習コストは低いんですねー&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C言語でのスレッド処理</title>
      <link>http://ota42y.com/blog/2015/06/18/c-thread/</link>
      <pubDate>Thu, 18 Jun 2015 07:47:43 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/06/18/c-thread/</guid>
      <description>

&lt;p&gt;C言語でのスレッド処理と、ロックの仕方をまとめました。&lt;br /&gt;
他の言語のようにスレッド用のクラスを継承するのでは無く、&lt;br /&gt;
別スレッドで実行する関数のポインタと、&lt;br /&gt;
その関数に渡すデータのポインタを指定して実行するようです。&lt;/p&gt;

&lt;h1 id=&#34;スレッドによる並行処理:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;スレッドによる並行処理&lt;/h1&gt;

&lt;h2 id=&#34;スレッドの作成-pthread-create:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;スレッドの作成(pthread_create)&lt;/h2&gt;

&lt;p&gt;Cではpthread_createを利用することで、別スレッドで任意の関数を実行できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int pthread_create(pthread_t * thread,
	 pthread_attr_t * attr,
	 void * (*start_routine)(void *),
	 void * arg);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;thread

&lt;ul&gt;
&lt;li&gt;スレッド管理用のpthread_t型の変数&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;attr

&lt;ul&gt;
&lt;li&gt;スレッドの属性を指定する。&lt;/li&gt;
&lt;li&gt;NULLの場合はデフォルトが使われる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;(*start_routine)(void *)

&lt;ul&gt;
&lt;li&gt;別スレッドから呼び出される関数へのポインタ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;arg

&lt;ul&gt;
&lt;li&gt;start_routineの引数として渡すデータのポインタ&lt;/li&gt;
&lt;li&gt;元のスレッドからデータを送るのに使う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;スレッドの終了を待つ-pthread-join:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;スレッドの終了を待つ(pthread_join)&lt;/h2&gt;

&lt;p&gt;pthread_joinで、指定したスレッドが終了するまで待機することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int pthread_join(pthread_t th, void **thread_return);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;th

&lt;ul&gt;
&lt;li&gt;待機するスレッドをpthread_t型の変数で指定する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;**thread_return

&lt;ul&gt;
&lt;li&gt;スレッドの戻り値を格納する領域&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;サンプルコード:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;サンプルコード&lt;/h2&gt;

&lt;p&gt;以下の例はグローバルな値にメインとサブの2つのスレッドから加算処理を行っています。&lt;br /&gt;
排他制御をしていないため、スレッドによる並行処理が行われると、値がおかしくなる可能性があります。&lt;/p&gt;

&lt;p&gt;実際、何度か実行すると値がおかしくなり、並行処理が行われていることが確認できます。&lt;/p&gt;

&lt;p&gt;なお、コンパイルする際はは-pthreadオプションを指定する必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;quot;stdio.h&amp;quot;
#include &amp;quot;pthread.h&amp;quot;

int a = 0;

void *func_thread(void *p) {
  printf(&amp;quot;start %d\n&amp;quot;, *(int*)p);

  int i=0;
  for(i=0; i &amp;lt; 10000; i++){
	int next = a + 1;
	int now = a;
	a = next;
	if (now+1 != next) {
	  printf(&amp;quot;other theard change %d %d\n&amp;quot;, a+1, next);
	}
  }

  return 0;
}

int main(void) {
  printf(&amp;quot;test\n&amp;quot;);

  int b = 42;

  pthread_t pthread;
  pthread_create( &amp;amp;pthread, NULL, &amp;amp;func_thread, &amp;amp;b);

  int i=0;
  for(i=0; i &amp;lt; 10000; i++){
	int next = a + 1;
	int now = a;
	a = next;
	if (now+1 != next) {
	  printf(&amp;quot;other theard change %d %d\n&amp;quot;, a+1, next);
	}
  }

  pthread_join(pthread, NULL); // pthreadで作られたスレッドが終わるまで待つ
  printf(&amp;quot;a=%d\n&amp;quot;, a);

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;mutexによるロック処理:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;mutexによるロック処理&lt;/h1&gt;

&lt;h2 id=&#34;排他制御を行う:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;排他制御を行う&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;pthread_mutex_t&lt;/code&gt;型の変数に対して、&lt;code&gt;pthread_mutex_lock&lt;/code&gt;、&lt;code&gt;pthread_mutex_unlock&lt;/code&gt;を実行することで、&lt;br /&gt;
処理をロックすることができます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pthread_mutex_t&lt;/code&gt;型の変数は&lt;code&gt;pthread_mutex_init&lt;/code&gt;で初期化することができます。&lt;br /&gt;
このとき、第二引数にmutex属性を渡すことができ、NULLを渡した場合はデフォルト値が使われます。&lt;/p&gt;

&lt;h2 id=&#34;サンプルコード-1:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;サンプルコード&lt;/h2&gt;

&lt;p&gt;上記の例にロックによる排他制御を入れました。&lt;br /&gt;
そのため、並列処理を行っても値は正しく処理されるため、何度やっても結果が正しくなります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;stdio.h&amp;quot;
#include &amp;quot;pthread.h&amp;quot;

int a = 0;
pthread_mutex_t mutex;

void *func_thread(void *p) {
  printf(&amp;quot;start %d\n&amp;quot;, *(int*)p);

  int i=0;
  for(i=0; i &amp;lt; 10000; i++){
    pthread_mutex_lock(&amp;amp;mutex);
	int next = a + 1;
	int now = a;
	a = next;
    pthread_mutex_unlock(&amp;amp;mutex);

	if (now+1 != next) {
	  printf(&amp;quot;other theard change %d %d\n&amp;quot;, a+1, next);
	}
  }

  return 0;
}

int main(void) {
  pthread_mutex_init(&amp;amp;mutex, NULL);
  
  printf(&amp;quot;test\n&amp;quot;);

  int b = 42;

  pthread_t pthread;
  pthread_create( &amp;amp;pthread, NULL, &amp;amp;func_thread, &amp;amp;b);

  int i=0;
  for(i=0; i &amp;lt; 10000; i++){
    pthread_mutex_lock(&amp;amp;mutex);
	int next = a + 1;
	int now = a;
	a = next;
    pthread_mutex_unlock(&amp;amp;mutex);

	if (now+1 != next) {
	  printf(&amp;quot;other theard change %d %d\n&amp;quot;, a+1, next);
	}
  }

  pthread_join(pthread, NULL); // pthreadで作られたスレッドが終わるまで待つ
  printf(&amp;quot;a=%d\n&amp;quot;, a);

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2015年24週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-24/</link>
      <pubDate>Mon, 15 Jun 2015 22:37:01 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-24/</guid>
      <description>

&lt;h1 id=&#34;c-入出力の書式を制御する:b0204dc6a3868861d55079e7791d2606&#34;&gt;C++入出力の書式を制御する&lt;/h1&gt;

&lt;p&gt;c++でstreamを使って出力する場合、iomanipに用意されているものを利用することで、&lt;br /&gt;
入出力の書式を制御することが出来ます。&lt;/p&gt;

&lt;p&gt;設定はstreamに対して設定用のオブジェクトを送るように設定するみたいです。&lt;br /&gt;
なお、以下は出力の例です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;iomanip&amp;gt;

int main(void) {
  double a = 25252;
  int p = 2;

  std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; std::endl; // 25252
  std::cout &amp;lt;&amp;lt; std::setprecision(p); //浮動小数点の有効桁数を指定する
  std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; std::endl; // 2.5e+04

  std::cout &amp;lt;&amp;lt; std::oct; // 8進数表示
  std::cout &amp;lt;&amp;lt; 874 &amp;lt;&amp;lt; std::endl; // 1552

  std::cout &amp;lt;&amp;lt; std::showbase; // 基数を表示する
  std::cout &amp;lt;&amp;lt; std::hex; // 16進数表示
  std::cout &amp;lt;&amp;lt; 874 &amp;lt;&amp;lt; std::endl; // 0x36a
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2015年23週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-23/</link>
      <pubDate>Mon, 08 Jun 2015 23:41:38 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-23/</guid>
      <description>

&lt;h1 id=&#34;lock-freeって何:b762442d260e082e6120a3e456dc065a&#34;&gt;Lock Freeって何&lt;/h1&gt;

&lt;p&gt;複数スレッドや複数コアから同じデータを更新する場合、&lt;br /&gt;
通常はlockをかけて排他制御を行いますが、lockをかけずに行う方法があるらしいです。&lt;/p&gt;

&lt;p&gt;lockをかける場合、その間そのデータにはアクセスできず、並列処理を止めてしまうため、&lt;br /&gt;
並列数が大きくなるに従って性能が劣化していくそうです。&lt;br /&gt;
lockなしで排他処理を行う場合、並列数を増やしても性能の劣化が無くなるそうです。&lt;/p&gt;

&lt;p&gt;やっていることとしては、値をコピーして変更を加え、&lt;br /&gt;
「コピー前の値と現在の値が一緒かどうかをチェック」「変更した値を書き込む」を一括にやる命令を利用し、&lt;br /&gt;
比較と更新を同時にするというものだそうです。&lt;br /&gt;
(Compare-and-Swap、CAS命令)&lt;/p&gt;

&lt;p&gt;この比較して更新する命令があることで、&lt;br /&gt;
ロックせずに複数から値を変更しても一貫性が保たれるらしいです。&lt;br /&gt;
また、この命令が無いとlock freeが実現できない事が証明されているらしいです。&lt;br /&gt;
 &lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3%E3%83%9A%E3%82%A2%E3%83%BB%E3%82%A2%E3%83%B3%E3%83%89%E3%83%BB%E3%82%B9%E3%83%AF%E3%83%83%E3%83%97&#34;&gt;コンペア・アンド・スワップ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;i386ではCMPXCHG〜命令でこれが出来るらしく、&lt;br /&gt;
goのatomicパッケージでも利用されているようです。&lt;br /&gt;
&lt;a href=&#34;https://github.com/golang/go/blob/master/src/sync/atomic/asm_386.s#L34&#34;&gt;https://github.com/golang/go/blob/master/src/sync/atomic/asm_386.s#L34&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linuxのlocaleがおかしくなっていた</title>
      <link>http://ota42y.com/blog/2015/06/03/linux_local/</link>
      <pubDate>Wed, 03 Jun 2015 07:39:36 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/06/03/linux_local/</guid>
      <description>

&lt;p&gt;突然プログラムが起動しなくなったため、&lt;br /&gt;
原因を探ったところ、localesが壊れていました。&lt;br /&gt;
そのため、再インストールすることで直りました。&lt;br /&gt;
言語取得部分は動くけど、おかしい結果を返す壊れ方のため、&lt;br /&gt;
発見にわりと手間取りました。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:6e55b0bffb1729855201d3ad39c63b44&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;プログラム上でlocaleを参照する部分がおかしい結果を返す

&lt;ul&gt;
&lt;li&gt;常にANSI_X3.4-1968&lt;/li&gt;
&lt;li&gt;Debian 7.8&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;dpkg-reconfigure localesが何か壊れているメッセージを出す

&lt;ul&gt;
&lt;li&gt;localeをアップデートすると直る&lt;/li&gt;
&lt;li&gt;apt-get install locales&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;localeの取得がおかしい:6e55b0bffb1729855201d3ad39c63b44&#34;&gt;localeの取得がおかしい&lt;/h1&gt;

&lt;p&gt;pythonではgetpreferredencoding()で設定されている言語情報を取ってこれます。
ですが、&lt;br /&gt;
&lt;code&gt;LANG=&#39;ja_JP.UTF-8&#39; echo &#39;import locale; print locale.getpreferredencoding()&#39; | python&lt;/code&gt;&lt;br /&gt;
を実行しても、&lt;code&gt;ANSI_X3.4-1968&lt;/code&gt;が返ってきてしまい、日本語処理の部分でおかしくなっていました。&lt;br /&gt;
(前にそのプログラムは動いていたので、気がついたらおかしくなっていました)&lt;/p&gt;

&lt;p&gt;localeを実行してみたところ、以下のように表示されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;locale -a
locale: Cannot set LC_CTYPE to default locale: No such file or directory
locale: Cannot set LC_MESSAGES to default locale: No such file or directory
locale: Cannot set LC_COLLATE to default locale: No such file or directory
C
C.UTF-8
POSIX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうやら日本語のlocaleが有効ではないようです。&lt;/p&gt;

&lt;p&gt;ですが、&lt;code&gt;/etc/locale.gen&lt;/code&gt;では、ja_JP.UTF-8がコメントアウトされていて有効になっていました。&lt;/p&gt;

&lt;h1 id=&#34;原因は不明だがとりあえず直る:6e55b0bffb1729855201d3ad39c63b44&#34;&gt;原因は不明だがとりあえず直る&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;sudo su
export LC_ALL=C # jaは使えないのでCにする必要がある
export LANG=C # jaは使えないのでCにする必要がある
sudo dpkg-reconfigure locales
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;したら、localesが壊れているというメッセージが出てきました。&lt;/p&gt;

&lt;p&gt;そのため、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install locales
sudo dpkg-reconfigure locales
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、ja_JP.UTF-8を有効にしてリブートしたら上手くいくようになりました。&lt;/p&gt;

&lt;p&gt;おそらくlocales周りがおかしくなっており、新しいlocalesを入れる際にそれが直ったのだと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年22週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-22/</link>
      <pubDate>Mon, 01 Jun 2015 22:00:39 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-22/</guid>
      <description>

&lt;p&gt;今週まとめ&lt;/p&gt;

&lt;h1 id=&#34;cでのマルチスレッド処理を調べてる:68ba6b064e3726dd0f45c78184617ab0&#34;&gt;Cでのマルチスレッド処理を調べてる&lt;/h1&gt;

&lt;p&gt;Cにはクラスが無いので、Threadクラスを継承し、&lt;br /&gt;
runメソッドをオーバーライドするといった、いろんな言語でよくあるパターンは使えません。&lt;br /&gt;
代わりに、pthread_create関数にコールバック関数を渡すと、&lt;br /&gt;
別スレッドから呼び出してくれるため、それを利用して別スレッドを作るようです。&lt;/p&gt;

&lt;h1 id=&#34;cでのロック処理を調べている:68ba6b064e3726dd0f45c78184617ab0&#34;&gt;Cでのロック処理を調べている&lt;/h1&gt;

&lt;p&gt;ロック用変数を作り、pthread_mutex_lock関数を呼ぶことで、ロックをかけられます。&lt;/p&gt;

&lt;p&gt;他のスレッドから起こされるまで待つには、&lt;br /&gt;
mutexとcond変数を定義して、mutexのロックを取得して、&lt;br /&gt;
pthread_cond_waitを呼びます。&lt;/p&gt;

&lt;p&gt;一定時間たったら呼ばれて無くても起きて欲しい場合は、&lt;br /&gt;
pthread_cond_timedwaitを呼びます。&lt;/p&gt;

&lt;p&gt;なお、C++11からmutexオブジェクトといった、&lt;br /&gt;
ロックや排他制御が簡単にできる仕組みが導入されています。&lt;/p&gt;

&lt;h1 id=&#34;c-ではintに-演算が出来る:68ba6b064e3726dd0f45c78184617ab0&#34;&gt;C++ではintに[]演算が出来る&lt;/h1&gt;

&lt;p&gt;元ネタ&lt;br /&gt;
&lt;a href=&#34;http://twitter.com/mattn_jp/status/605245747429179392&#34;&gt;http://twitter.com/mattn_jp/status/605245747429179392&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;memory.h&amp;gt;

int main() {
  int v[] = {1, 2, 3};
  int off = 2;
  printf(&amp;quot;%d\n&amp;quot;, off[v]); // 3
  printf(&amp;quot;%d\n&amp;quot;, 1[v]); // 2
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C++では、intやenum型に対して[]が実行された場合、暗黙的な方変換によりstd::ptrdiff_tに変換されます。&lt;br /&gt;
そのため、a[b]は&lt;code&gt;*(a+b)&lt;/code&gt;と同義になり、上の例は&lt;code&gt;*(off+v)&lt;/code&gt;や&lt;code&gt;*(1+v)&lt;/code&gt;と解釈され、
正しく動くようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.cppreference.com/w/cpp/language/operator_member_access&#34;&gt;http://en.cppreference.com/w/cpp/language/operator_member_access&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年21週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-21/</link>
      <pubDate>Mon, 25 May 2015 22:09:32 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-21/</guid>
      <description>

&lt;h1 id=&#34;体調を崩した:63b972d7b8a9e5b8ecb6903994a97d8c&#34;&gt;体調を崩した&lt;/h1&gt;

&lt;p&gt;体調を崩して週の半分は倒れてた。&lt;br /&gt;
3日倒れるとやることリストが大変なことになるので、&lt;br /&gt;
体調がおかしい場合は速やかに医者に行って、薬をもらうべきだと再認識した。&lt;/p&gt;

&lt;h1 id=&#34;c-03以前ではオーバーロードされたコンストラクタが呼び出せない:63b972d7b8a9e5b8ecb6903994a97d8c&#34;&gt;C++03以前ではオーバーロードされたコンストラクタが呼び出せない&lt;/h1&gt;

&lt;p&gt;以下のように、コンストラクタから別のコンストラクタを呼び出すことで、&lt;br /&gt;
処理を共通化するのはわりと自然ではないかと思います。&lt;/p&gt;

&lt;p&gt;これはdelegate constructorとうい名前がついており、&lt;br /&gt;
残念ながらC++11以降じゃないと使えません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;struct A {
  A() : A(0) {}
  A(int num) : a(num) {}
  int a;
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2015年20週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-20/</link>
      <pubDate>Mon, 18 May 2015 21:40:28 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-20/</guid>
      <description>

&lt;h1 id=&#34;一週間何もしていないことが可視化される:aa9a80d3c7f9b6c9852a691c72ac9714&#34;&gt;一週間何もしていないことが可視化される&lt;/h1&gt;

&lt;p&gt;毎週先週やったことをまとめているので、&lt;br /&gt;
先週何もしていないのが可視化される…&lt;/p&gt;

&lt;h1 id=&#34;prマージされた:aa9a80d3c7f9b6c9852a691c72ac9714&#34;&gt;PRマージされた&lt;/h1&gt;

&lt;p&gt;fluentd-forwarderに送っていたPRがマージされた。&lt;br /&gt;
&lt;a href=&#34;https://github.com/fluent/fluentd-forwarder/pull/10&#34;&gt;https://github.com/fluent/fluentd-forwarder/pull/10&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;が、テストのバグでテストが通らないとの指摘が。&lt;br /&gt;
ただし、手元のMacやLinuxでは通るので、Windowsだけの問題っぽいです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年19週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-19/</link>
      <pubDate>Mon, 11 May 2015 21:55:04 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-19/</guid>
      <description>

&lt;h1 id=&#34;atomicな処理でアライメントを揃える必要があるらしい:732daa6ed2fb5abdbd55e43c0c719906&#34;&gt;atomicな処理でアライメントを揃える必要があるらしい&lt;/h1&gt;

&lt;p&gt;goのatomic.AddInt64や、&lt;br /&gt;
WindowsのInterlockedExchangeでは、&lt;br /&gt;
32bit環境で64bitの値をアトミックに変更する場合、&lt;br /&gt;
その値が64bit境界に置かれている必要があるらしいです。&lt;br /&gt;
ですが、何故それが必要なのかを調べているのですが、それらしい理由が見つかりません…&lt;/p&gt;

&lt;p&gt;一応、Intelのアーキテクチャには、ロックをせずに変更する場合、&lt;br /&gt;
64bitアライメントに乗っていない場合はアトミックな処理が保証されないと書いてありましたが、&lt;br /&gt;
goではロックしてからCMPXCHG8Bを実行しており、アトミックな処理になるはずです。&lt;/p&gt;

&lt;p&gt;また、ロックやCMPXCHG8Bもメモリアライメントの制約は受けないため、特に問題は無さそうです。&lt;/p&gt;

&lt;p&gt;一応、64bit境界に無い場合は性能が低下する可能性があるそうですが…&lt;/p&gt;

&lt;h1 id=&#34;android-触ってた:732daa6ed2fb5abdbd55e43c0c719906&#34;&gt;Android 触ってた&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;string.xmlは同じフォルダに別の名前のxmlを作っても、勝手にまとめてくれるので同じようにアクセスできるみたい。&lt;/li&gt;
&lt;li&gt;Dropbox SDKを触ってみた

&lt;ul&gt;
&lt;li&gt;サンプルがかなり良い具合に出来ている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;UIを変更できるのは描画用のスレッドだけ

&lt;ul&gt;
&lt;li&gt;doInBackgroundは別スレッドで処理を行う&lt;/li&gt;
&lt;li&gt;UIを変更しようとすると落ちる&lt;/li&gt;
&lt;li&gt;終了時にonPostExecuteがUIスレッドで呼ばれるのでそこで処理する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;fluentdを触ってる:732daa6ed2fb5abdbd55e43c0c719906&#34;&gt;fluentdを触ってる&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;自分用のアプリのログ処理を入れ換えた&lt;/li&gt;
&lt;li&gt;windowsとlinuxそれぞれあるけど、fluentd-forwarderを使ってlinuxのfluentdに集約&lt;/li&gt;
&lt;li&gt;windowsはrubyで書いてる

&lt;ul&gt;
&lt;li&gt;ruby2.1じゃないと動かない

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/okahashi117/items/a0b55ea24a6ef7b6582b&#34;&gt;http://qiita.com/okahashi117/items/a0b55ea24a6ef7b6582b&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;msgpackは未対応&lt;/li&gt;
&lt;li&gt;オプションが渡せないため、bundlerも使えない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SSL接続に失敗する

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/luislavena/f064211759ee0f806c88&#34;&gt;https://gist.github.com/luislavena/f064211759ee0f806c88&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ここのpemファイルの位置をSSL_CERT_FILE環境変数に設定する必要がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;fluentd-forwarder-にpr送った:732daa6ed2fb5abdbd55e43c0c719906&#34;&gt;fluentd-forwarder にPR送った&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;atomic処理のメモリアライメント的な問題でwindows 32bitだと動かなかったので直した

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fluent/fluentd-forwarder/pull/10&#34;&gt;https://github.com/fluent/fluentd-forwarder/pull/10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;まだマージされてないので、手元のブランチでビルドしたものを使ってる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;goのパッケージシステムは手元で動かすのとものすごく相性が悪い

&lt;ul&gt;
&lt;li&gt;全てのパッケージバスを自分のリポジトリに書き換えないといけない&lt;/li&gt;
&lt;li&gt;しかもmasterブランチ限定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Go言語でメモリ上の大きさや配置を調べる</title>
      <link>http://ota42y.com/blog/2015/05/06/go-struct-offset/</link>
      <pubDate>Wed, 06 May 2015 20:16:57 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/05/06/go-struct-offset/</guid>
      <description>

&lt;p&gt;golangで構造体を定義した場合、
メモリ上にどのように配置されるのでしょうか。&lt;/p&gt;

&lt;p&gt;通常意識する必要はありませんが、32bitと64bitで挙動がおかしい場合など、&lt;br /&gt;
ごく希に調べる必要に迫られる場合があります。&lt;br /&gt;
そのような場合、各要素のサイズや、構造体先頭からのオフセットを調べることで、&lt;br /&gt;
メモリ上に構造体がどう置かれるかを調べることができます。&lt;/p&gt;

&lt;p&gt;C言語でのsizeofやoffsetofに対応する物が、golangのunsafeパッケージに用意されているため、&lt;br /&gt;
これを利用することで構造体の様子を調べることができます。&lt;br /&gt;
&lt;a href=&#34;https://golang.org/pkg/unsafe/&#34;&gt;https://golang.org/pkg/unsafe/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回は以下のようなテスト構造体を使い、メモリ上にどのように置かれるかを調べました。&lt;br /&gt;
テスト環境はwindows7(32bit)とmac(64bit)になります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type A struct {
  flag bool
  num int64
  ptr *int64
  mini int32
  str string
  nums []int64
  nums5 [5]int64
  strs []string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;要素のサイズ:7df659e690576969cb149167507e359f&#34;&gt;要素のサイズ&lt;/h1&gt;

&lt;p&gt;unsafe.Sizeof関数は、引数の要素のサイズを調べ、バイト数をint型で返してくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;a := A{}
log.Println(unsafe.Sizeof(a)) // 92 (136) 括弧外は32bit環境、括弧内は64bit
log.Println(unsafe.Sizeof(a.flag)) // 1
log.Println(unsafe.Sizeof(a.num)) // 8
log.Println(unsafe.Sizeof(a.ptr)) // 4 (8)
log.Println(unsafe.Sizeof(a.mini)) // 4
log.Println(unsafe.Sizeof(a.str)) // 8 (16)
log.Println(unsafe.Sizeof(a.nums)) // 12 (24)
log.Println(unsafe.Sizeof(a.nums5)) // 40
log.Println(unsafe.Sizeof(a.strs)) // 12 (24)

a.nums = append(a.nums, 42)
a.strs = append(a.strs, &amp;quot;デーデッデー&amp;quot;)
log.Println(unsafe.Sizeof(a.nums)) // 12 (24)
log.Println(unsafe.Sizeof(a.strs)) // 12 (24)

log.Println(unsafe.Sizeof(&amp;amp;a)) // 4 (8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この関数は指定した要素のサイズを返します。
そのため、32bit環境ではint64のポインタであるa.ptrは、&lt;br /&gt;
ポインタのサイズである4byte(=32bit)を返します。&lt;/p&gt;

&lt;p&gt;また、配列の場合は配列全体のサイズ(a.nums5 = 64 * 5)を返しますが、&lt;br /&gt;
スライスの場合はスライス自身の値(12 or 24byte)を返し、スライス全体の値は返しません。&lt;br /&gt;
そのため、要素を追加してもスライス自身の大きさは変化しません。&lt;/p&gt;

&lt;h1 id=&#34;先頭からのオフセット:7df659e690576969cb149167507e359f&#34;&gt;先頭からのオフセット&lt;/h1&gt;

&lt;p&gt;上記の例でbool値のa.flagが1byteかつ、ほかの要素がすべて偶数なのにもかかわらず、&lt;br /&gt;
構造体全体の大きさが92byteの偶数になっています。&lt;br /&gt;
このことから、golangの構造体はパディングされる場合があることがわかります。&lt;br /&gt;
そのため、要素のサイズを足していったところが、実際にメモリ上に置かれる場所とは限りません。&lt;/p&gt;

&lt;p&gt;構造体先頭からのオフセットが何byteかをint型で返す、unsafe.Offsetofを使うことで、&lt;br /&gt;
実際にどの位置に配置されているかを確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.Println(unsafe.Offsetof(a.flag)) // 0
log.Println(unsafe.Offsetof(a.num)) // 4 (8)
log.Println(unsafe.Offsetof(a.ptr)) // 12 (16)
log.Println(unsafe.Offsetof(a.mini)) // 16 (24)
log.Println(unsafe.Offsetof(a.str)) // 20 (32)
log.Println(unsafe.Offsetof(a.nums)) // 28 (48)
log.Println(unsafe.Offsetof(a.nums5)) // 40 (72)
log.Println(unsafe.Offsetof(a.strs)) // 80 (112)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;32bit環境ではa.flagの1byteの後に3byteパディングがされ、&lt;br /&gt;
a.numが先頭から4byte(=32bit)の位置から始まっています。&lt;/p&gt;

&lt;p&gt;64bit環境ではa.flagの後ろに7byteパディングされ、&lt;br /&gt;
a.numが先頭から8byte(=64bit)の位置から始まっています。&lt;br /&gt;
また、int32のa.miniも4byteパディングされ、a.strが32byte目から始まるようになっています。&lt;/p&gt;

&lt;p&gt;このように、32bit環境では32bitに、64bit環境では64bitの倍数から始まるように、&lt;br /&gt;
コンパイラが構造体にパディングをするようです。&lt;/p&gt;

&lt;h1 id=&#34;構造体内の構造体の場合:7df659e690576969cb149167507e359f&#34;&gt;構造体内の構造体の場合&lt;/h1&gt;

&lt;p&gt;以下のように構造体に実態を持つ場合、宣言したとおりに配置されます。&lt;br /&gt;
そのためAの実態であるaの前後で、構造体のサイズ分だけオフセットが移動しています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type B struct {
  bflag bool
  intnum int64
  a A
  bflag2 bool
  a2 *A
  bflag3 bool
  A
  blfag4 bool
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;b := B{
  a2: &amp;amp;A{},
}
log.Println(unsafe.Offsetof(b.bflag)) // 0
log.Println(unsafe.Offsetof(b.intnum)) // 4
log.Println(&amp;quot;b.a&amp;quot;)
log.Println(unsafe.Offsetof(b.a.flag)) // 0
log.Println(unsafe.Offsetof(b.a.strs)) // 80
log.Println(&amp;quot;b.flag2&amp;quot;)
log.Println(unsafe.Offsetof(b.bflag2)) // 104 (4 + 8 + 92)
log.Println(&amp;quot;b.a2&amp;quot;) // a2 is pointer
log.Println(unsafe.Offsetof(b.a2.flag)) // 0
log.Println(unsafe.Offsetof(b.a2.strs)) // 80 (112)
log.Println(&amp;quot;b.bflag3&amp;quot;)
log.Println(unsafe.Offsetof(b.bflag3)) // 112 (104 + 8)
log.Println(&amp;quot;b.flag&amp;quot;)
log.Println(unsafe.Offsetof(b.flag)) // 116
log.Println(unsafe.Offsetof(b.num)) // 120
log.Println(unsafe.Offsetof(b.ptr)) // 128
log.Println(unsafe.Offsetof(b.mini)) // 132
log.Println(unsafe.Offsetof(b.strs)) // 196
log.Println(&amp;quot;b.bflag4&amp;quot;)
log.Println(unsafe.Offsetof(b.blfag4)) // 208 (112 + 92)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;unsafe.Offsetofは対象の要素を持つ構造体の先頭からのオフセットを指すため、&lt;br /&gt;
構造体Bの中にあるAでも、Bからのオフセットではなく、Aの先頭からのオフセットを出力しています。&lt;/p&gt;

&lt;p&gt;また、ポインタとして持つ場合、実態は別のところにあるため、a2のサイズはポインタ分のみになります。&lt;/p&gt;

&lt;p&gt;構造体を埋め込んだ場合、それらの値がそのままそこに置かれたかのように置かれます。&lt;br /&gt;
また、埋め込んだ構造体の値として扱われるらしく、&lt;br /&gt;
実態として持っているときと違い、構造体Aの要素でもBの先頭からのオフセットを出力しています。&lt;/p&gt;

&lt;h1 id=&#34;ソースコード:7df659e690576969cb149167507e359f&#34;&gt;ソースコード&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
  &amp;quot;log&amp;quot;
  &amp;quot;unsafe&amp;quot;
)

type A struct {
  flag bool
  num int64
  ptr *int64
  mini int32
  str string
  nums []int64
  nums5 [5]int64
  strs []string
}

type B struct {
  bflag bool
  intnum int64
  a A
  bflag2 bool
  a2 *A
  bflag3 bool
  A
  blfag4 bool
}

func main() {
  log.Println(&amp;quot;sizeof&amp;quot;)
  a := A{}
  log.Println(unsafe.Sizeof(a)) // 92 (136) 括弧内は64bit
  log.Println(unsafe.Sizeof(a.flag)) // 1
  log.Println(unsafe.Sizeof(a.num)) // 8
  log.Println(unsafe.Sizeof(a.ptr)) // 4 (8)
  log.Println(unsafe.Sizeof(a.mini)) // 4
  log.Println(unsafe.Sizeof(a.str)) // 8 (16)
  log.Println(unsafe.Sizeof(a.nums)) // 12 (24)
  log.Println(unsafe.Sizeof(a.nums5)) // 40
  log.Println(unsafe.Sizeof(a.strs)) // 12 (24)

  a.nums = append(a.nums, 42)
  a.strs = append(a.strs, &amp;quot;デーデッデー&amp;quot;)
  log.Println(unsafe.Sizeof(a.nums)) // 12 (24)
  log.Println(unsafe.Sizeof(a.strs)) // 12 (24)

  log.Println(unsafe.Sizeof(&amp;amp;a)) // 4 (8)

  log.Println(&amp;quot;offest&amp;quot;)
  log.Println(unsafe.Offsetof(a.flag)) // 0
  log.Println(unsafe.Offsetof(a.num)) // 4 (8)
  log.Println(unsafe.Offsetof(a.ptr)) // 12 (16)
  log.Println(unsafe.Offsetof(a.mini)) // 16 (24)
  log.Println(unsafe.Offsetof(a.str)) // 20 (32)
  log.Println(unsafe.Offsetof(a.nums)) // 28 (48)
  log.Println(unsafe.Offsetof(a.nums5)) // 40 (72)
  log.Println(unsafe.Offsetof(a.strs)) // 80 (112)



  log.Println(&amp;quot;b&amp;quot;)
  b := B{
    a2: &amp;amp;A{},
  }
  log.Println(unsafe.Offsetof(b.bflag)) // 0
  log.Println(unsafe.Offsetof(b.intnum)) // 4
  log.Println(&amp;quot;b.a&amp;quot;)
  log.Println(unsafe.Offsetof(b.a.flag)) // 0
  log.Println(unsafe.Offsetof(b.a.strs)) // 80
  log.Println(&amp;quot;b.flag2&amp;quot;)
  log.Println(unsafe.Offsetof(b.bflag2)) // 104 (4 + 8 + 92)
  log.Println(&amp;quot;b.a2&amp;quot;) // a2 is pointer
  log.Println(unsafe.Offsetof(b.a2.flag)) // 0
  log.Println(unsafe.Offsetof(b.a2.strs)) // 80 (112)
  log.Println(&amp;quot;b.bflag3&amp;quot;)
  log.Println(unsafe.Offsetof(b.bflag3)) // 112 (104 + 8)
  log.Println(&amp;quot;b.flag&amp;quot;)
  log.Println(unsafe.Offsetof(b.flag)) // 116
  log.Println(unsafe.Offsetof(b.num)) // 120
  log.Println(unsafe.Offsetof(b.ptr)) // 128
  log.Println(unsafe.Offsetof(b.mini)) // 132
  log.Println(unsafe.Offsetof(b.strs)) // 196
  log.Println(&amp;quot;b.bflag4&amp;quot;)
  log.Println(unsafe.Offsetof(b.blfag4)) // 208 (112 + 92)
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2015年18週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-18/</link>
      <pubDate>Mon, 04 May 2015 11:27:52 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-18/</guid>
      <description>

&lt;h1 id=&#34;goのテストはクラス設計がとても大事っぽい:fbc8528214e49b0085aa07c0c8b68dfd&#34;&gt;goのテストはクラス設計がとても大事っぽい&lt;/h1&gt;

&lt;p&gt;まだこうした方が良いんじゃないか？ぐらいなので、&lt;br /&gt;
ベストプラクティスは他にありそうです…&lt;/p&gt;

&lt;h2 id=&#34;rubyで関数の差し替え:fbc8528214e49b0085aa07c0c8b68dfd&#34;&gt;rubyで関数の差し替え&lt;/h2&gt;

&lt;p&gt;Rubyだと以下のように、&lt;br /&gt;
すでに存在するクラスに対して関数を再定義したり、&lt;br /&gt;
継承して関数の差し替えをすることが簡単にできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
class A
  def exec
    f()
    a()
  end

  def f
    print &amp;quot;f &amp;quot;
  end

  def a
    print &amp;quot;a\n&amp;quot;
  end
end

a = A.new
a.exec # f a

class A
  def f
    print &amp;quot;newf &amp;quot;
  end
end

a.exec #newf a

class B &amp;lt; A
  def f
    print &amp;quot;newf &amp;quot;
  end
end

b = B.new
b.exec #newf a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そのため、一部の関数をモックやスタブにし、正しく呼び出されているかを検証したり、&lt;br /&gt;
その機能以外のところがちゃんと動いているかを検証するのが簡単にできます。&lt;/p&gt;

&lt;h2 id=&#34;goで関数の差し替え:fbc8528214e49b0085aa07c0c8b68dfd&#34;&gt;goで関数の差し替え&lt;/h2&gt;

&lt;h3 id=&#34;埋め込みによる差し替え-できない:fbc8528214e49b0085aa07c0c8b68dfd&#34;&gt;埋め込みによる差し替え（できない）&lt;/h3&gt;

&lt;p&gt;golangでは既存の構造体に関数を再定義することはできません。&lt;br /&gt;
また、以下のrubyコードのように埋め込んだ後に関数を再定義しても、&lt;br /&gt;
継承前の関数を読んでいる部分を差し替えることはできません。&lt;/p&gt;

&lt;p&gt;そのため、rubyの2番目の例のような以下のコードでは、&lt;br /&gt;
&lt;code&gt;b.Exec&lt;/code&gt;はAの関数fを呼び出してしまうため、動きを差し替えられません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
)

type A struct {
}

func (a *A) Exec() {
	a.f()
	a.a()
}

func (a *A) f() {
	fmt.Print(&amp;quot;f &amp;quot;)
}

func (a *A) a() {
	fmt.Print(&amp;quot;a\n&amp;quot;)
}

type B struct {
	*A
}

func (a *B) f() {
	fmt.Print(&amp;quot;newf &amp;quot;)
}

func main() {
	a := &amp;amp;A{}
	a.Exec() // f a

	b := &amp;amp;B{
		A: a,
	}
	b.Exec() // f a (not &amp;quot;newf a&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;インターフェースを利用する:fbc8528214e49b0085aa07c0c8b68dfd&#34;&gt;インターフェースを利用する&lt;/h3&gt;

&lt;p&gt;golangにはインターフェースが合っていれば何でも代入できるため、&lt;br /&gt;
インターフェースを呼び出すように実装し、わたす構造体を変えることで、&lt;br /&gt;
関数の差し替えをすることができるようになります。&lt;/p&gt;

&lt;p&gt;以下の例では計算用のCalcというインタフェースを定義し、&lt;br /&gt;
実際に計算を行うSumAddと、固定の値を返したり渡された値を見えるようにしたSumTestを用意しています。&lt;br /&gt;
SmuTestを利用することで、呼び出し側のAのロジックが正しいかを検証できるようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
)

type A struct {
  calc Calc
  list []int
}

func (a *A) F(ratio float64) float64 {
  s := a.calc.sum(a.list)
  return float64(s) * ratio
}

type Calc interface {
  sum(l []int) int
}

type SumAdd struct{
}

func (s *SumAdd) sum(l []int) int {
  sum := 0
  for _, i := range l {
    sum += i
  }
  return sum
}

type SumTest struct {
  Nums []int
}

func (s *SumTest) sum(l []int) int {
  s.Nums = l
  return 15
}

func main() {
  s := &amp;amp;SumAdd{}
  l := []int{1,2,3,4,5}

  a := &amp;amp;A{
    calc: s,
    list: l,
  }
  fmt.Println(a.F(3.0))

  t := &amp;amp;SumTest{}
  testA := &amp;amp;A{
    calc: t,
    list: l,
  }

  ret := testA.F(3.0)
  fmt.Println(ret == 45)
  fmt.Println(len(t.Nums) == 5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ:fbc8528214e49b0085aa07c0c8b68dfd&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;golangではインタフェースを利用して挙動を変えることで、部分的にテストができます。&lt;br /&gt;
ただし、設計時にどこをインターフェースにするかを考えて作らないと、上手く差し替えができません。&lt;/p&gt;

&lt;p&gt;つまり、rubyは適当に作ったテストしにくい設計でも無理矢理テストできますが、&lt;br /&gt;
golangはテストしやすい設計を考えてから作る必要があるようです。&lt;/p&gt;

&lt;h1 id=&#34;bpstudy-92に参加した:fbc8528214e49b0085aa07c0c8b68dfd&#34;&gt;BPStudy#92に参加した&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;blog/2015/04/29/bpstudy92/&#34;&gt;参加記録 BPStudy#92&lt;/a&gt;
お金の話でした。&lt;br /&gt;
経営や簿記は全く本業ではないのですが、自分が生きてる世界を構成する重要な要素なので、&lt;br /&gt;
知っておいた方が良いと思いました。&lt;/p&gt;

&lt;h1 id=&#34;mongodbについて調べていた:fbc8528214e49b0085aa07c0c8b68dfd&#34;&gt;mongodbについて調べていた&lt;/h1&gt;

&lt;h2 id=&#34;一定時間後にデータが消える設定:fbc8528214e49b0085aa07c0c8b68dfd&#34;&gt;一定時間後にデータが消える設定&lt;/h2&gt;

&lt;p&gt;容量節約のため、一定期間後のデータは消えるようにしたいなーと思っていたところ、&lt;br /&gt;
時間の入っているキーに対してexpireAfterSecondsのついたTTL(time to live)インデックスを作ることで、&lt;br /&gt;
指定時刻経過後に消されるようにできるみたいです。&lt;br /&gt;
&lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/expire-data/&#34;&gt;Expire Data from Collections by Setting TTL&lt;/a&gt;&lt;br /&gt;
また、このインデックスはそのまま時刻付きのインデックスとしても利用できるそうです。&lt;/p&gt;

&lt;h2 id=&#34;指定した期間のデータをdumpする:fbc8528214e49b0085aa07c0c8b68dfd&#34;&gt;指定した期間のデータをdumpする&lt;/h2&gt;

&lt;p&gt;mongodumpでは-qオプションでクエリを指定できるため、&lt;br /&gt;
そこで時刻を指定することで指定した期間のデータをdumpできます。&lt;/p&gt;

&lt;p&gt;ただし、どうやらISODateはコマンドラインからは上手く動かないらしく、&lt;br /&gt;
Dateオブジェクトを利用してミリ秒で指定する必要があるようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mongodump --host localhost --db testdb -q \&amp;quot;{time : { \\$gte :  new Date(1430000000000), \\$lt :  new Date(1440000000000) } }\&amp;quot; -o dump/2015-05-04
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>参加記録 BPStudy#92</title>
      <link>http://ota42y.com/blog/2015/04/29/bpstudy92/</link>
      <pubDate>Wed, 29 Apr 2015 13:49:43 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/29/bpstudy92/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://bpstudy.connpass.com/event/12940/&#34;&gt;BPStudy#92&lt;/a&gt;に参加しました。&lt;br /&gt;
今回は経営やお金の話でした。&lt;/p&gt;

&lt;p&gt;お金って資本主義社会のベースとなる概念ですし、&lt;br /&gt;
インターネットの仕組みがどうなってるのかとか、&lt;br /&gt;
コンピュータがプログラムをどう解釈しているのかと同じぐらい、&lt;br /&gt;
お金の事を知っておいた方がいい気がする…と思って参加しました。&lt;/p&gt;

&lt;h1 id=&#34;エンシ-ニアの経営学:12fec0f6c41001deccd7cf88e484e079&#34;&gt;エンジニアの経営学&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/bejita/bpstudy92&#34;&gt;http://www.slideshare.net/bejita/bpstudy92&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/bejita/ss-45051035&#34;&gt;http://www.slideshare.net/bejita/ss-45051035&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一部詳しく書いている別資料&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;会社は環境の変数にめちゃくちゃ弱い&lt;/li&gt;
&lt;li&gt;2014年の倒産件数

&lt;ul&gt;
&lt;li&gt;9731件&lt;/li&gt;
&lt;li&gt;一日あたり26.6社が倒産している&lt;/li&gt;
&lt;li&gt;これでも前年比10%減&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;利益は車におけるガソリン

&lt;ul&gt;
&lt;li&gt;ガソリンが無いと走れない&lt;/li&gt;
&lt;li&gt;補給は常に必要&lt;/li&gt;
&lt;li&gt;ガソリンの供給源は売り上げのみ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;利益＝売り上げーコスト

&lt;ul&gt;
&lt;li&gt;利益に対するコストの比率が低い、低コストの方が良い&lt;/li&gt;
&lt;li&gt;コストが低い方が安定する

&lt;ul&gt;
&lt;li&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/ota42y&#34;&gt;@ota42y&lt;/a&gt; 必要な資金が少なければ少ないほど内部留保が溜まりやすく、変化に対応できるバッファが産まれるからです。ガソリン切れを起こすのが一番やってはいけないことなので、残るものが一緒なら使うカネが少ないほうが安定します。&lt;/p&gt;&amp;mdash; やきう大好きござ先輩 (@gothedistance) &lt;a href=&#34;https://twitter.com/gothedistance/status/593071626922504194&#34;&gt;2015, 4月 28&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;li&gt;詳しくは二つ目の資料&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;全ての企業活動はコスト

&lt;ul&gt;
&lt;li&gt;資料作成、メールを打つ、問い合わせ対応&lt;/li&gt;
&lt;li&gt;それ自体は１円も生んでいない。&lt;/li&gt;
&lt;li&gt;そのコストを回収するのは売り上げしか無い。
サービス運営で食べていくのは大変&lt;/li&gt;
&lt;li&gt;オーダーメイドを作る方が簡単

&lt;ul&gt;
&lt;li&gt;お金も出してくれやすい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サービス開発は必ず投資が先行する&lt;/li&gt;
&lt;li&gt;月額定額は青天井なので嫌われる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;組織運営

&lt;ul&gt;
&lt;li&gt;一人で全ては出来ない&lt;/li&gt;
&lt;li&gt;誰かにやってもらわないと組織運営は安定しない&lt;/li&gt;
&lt;li&gt;高いスキルを持った人を集めても、ゴミしか生み出せない場合もある&lt;/li&gt;
&lt;li&gt;Good Player is not Good Manager&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;チームの将来は決定の速度で決まる

&lt;ul&gt;
&lt;li&gt;引き延ばしは金と時間の無駄&lt;/li&gt;
&lt;li&gt;決定が遅いと間違いに気づくのも遅い&lt;/li&gt;
&lt;li&gt;決定の妥当性はいま判断できない&lt;/li&gt;
&lt;li&gt;Done is Better Than Perfect.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ゴールから逆算して物事を考える

&lt;ul&gt;
&lt;li&gt;ゴールを決めて、そこに至るためのマイルストーンを決めていく&lt;/li&gt;
&lt;li&gt;ゴールを決めてるから、ギャップも出せる&lt;/li&gt;
&lt;li&gt;リスクアセスメントも忘れずに。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;やっちゃいけないことを明確にする

&lt;ul&gt;
&lt;li&gt;これをやれには個人差が出る&lt;/li&gt;
&lt;li&gt;これはするなについては個人差は出ない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;判断基準を可能な限り簡単にする

&lt;ul&gt;
&lt;li&gt;〜かもしれない、〜すべきである、〜だったらどうするのかを無くす&lt;/li&gt;
&lt;li&gt;結果を出す＝なりようがない状態をつくる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;金にならないコードは負債

&lt;ul&gt;
&lt;li&gt;コードにはマネタイズが必須&lt;/li&gt;
&lt;li&gt;技術それ自体は１円にもならない&lt;/li&gt;
&lt;li&gt;技術は使われてこそ生きるもの&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;エキスパートの評価軸は一つ

&lt;ul&gt;
&lt;li&gt;周りに良い影響を与えられるか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;参考文献

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/%E3%80%8C%E8%B5%A4%E5%AD%97%E3%80%8D%E3%81%AE%E6%B5%B7%E3%81%A8%E3%80%8C%E5%88%A9%E7%9B%8A%E3%80%8D%E3%81%AE%E5%B0%8F%E5%B3%B6%E2%80%95%E4%BA%8B%E6%A5%AD%E3%81%AE%EF%BC%94%E5%89%B2%E3%81%AF%E4%B8%8D%E6%8E%A1%E7%AE%97%E3%81%AA%E3%81%AE%E3%81%AB%E6%94%B9%E5%96%84%E3%81%97%E3%81%AA%E3%81%84%E3%83%AF%E3%82%B1-%E3%82%B8%E3%83%A7%E3%83%8A%E3%82%B5%E3%83%B3%E3%83%BB%EF%BC%AC%E3%83%BB%EF%BC%B3%E3%83%BB%E3%83%90%E3%83%BC%E3%83%B3%E3%82%BA/dp/4532317339&#34;&gt;「赤字」の海と「利益」の小島―事業の４割は不採算なのに改善しないワケ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/%E3%81%A8%E3%81%82%E3%82%8B%E4%BC%9A%E7%A4%BE%E3%81%AE%E7%B5%8C%E7%90%86%E3%81%95%E3%82%93%E3%81%8C%E6%95%99%E3%81%88%E3%82%8B-%E6%A5%BD%E3%81%97%E3%81%8F%E3%82%8F%E3%81%8B%E3%82%8B-%E7%B0%BF%E8%A8%98%E5%85%A5%E9%96%80-%E6%9D%B1%E5%B1%B1-%E7%A9%A3/dp/4534049765&#34;&gt;とある会社の経理さんが教える 楽しくわかる! 簿記入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/%E3%81%93%E3%81%AE%EF%BC%91%E5%86%8A%E3%81%A7%E3%81%99%E3%81%B9%E3%81%A6%E3%82%8F%E3%81%8B%E3%82%8B-%E7%AE%A1%E7%90%86%E4%BC%9A%E8%A8%88%E3%81%AE%E5%9F%BA%E6%9C%AC-%E5%8D%83%E8%B3%80-%E7%A7%80%E4%BF%A1/dp/4534048459&#34;&gt;この１冊ですべてわかる　管理会計の基本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/%E7%A8%B2%E7%9B%9B%E5%92%8C%E5%A4%AB%E3%81%AE%E5%AE%9F%E5%AD%A6%E2%80%95%E7%B5%8C%E5%96%B6%E3%81%A8%E4%BC%9A%E8%A8%88-%E7%A8%B2%E7%9B%9B-%E5%92%8C%E5%A4%AB/dp/4532190061&#34;&gt;稲盛和夫の実学―経営と会計&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/5%E5%B9%B4%E3%81%A7%E5%A3%B2%E4%B8%8A2%E5%80%8D%E3%81%AE%E7%B5%8C%E5%96%B6%E8%A8%88%E7%94%BB%E3%82%92%E3%81%9F%E3%81%A6%E3%81%AA%E3%81%95%E3%81%84-%E5%B0%8F%E5%B1%B1-%E6%98%87/dp/404600097X&#34;&gt;5年で売上2倍の経営計画をたてなさい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/%EF%BC%A8%EF%BC%A1%EF%BC%B2%EF%BC%A4-%EF%BC%B4%EF%BC%A8%EF%BC%A9%EF%BC%AE%EF%BC%A7%EF%BC%B3-%E3%83%99%E3%83%B3%E3%83%BB%E3%83%9B%E3%83%AD%E3%82%A6%E3%82%A3%E3%83%83%E3%83%84/dp/4822250857&#34;&gt;ＨＡＲＤ　ＴＨＩＮＧＳ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;エンジニアのためのお金の話:12fec0f6c41001deccd7cf88e484e079&#34;&gt;エンジニアのためのお金の話&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;会計、キャッシュフロー、税務

&lt;ul&gt;
&lt;li&gt;全て同じお金の物差し&lt;/li&gt;
&lt;li&gt;TPOに応じて物差しを持ち帰ることが大切&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;会計

&lt;ul&gt;
&lt;li&gt;複式簿記に書かれる売上と実際のお金の動きは別

&lt;ul&gt;
&lt;li&gt;納品して検収したタイミングで売上（収益）になる&lt;/li&gt;
&lt;li&gt;検収したタイミングで費用（負債）になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;売上と負債を対応づけたのが貸借対照表&lt;/li&gt;
&lt;li&gt;収益と費用を対応づけたのが損益計算書&lt;/li&gt;
&lt;li&gt;会計は実際のお金の動きなしで完結する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;キャッシュフロー

&lt;ul&gt;
&lt;li&gt;お金が入るのは代金回収時&lt;/li&gt;
&lt;li&gt;お金が出るのは外注費を払った時点&lt;/li&gt;
&lt;li&gt;それらをまとめたのがキャッシュフロー計算書

&lt;ul&gt;
&lt;li&gt;貸借対照表、損益計算書、キャッシュフロー計算書が財務三票&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;黒字倒産

&lt;ul&gt;
&lt;li&gt;利益は出てるけど、お金が無くて倒産する

&lt;ul&gt;
&lt;li&gt;収益は上がっても代金を回収するまではお金が手元に無い状態&lt;/li&gt;
&lt;li&gt;利益とお金の動きは別物&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;回避策&lt;/li&gt;
&lt;li&gt;回収サイトは短く、支払いサイトは長く

&lt;ul&gt;
&lt;li&gt;外注先からは短くしたいので、好きに長く取れない&lt;/li&gt;
&lt;li&gt;日本では一般的に末締め翌月払い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;運転資金を手元に置く&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;貸倒

&lt;ul&gt;
&lt;li&gt;取引先が倒産して回収できない&lt;/li&gt;
&lt;li&gt;そのまま費用になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;税務

&lt;ul&gt;
&lt;li&gt;所得＝益金ー損金

&lt;ul&gt;
&lt;li&gt;大体会計と同じ概念&lt;/li&gt;
&lt;li&gt;ただし、個々の要素に微妙な差異がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;費用≠損金

&lt;ul&gt;
&lt;li&gt;貸倒してもそのまま損金にならない場合がある&lt;/li&gt;
&lt;li&gt;利益が無くても税金がかかる場合&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2015年17週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-17/</link>
      <pubDate>Mon, 27 Apr 2015 11:58:59 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-17/</guid>
      <description>

&lt;h1 id=&#34;cpplintが便利そう:4d6f6f3ae9acaa6b2b7ea721f3040303&#34;&gt;cpplintが便利そう&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/AtomLinter/linter-cpplint&#34;&gt;AtomLinter/linter-cpplint&lt;/a&gt;&lt;br /&gt;
Google Style Guideに沿っているかをチェックしてくれるcpplintを、&lt;br /&gt;
Atom.ioから使えるようにしているPluginです。&lt;/p&gt;

&lt;p&gt;めっちゃ便利なのですが、標準だとcpplintのフィルターしか設定できず、&lt;br /&gt;
他のオプションを設定できないため、PRを送りました。&lt;br /&gt;
&lt;a href=&#34;https://github.com/AtomLinter/linter-cpplint/pull/12&#34;&gt;https://github.com/AtomLinter/linter-cpplint/pull/12&lt;/a&gt;&lt;br /&gt;
レビュー待ちです(o゜▽゜)&lt;/p&gt;

&lt;h1 id=&#34;apple-watch買った:4d6f6f3ae9acaa6b2b7ea721f3040303&#34;&gt;Apple Watch買った&lt;/h1&gt;

&lt;p&gt;たまたま発売日に秋葉原を歩いていたら売っていたのでつい買ってしまいました。&lt;br /&gt;
が、iPhoneをメインで使っているわけではないので、いまいち使い道が良くわからないです。&lt;br /&gt;
しばらくは見せるようですかね…&lt;/p&gt;

&lt;h1 id=&#34;fluentd-forwarderを触ってた:4d6f6f3ae9acaa6b2b7ea721f3040303&#34;&gt;fluentd-forwarderを触ってた&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/fluent/fluentd-forwarder&#34;&gt;fluent/fluentd-forwarder&lt;/a&gt;&lt;br /&gt;
Windowsのサーバで動かしているやつのログをとってくるの面倒だなー&lt;br /&gt;
と思っていたので、便利そうです(o゜▽゜)&lt;br /&gt;
とりあえず動かし方はわかったので、実際に入れてみようかと…&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>参加記録 DroidKaigi</title>
      <link>http://ota42y.com/blog/2015/04/26/droidkaigi/</link>
      <pubDate>Sun, 26 Apr 2015 12:49:12 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/26/droidkaigi/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://droidkaigi.connpass.com/event/13216/&#34;&gt;DroidKaigi&lt;/a&gt;に参加してきたのでメモ。&lt;/p&gt;

&lt;p&gt;Twitterで流れてくる情報によると、あっちのセッションもおもしろそう…&lt;br /&gt;
みたいなのがあったので、ちゃんとセッションの概要も読んで天秤にかけるべきでした。&lt;br /&gt;
（エクセルシートから該当のセッションを探すのが大変だったので挫折した）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Activity, Fragment, CustomView の使い分け - マッチョなActivityにさよならする方法 -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/yanzm/droid-kaigi2015-yanzm&#34;&gt;http://www.slideshare.net/yanzm/droid-kaigi2015-yanzm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ActivityはFragmentのブセット的な印象。&lt;/li&gt;
&lt;li&gt;Fat Activityになりやすい場合はViewとか他の部分にコードを分割しましょうというお話っぽい。

&lt;ul&gt;
&lt;li&gt;RailsのFat Controller問題?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fragmentにできる事はそっちにどんどん任せて、ActivityはActivityにしか出来ない部分に集中しようってこと？&lt;/li&gt;
&lt;li&gt;Activityにしか出来ないことが多すぎるからFat Activity問題になってたので、
似たようなことが出来るけどライフサイクルをコントロールできるクラスの登場によって、
処理の分割ができるようになった感じ？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;開発を効率的に進めるられるまでの道程&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/TakaoSumitomo/ss-47393000&#34;&gt;http://www.slideshare.net/TakaoSumitomo/ss-47393000&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コードを書くのとテストを書くのが一番開発で大変なところ&lt;/li&gt;
&lt;li&gt;どんな風にテストしているかの事例紹介

&lt;ul&gt;
&lt;li&gt;ダミーを作ってがんばる感じ&lt;/li&gt;
&lt;li&gt;複数の間を取り持つクラスは疎通確認のみ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;あるゲームアプリケーションの構成とアップデートサイクル&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/kentaroiizuka/droidkaigi&#34;&gt;http://www.slideshare.net/kentaroiizuka/droidkaigi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;様々なリソースから、バイナリやアップデータを作るまでをすべてJenkinsがやっている

&lt;ul&gt;
&lt;li&gt;専用のパイプラインエンジニアがいるらしい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KLab/PlaygroundOSS/&#34;&gt;Playground&lt;/a&gt;つよい

&lt;ul&gt;
&lt;li&gt;Cocosはお察しなできなので… (´・ω・｀)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Luaでゲーム部分を書く

&lt;ul&gt;
&lt;li&gt;ゲーム部分以外はフレームワークが吸収&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;リソースの追加ダウンロードとかもフレームワーク側が持っているらしい

&lt;ul&gt;
&lt;li&gt;ゲーム側はゲームとしての実装に専念できるっぽい&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Android学ぶを君へ。生き抜くためのナレッジ共有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/operando/DroidKaigi&#34;&gt;https://github.com/operando/DroidKaigi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;有用な情報がたくさん&lt;/li&gt;
&lt;li&gt;adbが思っていた以上に優秀だった

&lt;ul&gt;
&lt;li&gt;任意のアプリのViewTreeが見られるらしい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テスト書こう&lt;/li&gt;
&lt;li&gt;発表と関連する資料が全部まとまっているの凄い便利&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kotlin&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/ntaro/xin-yan-yu-kotlindeandroidpuroguramiingu&#34;&gt;https://speakerdeck.com/ntaro/xin-yan-yu-kotlindeandroidpuroguramiingu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Better Java凄い&lt;/li&gt;
&lt;li&gt;Javaで面倒なところを一通りつぶしてくれてる感じ&lt;/li&gt;
&lt;li&gt;Android Studioのプラグインもしっかり対応している様子&lt;/li&gt;
&lt;li&gt;静的型付けだけどちゃんと型推論してくれるので便利&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;モバイルにおける電力最適化のための1プラクティス&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプリの電力測定をする

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.brilliantservice.co.jp/works/power_kit.html&#34;&gt;http://www.brilliantservice.co.jp/works/power_kit.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;こんな感じのを作る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;満充電状態なら、電源ケーブルを通る電力は大体アプリのために使われる仮定

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://strawberry-linux.com/catalog/items?code=12031&#34;&gt;https://strawberry-linux.com/catalog/items?code=12031&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;どれくらいの電気が使われたかを測定する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;通信や描画が何度も起きるアプリは消費量も多め&lt;/li&gt;
&lt;li&gt;何をしているかで消費量はだいぶ違う&lt;/li&gt;
&lt;li&gt;全体の平均値より、スポットごとの値を比較した方が良い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;アプリを公開する前に、最低限知っておきたいセキュリティ事項&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.taosoftware.co.jp/blog/2015/04/cf5c5d90.html&#34;&gt;http://www.taosoftware.co.jp/blog/2015/04/cf5c5d90.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;セキュリティ学習ツールAnCoLe

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/vuln/ancole/&#34;&gt;https://www.ipa.go.jp/security/vuln/ancole/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;権限管理をしっかりとする&lt;/li&gt;
&lt;li&gt;デバッグコードやライブラリが変な挙動をしないか精査する

&lt;ul&gt;
&lt;li&gt;広告SDKは信頼できる物一覧がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.androider.jp/dev/archives/3087&#34;&gt;http://blog.androider.jp/dev/archives/3087&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;その他&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;複数セッションなのでもう片方も見たいのばかり…

&lt;ul&gt;
&lt;li&gt;特にARTとXMLの話は聞きたかった…&lt;em&gt;(:3 」∠)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/MakotoYamazaki/20150425-droidkaigi-gradle&#34;&gt;http://www.slideshare.net/MakotoYamazaki/20150425-droidkaigi-gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/kmt-t/art-47396171&#34;&gt;http://www.slideshare.net/kmt-t/art-47396171&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/sola1980/androidse-linux&#34;&gt;http://www.slideshare.net/sola1980/androidse-linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/yuki930/ss-47398513&#34;&gt;http://www.slideshare.net/yuki930/ss-47398513&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/chocomelonchan/droidkaigi&#34;&gt;https://speakerdeck.com/chocomelonchan/droidkaigi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/yulily100/tesainakaxmlwoshu-kuahurikai-fa-huro&#34;&gt;https://speakerdeck.com/yulily100/tesainakaxmlwoshu-kuahurikai-fa-huro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/misyobun/da-rong-liang-detafalsedaunrodozhan-lue&#34;&gt;https://speakerdeck.com/misyobun/da-rong-liang-detafalsedaunrodozhan-lue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>LinuxとIntelliJを使ったWindowsでのプログラミング環境</title>
      <link>http://ota42y.com/blog/2015/04/24/go-windows-development/</link>
      <pubDate>Fri, 24 Apr 2015 10:00:26 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/24/go-windows-development/</guid>
      <description>

&lt;p&gt;取り扱っているのはGolangですが、特にプログラミング言語は問わないと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WindowsのGolang開発

&lt;ul&gt;
&lt;li&gt;IntelliJ便利

&lt;ul&gt;
&lt;li&gt;機能がとても豊富&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Windows上ではつらい

&lt;ul&gt;
&lt;li&gt;開発ツールが少ない&lt;/li&gt;
&lt;li&gt;LinuxはGUI使いづらい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;LinuxのファイルをWindowsから変更する

&lt;ul&gt;
&lt;li&gt;良いところ取り

&lt;ul&gt;
&lt;li&gt;開発はWindows&lt;/li&gt;
&lt;li&gt;実行はLinux&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ファイルはSambaで共有

&lt;ul&gt;
&lt;li&gt;ネットワークドライブをマウント&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;IDEデバッグは使えなくなる

&lt;ul&gt;
&lt;li&gt;そのときだけWindowsで動かすとか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;golang開発環境を整える:2107e1477c09702be9950e3792aa06c4&#34;&gt;Golang開発環境を整える&lt;/h1&gt;

&lt;h2 id=&#34;intellijでのgo開発環境:2107e1477c09702be9950e3792aa06c4&#34;&gt;IntelliJでのGo開発環境&lt;/h2&gt;

&lt;p&gt;IntelliJ IDEAとGolang pluginはとてもよく動くため、&lt;br /&gt;
Golang開発に関してはこれを使うのが最も簡単に快適な開発環境を整えられます。&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/kaiinui/items/433eb86c022ffcad0bea&#34;&gt;Go の開発環境は IntelliJ IDEA + golang plugin がマトモだった&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;vmwareに開発環境を整える:2107e1477c09702be9950e3792aa06c4&#34;&gt;VMwareに開発環境を整える&lt;/h2&gt;

&lt;p&gt;IntelliJもGolangはWindowsに対応しているため、比較的簡単に開発を行うことができます。&lt;br /&gt;
ですが、開発に便利なツールの多くはUnixの方が使いやすいことが多いため、&lt;br /&gt;
Windows上で開発するのは細かいところで面倒になることが多いです。&lt;br /&gt;
そのため、仮想マシンや別サーバにLinuxマシンを1台作り、&lt;br /&gt;
その中で開発をした方が何かと便利です。&lt;/p&gt;

&lt;p&gt;ですが、LinuxのGUI環境は現状まともな環境がなく、とても使いづらいため、&lt;br /&gt;
開発以外の作業が発生する場合を考慮すると普段はできる限りWindowsを使用したくなります。&lt;br /&gt;
そこで、開発はWindows上のIntelliJ等で行い、実行環境や開発ツールはLinux上に整え、&lt;br /&gt;
それらをssh経由のCLIから操作するのが最も良い案になっています。&lt;/p&gt;

&lt;p&gt;このような構成にすることで、Unixで動く便利なツールを利用しつつ、&lt;br /&gt;
Windowsの快適なGUI環境を利用することができます。&lt;br /&gt;
また、ファイルや実行環境と手元の環境とが切り離されるため、&lt;br /&gt;
複数の実行環境を切り替えたり、&lt;br /&gt;
マシンを入れ替える際に再設定する量を減らすことができるという利点もあります。&lt;/p&gt;

&lt;p&gt;なお、私は手元のマシンのVMware上にLinuxを立てているため、転送速度はほぼ気になりません。&lt;/p&gt;

&lt;h2 id=&#34;intellijで別サーバのファイルにアクセスする:2107e1477c09702be9950e3792aa06c4&#34;&gt;IntelliJで別サーバのファイルにアクセスする&lt;/h2&gt;

&lt;p&gt;残念ながらIntelliJはこのような用途を想定していないため、
別マシンの環境下で作業できません。&lt;/p&gt;

&lt;p&gt;幸いなことに、Windowsがネットワークドライブとして別マシンのフォルダをマウントした場合、&lt;br /&gt;
IntelliJからは普通のドライブとして見えるため、別マシンのファイルにアクセスすることができます。&lt;/p&gt;

&lt;p&gt;そこで、サーバ上の開発ディレクトリをSambaで共有し、&lt;br /&gt;
Windowsからネットワークドライブとしてそのフォルダをマウントしてあげることで、&lt;br /&gt;
IntelliJで開発を行うことができます。&lt;/p&gt;

&lt;p&gt;私の環境では、以下のような設定をsmb.confに追加しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[global]
map archive = no

～中略～

[workspace]
   path = /home/username/workspace
   writable = yes
   guest ok = no
   guest only = no
   create mode = 0755
   directory mode = 0755
   share modes = yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;map archiveについてはこちらを参照&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/haoling/items/b306b23c41c7110e9e35&#34;&gt;sambaでファイルを上書きすると実行属性が付いてしまう場合の対処&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;サーバと手元の環境を合わせる:2107e1477c09702be9950e3792aa06c4&#34;&gt;サーバと手元の環境を合わせる&lt;/h2&gt;

&lt;p&gt;補完機能を有効に活用するためにはサーバと手元に同じソースを持っておく必要があります。&lt;br /&gt;
ファイルを共有している場合、自分のプロジェクトに関しては問題ありませんが、&lt;br /&gt;
依存ライブラリ等に関しては意図的にそろえる必要があります。&lt;/p&gt;

&lt;p&gt;幸いにも、私はgolangのパッケージ管理に&lt;a href=&#34;https://github.com/mattn/gom&#34;&gt;gom&lt;/a&gt;を利用しています。&lt;br /&gt;
このツールはプロジェクト内に_vendorフォルダを作り、そこに依存パッケージを保存します。&lt;/p&gt;

&lt;p&gt;そのため、IntelliJのProject StructureのGOPATHに_vendor/srcを追加することで、&lt;br /&gt;
依存パッケージの補完や、定義元ジャンプが効くようになります。&lt;/p&gt;

&lt;h1 id=&#34;問題点:2107e1477c09702be9950e3792aa06c4&#34;&gt;問題点&lt;/h1&gt;

&lt;p&gt;この手法ではIDEから実行することを想定していないため、&lt;br /&gt;
IDEデバッグなど、IDE経由で実行した際に動く機能が使えなくなってしまいます。&lt;br /&gt;
このような場合は常に同じ実行環境を維持しておき、&lt;br /&gt;
必要な時にIDEが実行することで回避できますが、あまり良い方法ではないです…&lt;/p&gt;

&lt;p&gt;ですが、そもそもGolangのプラグインはそもそもまだデバッガに対応していないので、&lt;br /&gt;
大きな問題にはなっていません。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>