<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>おおたの物置</title>
    <link>http://ota42y.com/</link>
    <description>Recent content on おおたの物置</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 13 Apr 2015 11:53:02 +0900</lastBuildDate>
    <atom:link href="http://ota42y.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>2015年15週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-15/</link>
      <pubDate>Mon, 13 Apr 2015 11:53:02 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-15/</guid>
      <description>

&lt;h1 id=&#34;atom-ioのstarでパッケージ管理:d98e074c42c4bcd9d2f6d106cbfe320e&#34;&gt;Atom.ioのstarでパッケージ管理&lt;/h1&gt;

&lt;p&gt;Atom.ioでは、パッケージのページ上でそのパッケージにスターをつけることができます。&lt;br /&gt;
&lt;a href=&#34;https://atom.io/packages/project-manager&#34;&gt;https://atom.io/packages/project-manager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここでスターをつけたパッケージはユーザのお気に入り扱いになり、&lt;br /&gt;
ユーザページ(例: &lt;a href=&#34;https://atom.io/users/ota42y&#34;&gt;https://atom.io/users/ota42y&lt;/a&gt; )上で確認できます。&lt;/p&gt;

&lt;p&gt;さらに、Atom.ioにはapmというパッケージ管理システムがついており、&lt;br /&gt;
これにstarsオプションを与えることで一覧を見ることや、&lt;code&gt;apm stars --install&lt;/code&gt;で、&lt;br /&gt;
ユーザのスターをつけたパッケージをすべてインストールできます。&lt;br /&gt;
&lt;a href=&#34;https://github.com/atom/apm/blob/master/src/stars.coffee&#34;&gt;https://github.com/atom/apm/blob/master/src/stars.coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;プラグインのバックアップはもちろんのこと、複数環境でのプラグイン同期にとても便利なので重宝します。&lt;/p&gt;

&lt;h1 id=&#34;タスク管理システム作ってる:d98e074c42c4bcd9d2f6d106cbfe320e&#34;&gt;タスク管理システム作ってる&lt;/h1&gt;

&lt;p&gt;最低限表示するだけのver. 0.0.1ができそうです。&lt;br /&gt;
&lt;a href=&#34;https://github.com/ota42y/plaintodo&#34;&gt;https://github.com/ota42y/plaintodo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;対話型インタフェースを作るのにlinerが凄い便利でした。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/blog/2015/04/11/go-liner/&#34;&gt;golangのラインエディタはlinerが便利&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Travis.ciとか入れてCI回したいですが、テスト用コンテナでの依存パッケージの管理とか大変そうです…&lt;br /&gt;
godepやgomみたいなバージョン管理の導入を検討しますかね。&lt;/p&gt;

&lt;h1 id=&#34;第6回ニコニコ学会β-データ研究会に参加した:d98e074c42c4bcd9d2f6d106cbfe320e&#34;&gt;第6回ニコニコ学会β　データ研究会に参加した&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/04/12/niconico_data_6/&#34;&gt;参加記録 第6回ニコニコ学会β　データ研究会&lt;/a&gt;&lt;br /&gt;
今回の基調講演も発表もとてもおもしろかったです。&lt;br /&gt;
特に人狼はそこそこやっているため、とても参考になりました。&lt;br /&gt;
deviantARTは存在を知らなかったので、いろいろ調べてみたいですね…&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>参加記録 第6回ニコニコ学会β　データ研究会</title>
      <link>http://ota42y.com/blog/2015/04/12/niconico_data_6/</link>
      <pubDate>Sun, 12 Apr 2015 21:03:35 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/12/niconico_data_6/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://niconicodatasig6.peatix.com/&#34;&gt;第6回ニコニコ学会β　データ研究会&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;h1 id=&#34;基調講演:77062b116e53641aa03fb4a662d518a8&#34;&gt;基調講演&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;日立のH

&lt;ul&gt;
&lt;li&gt;スペシャリストのデータに基づいた施策より、超詳細なデータから計算した施策の方が有効

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://web-tan.forum.impressrd.jp/e/2015/03/06/19423&#34;&gt;http://web-tan.forum.impressrd.jp/e/2015/03/06/19423&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人間では見つけられない要因を特定できる

&lt;ul&gt;
&lt;li&gt;スキルより休憩中の雑談の盛り上がりが重要だったり&lt;/li&gt;
&lt;li&gt;膨大なデータの因果関係を調べ上げるのは人間には無理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ウェアラブルハピネスメーター

&lt;ul&gt;
&lt;li&gt;人は動き続けているほど止まらなくなる

&lt;ul&gt;
&lt;li&gt;T時間動き続けると、止まる確率が1/T&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;実際のデータと1/Tとの乖離が高くなると、集団の幸福度が低下する

&lt;ul&gt;
&lt;li&gt;1/Tに近いほど集団が幸福度が高くなる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;幸福度と業務の生産性は直結する

&lt;ul&gt;
&lt;li&gt;1/Tを上げることが生産性を上げることになる&lt;/li&gt;
&lt;li&gt;生産性や幸福度に関連するデータを短いスパンで計測することができる

&lt;ul&gt;
&lt;li&gt;日々のKPIとして利用できそうなところが革新的っぽい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pc.watch.impress.co.jp/docs/news/20150209_687505.html&#34;&gt;日立、集団の幸福感を測定する技術を開発 - PC Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E8%A6%8B%E3%81%88%E3%81%96%E3%82%8B%E6%89%8B-%E3%82%A6%E3%82%A8%E3%82%A2%E3%83%A9%E3%83%96%E3%83%AB%E3%82%BB%E3%83%B3%E3%82%B5%E3%81%8C%E6%98%8E%E3%81%8B%E3%81%99%E4%BA%BA%E9%96%93%E3%83%BB%E7%B5%84%E7%B9%94%E3%83%BB%E7%A4%BE%E4%BC%9A%E3%81%AE%E6%B3%95%E5%89%87-%E7%9F%A2%E9%87%8E%E5%92%8C%E7%94%B7/dp/4794220685/&#34;&gt;データの見えざる手: ウエアラブルセンサが明かす人間・組織・社会の法則&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;後で買う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;人狼知能:77062b116e53641aa03fb4a662d518a8&#34;&gt;人狼知能&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;脱初心者！経験は人狼力を向上させるのか？～データから見るベテランの実力～

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/toritorix/ss-46899953&#34;&gt;http://www.slideshare.net/toritorix/ss-46899953&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;人狼BBSの分析&lt;/li&gt;
&lt;li&gt;陣営ごとの平均プレイ回数が多い方が勝率が高い

&lt;ul&gt;
&lt;li&gt;運ゲーじゃなかった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;経験によるスキル向上

&lt;ul&gt;
&lt;li&gt;占い師

&lt;ul&gt;
&lt;li&gt;的中率は変化なし&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;狩人

&lt;ul&gt;
&lt;li&gt;上級者ほど護衛成功しやすい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人狼への投票率

&lt;ul&gt;
&lt;li&gt;ちょっとだけ高い&lt;/li&gt;
&lt;li&gt;上級者が複数人の陣営はわりと高くなる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;個人の経験より集団の経験の方が強い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人狼知能プロジェクト

&lt;ul&gt;
&lt;li&gt;人狼BBSのデータセットとか公開するらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aiwolf.org/&#34;&gt;http://www.aiwolf.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;能力者はどれくらい勝利に貢献するのか？の話

&lt;ul&gt;
&lt;li&gt;同じ人数で特定の能力者がいる/いない場合の勝率を計算

&lt;ul&gt;
&lt;li&gt;その能力者による勝利への貢献度合いが相対的にわかる&lt;/li&gt;
&lt;li&gt;ロジスティック回帰分析で解析&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結果

&lt;ul&gt;
&lt;li&gt;占い師&amp;gt;人狼&amp;gt;狩人&amp;gt;共有者&amp;gt;狂人&amp;gt;霊能者&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;村人

&lt;ul&gt;
&lt;li&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;結果。占い師最強。村人はゴミ &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%8B%E3%82%B3%E3%83%8B%E3%82%B3%E5%AD%A6%E4%BC%9A?src=hash&#34;&gt;#ニコニコ学会&lt;/a&gt; &lt;a href=&#34;http://t.co/gmVrLtS3Qb&#34;&gt;pic.twitter.com/gmVrLtS3Qb&lt;/a&gt;&lt;/p&gt;&amp;mdash; myrmecoleon (@myrmecoleon) &lt;a href=&#34;https://twitter.com/myrmecoleon/status/587138559770935298&#34;&gt;2015, 4月 12&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;占い師は人狼より強い&lt;/li&gt;
&lt;li&gt;霊能力者は使えない&lt;/li&gt;
&lt;li&gt;村人はゴミ（いないよりマシ）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結果から状況に応じた行動指針

&lt;ul&gt;
&lt;li&gt;複数COした場合、占い師2人の時以外は総吊り

&lt;ul&gt;
&lt;li&gt;占い師三人＝真占い、人狼、狂人（または人狼）&lt;/li&gt;
&lt;li&gt;占い師＜人狼＋狂人（または人狼）なので、全員吊った方がよい&lt;/li&gt;
&lt;li&gt;霊能力者の場合も同じく&lt;/li&gt;
&lt;li&gt;占い師＞人狼なので、占い師2人の場合は手を出さないのが吉&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人狼側で占い2人COの場合

&lt;ul&gt;
&lt;li&gt;相手を襲撃するのが良い&lt;/li&gt;
&lt;li&gt;占い師＞人狼なので、道連れにした方が得&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;狂人は占い師を騙るべき

&lt;ul&gt;
&lt;li&gt;霊能力者はダメ、村人は論外&lt;/li&gt;
&lt;li&gt;狩人も占い師を騙るべき&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;役職なしの人狼の勝率計算

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://arxiv.org/abs/1009.1031&#34;&gt;http://arxiv.org/abs/1009.1031&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;この結果が対面戦でも有効なのか気になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人狼でわかるコミュ力の正体

&lt;ul&gt;
&lt;li&gt;人狼はコミュニケーションの中で相手の嘘を見抜くのと、相手を説得するのを両方やるゲーム&lt;/li&gt;
&lt;li&gt;人狼での必要な行動を論理的に記述できる言語を作ったらしい

&lt;ul&gt;
&lt;li&gt;AI人狼と対戦できる

&lt;ul&gt;
&lt;li&gt;つよい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;初音ミクに人狼をやらせてみた

&lt;ul&gt;
&lt;li&gt;AI人狼

&lt;ul&gt;
&lt;li&gt;一瞬で決着がついておもしろくない&lt;/li&gt;
&lt;li&gt;対面だとおもしろいのに&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人狼をミクがプレイするようにした

&lt;ul&gt;
&lt;li&gt;モーション等もつけられるようになってる&lt;/li&gt;
&lt;li&gt;動画は限定公開中らしい…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;lt:77062b116e53641aa03fb4a662d518a8&#34;&gt;LT&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;初心者向け「凛ちゃん」

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/__john_smith__/rin-chan-46900896&#34;&gt;http://www.slideshare.net/__john_smith__/rin-chan-46900896&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;イ゛エ゛ロ゛ー゛タ゛ヨ゛ォ゛ォ゛ォ゛&lt;/li&gt;
&lt;li&gt;2chのスレで同名キャラの誰について話しているかを分類する

&lt;ul&gt;
&lt;li&gt;SVMで解析

&lt;ul&gt;
&lt;li&gt;68%の正解率&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DeepLearning

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://h2o.ai/&#34;&gt;http://h2o.ai/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;62%の正解率…&lt;/li&gt;
&lt;li&gt;まだ収束してないのでもっと上がるかもとのこと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「さくら」で分析したらもっとやばそう…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;E2D3の話

&lt;ul&gt;
&lt;li&gt;Excel上でD3.jsが動く

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://e2d3.org/?lang=ja&#34;&gt;http://e2d3.org/?lang=ja&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;便利そう(o゜▽゜)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;商業ボーイズラブの集計〜男性向けエロマンガを添えて〜

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/file/d/0B2uGN8G1iUFiOFh0czVabGFzVXM&#34;&gt;https://docs.google.com/file/d/0B2uGN8G1iUFiOFh0czVabGFzVXM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;男性向けよりも肉体的な関係より、精神的な関係を好むらしい

&lt;ul&gt;
&lt;li&gt;これは百合マンガと比較した場合もBLに特徴的なのか気になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ありらいおん deviantARTを調べてみた

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.deviantart.com/&#34;&gt;http://www.deviantart.com/&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;北米のすごいpixiv&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;規模的にはpixivの倍ぐらいらしい&lt;/li&gt;
&lt;li&gt;300万人で3億投稿&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>golangのラインエディタはlinerが便利</title>
      <link>http://ota42y.com/blog/2015/04/11/go-liner/</link>
      <pubDate>Sat, 11 Apr 2015 14:05:04 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/11/go-liner/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/peterh/liner&#34;&gt;peterh/liner&lt;/a&gt;&lt;br /&gt;
golangでCLIを作る際に活用できるラインエディタです。&lt;/p&gt;

&lt;h1 id=&#34;使い方:2af15ccd9bc45fb3ffe2661631874425&#34;&gt;使い方&lt;/h1&gt;

&lt;p&gt;liner.NewLinerで作成し、Prompt関数で入力を待機します。&lt;br /&gt;
入力があると関数が入力を返してくるため、それによって処理を分岐します。&lt;/p&gt;

&lt;p&gt;なお、Ctrl+cの場合は普通に入力になりますが、Ctrl+dの場合はEOFとしてエラーを返してくるため、&lt;br /&gt;
エラー時に終了するようにしておくことでCtrl+dで終了できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;github.com/peterh/liner&amp;quot;
)

func main() {
	line := liner.NewLiner()
	defer line.Close()

	for {
		l, err := line.Prompt(&amp;quot;Input: &amp;quot;)
		if err != nil {
			fmt.Println(&amp;quot;error: &amp;quot;, err)
		} else {
			fmt.Println(&amp;quot;get: &amp;quot;, l)

			if l == &amp;quot;exit&amp;quot; {
				break
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;入力履歴を使う:2af15ccd9bc45fb3ffe2661631874425&#34;&gt;入力履歴を使う&lt;/h1&gt;

&lt;p&gt;AppendHistory関数に文字列を渡すことで、上下キーで入力履歴をたどれます。&lt;br /&gt;
&lt;a href=&#34;http://godoc.org/github.com/peterh/liner#State.AppendHistory&#34;&gt;State.AppendHistory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;また、WriteHistory関数でファイルへの書き込みを、ReadHistory関数でファイルからの読み込みを行えます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;github.com/peterh/liner&amp;quot;
	&amp;quot;os&amp;quot;
)

func main() {
	line := liner.NewLiner()
	defer line.Close()

	f, err := os.Open(&amp;quot;inputs.log&amp;quot;)
	if err == nil {
		n, _ := line.ReadHistory(f)
		fmt.Println(&amp;quot;load&amp;quot;, n, &amp;quot;history&amp;quot;)
		f.Close()
	}

	for {
		l, err := line.Prompt(&amp;quot;Input: &amp;quot;)
		if err != nil {
			fmt.Println(&amp;quot;error: &amp;quot;, err)
		} else {
			fmt.Println(&amp;quot;get: &amp;quot;, l)
			line.AppendHistory(l)

			if l == &amp;quot;exit&amp;quot; {
				break
			}
		}
	}

	f, err = os.Create(&amp;quot;inputs.log&amp;quot;)
	if err == nil {
		fmt.Println(&amp;quot;write history&amp;quot;)

		line.WriteHistory(f)
		f.Close()
	} else {
		fmt.Println(&amp;quot;write history error: &amp;quot;, err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;タブ補完を使う:2af15ccd9bc45fb3ffe2661631874425&#34;&gt;タブ補完を使う&lt;/h1&gt;

&lt;p&gt;SetCompleter関数に補完用の関数を登録することで、タブ補完も使えます。&lt;br /&gt;
&lt;a href=&#34;http://godoc.org/github.com/peterh/liner#State.SetCompleter&#34;&gt;State.SetCompleter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;引数として、現在入力中のstringを受け取り、tab候補をstringの配列で返す関数を渡します。&lt;br /&gt;
入力中の文字が配列のはじめの要素で置き換えられ、以降tabを押すごとに次の要素と置き換えられます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;github.com/peterh/liner&amp;quot;
	&amp;quot;strings&amp;quot;
)

func main() {
	inputs := make([]string, 0)

	line := liner.NewLiner()
	defer line.Close()

	line.SetCompleter(func(line string) (c []string) {
		for _, n := range inputs {
			if strings.HasPrefix(n, strings.ToLower(line)) {
				c = append(c, n)
			}
		}
		return
	})

	for {
		l, err := line.Prompt(&amp;quot;Input: &amp;quot;)
		if err != nil {
			fmt.Println(&amp;quot;error: &amp;quot;, err)
		} else {
			fmt.Println(&amp;quot;get: &amp;quot;, l)
			inputs = append(inputs, l)

			if l == &amp;quot;exit&amp;quot; {
				break
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;まとめ:2af15ccd9bc45fb3ffe2661631874425&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ラインエディタに必要な物は大体揃っている

&lt;ul&gt;
&lt;li&gt;入力中の左右移動&lt;/li&gt;
&lt;li&gt;履歴&lt;/li&gt;
&lt;li&gt;補完&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;日本語入力はちょっとおかしい

&lt;ul&gt;
&lt;li&gt;日本語を入れて左右移動すると表示がおかしい&lt;/li&gt;
&lt;li&gt;ターミナルの問題の可能性も&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2015年14週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-14/</link>
      <pubDate>Mon, 06 Apr 2015 07:37:34 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-14/</guid>
      <description>

&lt;h1 id=&#34;pitが便利:694b6c6ee0002c07e107ab179febb18f&#34;&gt;pitが便利&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cho45/pit&#34;&gt;cho45/pit&lt;/a&gt;&lt;br /&gt;
ユーザ名やキー等が必要な場合に、pitからロードするコードを書くことで、&lt;br /&gt;
保存されていればそれをロード、保存されていなければエディタを立ち上げて入力を促し、&lt;br /&gt;
結果をpitのディレクトリに保存してくれるものです。&lt;/p&gt;

&lt;p&gt;これにより、アプリにパスワードを埋め込んだり、自分でいちいちファイルから読み込む必要がなくなり、&lt;br /&gt;
秘密情報の管理がとても楽になります。&lt;/p&gt;

&lt;p&gt;golangにもpitがあるらしく、便利なのでgoで使ったやつにも入れようと思います。&lt;br /&gt;
&lt;a href=&#34;https://github.com/typester/go-pit&#34;&gt;https://github.com/typester/go-pit&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;changelogアプリに良いのがない:694b6c6ee0002c07e107ab179febb18f&#34;&gt;changelogアプリに良いのがない&lt;/h1&gt;

&lt;p&gt;githubの情報からchangelogを作ってくれるのはいくつかあります。&lt;br /&gt;
&lt;a href=&#34;https://github.com/skywinder/Github-Changelog-Generator/wiki/Alternatives&#34;&gt;https://github.com/skywinder/Github-Changelog-Generator/wiki/Alternatives&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ですが、どれも帯に短したすきに長しといった感じで、なかなか私が想定している使い方に合致した物がありません。&lt;br /&gt;
やっていることはそんなに難しくないはずなので、やはり自作するしか無いのでしょうか…&lt;br /&gt;
その場合、ある程度出力形式を変えられる形のがほしいですね。&lt;/p&gt;

&lt;p&gt;一応golangでgithubのapiラッパーはあるようです。&lt;br /&gt;
&lt;a href=&#34;https://github.com/google/go-github&#34;&gt;google/go-github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>golangでIOへのテストを行う</title>
      <link>http://ota42y.com/blog/2015/04/01/go-io-test/</link>
      <pubDate>Wed, 01 Apr 2015 07:06:38 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/01/go-io-test/</guid>
      <description>

&lt;h1 id=&#34;まとめ:45434d41f1f2e75f0b6bd5a92c14794f&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;fmt.Print等にちゃんと出力されるかテストしたい

&lt;ul&gt;
&lt;li&gt;結論としては直接は無理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;io.Writerを利用するように変えることで簡単にテスト可能

&lt;ul&gt;
&lt;li&gt;渡されたio.Writerに書き込むようにする&lt;/li&gt;
&lt;li&gt;通常はos.Stdout、テストの時はbytes.Bufferを渡す&lt;/li&gt;
&lt;li&gt;どちらもio.Writerを実装している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;標準出力への書き込みをテストしたい:45434d41f1f2e75f0b6bd5a92c14794f&#34;&gt;標準出力への書き込みをテストしたい&lt;/h1&gt;

&lt;p&gt;fmt.Print等で文字列を出力する場合、予期したものが出力されるかをテストしたい場合があります。&lt;br /&gt;
ですが、fmt.Printはそのまま出力まで行ってしまうらしく、こちら側で制御することは難しそうです。&lt;/p&gt;

&lt;p&gt;このような場合、fmt.Printを使うのではなく、明示的に標準出力へ書き込むようにし、&lt;br /&gt;
テストの時は書き込み先を切り替えることで簡単にテストができるようになります。&lt;/p&gt;

&lt;h2 id=&#34;fmt-fprintで出力先を指定する:45434d41f1f2e75f0b6bd5a92c14794f&#34;&gt;fmt.Fprintで出力先を指定する&lt;/h2&gt;

&lt;p&gt;golangでは任意の書き込み先に対して書き込むfmt.Fprint関数が用意されています。&lt;br /&gt;
この関数は、io.Writerに対してフォーマット指定した文字列を書き込めます。&lt;br /&gt;
&lt;a href=&#34;https://golang.org/pkg/fmt/#Fprint&#34;&gt;https://golang.org/pkg/fmt/#Fprint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;io.Writerは&lt;code&gt;Write(p []byte) (n int, err error)&lt;/code&gt;関数だけを持ったインターフェースです。&lt;br /&gt;
そのため、これを実装していればfmt.Fprintの書き込み先として使えます。&lt;br /&gt;
&lt;a href=&#34;http://golang.org/pkg/io/#Writer&#34;&gt;http://golang.org/pkg/io/#Writer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;golangでは、io.Writerを実装した標準出力をos.Stdoutとして提供しています。&lt;br /&gt;
そのため、os.Stdoutにfmt.Fprintで書き込むことにより、&lt;br /&gt;
出力先を変更可能な状態で標準出力に出力できます。&lt;/p&gt;

&lt;h2 id=&#34;メモリ上に出力する:45434d41f1f2e75f0b6bd5a92c14794f&#34;&gt;メモリ上に出力する&lt;/h2&gt;

&lt;p&gt;golangでは、byets.Bufferもio.Writerを実装しており、こちらは書き込まれた文字列をメモリ上に保持してくれます。&lt;br /&gt;
そして、String()関数により、書き込まれた文字列をstringとして取得できます。&lt;br /&gt;
&lt;a href=&#34;http://golang.org/pkg/bytes/#Buffer&#34;&gt;http://golang.org/pkg/bytes/#Buffer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これを利用し、普段はos.Stdoutに書き込むようにし、テストの時に書き込み先をbyets.Bufferに変更することで、&lt;br /&gt;
標準出力に出力されたかどうかをテストすることができるようになります。&lt;/p&gt;

&lt;h1 id=&#34;サンプルコード:45434d41f1f2e75f0b6bd5a92c14794f&#34;&gt;サンプルコード&lt;/h1&gt;

&lt;p&gt;print.go&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;io&amp;quot;
    &amp;quot;os&amp;quot;
)

func testPrint(w io.Writer) {
    fmt.Fprint(w, &amp;quot;write test\n&amp;quot;)
}

func main() {
    testPrint(os.Stdout)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;print_test.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main
import (
    &amp;quot;bytes&amp;quot;
    &amp;quot;testing&amp;quot;
)

func TestPrint(t *testing.T) {
    buf := &amp;amp;bytes.Buffer{}
    testPrint(buf)
    outputString := buf.String()
    
    correctString := &amp;quot;write test\n&amp;quot;
    if correctString != outputString {
        t.Errorf(&amp;quot;output string shud be %s but %s&amp;quot;, correctString, outputString)
        t.FailNow()
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2015年13週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-13/</link>
      <pubDate>Sun, 29 Mar 2015 10:37:34 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-13/</guid>
      <description>

&lt;h1 id=&#34;プロトタイプ展に行きました:c970b2167d590a8651f22cb3848b6111&#34;&gt;プロトタイプ展に行きました&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.design-lab.iis.u-tokyo.ac.jp/exhibition/proto2015/&#34;&gt;東京大学山中研究室プロトタイプ展2015 &amp;ldquo;PLAYFUL&amp;rdquo;&lt;/a&gt;に行きました。&lt;br /&gt;
全く同じ素材でも構造を変えることで、握ったり持ったりしたときの感触が全く違うのはおもしろかったです。&lt;br /&gt;
現代アートっぽいやつはよくわからなかったですが…&lt;/p&gt;

&lt;h1 id=&#34;goについて理解が深まった:c970b2167d590a8651f22cb3848b6111&#34;&gt;Goについて理解が深まった&lt;/h1&gt;

&lt;p&gt;Golangを多く触った一週間でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/03/28/go_interface/&#34;&gt;GoのポインタはC++ポインタとは違う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gxuiで簡単なGUIアプリを作りました

&lt;ul&gt;
&lt;li&gt;gorutineのすばらしさを改めて感じる&lt;/li&gt;
&lt;li&gt;描画処理とは別に平行して処理をしたい場合にgorutineで簡単に書ける&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GoのポインタはC&#43;&#43;ポインタとは違う</title>
      <link>http://ota42y.com/blog/2015/03/28/go_interface/</link>
      <pubDate>Sat, 28 Mar 2015 21:26:40 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/03/28/go_interface/</guid>
      <description>

&lt;p&gt;C++みたいなノリでGoのインターフェースとポインタを使ったところ、はまったのでメモ。&lt;/p&gt;

&lt;h1 id=&#34;goでインターフェースを実装したクラスのポインタを扱う:50fdd019e9a71df208e16a3cc56d13ed&#34;&gt;Goでインターフェースを実装したクラスのポインタを扱う&lt;/h1&gt;

&lt;p&gt;Goで以下のように、インターフェースを実装したクラスを受けたい場合があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Node interface{
  ToString() string
}

func Output(l Node) {
  fmt.Println(l.ToString())
}

type NodeTest struct{
}

func (n NodeTest) ToString() string{
  return &amp;quot;test&amp;quot;
}

func main(){
  n := NodeTest{}
  Output(n)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;関数呼び出しのたびにオブジェクトがコピーされるのは無駄なので、
インターフェースのポインタを渡すように変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Output(l *Node) {
  fmt.Println((*l).ToString())
}

func (n *NodeTest) ToString() string{
  return &amp;quot;test&amp;quot;
}

func main(){
  n := &amp;amp;NodeTest{}
  Output(n)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合、インターフェースのポインタは、インターフェースを実装したstructのポインタとは違うため、
関数の引数として渡すことができず、コンパイルが通りません。&lt;/p&gt;

&lt;p&gt;そのため、インターフェースを使う場合はオブジェクトをコピーせざるを得ないように思えますが、
ちゃんとこのような場合も解決方法は存在します。&lt;/p&gt;

&lt;h1 id=&#34;ポインタにインターフェースを実装する:50fdd019e9a71df208e16a3cc56d13ed&#34;&gt;ポインタにインターフェースを実装する&lt;/h1&gt;

&lt;p&gt;上記の2番目のコードでは、NodeTest型のポインタに対してインターフェースを実装しています。&lt;br /&gt;
そのため、以下のようにOutput関数の引数をNode型を受けるようにしておくのが正解になります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Output(l Node) {
  fmt.Println(l.ToString())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これにより、Output関数にNodeインタフェースを実装したNodeTestのポインタがコピーして渡され、&lt;br /&gt;
NodeTestオブジェクト自体はコピーされずに渡されます。&lt;/p&gt;

&lt;p&gt;ここがC++とはだいぶ違う考え方が必要なので戸惑いました。&lt;br /&gt;
C++では構造体にメソッドを実装し、ポインタからその構造体のメソッドを呼び出します。&lt;br /&gt;
そのため、あくまでポインタの指しているオブジェクトのメソッド呼び出しであり、&lt;br /&gt;
クラスのポインタそのものにメソッドが定義されている訳ではありません。&lt;/p&gt;

&lt;p&gt;ですがGoのインターフェースを使った場合、前述の通り上手く動きません。&lt;br /&gt;
そのため、型のポインタにメソッドを定義し、それをインターフェースとして扱う必要があります。&lt;/p&gt;

&lt;p&gt;C++ではポインタに対して別名をつけることはできますが、メソッドの実装はできませんでした。&lt;br /&gt;
ですがGoではポインタやint型といったほぼすべての型に対してメソッドを実装できます。&lt;/p&gt;

&lt;p&gt;たとえば、以下のようにint型に対しても好きなメソッドを定義できます。&lt;br /&gt;
(一応名前は変える必要があります)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main
import (
    &amp;quot;fmt&amp;quot;
)

type MyInt int

func (i *MyInt) Out() {
     fmt.Println(*i)
}

func main() {
     var i MyInt = 1
     (&amp;amp;i).Out()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あらゆる型に関数をつけられるというのが、C++に染まった頭からだと理解できなくて手間取りました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年12週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-12/</link>
      <pubDate>Mon, 23 Mar 2015 07:34:46 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-12/</guid>
      <description>

&lt;h1 id=&#34;gxuiを触ってた:bbdc5216c1ff2ebffa850fb8e4bd1537&#34;&gt;gxuiを触ってた&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/google/gxui&#34;&gt;https://github.com/google/gxui&lt;/a&gt;&lt;br /&gt;
GoogleによるGolang制のクロスプラットフォームなGUIライブラリです。&lt;br /&gt;
クロスコンパイルは難しそうだけど、同じソースでビルドは普通にできそうです。&lt;br /&gt;
ざっと見た限り、必要最低限しか整ってない感じなので、これからに期待です。&lt;/p&gt;

&lt;h1 id=&#34;todoアプリ作成中:bbdc5216c1ff2ebffa850fb8e4bd1537&#34;&gt;Todoアプリ作成中&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/pages/summary/2015/week-09/&#34;&gt;http://ota42y.com/pages/summary/2015/week-09/&lt;/a&gt;でやろうとしていたTodoアプリを作成中です。&lt;br /&gt;
今月中にはできるかと思っていましたが、このサイトの作成に思った以上に時間をとられてしまい、あんまり進んでいないです…&lt;/p&gt;

&lt;p&gt;ただし、おおよその仕様はまとまりましたし、機能を大幅に削った最低ラインを決めました。&lt;br /&gt;
最低限使い物になるまで半分ぐらいなので、後2週間ぐらいで作り上げたいと思います。&lt;br /&gt;
&lt;a href=&#34;https://github.com/ota42y/plaintodo&#34;&gt;https://github.com/ota42y/plaintodo&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;hugoからの出力をgithub-pagesにアップロードする:bbdc5216c1ff2ebffa850fb8e4bd1537&#34;&gt;Hugoからの出力をGithub Pagesにアップロードする&lt;/h1&gt;

&lt;p&gt;Octopressの場合はGithub Pagesにアップロードしてくれるコマンドがありましたが、&lt;br /&gt;
Hugoの場合、特にそんなコマンドはないようです。&lt;br /&gt;
そのため、HugoがHTMLを出力するフォルダに、Github Pagesをcloneしておく必要があります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windowsにgxuiをインストールする</title>
      <link>http://ota42y.com/blog/2015/03/22/gxui-install/</link>
      <pubDate>Sun, 22 Mar 2015 10:27:54 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/03/22/gxui-install/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/google/gxui&#34;&gt;gxui&lt;/a&gt;は、GoogleによるGo製のクロスプラットフォームなGUIライブラリです。&lt;br /&gt;
WindowsへのインストールはGoの環境を整えるところでだいぶ大変だったので、手順を書いておきます。&lt;br /&gt;
なお、一部の依存ライブラリが64bitに対応していないため、すべて32bit版を使います。&lt;/p&gt;

&lt;h1 id=&#34;go言語の環境構築:e3f779623d1fe78142ffab511be6be70&#34;&gt;Go言語の環境構築&lt;/h1&gt;

&lt;p&gt;Go本体に加えて、依存ライブラリのためにgcc,hg,gitが必要になります。&lt;br /&gt;
元々SouceTreeがgitとhgを内部に持って、しかもコンソールまで提供していたのでそれを使っていましたが、&lt;br /&gt;
mingwのgccを認識してくれないため、コマンドライン版をインストールし直しました。&lt;/p&gt;

&lt;h2 id=&#34;vcsのインストール:e3f779623d1fe78142ffab511be6be70&#34;&gt;VCSのインストール&lt;/h2&gt;

&lt;p&gt;git(&lt;a href=&#34;http://git-scm.com/&#34;&gt;http://git-scm.com/&lt;/a&gt;)とmercurial(&lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;http://mercurial.selenic.com/&lt;/a&gt;)をインストールします。&lt;br /&gt;
gitの場合、git bash onlyではなく、コマンドラインからも使えるようにしてください&lt;/p&gt;

&lt;h2 id=&#34;mingwのインストール:e3f779623d1fe78142ffab511be6be70&#34;&gt;mingwのインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://sourceforge.net/projects/mingw/&#34;&gt;http://sourceforge.net/projects/mingw/&lt;/a&gt;からmingwを入れ、&lt;br /&gt;
mingw32-baseとmingw32-gcc-g++にチェックを入れて、メニューのInstallationからApply Changesを選択します。&lt;/p&gt;

&lt;p&gt;なお、Goの64bitとmingwの64bitを使ったところ、glfwのインストール時にサポートしてないよって言われました。&lt;br /&gt;
これは両方とも32bitに揃えることで回避できました。&lt;/p&gt;

&lt;p&gt;コマンドラインからgccが使えるようになっていれば大丈夫です。&lt;/p&gt;

&lt;h1 id=&#34;gxuiのインストール:e3f779623d1fe78142ffab511be6be70&#34;&gt;gxuiのインストール&lt;/h1&gt;

&lt;p&gt;gxuiと4つの依存するパッケージをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get http://github.com/google/gxui
go get http://code.google.com/p/freetype-go/freetype/raster
go get http://code.google.com/p/freetype-go/freetype/truetype
go get http://github.com/go-gl/gl/v3.2-core/gl
go get http://github.com/go-gl/glfw/v3.1/glfw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでインストールはおしまいです。
gxui内のsample/下にあるサンプルを動かして確認をしてください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OctopressからHugoに乗り換えた</title>
      <link>http://ota42y.com/blog/2015/03/16/octopress_to_hugo/</link>
      <pubDate>Mon, 16 Mar 2015 07:40:11 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/03/16/octopress_to_hugo/</guid>
      <description>

&lt;p&gt;このサイトは元々静的サイト作成ツールのOctopressを使い、Github Pages上に構築していましたが、&lt;br /&gt;
サイト作成ツールの部分をGolangで作られたHugoに置き換えました。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Octopress

&lt;ul&gt;
&lt;li&gt;Ruby制の静的サイト作成ツール&lt;/li&gt;
&lt;li&gt;大量の記事を扱うと遅くなっていく

&lt;ul&gt;
&lt;li&gt;100記事で新しい記事のHTML出力まで10秒ぐらいかかる&lt;/li&gt;
&lt;li&gt;見た目を確認したいときなどにとても不便&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hugo

&lt;ul&gt;
&lt;li&gt;Golang制の静的サイト作成ツール&lt;/li&gt;
&lt;li&gt;利点&lt;/li&gt;
&lt;li&gt;早い

&lt;ul&gt;
&lt;li&gt;100記事で200msぐらい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;環境構築いらず

&lt;ul&gt;
&lt;li&gt;公式がバイナリ配布&lt;/li&gt;
&lt;li&gt;手を加えないならそのまま使える&lt;/li&gt;
&lt;li&gt;Win-Mac両方使う人にはとても楽&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;欠点

&lt;ul&gt;
&lt;li&gt;テーマが少ない

&lt;ul&gt;
&lt;li&gt;このサイトも自作&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ota42y/orange42&#34;&gt;https://github.com/ota42y/orange42&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;手を加えにくい

&lt;ul&gt;
&lt;li&gt;手を加えると環境構築いらずの利点が失われる&lt;/li&gt;
&lt;li&gt;クロスコンパイルは楽なのでそれほどでもない？

&lt;ul&gt;
&lt;li&gt;手を加える必要が無いのでそのとき考える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;octopressの問題点:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;Octopressの問題点&lt;/h1&gt;

&lt;p&gt;HTMLのレンダリングが遅いです。&lt;/p&gt;

&lt;p&gt;Octopressにはローカルにサーバを立てて、実際に表示される画面をブラウザで表示する機能があります。&lt;br /&gt;
この機能はファイルを監視しており、変更があるたびに再読込をしてくれるので、&lt;br /&gt;
表示されるHTMLをみながらmarkdownを編集でき、とても役に立っていました。&lt;/p&gt;

&lt;p&gt;現在このブログは100記事ぐらいありますが、その状態だと1記事のHTMLを作るのに10秒ぐらいかかってしまいます。&lt;br /&gt;
ちょっとした修正ごとに10秒待つのはなかなかにつらく、&lt;br /&gt;
かつ記事が増えて行くにしたがって速度がより遅くなっていくことが予想できました。&lt;br /&gt;
そのときちょうどGolangで作られたHugoのことを知り、速度もとても速いとのことなので乗り換えを検討しました&lt;/p&gt;

&lt;p&gt;乗り換え方はこちらのサイトを参考にさせていただきました。&lt;br /&gt;
&lt;a href=&#34;http://deeeet.com/writing/2014/12/25/hugo/&#34;&gt;OctopressからHugoへ移行した&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;hugoの利点:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;Hugoの利点&lt;/h1&gt;

&lt;h2 id=&#34;htmlのレンダリングが早い:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;HTMLのレンダリングが早い&lt;/h2&gt;

&lt;p&gt;Octopressだと10秒ぐらいかかっていた状態をそのまま移行しましたが、&lt;br /&gt;
ファイルを更新してからHTMLに変換されるまでの時間が400msにまで短縮され、&lt;br /&gt;
ほとんど待ち時間が感じられないレベルになりました。&lt;br /&gt;
特にチューニングとかを考えずにこの速度なので、とても助かります。&lt;/p&gt;

&lt;h2 id=&#34;環境構築いらず:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;環境構築いらず&lt;/h2&gt;

&lt;p&gt;Hugo本体に手を入れないのであれば、様々な環境用の実行ファイルが配布されているため、&lt;br /&gt;
環境構築でがんばる必要がありません。&lt;br /&gt;
私はWindowsとMacの両方を使っていますが、WindowsでのRubyはつらいものがあるので、&lt;br /&gt;
Windows向けのバイナリをダウンロードするだけですむのは大変便利です。&lt;/p&gt;

&lt;h1 id=&#34;hugoの問題点:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;Hugoの問題点&lt;/h1&gt;

&lt;h2 id=&#34;テーマがない:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;テーマがない&lt;/h2&gt;

&lt;p&gt;テーマの数が圧倒的に少なく、思った通りのサイトを作るためには自分で作らないと行けません。&lt;br /&gt;
実際このサイトも自分でテーマを作りました。&lt;br /&gt;
&lt;a href=&#34;https://github.com/ota42y/orange42&#34;&gt;https://github.com/ota42y/orange42&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;手を入れにくい:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;手を入れにくい&lt;/h2&gt;

&lt;p&gt;公式サイトのバイナリだけで運用を考える場合、新しい機能を追加することがとても難しいです。&lt;br /&gt;
Octopressの場合は比較的簡単に機能追加ができたため、拡張したくなった場合に手がかかりそうです。&lt;br /&gt;
これは環境構築の手間とのトレードオフなので仕方ないことなのですが…&lt;/p&gt;

&lt;p&gt;最も、Hugoには十分な機能が備わっているため、今のところ問題にはなっていません。&lt;br /&gt;
一応Golangならクロスコンパイルは簡単なため、一カ所で開発してそれを使い回せるようになるはずです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年11週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-11/</link>
      <pubDate>Mon, 16 Mar 2015 07:34:46 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-11/</guid>
      <description>

&lt;h1 id=&#34;hugoに移行した:6bd09a8a6f76d3dafa276f77f1aaa1d8&#34;&gt;Hugoに移行した&lt;/h1&gt;

&lt;p&gt;このサイトは元々Octopressで動かしていましたが、Hugoに移行しました。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/blog/2015/03/16/octopress_to_hugo/&#34;&gt;OctopressからHugoに乗り換えた&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;goのwindows開発環境を整えた:6bd09a8a6f76d3dafa276f77f1aaa1d8&#34;&gt;GoのWindows開発環境を整えた&lt;/h1&gt;

&lt;p&gt;IntelliJを使うとWindowsでも問題なく扱えます。&lt;br /&gt;
ただし、テストを実行するときはexeファイルを作ってから実行します。&lt;br /&gt;
そのため、テストのたびにウィルスソフトのスキャンが挟まるため、テストが無駄に遅いです…&lt;br /&gt;
特定のフォルダにexeファイルがはかれるため、そこだけ除外設定をしようかと検討中です。&lt;/p&gt;

&lt;h1 id=&#34;google-breakpad:6bd09a8a6f76d3dafa276f77f1aaa1d8&#34;&gt;google breakpad&lt;/h1&gt;

&lt;p&gt;マルチプラットフォームなクラッシュレポートみたいです。&lt;br /&gt;
iOS,Android,Mac,Windows等かなりのプラットフォームに対応しているのでよさそうです。&lt;br /&gt;
&lt;a href=&#34;https://code.google.com/p/google-breakpad/&#34;&gt;https://code.google.com/p/google-breakpad&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちなみにMac OS10.9では以下のコマンドでビルドする必要があります。&lt;br /&gt;
(引用元は忘れました…stackoverflowだったはず）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcodebuild -sdk macosx10.9 -project src/client/mac/Breakpad.xcodeproj -configuration Release -target Breakpad ARCHS=x86_64 ONLY_ACTIVE_ARCH=YES MACOSX_DEPLOYMENT_TARGET=10.8 GCC_VERSION=com.apple.compilers.llvm.clang.1_0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2015年10週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-10/</link>
      <pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-10/</guid>
      <description>

&lt;h1 id=&#34;hugoを実験中:e975d64a31c4cd5e9fd296d1cb8af56a&#34;&gt;Hugoを実験中&lt;/h1&gt;

&lt;p&gt;今週はHugoに乗り換えるために、新しいサイト用のテンプレートを作っていました。&lt;/p&gt;

&lt;p&gt;ゼロから作ると、テンプレート作成の大変さが身にしみます…&lt;br /&gt;
デザインを考える部分はもちろんのこと、CSSとの格闘や、&lt;br /&gt;
フレームワークの使い方とかを調べる必要があり、中々大変です。&lt;/p&gt;

&lt;p&gt;また、golangのテンプレート機能については情報が少ないので、&lt;br /&gt;
やりたいことがあっても、普通に書くとうまくいかずに実現できない事が多々あったので、&lt;br /&gt;
あとでちゃんと勉強し直した方がよさそうです。&lt;/p&gt;

&lt;p&gt;最も、本来テンプレート層で複雑な操作はするべきではなく、コントローラー側で処理をし、&lt;br /&gt;
テンプレートは渡されたデータを表示するだけにした方が望ましいです。&lt;br /&gt;
ただ、今回はhugo側にはあまり手を加えるのは避けたいため、&lt;br /&gt;
コントローラ側に処理を追加する事が出来ず、テンプレート部分で頑張る必要がでてしまいました。&lt;br /&gt;
テンプレートとhugoの間に普通のgoで処理を追加できたらいいのですが…&lt;/p&gt;

&lt;p&gt;また、hugo側で用意されている奴を上手く使えばできる事も、&lt;br /&gt;
わざわざ自前でがんばって実装しようとしていたりしてて無駄が多いです…&lt;br /&gt;
サンプル集みたいなのがもう少し整っていると良い気がします。&lt;/p&gt;

&lt;p&gt;ただ、やはり速度は本当に早く、編集してから描画まで10秒ぐらいかかっていたのが一瞬で終わります。&lt;br /&gt;
テンプレートは今週末ぐらいに完成するはずなので、土日に入れ替えようと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年09週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-09/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-09/</guid>
      <description>

&lt;p&gt;今年も15%が終わった…&lt;/p&gt;

&lt;h1 id=&#34;goのcronにpr送った:a2bb1f14b5d42b66ef310d7ad0a0c1ac&#34;&gt;GoのcronにPR送った&lt;/h1&gt;

&lt;p&gt;Goのcronとして&lt;a href=&#34;https://github.com/robfig/cron&#34;&gt;https://github.com/robfig/cron&lt;/a&gt;を使ってますが、&lt;br /&gt;
実行中か否かを取得できずに不便でした。&lt;br /&gt;
内部では管理しているので、それに対するゲッターを追加したPRを送りました。&lt;br /&gt;
&lt;a href=&#34;https://github.com/robfig/cron/pull/21&#34;&gt;https://github.com/robfig/cron/pull/21&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;hugoが良さそう:a2bb1f14b5d42b66ef310d7ad0a0c1ac&#34;&gt;Hugoが良さそう&lt;/h1&gt;

&lt;p&gt;このサイトはOctopressで運用しています。&lt;br /&gt;
ですが、記事数が増えてきたためか、変更して作り直すのに5秒ぐらいかかってしまいます。&lt;br /&gt;
ちょっとした変更でも若干時間がかるため、かなりストレスがたまる仕組みです…&lt;/p&gt;

&lt;p&gt;同じく静的サイトを作成するソフトウェアで、Hugoというものがあるそうです。&lt;br /&gt;
&lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;https://github.com/spf13/hugo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Goで書かれており、作成する速度がかなり早いらしいので、乗り換えを検討中です。&lt;br /&gt;
残念ながら、良い感じのテンプレートがないので、まずはそこから作る必要がありそうです。&lt;/p&gt;

&lt;h1 id=&#34;テキストベースのtodoアプリを考えた:a2bb1f14b5d42b66ef310d7ad0a0c1ac&#34;&gt;テキストベースのToDoアプリを考えた&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Todo.txtが行けてないので自分に合ったやつを考える&lt;/li&gt;
&lt;li&gt;スペースと改行ででサブタスクを指定

&lt;ul&gt;
&lt;li&gt;箇条書きがそのままサブタスクになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;タスク名とサブタスク以外は全てオプションとして提供

&lt;ul&gt;
&lt;li&gt;優先度とかをベースシステムとしては持たない&lt;/li&gt;
&lt;li&gt;:due 2015-02-01とか、オプションとしてつける&lt;/li&gt;
&lt;li&gt;ベースはサブタスクとタスク名だけ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;多分こんな感じになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;タスク１ :due 2015-02-01
  サブタスク1 :due 2015-01-31
  サブタスク2 :due 2015-01-01 :repeat 1 week
    サブタスク3 :url http://example.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テキストベースで編集するのとは別に、CLIも作らないとダメですね。&lt;br /&gt;
フィルターとか、デフォルト値を入れて追加とかしにくいので…&lt;/p&gt;

&lt;p&gt;リポジトリはこれになります。&lt;br /&gt;
&lt;a href=&#34;https://github.com/ota42y/plaintodo&#34;&gt;https://github.com/ota42y/plaintodo&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;今やってるもの-これからやりたいこと:a2bb1f14b5d42b66ef310d7ad0a0c1ac&#34;&gt;今やってるもの＆これからやりたいこと&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;今やってること&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Goによるtumblr apiライブラリ&lt;/li&gt;
&lt;li&gt;進捗どうですか？時に画像もつけてほしくなった&lt;/li&gt;
&lt;li&gt;tumblr apiからランダムで取ってくるために、tumblrライブラリを作る

&lt;ul&gt;
&lt;li&gt;ついでにリブログもする&lt;/li&gt;
&lt;li&gt;node-tumblrがリブログしないので作った&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;goでやりたかっただけ&lt;/li&gt;

&lt;li&gt;&lt;p&gt;予定していた機能(投稿取得、リブログ)はだいたい完成&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;完全にカバーしてないけど、ほしい部分は出来た&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;自分用自動化システム&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Goである程度の大きさのアプリを作るテスト&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;日々の作業を自動化&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;twitterの公式アカウントチェック&lt;/li&gt;
&lt;li&gt;チャットのログ保存等&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;hubotとhttp経由でやりとり出来るため、botのバックエンドとしても使える&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;いずれはhubotを全て置き換えるようにしたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;結果通知部分はかなり良くない作りなので、そこは何とかしたい&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;そもそも設計もあまり良くない感じ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;進捗どうですか？の修正を入れたらしばらく放置&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;次にやろうとしているもの&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hugoのテンプレート作成&lt;/li&gt;

&lt;li&gt;&lt;p&gt;このサイトをベースに、色々不都合があるところを直す&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ToDoシステム(CLI)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;スペースを使った箇条書きがそのままサブタスクになる&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;テキストファイルを編集すると、そのままタスクに出来る&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;専用のCLIを使うことで、フィルターや繰り返しが出来る&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ToDoシステム(Android)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;普通にリストビューでタスク表示&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dropboxを使ってデータは共有&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Androidメインなのでないと辛い&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上記のCLIがある程度出来てから&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当面は下の3つを進めていく方向でいきます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JenkinsをHTTP経由で叩く</title>
      <link>http://ota42y.com/blog/2015/02/27/jenkins-remote-api/</link>
      <pubDate>Fri, 27 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2015/02/27/jenkins-remote-api/</guid>
      <description>

&lt;h1 id=&#34;まとめ:af624862a939b6a21fcbc09ac950f3c4&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;JenkinsはWebベースのUI

&lt;ul&gt;
&lt;li&gt;操作の敷居が低い&lt;/li&gt;
&lt;li&gt;使い込むと使いづらくなる&lt;/li&gt;
&lt;li&gt;反応速度&lt;/li&gt;
&lt;li&gt;複数のビルド実行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Remote access API

&lt;ul&gt;
&lt;li&gt;HTTP経由でJobを実行できる&lt;/li&gt;
&lt;li&gt;ページ表示を待たなくていいため高速&lt;/li&gt;
&lt;li&gt;プログラムから実行可能&lt;/li&gt;
&lt;li&gt;ただし、Jenkinsの仕様上、実行したビルドのビルド番号は解らない&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;jenkinsのjob実行は大変:af624862a939b6a21fcbc09ac950f3c4&#34;&gt;JenkinsのJob実行は大変&lt;/h1&gt;

&lt;p&gt;JenkinsはWebブラウザを使ってGUIで操作するため、&lt;br /&gt;
操作の敷居が低く、簡単に扱えるようになっています。&lt;/p&gt;

&lt;p&gt;ですが、ブラウザやJenkins本体の状態によってはとても遅くなってしまい、&lt;br /&gt;
ページを切り替えるのに3，4秒待つといった状態まで遅くなると、&lt;br /&gt;
ビルドをするのがとても辛くなります。&lt;/p&gt;

&lt;p&gt;また、パラメータの組み合わせの分だけビルドしようとすると、&lt;br /&gt;
さらに辛くなってしまいます。&lt;/p&gt;

&lt;p&gt;このような場合に、Jenkinsに用意されているRemote access APIを使うことで、&lt;br /&gt;
Jenkinsをプログラムから制御でき、反応の遅さに悩まされたり、&lt;br /&gt;
パラメータの数だけクリックをする必要性から逃れられます。&lt;/p&gt;

&lt;h1 id=&#34;remote-access-api:af624862a939b6a21fcbc09ac950f3c4&#34;&gt;Remote access API&lt;/h1&gt;

&lt;p&gt;詳しくはこちら&lt;br /&gt;
&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API&#34;&gt;https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Build&#34;&gt;https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Build&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;要するに、パラメータが無い場合は&lt;br /&gt;
&lt;code&gt;http://HOST/job/JOB_NAME/build&lt;/code&gt;
に、ある場合は&lt;br /&gt;
&lt;code&gt;http://HOST/job/JOB_NAME/buildWithParameters&lt;/code&gt;
にPOSTで投げるとビルドできます。&lt;/p&gt;

&lt;p&gt;パラメータの投げ方はフォームデータとしてでもいいですし、&lt;br /&gt;
&lt;code&gt;http://HOST/job/JOB_NAME/buildWithParameters?PARAMETER=Value&lt;/code&gt;
のように、URLに直接入れても大丈夫のようです。&lt;/p&gt;

&lt;h1 id=&#34;サンプルスクリプト:af624862a939b6a21fcbc09ac950f3c4&#34;&gt;サンプルスクリプト&lt;/h1&gt;

&lt;p&gt;3*3=9種類のビルドを一気に実行するスクリプトです&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;open-uri&#39;
require &#39;net/http&#39;

platforms = [&amp;quot;ios&amp;quot;,  &amp;quot;android&amp;quot;, &amp;quot;windows&amp;quot;]
settings =  [&amp;quot;debug&amp;quot;,&amp;quot;release&amp;quot;, &amp;quot;store&amp;quot;]

platforms.product(settings).each do |platform, setting|
  params = {:PLATFORM =&amp;gt; platform, :SETTING =&amp;gt; setting}
  p params

  url = URI.parse(&#39;http://HOST/job/JOB_NAME/buildWithParameters&#39;)
  req = Net::HTTP::Post.new(url.path)
  req.basic_auth &#39;NAME&#39;, &#39;PASSWORD&#39;
  req.set_form_data(params)
  res = Net::HTTP.new(url.host, url.port).start {|http| http.request(req) }
  case res
  when Net::HTTPSuccess, Net::HTTPRedirection
    p &amp;quot;OK&amp;quot;
  else
    res.value
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;問題点:af624862a939b6a21fcbc09ac950f3c4&#34;&gt;問題点&lt;/h1&gt;

&lt;p&gt;Jenkinsの仕様上、キューを入れた段階でビルド番号が確定しません。&lt;br /&gt;
そのため、実行したビルドが何番のビルドとして登録されたかをレスポンスから知ることは出来ません。ss&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年08週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-08/</link>
      <pubDate>Sun, 22 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-08/</guid>
      <description>

&lt;h1 id=&#34;todo-txtは思想は良いけど実際使うと微妙:a32b2cc8e9c86409bd3aff718e1a3967&#34;&gt;Todo.txtは思想は良いけど実際使うと微妙&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://todotxt.com/&#34;&gt;Todo.txt&lt;/a&gt;
テキストオンリーでTodo管理ができる手法です。&lt;br /&gt;
ファイルをDropboxに置くことで、&lt;br /&gt;
どこでも同期してTodo管理ができるようになります。&lt;/p&gt;

&lt;p&gt;本当に単なるテキストなので管理が簡単で、エディタで編集も容易です。&lt;br /&gt;
コマンドラインから条件を指定して表示できるのも便利で良い感じでした。&lt;br /&gt;
RTM CLIのオフライン版みたいな使い勝手です。&lt;/p&gt;

&lt;p&gt;ただし、サブタスクが使えないという問題があります。
一応プラグインとして用意されてはいますが、&lt;br /&gt;
そうすると他のプラグインが使えなくなってしまうため、別の問題が発生してしまいます。&lt;/p&gt;

&lt;p&gt;このテキストベースという考え方はすごく良く、かつ作るのもそんなに大変じゃなさそうなので、&lt;br /&gt;
自分で作ってみた方が早そうです。&lt;/p&gt;

&lt;h1 id=&#34;windown-on-linuxで開発環境を整える:a32b2cc8e9c86409bd3aff718e1a3967&#34;&gt;Windown on Linuxで開発環境を整える&lt;/h1&gt;

&lt;p&gt;Windowsで開発環境を整えるのは恐ろしく大変です。&lt;br /&gt;
幸いなことに私のWindowsマシンは十分なスペックがあるため、&lt;br /&gt;
VMware上にLinuxを立てて、SSHとファイル共有でしのぐことにしました。&lt;/p&gt;

&lt;p&gt;IDEとかはWindows側で動かしているため、IDEの実行ボタンが使えなくなるのがかなりつらいですが、&lt;br /&gt;
Windows上で開発するよりかは幾分マシになっていると思います。&lt;/p&gt;

&lt;p&gt;ただし、IDEからデバッガが使えないため、そのあたりでつらい現実が待っている気がします。&lt;br /&gt;
実行環境はリモートで、みたいなことができれば良いのですが…&lt;/p&gt;

&lt;p&gt;普段ターミナルでしか作業をしないのであれば、ターミナルの中が変わるだけなので問題ないと思います。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>