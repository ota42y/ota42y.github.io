<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>おおたの物置</title>
    <link>http://ota42y.com/</link>
    <description>Recent content on おおたの物置</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 19 Dec 2016 22:37:37 +0900</lastBuildDate>
    <atom:link href="http://ota42y.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>committee &#43; prmds でJSON Schemaをいい感じに運用する</title>
      <link>http://ota42y.com/blog/2016/12/19/finc-advent/</link>
      <pubDate>Mon, 19 Dec 2016 22:37:37 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/12/19/finc-advent/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2016/fincdevelopers&#34;&gt;FiNC Developer Advent Calendar 2016&lt;/a&gt;の19日目の記事です。&lt;/p&gt;

&lt;h1 id=&#34;要約:9a41655829cae90fa2773a6244b1f941&#34;&gt;要約&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;リクエスト・レスポンス形式のドキュメントはメンテが大変&lt;/li&gt;
&lt;li&gt;メンテされていなくても気がつかないため放置され気味&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/interagent/committee&#34;&gt;committee&lt;/a&gt;でJSON Schemaに実装が沿っているかを確認可能&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/interagent/prmd&#34;&gt;prmd&lt;/a&gt;でJSON Schemaを楽に書ける＋人が読めるドキュメントが生成できる&lt;/li&gt;
&lt;li&gt;メンテされていない事が検出できるので続く（はず&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;api作成時のリクエスト-レスポンス形式問題:9a41655829cae90fa2773a6244b1f941&#34;&gt;API作成時のリクエスト・レスポンス形式問題&lt;/h1&gt;

&lt;p&gt;サーバとクライアントで並行開発しながらAPIを作成する場合、以下のようにリクエスト・レスポンス形式を整えにくいという問題があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;リクエストの形式が想定と違う

&lt;ul&gt;
&lt;li&gt;想定外のキーを送ってくる&lt;/li&gt;
&lt;li&gt;構造が想定していない構造&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;レスポンスに知らないキーが含まれている&lt;/li&gt;
&lt;li&gt;同じデータなのにエンドポイントによって形式が違う

&lt;ul&gt;
&lt;li&gt;enumの数値だったり、対応する文字列だったり&lt;/li&gt;
&lt;li&gt;カテゴリ名を返していたりカテゴリIDを返していたり&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コミュニケーションや、APIに関するドキュメントをきちんとメンテしていれば回避可能な問題ですが、&lt;br /&gt;
以下の2つを保証する必要があり、何のサポートなしに維持するのはとても大変です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;形式が全てドキュメント化されている&lt;/li&gt;
&lt;li&gt;ドキュメントと実装が揃っている事を保証する&lt;/li&gt;
&lt;li&gt;同じデータは同じ形式になる事を保証する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そこで、今回話題にするJSON Schema+committee+prmdを導入することで、この問題を大幅に解決できます。&lt;/p&gt;

&lt;h1 id=&#34;json-schemaで仕様を定義する:9a41655829cae90fa2773a6244b1f941&#34;&gt;JSON Schemaで仕様を定義する&lt;/h1&gt;

&lt;p&gt;JSON SchemaとはJSONを用いてデータを記述する際の形式の1つで、主にアノテーションやバリデーションを目的としているものらしいです。&lt;br /&gt;
詳しくはこちら&lt;br /&gt;
&lt;a href=&#34;http://json-schema.org/&#34;&gt;http://json-schema.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;例えば以下のように定義すると、&lt;code&gt;GET /v1/friends&lt;/code&gt;が、access_tokenをパラメータとして必ず取り、戻り値には必ずfriendsとreccommendsというキーが含まれているという事を定義できます。
また、friendsとreccomendsの具体的な内容については別に定義して読み込みますが、同じ景色であるということも表現しています。
（なお、実際はもっと情報が多く、この部分だけでは動きません）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;title&amp;quot;: &amp;quot;show self friends with recommends&amp;quot;,
  &amp;quot;href&amp;quot;: &amp;quot;/v1/friends&amp;quot;,
  &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
    &amp;quot;required&amp;quot;: [
      &amp;quot;access_token&amp;quot;
    ],
    &amp;quot;properties&amp;quot;: {
      &amp;quot;access_token&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
      }
    }
  },
  &amp;quot;targetSchema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
    &amp;quot;required&amp;quot;: [
      &amp;quot;friends&amp;quot;,
      &amp;quot;recommends&amp;quot;
    ],
    &amp;quot;properties&amp;quot;: {
      &amp;quot;friends&amp;quot;: {
        &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/user/definitions/friends&amp;quot;
      },
      &amp;quot;recommends&amp;quot;: {
        &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/user/definitions/friends&amp;quot;
      }
    }          
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSON Schemaにそって定義を書くことで、形式が統一されプログラムから処理しやすくなるのと、他の場所の定義を共有できるため、&lt;br /&gt;
同じデータなのに人によって違う構造になるような問題をを解決しやすくなります。&lt;/p&gt;

&lt;h1 id=&#34;committee:9a41655829cae90fa2773a6244b1f941&#34;&gt;committee&lt;/h1&gt;

&lt;p&gt;JSON Schema自体はただの形式なのでそれ自体は特に何も無いですが、統一された形式になるため、容易にプログラムから処理を行う事ができます。&lt;/p&gt;

&lt;p&gt;rubygemの&lt;a href=&#34;https://github.com/interagent/committee&#34;&gt;committee&lt;/a&gt;はその発想に沿ったものです。&lt;br /&gt;
このgemはRackのミドルウェアとして動作し、JSON Schemaを読み込ませることで、&lt;br /&gt;
リクエストやレスポンスが定義にそっているかをチェック、そっていない場合にエラーにするなどの処理を行います。&lt;br /&gt;
また、テストにおいても形式が正しいかをチェックできます。&lt;/p&gt;

&lt;p&gt;このgemにより、必須パラメーターが足りない場合や、違うデータが入っている場合にエラーを起こすことができ、&lt;br /&gt;
JSON Schemaの形式と実際の形式とがそろっていることを保証できます。&lt;/p&gt;

&lt;p&gt;さらに、JSON Schemaには形情報も書けることを利用し、数値でくるべきところが文字列だった場合にエラーを返すことや、&lt;br /&gt;
日付フォーマットの文字列をdatetimeに変換、GETリクエストの時に文字列を数値に変換してくれたりと色々な便利機能があります。&lt;/p&gt;

&lt;h1 id=&#34;json-schema-committeeの利点と問題点:9a41655829cae90fa2773a6244b1f941&#34;&gt;JSON Schema+committeeの利点と問題点&lt;/h1&gt;

&lt;p&gt;JSON Schemaとcommitteeを利用することで、以下が可能になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レスポンス・リクエスト形式を構造化できる&lt;/li&gt;
&lt;li&gt;実装がJSON Schemaに沿っているか自動チェック&amp;amp;変換できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これで、当初の問題だったドキュメントが実装と乖離していく問題は大幅に解決が可能ですが、代わりに以下の問題が出てきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON Schemaを人間が書くのが大変&lt;/li&gt;
&lt;li&gt;JSON Schemaを人間が読むのもつらい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSONは人間が直接読み書きするドキュメントには（たぶん）適さないです。&lt;br /&gt;
そのため、たとえ利点があったとしてもJSON Schemaを作成するのがとても大変になってしまいます。&lt;/p&gt;

&lt;p&gt;それを解決するのが&lt;a href=&#34;https://github.com/interagent/prmd&#34;&gt;prmd&lt;/a&gt;です。&lt;/p&gt;

&lt;h1 id=&#34;prmd:9a41655829cae90fa2773a6244b1f941&#34;&gt;prmd&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/interagent/prmd&#34;&gt;prmd&lt;/a&gt;はJSON SchemaをYAMLで定義することや、複数のファイルに分割して定義、&lt;br /&gt;
JSON Schemaを元に人間が読めるmarkdownドキュメントを生成できるgemです。&lt;/p&gt;

&lt;p&gt;prmdでは以下のようにYAMLを書くことで、先ほどのようなJSON Schemaを出力できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- title: show self friends with recommends
  href: /v1/friends
  method: GET
  rel: show
  schema:
    type: object
    required:
      - access_token
    properties:
      access_token:
        type: string
  targetSchema:
    type: object
    required:
      - friends
      - recommends
    properties:
      friends:
        $ref: #/definitions/user/definitions/friends
      recommends:
        $ref: #/definitions/user/definitions/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、マークダウンのドキュメントも以下のように出してくれます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-12-19-prmd_document.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-12-19-prmd_document.png&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これにより、JSON Schemaを人間が読み書きできるようになります。&lt;/p&gt;

&lt;h1 id=&#34;実際の開発手順:9a41655829cae90fa2773a6244b1f941&#34;&gt;実際の開発手順&lt;/h1&gt;

&lt;p&gt;以下のように進めると、JSON Schemaの利点を最大限活用できると思います。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;実装前にYAMLでレスポンス・リクエスト形式を定義&lt;/li&gt;
&lt;li&gt;prmdでJSON Schemaとmarkdownを出力&lt;/li&gt;
&lt;li&gt;markdownはクライアント側に事前共有&lt;/li&gt;
&lt;li&gt;JSON Schemaの通りに動いているかテストしつつ開発&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という流れで、リクエスト・レスポンス形式に関係する部分は、かなりしっかりと開発を進めることができ、&lt;br /&gt;
平行して開発を行っても手戻りやコミュニケーションロスを大幅に減らせます。&lt;/p&gt;

&lt;p&gt;全体としては以下の図のように動いています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-12-19-committee_prmd.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-12-19-committee_prmd.png&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;まとめ:9a41655829cae90fa2773a6244b1f941&#34;&gt;まとめ&lt;/h1&gt;

&lt;h2 id=&#34;解決すること:9a41655829cae90fa2773a6244b1f941&#34;&gt;解決すること&lt;/h2&gt;

&lt;p&gt;正しく導入することで以下の問題を解決できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;実装とドキュメントが乖離しないこと&lt;/li&gt;
&lt;li&gt;データ構造を揃えること&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;解決しないこと:9a41655829cae90fa2773a6244b1f941&#34;&gt;解決しないこと&lt;/h2&gt;

&lt;p&gt;今回のはあくまでリクエスト・レスポンス形式に絞られているため、
以下の問題は解決しません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レスポンスのデータの内容が意図通りであること

&lt;ul&gt;
&lt;li&gt;形式はあっているが振る舞いが想定しているものかはチェックしません&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;エラー形式の保証

&lt;ul&gt;
&lt;li&gt;レスポンス形式は一種類のみで、異常系は対象外です…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;リクエスト・レスポンス以外のドキュメント

&lt;ul&gt;
&lt;li&gt;仕様やデータの意味等は対象外です&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;未解決問題:9a41655829cae90fa2773a6244b1f941&#34;&gt;未解決問題&lt;/h2&gt;

&lt;p&gt;以下のような問題が出ており、解決方法を模索中です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ドキュメントの読みやすさ&lt;/li&gt;
&lt;li&gt;クライアント側へ配布するアクセス用ライブラリの生成&lt;/li&gt;
&lt;li&gt;バージョニング対応&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;最後に:9a41655829cae90fa2773a6244b1f941&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;JSON Schema+committee+prmdは全てを解決するものではありませんが、クライアント・サーバ間の形式という、認識の齟齬が起こりやすい境界の部分にはとても効果がある組み合わせでした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shinjuku.rb #42でRubocopについて話した</title>
      <link>http://ota42y.com/blog/2016/10/27/shinjuku-rb-42/</link>
      <pubDate>Thu, 27 Oct 2016 15:37:37 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/10/27/shinjuku-rb-42/</guid>
      <description>

&lt;p&gt;Shinjuku.rb #42に行ってきました。&lt;br /&gt;
&lt;a href=&#34;http://shinjukurb.connpass.com/event/42245/&#34;&gt;http://shinjukurb.connpass.com/event/42245/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回はコード分析・解析系のgemがテーマで、私はRubocopについて発表しました。&lt;/p&gt;

&lt;h1 id=&#34;発表内容:29032400095a17eb3902d8af1c46e25a&#34;&gt;発表内容&lt;/h1&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/sotthH5RjKQHEg&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/ota42y/shinjukurb-42&#34; title=&#34;Shinjukurb 42&#34; target=&#34;_blank&#34;&gt;Shinjukurb 42&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&#34;_blank&#34; href=&#34;//www.slideshare.net/ota42y&#34;&gt;ota42y&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Rubocopはソースコードをパーサgemを使ってASTに変換し、ちゃんとどういう構造なのかを見ていて凄くちゃんと解析していたので凄いなーと思う反面、
自分でルールを追加するのもの凄く大変そうでした。&lt;/p&gt;

&lt;p&gt;また、こういったコードの整形ツールは自転車小屋の議論になって導入するの凄く大変だよね…という闇の深いディスカッションが行われました…
やはり何処も苦労するところは同じようです…(´・_・`)&lt;/p&gt;

&lt;h1 id=&#34;その他:29032400095a17eb3902d8af1c46e25a&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;リファクタリングを支援してくれるgemが紹介されていましたが、
基本的に既存部分を切り出す→新しいロジックと同時に実行して実行結果をチェック→結果をDBとかに保存する、
といった手順を踏んでおり、どれもやることは変わらず、rubyのリファクタリング手法としては一般的な方法なのかな…？と思いました。
(稀にしか起きない問題や、副作用をどう消すかといった部分は別途考える必要ありそう)&lt;/p&gt;

&lt;p&gt;Rubocopがやってくれる一般的なものではなく、もっと自分たち向けのチェック項目が欲しいけど、
ルール追加がめちゃくちゃ大変だなーと思っていたら、凄くいいgemの発表がありました。&lt;br /&gt;
&lt;a href=&#34;https://github.com/soutaro/querly&#34;&gt;soutaro/querly: Query Method Calls from Ruby Programs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;メソッドが呼ばれているかをちゃんと解析してチェックできるので、&lt;br /&gt;
ヤバそうなメソッドや使い方が怪しいやつとかを抽出できるらしく、凄く良さそうでした。&lt;/p&gt;

&lt;h1 id=&#34;他の方々の資料:29032400095a17eb3902d8af1c46e25a&#34;&gt;他の方々の資料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/treby/reading-suture&#34;&gt;reading suture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/threetreeslight/ccf9e20e24cc3ee0c459b25de74d1688&#34;&gt;scientist.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ginza.rb 第40回でprmdについて話した</title>
      <link>http://ota42y.com/blog/2016/10/22/ginza-rb-40/</link>
      <pubDate>Sat, 22 Oct 2016 22:37:37 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/10/22/ginza-rb-40/</guid>
      <description>

&lt;p&gt;Ginza.rb 第40回に行ってきました。&lt;br /&gt;
&lt;a href=&#34;https://ginzarb.doorkeeper.jp/events/52895&#34;&gt;https://ginzarb.doorkeeper.jp/events/52895&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回は参加者がLTをする形式で、14人ぐらい？LTがありました。&lt;/p&gt;

&lt;h1 id=&#34;発表内容:421c2687308ebf9804295039a919603d&#34;&gt;発表内容&lt;/h1&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/Hi86VMANvbpUTn&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/ota42y/ginza-rb-40&#34; title=&#34;prmdのドキュメントが読みやすくなる話&#34; target=&#34;_blank&#34;&gt;prmdのドキュメントが読みやすくなる話&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&#34;_blank&#34; href=&#34;//www.slideshare.net/ota42y&#34;&gt;ota42y&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;JSON Schema+prmd+committeeは、ドキュメントと実態を揃えられる＆揃える利点を増やしてくれるので、とてもいい構成だと思います。&lt;/p&gt;

&lt;p&gt;また、prmdが出力するドキュメントにはcurlのコマンドやレスポンスのJSONが整った形式でついているため、
クライアント側としても手軽にAPIをテストすることができてとても有用なので、
最悪JSON Schema+prmdだけでも導入すると良いと思います。
(元クライアントからの意見)&lt;/p&gt;

&lt;h1 id=&#34;その他:421c2687308ebf9804295039a919603d&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;ruby c extensionが凄い面白かったのでちょっと触ってみようと思います(｀・ω・´)&lt;/p&gt;

&lt;h1 id=&#34;他の方々の資料:421c2687308ebf9804295039a919603d&#34;&gt;他の方々の資料&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;#ginzarb&lt;/code&gt;のハッシュタグを見て見つかったものだけ上げています&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://koic.hatenablog.com/entry/2016/10/18/000000&#34;&gt;Ginza.rb 第40回 - koicの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://keyamb.hatenablog.com/entry/2016/10/19/080000&#34;&gt;Ginza.rb で &amp;ldquo;grifork&amp;rdquo; について発表してきた - weblog of key_amb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kazupon/zi-fen-falseshi-tutamofalsewomisetemiyou&#34;&gt;自分の使ったものをみせてみよう // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://esa-pages.io/p/sharing/2927/posts/159/8a1e5fb77ac4be192dd5.html&#34;&gt;勉強会/ginza.rb #40 - esa-pages.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kyuden/rails-authorization&#34;&gt;Rails Authorization // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/muryoimpl1/buoys-gem&#34;&gt;buoys gem の紹介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>前職を退職しました</title>
      <link>http://ota42y.com/blog/2016/09/15/sea-bream-shock/</link>
      <pubDate>Thu, 15 Sep 2016 19:45:49 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/09/15/sea-bream-shock/</guid>
      <description>&lt;p&gt;6月末に前職のソーシャルゲーム会社を退職しました。&lt;br /&gt;
今はRoRエンジニアとして、ヘルスケアベンチャーで働いてます(｀・∀・´≡｀・∀・´)&lt;/p&gt;

&lt;p&gt;欲しい物リストは以下になります。&lt;br /&gt;
&lt;a href=&#34;https://www.amazon.co.jp/registry/wishlist/11D376T6XISM6/ref=cm_sw_r_tw_ws_HMYoxbW6MSKSA&#34;&gt;https://www.amazon.co.jp/registry/wishlist/11D376T6XISM6/ref=cm_sw_r_tw_ws_HMYoxbW6MSKSA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-09-15-lovelive-sea-bream-shock.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-09-15-lovelive-sea-bream-shock.png&#34; width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>恋になりたいAQUARIUMの聖地、伊豆・三津シーパラダイスに行ってきた</title>
      <link>http://ota42y.com/blog/2016/04/28/lovelive-sun-aquarium/</link>
      <pubDate>Thu, 28 Apr 2016 00:21:46 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/04/28/lovelive-sun-aquarium/</guid>
      <description>

&lt;p&gt;恋になりたいAQUARIUMの聖地、伊豆・三津シーパラダイスに行って来ました。&lt;br /&gt;
発売日当日に行きましたが、平日なので他に同じ目的で来ている人は見かけませんでした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-logo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-logo.jpg&#34; width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;聖地の場所:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;聖地の場所&lt;/h1&gt;

&lt;p&gt;このPVのほとんどは&lt;a href=&#34;http://www.izuhakone.co.jp/seapara/&#34;&gt;伊豆・三津シーパラダイス&lt;/a&gt;がモデルになっています。&lt;br /&gt;
みとしー自体も特に隠しておらず、公式サイトにモデルになったと書いてあります。&lt;br /&gt;
（2016/04/27現在）&lt;/p&gt;

&lt;p&gt;行き方は三島から伊豆箱根鉄道の伊豆長岡駅で下車し、&lt;br /&gt;
伊豆・三津シーパラダイス行きのバスで２０分程度です。&lt;/p&gt;

&lt;h1 id=&#34;シーンごとの場所:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;シーンごとの場所&lt;/h1&gt;

&lt;h2 id=&#34;地図:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;地図&lt;/h2&gt;

&lt;p&gt;公式ページの&lt;a href=&#34;http://www.izuhakone.co.jp/seapara/mapshop/index.html/&#34;&gt;地図&lt;/a&gt;にプロットするとだいたい以下のようになります。&lt;br /&gt;
実際に行く人は参考にしてください(クリックで拡大)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-map.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-map.jpg&#34;  width=&#34;70%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;また以下では&lt;a href=&#34;http://www.nicovideo.jp/watch/1460123060&#34;&gt;視聴動画&lt;/a&gt;にある部分はその画像も乗っけておきます&lt;/p&gt;

&lt;h2 id=&#34;入り口:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;入り口&lt;/h2&gt;

&lt;p&gt;見たとおり入り口です。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-enter-anime.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-enter-anime.jpg&#34; width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-enter-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-enter-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;バスは何種類かあるらしく、行きも帰りもPVの色ではありませんでした。&lt;br /&gt;
もしかしたら沼津行きのバスがこの色なのかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;ショースタジアム付近:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;ショースタジアム付近&lt;/h2&gt;

&lt;p&gt;PVの中で１番で多く使われている場所です。&lt;br /&gt;
ただし、当然ながらステージ側は入れないため、構図が似ている写真は撮れませんでした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;皆が掃除？してるシーンや曜ちゃんが遅れて登場するシーンなどは全部このステージ前です。
&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-wash-anime.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-wash-anime.jpg&#34; width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-you-anime.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-you-anime.jpg&#34; width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;イルカジャンプ:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;イルカジャンプ&lt;/h3&gt;

&lt;p&gt;ステージ左側の階段がいるかが飛ぶシーンのやつです。&lt;br /&gt;
（この日は階段の上ではなくステージ上で同じパフォーマンスをしていました）&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-dolphin-anime.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-dolphin-anime.jpg&#34; width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-dolphin-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-dolphin-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;水槽前ステージ:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;水槽前ステージ&lt;/h3&gt;

&lt;p&gt;手前の水槽前ステージの部分が、ヨハネ、ルビィ、梨子がイルカに水をかけられるシーンと、ルビィがトドと戯れるシーンになります。&lt;br /&gt;
なお、トドは実際にいてステージ部分まで降りてきてくれます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-stage-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-stage-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-yrr-anime.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-yrr-anime.jpg&#34; width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-ruby-anime.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-ruby-anime.jpg&#34; width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;花丸のお茶:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;花丸のお茶&lt;/h3&gt;

&lt;p&gt;ステージ中央から右を向くと花丸がお茶を飲んでいるシーンになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-zura-anime.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-zura-anime.jpg&#34; width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-zura-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-stadium-zura-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;曜ちゃん捜索:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;曜ちゃん捜索&lt;/h3&gt;

&lt;p&gt;ちょうどショースタジアムの真後ろになります。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-search-you-anime.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-search-you-anime.jpg&#34; width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-search-you-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-search-you-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;皆で探そうとしてると位置的にぴったりだったり、光るクラゲの場所からは全然遠かったりと、&lt;br /&gt;
結構場所も考慮した上でPVが作られているのがわかります&lt;/p&gt;

&lt;h2 id=&#34;ヨハネとイルカ像:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;ヨハネとイルカ像&lt;/h2&gt;

&lt;p&gt;ヨハネがポーズしてるシーンです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-yoshiko-anime.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-yoshiko-anime.jpg&#34; width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-yoshiko-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-yoshiko-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;曇りなのでわかりにくいですが肉眼だとうっすらと富士山が見えたので、多分晴れればあの構図で写真を撮ることができます。&lt;/p&gt;

&lt;h2 id=&#34;一年集合:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;一年集合&lt;/h2&gt;

&lt;p&gt;建物内部の展示コーナーです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-1year-anime.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-1year-anime.jpg&#34; width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-1year-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-1year-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;クラゲ万華鏡水槽:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;クラゲ万華鏡水槽&lt;/h2&gt;

&lt;p&gt;本当にいろんな色に光ってて凄かったです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-jellyfish-anime.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-jellyfish-anime.jpg&#34; width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-jellyfish-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-jellyfish-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;３年生集合:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;３年生集合&lt;/h2&gt;

&lt;p&gt;上記のクラゲの所に加えて以下の２カ所です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-3year-1-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-3year-1-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-3year-2-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-3year-2-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ショーステージ:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;ショーステージ&lt;/h2&gt;

&lt;p&gt;うちっちーが出てくるところです。&lt;br /&gt;
なお、実際にうちっちーはいませんでした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-show-stage-all-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-show-stage-all-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-show-stage-uchi-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-show-stage-uchi-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;後ろの監視カメラがまさにそれです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-show-stage-yochika-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-show-stage-yochika-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;千歌ちゃんがうちっちーを覗き込むシーンで後ろにある黄色いのはステージ用のこれです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-show-stage-chika-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-show-stage-chika-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;９人集合:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;９人集合&lt;/h2&gt;

&lt;p&gt;上手く写真が撮れませんでした…&lt;br /&gt;
入り口近くの水槽にセイウチがいて岩っぽい感じなので、上手く調節すればとれると思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-all-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-all-photo.jpg&#34;  width=&#34;20%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なお、ペンギンはこの水槽前を歩いたりはしません&lt;/p&gt;

&lt;h2 id=&#34;やまや:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;やまや&lt;/h2&gt;

&lt;p&gt;PVの曲が始まる前、曜ちゃんが自転車をこいでいるシーンの後ろの建物です。&lt;br /&gt;
&lt;a href=&#34;http://tabelog.com/shizuoka/A2205/A220501/22014449/&#34;&gt;http://tabelog.com/shizuoka/A2205/A220501/22014449/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.yamaya-ryokan.co.jp/&#34;&gt;http://www.yamaya-ryokan.co.jp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;伊豆・三津シーパラダイス行きのバスの、農業会前か三津郵便局で降りればすぐです。&lt;br /&gt;
みとしーまで歩いて５分ぐらいなので行きによるといいと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-yamaya-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-yamaya-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;美味しそうなのですが、店内改装で１０月までお休みとのこと…&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-yamaya-close-photo.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-yamaya-close-photo.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;その他:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;その他&lt;/h1&gt;

&lt;h2 id=&#34;サンシャインポスター:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;サンシャインポスター&lt;/h2&gt;

&lt;p&gt;みとしーにはいくつかサンシャインのポスターがありました。&lt;br /&gt;
特にスタジアム横の通路にはかなり大きめのポスターがあり、相当な力のいれようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-poster-1.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-poster-1.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-poster-2.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-poster-2.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-poster-3.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-poster-3.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ラッピング列車:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;ラッピング列車&lt;/h2&gt;

&lt;p&gt;みとしーへのアクセスに便利な伊豆箱根鉄道では、ラブライブ！サンシャインのラッピング列車が走っています。&lt;br /&gt;
&lt;a href=&#34;http://www.izuhakone.co.jp/railway/news/9229/index.html/&#34;&gt;http://www.izuhakone.co.jp/railway/news/9229/index.html/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;内部の広告もラブライブ！一色だったりとなかなか豪勢です。&lt;br /&gt;
ドアに各キャラが書かれていますが、停車中はドアの写真が撮れないので注意が必要です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-train-1.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-train-1.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-train-2.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-train-2.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-04-28-lovelive-sun-aquarium-train-3.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-04-28-lovelive-sun-aquarium-train-3.jpg&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;まとめ:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;地図を見るとわかりますが、スタジアムからいなくなった曜ちゃんを皆で探してるシーンがスタジアムのすぐ裏だったり、&lt;br /&gt;
実際に曜ちゃんがいるクラゲ万華鏡水槽はスタジアム付近で探してても絶対見つからない位置だったり、&lt;br /&gt;
リアルの位置関係を考慮するとPVに書かれたドラマがより一層深く楽しめるのでおすすめです。&lt;/p&gt;

&lt;h1 id=&#34;補足事項:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;補足事項&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;バスはそんなに本数がなく、一般の人も結構使うので要注意です&lt;/li&gt;
&lt;li&gt;２年生が乗っていた船に関してはわかりませんでした&lt;/li&gt;
&lt;li&gt;メインで踊っているところはありませんでした。他の水族館か、完全オリジナルだと思います&lt;/li&gt;
&lt;li&gt;最後の曜ちゃんが持ってる置物は、みとしーの売店には売っていませんでした&lt;/li&gt;
&lt;li&gt;みとしー自体も結構楽しめます&lt;/li&gt;
&lt;li&gt;三島の桜屋のうなぎはとてもおいしいので行きや帰りに行くとおすすめです

&lt;ul&gt;
&lt;li&gt;ただし土日は凄い並びます&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tabelog.com/shizuoka/A2205/A220501/22000127/&#34;&gt;http://tabelog.com/shizuoka/A2205/A220501/22000127/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;他ラブライブエントリ:2b1dcf63b609a9afbe16d61411e6550c&#34;&gt;他ラブライブエントリ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/01/22/lovelive-pixiv-illust-2015/&#34;&gt;2015年のpixiv内ラブライブイラストの推移&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/02/04/lovelive-pixiv-character-2016/&#34;&gt;2015年のpixiv内ラブライブイラストの分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/03/16/lovelive-truck/&#34;&gt;ラブライブ！ありがとうトラックの軌跡をまとめた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ラブライブ！ありがとうトラックの軌跡をまとめた</title>
      <link>http://ota42y.com/blog/2016/03/16/lovelive-truck/</link>
      <pubDate>Wed, 16 Mar 2016 00:33:01 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/03/16/lovelive-truck/</guid>
      <description>

&lt;p&gt;ラブライブ！μ’sありがとうProjectの一環として、ありがとうトラックが日本全国を巡っているそうです。&lt;br /&gt;
&lt;a href=&#34;http://news.lovelive-anime.jp/app-def/S-102/news/?p=11201&#34;&gt;http://news.lovelive-anime.jp/app-def/S-102/news/?p=11201&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;公式Twitterで毎日どこにいるかがツイートされており、&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/709375500943233024&#34;&gt;3/14に折り返しに入った&lt;/a&gt;とのことですが、
実際どのくらい回ったのかが細切れになっていてわからなかったので、地図上にまとめました。&lt;/p&gt;

&lt;h1 id=&#34;ありがとうトラックの軌跡:d1b7e6d5fba8c33792c8fe6d44bd9ea1&#34;&gt;ありがとうトラックの軌跡&lt;/h1&gt;

&lt;p&gt;写真付きツイートで位置が判明したものを表示しています。&lt;br /&gt;
オレンジ色がありがとうトラック１号の位置、白色がありがとうトラック２号の位置になります。&lt;/p&gt;

&lt;p&gt;クリックすると大きい画面になるため、そちらの方が見やすいと思います。&lt;br /&gt;
&lt;a href=&#34;https://www.google.com/maps/d/edit?mid=zwHEw-bSdRv8.kZB8IIDaCuzg&amp;amp;usp=sharing&#34;&gt;ありがとうの軌跡&lt;/a&gt;&lt;/p&gt;

&lt;iframe src=&#34;https://www.google.com/maps/d/u/3/embed?mid=zwHEw-bSdRv8.kZB8IIDaCuzg&#34; width=&#34;640&#34; height=&#34;480&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;3-15日の状況:d1b7e6d5fba8c33792c8fe6d44bd9ea1&#34;&gt;3/15日の状況&lt;/h2&gt;

&lt;p&gt;１号は北海道まで太平洋側を北上していき、その後日本海側を南に進んでいるようです。
２号は名古屋~奈良~四国から九州へと、太平洋側を南に進んでいます。&lt;/p&gt;

&lt;p&gt;この後予定では１号は京都から岡山の方へ行き、２号はなんと沖縄に渡り、その後九州の西側へ行くようです。
１号は北海道から岡山までとかなり移動していますが、２号も沖縄に行って帰ってくるため、かなりの距離を移動するようです。
日本横断は相当大変ですね…&lt;/p&gt;

&lt;h2 id=&#34;3-24の状況:d1b7e6d5fba8c33792c8fe6d44bd9ea1&#34;&gt;3/24の状況&lt;/h2&gt;

&lt;p&gt;沖縄へフェリーで渡るのはまる２日以上かかるようです。遠いですね…&lt;br /&gt;
また、残り一週間となりましたが残すは１号が広島と岡山、２号が福岡のみになりました。
残り日数的に東京に戻ってもライブまで時間が余りそうな感じなので、3/28か29あたりから東京も回りそうですね。&lt;/p&gt;

&lt;h2 id=&#34;3-30の状況:d1b7e6d5fba8c33792c8fe6d44bd9ea1&#34;&gt;3/30の状況&lt;/h2&gt;

&lt;p&gt;ついに日本全国を回り終わり、東京に戻ってきています。&lt;br /&gt;
私も初めて実物を見ることができました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-03-16-lovelive-truck.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-03-16-lovelive-truck.jpg&#34;  width=&#34;70%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-1の状況:d1b7e6d5fba8c33792c8fe6d44bd9ea1&#34;&gt;4/1の状況&lt;/h2&gt;

&lt;p&gt;全ての日程が終了し、無事車庫に戻ったようです。&lt;br /&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/715899493774987264&#34;&gt;最後のツイートによると&lt;/a&gt;走行距離は2台合わせて14530Kmとのことです。&lt;br /&gt;
東京から南極点までの距離が14Kmなので南極点まで余裕で行くぐらいの距離を走ってたようです…&lt;/p&gt;

&lt;h1 id=&#34;faq:d1b7e6d5fba8c33792c8fe6d44bd9ea1&#34;&gt;FAQ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;どうやってまとめたの？&lt;br /&gt;
ツイートから気合いで探しています。
Google Mapsからそれらしい場所を探し、ストリートビューで写真と一致している場所を探しています。駅前やランドマークとの写真が多いため、思ったよりも簡単に場所が見つかります。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;若干ずれている気がするけど？&lt;br /&gt;
Google Mapsの地図編集画面から直接ストリートビューを見られないため、数百メートルのずれはどうしても出てきてしまいます。ご了承ください。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;いくつか無い写真があるけど？&lt;br /&gt;
地理にはかなり疎いため、いくつかわからない場所があります。もしその場所を知っている方は情報を頂けると幸いです。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;実物を見たいんだけどどこに行けばいい？&lt;br /&gt;
実際にどこにいるかの予測はできませんが、多くの場合県名になるようなかなり大きめの駅周辺にいるようです。
とはいえ公式Twitterが前日にどこに行くかつぶやいてくれるので、それを頼りに探すのが良いと思います。
見損ねてもたぶん最後にドームに来ると思われるので、ライブ参加者はもう一度見るチャンスがあります。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;場所が不明なもの:d1b7e6d5fba8c33792c8fe6d44bd9ea1&#34;&gt;場所が不明なもの&lt;/h1&gt;

&lt;p&gt;可能な限り位置を調べてはいますが、以下のツイートはどうしても位置がわからなかったものになります。
ご存じの方がおりましたらTwitter等でご連絡ください。&lt;/p&gt;

&lt;p&gt;なお、社内が撮影されているもの等、どうやっても場所の判別が不可能そうなものは除いています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/704889601014505472&#34;&gt;https://twitter.com/LoveLive_staff/status/704889601014505472&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/705003241365491713&#34;&gt;https://twitter.com/LoveLive_staff/status/705003241365491713&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/705288053242384384&#34;&gt;https://twitter.com/LoveLive_staff/status/705288053242384384&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/705740788551049216&#34;&gt;https://twitter.com/LoveLive_staff/status/705740788551049216&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/706777941347328000&#34;&gt;https://twitter.com/LoveLive_staff/status/706777941347328000&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/706834522441170945&#34;&gt;https://twitter.com/LoveLive_staff/status/706834522441170945&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/709003462529445888&#34;&gt;https://twitter.com/LoveLive_staff/status/709003462529445888&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/709762320650661890&#34;&gt;https://twitter.com/LoveLive_staff/status/709762320650661890&lt;/a&gt;&lt;br /&gt;
(鬼の洗濯板のように見えるが、google mapsでは画像のように写真が撮れる位置が見つからず)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/710105060500439044&#34;&gt;https://twitter.com/LoveLive_staff/status/710105060500439044&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/710465459578146816&#34;&gt;https://twitter.com/LoveLive_staff/status/710465459578146816&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/711158993406857216&#34;&gt;https://twitter.com/LoveLive_staff/status/711158993406857216&lt;/a&gt;
(できる人なら反射してる建物から場所がわかりそう…)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/711555116457992192&#34;&gt;https://twitter.com/LoveLive_staff/status/711555116457992192&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/711875536033878016&#34;&gt;https://twitter.com/LoveLive_staff/status/711875536033878016&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/713711952380473344&#34;&gt;https://twitter.com/LoveLive_staff/status/713711952380473344&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/713934790228107265&#34;&gt;https://twitter.com/LoveLive_staff/status/713934790228107265&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/714060133958025217&#34;&gt;https://twitter.com/LoveLive_staff/status/714060133958025217&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>うるう日に1番なりやすい曜日は？</title>
      <link>http://ota42y.com/blog/2016/03/01/leap-day/</link>
      <pubDate>Tue, 01 Mar 2016 22:43:14 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/03/01/leap-day/</guid>
      <description>

&lt;p&gt;今年はうるう年のため、昨日の2016-02-29はうるう日でした。
うるう年は4年に一回かつ干支は12種類のため、うるう年になる干支は子と辰と申しかありません。&lt;/p&gt;

&lt;p&gt;さて、うるう年にならない干支が存在しますが、うるう日にならない曜日というのは存在するのでしょうか？
存在しないなら、うるう日になりやすい曜日というのは存在するのでしょうか？&lt;br /&gt;
気になったので調べました。&lt;/p&gt;

&lt;h1 id=&#34;うるう年のルール:d25f66a7a55da90824e850a39bbd6219&#34;&gt;うるう年のルール&lt;/h1&gt;

&lt;p&gt;うるう年は4年に一回、ただし100で割り切れて400で割り切れない年は来ないというルールになっており、400年間で97回うるう年がおきて一周します。
そのため、一周する400年間の傾向を調べれば、後はその繰り返しなので変化がなく、うるう日の傾向をすべて調べたと言えます。
今回は2000年から2399年までのうるう年を調べました。&lt;/p&gt;

&lt;h1 id=&#34;うるう日になりやすい曜日は何曜日か:d25f66a7a55da90824e850a39bbd6219&#34;&gt;うるう日になりやすい曜日は何曜日か&lt;/h1&gt;

&lt;p&gt;97は7で割り切れず、6余るため、全ての曜日が均等にうるう日になることはありません。
数学が得意な人ならば数式でぱっと曜日計算ができそうですが、私は得意ではないのでプログラムで全列挙して集計します。&lt;/p&gt;

&lt;h2 id=&#34;うるう日カウントプログラム:d25f66a7a55da90824e850a39bbd6219&#34;&gt;うるう日カウントプログラム&lt;/h2&gt;

&lt;p&gt;以下のrubyスクリプトを実行する2ことで、2000年から2399年までのうるう日の曜日をカウントして集計します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;date&#39;

w = Hash.new(0)
2000.step(2399, 4) do |year|
    if Date::valid_date?(year, 2, 29)
        d = Date.new(year, 2, 29)
        w[d.wday] += 1        
    end
end

7.times {|wday| puts &amp;quot;#{Date::DAYNAMES[wday]}:#{w[wday]}&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;結果:d25f66a7a55da90824e850a39bbd6219&#34;&gt;結果&lt;/h2&gt;

&lt;p&gt;結果は以下のようになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sunday:13
Monday:15
Tuesday:13
Wednesday:15
Thursday:13
Friday:14
Saturday:14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;月曜日と水曜日がうるう日になりやすく、日曜と火曜と木曜がうるう日になりにくい結果になりました。
もっと差が出るかと思いましたが、均等に起きた場合に比べて一回少ない程度に収まり、思った以上に偏りはないようです。&lt;/p&gt;

&lt;h1 id=&#34;うるう日の偏りの原因:d25f66a7a55da90824e850a39bbd6219&#34;&gt;うるう日の偏りの原因&lt;/h1&gt;

&lt;p&gt;どうしてこのような偏りができるのでしょうか。
どうやら100年に一度のうるう年にならない年が影響していそうです。&lt;/p&gt;

&lt;p&gt;うるう日は基本的に以下の順に曜日が変わっていきます。&lt;br /&gt;
火→日→金→水→月→土→木→火（2000年をスタートとした場合)&lt;/p&gt;

&lt;p&gt;ですが、100で割り切れて400で割り切れない年はうるう年では無いため、曜日がずれてしまいます。
このとき、次のうるう日まで一日少なくなるため、次のうるう日の曜日は一日前の曜日になります（土曜日なら金曜日になる）&lt;/p&gt;

&lt;p&gt;例えば、100年に一度のスキップが無い場合、2104年のうるう日は土曜日になりますが、2100年がスキップされたため一日前の金曜日になります。
これにより、火→日→金→水→金→水→月→土→木→火と、うるう日のループでは3つ前の曜日に戻ります。&lt;/p&gt;

&lt;p&gt;これにより、2092年、2096年に金曜日と水曜日がうるう日になりましたが、2104年と2108年もまた金曜日と水曜日がうるう日になり、他の曜日より2回多くなります。同じように2204年は木曜日になるはずですが2200年の影響により水曜日になり、水曜日と月曜日が、2304年は木曜日になるはずが月曜日になり、月曜日と土曜日が多くうるう日になります。&lt;/p&gt;

&lt;p&gt;まとめると、2100年の影響で金曜日と水曜日が、2200年の影響で水曜日と月曜日が、2300年の影響で月曜日と土曜日が多くうるう日になります。
そのため、400年間で多くならなかった日火木が13回うるう日になり、1回多くなる金土が14回、2回多くなる月水が15回うるう日になるようです。&lt;/p&gt;

&lt;h1 id=&#34;次にうるう日が月曜日になるのはいつか:d25f66a7a55da90824e850a39bbd6219&#34;&gt;次にうるう日が月曜日になるのはいつか？&lt;/h1&gt;

&lt;p&gt;今年と同じく、月曜日がうるう日になるのは最速で28年後の2044年です。
例外でスキップされる場合を除けば28年後になります。&lt;/p&gt;

&lt;p&gt;なお、私は1988年生まれであり、その年のうるう日は月曜日でした。
2000年は例外スキップが無いため、ことしは生まれ年とうるう日が一致する年になります。&lt;/p&gt;

&lt;p&gt;なお、2400年までに月曜日がうるう日になるのは以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2016-02-29 2044-02-29 2072-02-29 2112-02-29 2140-02-29
2168-02-29 2196-02-29 2208-02-29 2236-02-29 2264-02-29
2292-02-29 2304-02-29 2332-02-29 2360-02-29 2388-02-29
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;私が生きている間にはあと2回くるか、人類が老いを克服して無限に生きられるようになり、数えるのが無意味になるかのどっちかですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016年02月まとめ</title>
      <link>http://ota42y.com/pages/summary/2016/2016-02/</link>
      <pubDate>Sun, 28 Feb 2016 22:40:59 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2016/2016-02/</guid>
      <description>&lt;p&gt;まとめ。&lt;br /&gt;
ぎりぎりに一気に書くスタイル…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/02/04/lovelive-pixiv-character-2016/&#34;&gt;2015年のpixiv内ラブライブイラストの分析&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;去年との違いを意識したまとめ&lt;/li&gt;
&lt;li&gt;サンシャインのこれからには期待&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/02/07/dump_restore_command/&#34;&gt;dump/restoreコマンドでデータのバックアップ・リストアをする&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;思った以上に簡単で便利&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/02/25/docker_develop/&#34;&gt;開発・実行環境をDockerで整える&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;開発環境構築に時間かけるの人生の無駄なので凄くいい&lt;/li&gt;
&lt;li&gt;遅いのは何とかしたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/02/28/jenkins_node_select/&#34;&gt;Jenkinsのノード選択をNode and Label parameter pluginでやる&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Pipeline Pluginは自分で道を開かないといけないので大変&lt;/li&gt;
&lt;li&gt;こっちはできる事に限界があるが標準的なジョブ構成で使える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ota42y/items/af90ada86fd671dc5122&#34;&gt;MacのDocker上で動くMongoDBのデータを永続化するの大変そう&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;凄くいいと思ったら意外な落とし穴が&lt;/li&gt;
&lt;li&gt;とりあえずMongoDBは外部に立てて凌いでます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jenkinsのノード選択をNode and Label parameter pluginでやる</title>
      <link>http://ota42y.com/blog/2016/02/28/jenkins_node_select/</link>
      <pubDate>Sun, 28 Feb 2016 19:37:37 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/02/28/jenkins_node_select/</guid>
      <description>

&lt;h1 id=&#34;概要:0be37591a98e09367cb74beb3aab8bdc&#34;&gt;概要&lt;/h1&gt;

&lt;p&gt;Jenkinsのノード制御はあまりカスタマイズが効きません。そのため、ノードを細かく制御したい場合はジョブを分ける必要があり、ジョブ数が増えて管理コストが上がります。このプラグインはパラメーターでノードを選択できるので、一つのジョブでノードごとにジョブを動かせるようになります。&lt;/p&gt;

&lt;h1 id=&#34;jenkinsのノード選択は柔軟性に欠ける:0be37591a98e09367cb74beb3aab8bdc&#34;&gt;Jenkinsのノード選択は柔軟性に欠ける&lt;/h1&gt;

&lt;p&gt;Jenkinsのノード選択がパラメータでできるプラグインです。
Jenkinsでは基本機能として、実行するノードを制限して特定ノードでだけジョブを実行できます。
ですが、この設定項目は柔軟性に欠け、パラメータでノードを切り替えたり、該当するノード全てでビルドするといったことができません。
そのため、例えばgoでWindowsとMac両方でテストを実行したい場合、windows用とmac用というノードごとの個別のジョブを作る必要があります。
しかし、それを続けるとJenkinsのジョブの数が際限なく増えていき、ジョブのメンテが大変になるという問題が出ます。&lt;/p&gt;

&lt;h1 id=&#34;node-and-label-parameter-plugin:0be37591a98e09367cb74beb3aab8bdc&#34;&gt;Node and Label parameter plugin&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/NodeLabel+Parameter+Plugin&#34;&gt;https://wiki.jenkins-ci.org/display/JENKINS/NodeLabel+Parameter+Plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Node and Label parameter pluginは、以上の問題点を解決できるプラグインです。このプラグインを入れると、ビルド時のパラメータにNodeとLabelを追加することができるようになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/images/blog/2016/2016-02-28-jenkins_label_paramater.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-28-jenkins_label_paramater.png&#34;  width=&#34;40%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nodeの場合は文字通り任意のノード名でビルドノードを選択できます。
また、Labelの場合はノードにつけたLabelでビルドするノードを選択できます。
そのため、ノードにwindowsやmac等の適切なラベルをつけることで、任意のノードでビルドすることができるようになります。
また、全てのノードに共通のラベルを一つ定義しておくことで、どれでもいいからとりあえずビルドするといったこともできます。&lt;/p&gt;

&lt;h1 id=&#34;該当するノード全てでビルドする:0be37591a98e09367cb74beb3aab8bdc&#34;&gt;該当するノード全てでビルドする&lt;/h1&gt;

&lt;p&gt;このプラグインは、特に設定がない場合は該当するノードのどれか一つでjobが実行されますが、以下のオプションをつけることで該当するノード全てで実行されるようになります。
そのため、複数環境でテストしたい場合も１回ビルドを実行するだけで後は自動で全てのノードでビルドが実行されるようになります。
なお、全ノードで実行される一つのビルドではなく、ノードごとに個別のビルドが実行されるようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/images/blog/2016/2016-02-28-jenkins_labe_run_all_nodes.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-28-jenkins_labe_run_all_nodes.png&#34;  width=&#34;40%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;pipeline-pluginとの違い:0be37591a98e09367cb74beb3aab8bdc&#34;&gt;Pipeline Pluginとの違い&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Plugin&#34;&gt;Pipeline Plugin&lt;/a&gt;では、Jenkinsのジョブを丸ごとgroovyで書けるため、このプラグインよりもさらに柔軟に選択できます。
ただ、こちらは本当にジョブの内容を全てgroovyで書く必要があり、既存のJenkinsの知見を活用できなかったり、他のプラグインとの相性はあまり良くないです。
Node and Label parameter pluginはパラメータのみ変更されるため、標準的なジョブ構成であればとても簡単に導入できます。
そのため、どうしても複雑な制御が必要な時にのみPipeline Pluginを使うべきだと思います。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:0be37591a98e09367cb74beb3aab8bdc&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;通常の機能だとノードをあまり制御するのは難しい&lt;/li&gt;
&lt;li&gt;プラグインで任意のノードをパラメーターで選択できる

&lt;ul&gt;
&lt;li&gt;選択方法はノード名とラベル&lt;/li&gt;
&lt;li&gt;ラベルは複数に同じラベルをつけたりといろいろ便利なのでオススメ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ノード選択部分をさらに柔軟にしたいならPipeline Plugin

&lt;ul&gt;
&lt;li&gt;より複雑な事ができるが、導入の敷居も高い&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/02/10/workflow-plugin/&#34;&gt;Jenkins Workflow Pluginで複数slaveを扱うのが楽になる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>開発・実行環境をDockerで整える</title>
      <link>http://ota42y.com/blog/2016/02/25/docker_develop/</link>
      <pubDate>Thu, 25 Feb 2016 22:44:10 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/02/25/docker_develop/</guid>
      <description>

&lt;h1 id=&#34;概要:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;概要&lt;/h1&gt;

&lt;p&gt;開発環境構築はだいたい辛い作業ですが、Dockerを使うことで構築がとても楽になります。もちろん銀の弾丸ではないので別のつらさは存在します。
しかし一歩も進まずに時間だけが過ぎることはなくなるため精神衛生上良く、開発を始める段階においてはとても効果的です。&lt;/p&gt;

&lt;h1 id=&#34;開発環境構築が辛い:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;開発環境構築が辛い&lt;/h1&gt;

&lt;p&gt;開発環境構築はプログラミングをする上で必須の作業ですが、依存関係など非常に多くの落とし穴があることが多いです。
また、環境構築そのものが目的ということは少なく、その先に別にやりたい事が控えていることが多いと思います。
そのため、とりあえずやってみようと思った際に、その試してみるべき部分にたどり着けずに時間を浪費していくのはかなり辛いです…&lt;/p&gt;

&lt;h2 id=&#34;設定自動化スクリプトでは足りない:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;設定自動化スクリプトでは足りない&lt;/h2&gt;

&lt;p&gt;環境構築の手順が煩雑な問題に対しては、chefやAnsible等、自動で環境を構築する方法はいくつかあります。
これらは一度作れば同じ環境を何度でも作ることが出来ますが、2回目以降を楽にするものであるため初回はそれほど楽になりません。
また、すでに入っているものとの依存関係の問題などはこれらのツールでは解決しないため、
複雑な環境になればなるほど環境構築の難易度は上がります。&lt;/p&gt;

&lt;h2 id=&#34;開発環境にdockerを使う:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;開発環境にDockerを使う&lt;/h2&gt;

&lt;p&gt;このような問題に対応するために、Dockerを開発環境として使うことを考えます。
Dockerでは毎回クリーンな環境から必要な分だけインストールするため、
依存関係地獄にはまりにくいです。
さらに、Dockerfileで構築手順を保存できるため、
複数のマシンで同じ環境を揃えるのが簡単で、かつ不要になったらコンテナを消すことで容量の削減にもなります。&lt;/p&gt;

&lt;p&gt;また、Dockerfileを本番環境に持って行き、そのままデプロイすることも可能です。
そのため、本番でだけバグが起きる…といったことも回避出来ます。&lt;/p&gt;

&lt;h1 id=&#34;dockerで開発環境を整える:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;Dockerで開発環境を整える&lt;/h1&gt;

&lt;p&gt;細かい部分はDocker入門を読むのが早いと思います。
そのため、割とさくっとしか説明しません。&lt;/p&gt;

&lt;h2 id=&#34;dockerコンテナの作成:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;Dockerコンテナの作成&lt;/h2&gt;

&lt;p&gt;Dockerコンテナを構築するのに便利なDockerfileは、
ベースとなるコンテナをもとに、指定されたコマンドを実行してコンテナを作ってくれます。
例えば、以下のDockerfileはffmpegがインストール済みのコンテナに対して、
&lt;a href=&#34;https://nico-opendata.jp/ja/index.html&#34;&gt;ニコニコ静画を使ったChainer用の学習済みモデルファイル&lt;/a&gt;を利用出来る環境を整えています。
ffmpeg自体はベースのコンテナに入っているため、その後にpythonの実行環境を入れ、様々なライブラリを入れているだけです。
コンテナの作成はこのDockerfileが置いてあるディレクトリまで移動し、
&lt;code&gt;docker build -t ffmpeg_test .&lt;/code&gt;
で作れます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM cellofellow/ffmpeg:latest

RUN apt-get -y update &amp;amp;&amp;amp; apt-get -y upgrade
RUN apt-get install -y ccache curl g++ gfortran git libhdf5-dev
RUN apt-get install -y python-pip python-dev

RUN pip install numpy==1.10.2

# scipy
RUN apt-get install -y libblas-dev liblapack-dev libatlas-base-dev gfortran
RUN pip install scipy
RUN pip install Pillow
RUN pip install scikit-image
RUN pip install chainer==1.3

# niconico dataset
RUN pip install git+http://github.com/nico-opendata/niconico_chainer_models.git#egg=niconico_chainer_models

CMD [&amp;quot;/bin/bash -c&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;データの永続化:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;データの永続化&lt;/h2&gt;

&lt;p&gt;Dockerfileに変更を加えるとコンテナが新たに作成されるため、データを入れても気がつくと消えてしまいます。
もちろんそれでは使い物にならないので、永続化の手法はいくつか考えられているようです。
開発環境として使う分には、手元のマシンの特定フォルダをDockerマシン上にマウントできるData Volumeを利用するのが良いと思います。&lt;/p&gt;

&lt;p&gt;以下のようにコンテナを実行することで、手元のマシンの~/docker_volume/ffmpeg/を、Dockerマシン上の/tmp/hostにマウントすることが出来ます。&lt;br /&gt;
&lt;code&gt;docker run -v ~/docker_volume/ffmpeg/:/tmp/host --name ffmpeg -i -t ffmpeg_test /bin/bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;マウントしているだけなので変更もリアルタイムに反映されるため、作業用フォルダをマウントするとスムーズに開発出来ると思います。&lt;/p&gt;

&lt;h1 id=&#34;dockerを開発環境にする上での問題点:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;Dockerを開発環境にする上での問題点&lt;/h1&gt;

&lt;p&gt;環境構築は物凄く楽になりましたが、すべてが良いわけではなく、
いくつか問題点があります。&lt;/p&gt;

&lt;h2 id=&#34;環境の使い分けの煩雑さ:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;環境の使い分けの煩雑さ&lt;/h2&gt;

&lt;p&gt;Dockerは実行にだけ利用し、開発は手元のホストマシンで行う場合、
ホストとコンテナとの違いを意識しないといけないため、煩雑さがだいぶ上がります。
ファイルに保存する場合に保存場所を意識しないといけなかったり、gitにコミットしようとしたらコンテナ上だったりと、コンソール作業のたびに今いる環境を確認するのは結構面倒です。&lt;/p&gt;

&lt;p&gt;もちろん、自動実行が整っててコンテナ側をいじる必要が無かったり、
開発もコンテナ内でやるような場合は当てはまりません&lt;/p&gt;

&lt;h2 id=&#34;実行速度の問題:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;実行速度の問題&lt;/h2&gt;

&lt;p&gt;MacだとVirtualBoxのVM上でコンテナが動いているため、実質的に専用のVMを立ち上げているのと変わりません。
そのため、実行速度が遅くなるという問題があります。
実際、私のMacBook Pro上記の環境で画像分類を行うと、ホストのMacで実行すると1秒以内に終わる処理が、コンテナ上だと100秒ぐらいかかってしまいます。
おそらくWindowsも同じ仕組みのはずなので、同じような結果になりそうです。
画像処理など特に重い処理等の場合はとても時間がかかってしまうため、環境構築とは別方面のつらさが出てきます。&lt;/p&gt;

&lt;p&gt;これにたいしては、とりあえず動かしたい初期段階ではDockerを使い、環境が固定化してきた段階で手元のマシンで開発するようにすると、
開発初期のとりあえず使ってみたい状態は楽に環境を整えられ、確定した段階でローカルでの開発に移行することで、速度的な部分も問題にならなくなります。&lt;/p&gt;

&lt;p&gt;もしかしたら、サーバ上のコンテナにローカルのファイルをマウントするといったことが可能かもしれないので、
この辺はもう少し調査が必要です…&lt;/p&gt;

&lt;p&gt;なお、何故遅いのかの原因まではつかめていません。
VMのオーバーヘッドなのかもしれませんし、&lt;a href=&#34;http://qiita.com/masuidrive/items/d71ee1881fffb6ad098f&#34;&gt;VirtualBoxボリュームによるせい&lt;/a&gt;の可能性もあります。
ここをもう少し調べれば回避策はあるかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;開発環境構築は毎回辛い

&lt;ul&gt;
&lt;li&gt;依存関係&lt;/li&gt;
&lt;li&gt;複数台で開発すると何回もセットアップする羽目に&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;環境構築自動化

&lt;ul&gt;
&lt;li&gt;構築用スクリプトでは解決しない

&lt;ul&gt;
&lt;li&gt;スタート地点がそれぞれ違う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Dockerで環境ごと作る

&lt;ul&gt;
&lt;li&gt;毎回クリーンな環境から構築

&lt;ul&gt;
&lt;li&gt;依存関係に悩まされにくい

&lt;ul&gt;
&lt;li&gt;一度成功すれば後は固定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;別ベクトルで辛いところはある

&lt;ul&gt;
&lt;li&gt;作業してるところを意識しないといけない&lt;/li&gt;
&lt;li&gt;環境によっては遅い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;一歩も進まずに四苦八苦するよりも精神衛生上良い

&lt;ul&gt;
&lt;li&gt;心が折れない&lt;/li&gt;
&lt;li&gt;問題点がはっきりとして解決しやすい&lt;/li&gt;
&lt;li&gt;開発初期はDocker、本格的に行けそうなら直接入れるように使い分け&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>dump/restoreコマンドでデータのバックアップ・リストアをする</title>
      <link>http://ota42y.com/blog/2016/02/07/dump_restore_command/</link>
      <pubDate>Sun, 07 Feb 2016 12:27:38 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/02/07/dump_restore_command/</guid>
      <description>

&lt;h1 id=&#34;まとめ:24d1aea959d1a3feee770b5361f2f824&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;dump/restoreコマンドでパーティションごとバックアップ/リストアができる&lt;/li&gt;
&lt;li&gt;SDカードの中身を移行するのに便利

&lt;ul&gt;
&lt;li&gt;もちろんHDDでもいける&lt;/li&gt;
&lt;li&gt;Windowsは基本的にSDカードの第一パーティションしか認識できない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;sdカードのデータ移行がしたい:24d1aea959d1a3feee770b5361f2f824&#34;&gt;SDカードのデータ移行がしたい&lt;/h1&gt;

&lt;p&gt;Androidに使っているMicroSDが速度面で不満が出てきたため、より早い物に入れ替えを行いました。&lt;/p&gt;

&lt;p&gt;ですが、アプリのデータを入れていたりと、通常のMicroSDと使い方がだいぶ違うため、普通にコピペでバックアップ・リストアすると、権限周りやシンボリックリンク周りで問題が起きそうでした。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/blog/2014/12/30/link2sd/&#34;&gt;ASUS MeMO Pad 7 ME572CでLink2SDを動かす&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そこで、dump/restoreコマンドを使い、ファイルシステムを丸ごとバックアップ・リストアしました。今回の対象はSDカードですが、対象のデバイスは関係ないため、  HDDを対象としたバックアップも同じ手順で可能です。&lt;/p&gt;

&lt;h1 id=&#34;sdカードの第二パーティションのマウント:24d1aea959d1a3feee770b5361f2f824&#34;&gt;SDカードの第二パーティションのマウント&lt;/h1&gt;

&lt;p&gt;Link2SDを使っているため、SDカードの第二パーティションにバックアップ対象が保存されています。このパーティションをマウントし、dumpコマンドを利用してバックアップを行います。&lt;/p&gt;

&lt;p&gt;なお、Windowsでは基本的にSDカードの第二パーティションはマウントできないため、Linux上で作業を行いました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 接続された位置をfdiskで調べる
sudo fdisk -l

# 以下のようにSDカードのパーティションの位置が表示される
# /dev/sdc1 42 42424242 4242424242 42 HPFS/NTFS/exFAT
# /dev/sdc2 4242 42424242 42424242 42 Linux

# ext3でフォーマットしているのでマウントする
# (どうフォーマットしているかはその人次第です)
sudo mount -t ext3 /dev/sdc2 /mnt/sd
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;dumpコマンドでバックアップ:24d1aea959d1a3feee770b5361f2f824&#34;&gt;dumpコマンドでバックアップ&lt;/h1&gt;

&lt;p&gt;dumpコマンドを使うことで、ファイルシステムがext2,ext3,ext4のものをバックアップできます。
差分バックアップもサポートしていますが、今回はデータ移行が目的なのでフルバックアップを行います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# mount先の/mnt/sd以下をバックアップ
sudo dump -0 -f /data/sd.dump /mnt/sd

# -0でダンプレベル0(フルバックアップ)
# -fでバックアップしたデータのファイル名を指定
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;restoreコマンドでリストア:24d1aea959d1a3feee770b5361f2f824&#34;&gt;restoreコマンドでリストア&lt;/h1&gt;

&lt;p&gt;restoreコマンドを使うことで、dumpコマンドでバックアップしたデータをリストアできます。
バックアップが終わった時点でSDカードをフォーマット済みの新しい物に差し替え、
上記の手順で同じ場所にマウントしてあります。&lt;/p&gt;

&lt;p&gt;なお、restoreコマンドはリストア先を指定できそうなオプションが存在します。
ですが何故か上手く動かず、デフォルトの挙動であるカレントディレクトリにリストアされてしまうため、
事前にマウント先に移動しています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /mnt/sd
restore -r -f /data/sd.dump
# -rでデータをフルリストア
# -fでバックアップしたファイルを指定
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;時間がかかりますが、以上の手順でデータ移行が完了します。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年のpixiv内ラブライブイラストの分析</title>
      <link>http://ota42y.com/blog/2016/02/04/lovelive-pixiv-character-2016/</link>
      <pubDate>Thu, 04 Feb 2016 21:27:18 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/02/04/lovelive-pixiv-character-2016/</guid>
      <description>

&lt;p&gt;HP先行の結果が出ましたね。&lt;br /&gt;
…………ご察しください。&lt;/p&gt;

&lt;p&gt;さて、前回(&lt;a href=&#34;http://ota42y.com/blog/2016/01/22/lovelive-pixiv-illust-2015/&#34;&gt;2015年のpixiv内ラブライブイラストの推移
&lt;/a&gt;)に引き続き、pixiv内のラブライブイラストについて見ていきます。&lt;br /&gt;
本来はもう少し内容を書く予定でしたが、落選のダメージがでかいので少なめです…＿(:3 」∠)＿&lt;/p&gt;

&lt;h1 id=&#34;キャラごとの投稿数増加率:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;キャラごとの投稿数増加率&lt;/h1&gt;

&lt;p&gt;映画で人気が出たキャラがいないかと思い、2014年の12月から2015年の12月までに総投稿数がどれくらい増えたかを調べました。&lt;br /&gt;
特に増加率が大きい場合、映画によって人気が上がった可能性が考えられます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-02-04-chara_inc_rate.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-04-chara_inc_rate.png&#34;  width=&#34;40%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;小泉花陽と園田海未がかなり伸びていますが、この二人は去年12月時点では二期が始まってからの聖誕祭が行われていなかったので、前回が少なすぎただけの可能性があります。
一応投稿数の推移を調べてみたところ、他のキャラと同じく全体的に上がっており、劇場版で爆発的に人気が出たとかそういうのではないようです。&lt;/p&gt;

&lt;p&gt;一方で、星空凛、高坂穂乃果、東條希の3人は2期の恩恵を受けた前回からも伸びているため、全体的に人気が上がったor劇場版で大きく伸びたといえそうです。
とはいえ、ほぼ全員が2倍ぐらい伸びているため、劇場版で人気が伸びたと言うほど差があるとは言いづらい結果になっています。
なお、にこは割合ではちょっと少なめですが、去年の投稿数、および総投稿数では一位であり、増加率では劣ってますが増加数ではものすごい量でした。&lt;/p&gt;

&lt;h1 id=&#34;カップリング人気か-単体人気か:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;カップリング人気か、単体人気か&lt;/h1&gt;

&lt;p&gt;イラストは必ずしもカップリングだけとは限らず、単体でも投稿されています。
前回の結果からわかるとおり、にこまき等のカップリングイラストはとても多いですが、キャラ単体とカップリングとでどちらの方が人気なのでしょうか？
そこで、キャラごとにカップリングとキャラ単体、どっちが人気なのかを集計しました。&lt;/p&gt;

&lt;p&gt;なお、カップリングタグがついたものにはキャラの名前のタグがつけられる傾向にあるため、
キャラ単体でカップリングタグがないものと、カップリングタグがあるもの（キャラ単体のタグもあっていい）で集計しています。
また、投稿数だとキャラ別に比較しにくいので、そのキャラの全イラストとの割合で集計しています。&lt;br /&gt;
（全イラスト＝キャラ単体＋カップリングイラスト）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-02-04-chara_cp_rate.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-04-chara_cp_rate.png&#34;  width=&#34;70%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;多くのキャラはキャラ:カップリングイラストが7:3になっていますが、南ことりはキャラ単体の人気が高く、80％以上が単体のイラストになっています。&lt;/p&gt;

&lt;p&gt;一方で西木野真姫と絢瀬絵里はカップリング人気が特に高く、4割を超えています。
昨日の結果からわかるように、この二人はそれぞれ3種類のカップリングがランクインしており（「にこまき」「りんまき」「ほのまき」、「のぞえり」「うみえり」「ほのえり」）、やはりカップリング人気が高いのもうなずけます。&lt;/p&gt;

&lt;h1 id=&#34;サンシャイン:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;サンシャイン&lt;/h1&gt;

&lt;p&gt;サンシャインが発表されておよそ一年たちましたが、pixiv上の反応はどうだったのでしょうか。
というわけで調べてみました。&lt;/p&gt;

&lt;h2 id=&#34;サンシャインイラスト全体:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;サンシャインイラスト全体&lt;/h2&gt;

&lt;p&gt;サンシャインイラスト全体の投稿数の推移をまとめました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-02-04-sun_illust_all.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-04-sun_illust_all.png&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CD発売で一気に盛り上がり、12月の段階では一段落した感じです。
μ&amp;rsquo;sの初期も同じく発売後2ndまでは落ちていったので、およそ同じ傾向にあるようです。&lt;br /&gt;
(参考: &lt;a href=&#34;http://ota42y.com/blog/2014/12/25/lovelive/&#34;&gt;pixivのタグから読み解くラブライブイラストの歩み&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;ただ、1月にAqoursのイベントが行われたり、アニメ化が発表されたりと大きく動いたため、今月にかけてまた一気に盛り返すと思われます。&lt;/p&gt;

&lt;h2 id=&#34;aqoursキャラごとの投稿数推移:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;Aqoursキャラごとの投稿数推移&lt;/h2&gt;

&lt;p&gt;Aqoursメンバーのキャラごとに投稿数推移を見てみました。&lt;br /&gt;
なお、月ごとの投稿数をグラフ化すると上昇下降が激しすぎたので、累計で集計しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-02-04-sun_aqours_illust.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-04-sun_aqours_illust.png&#34;  width=&#34;70%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;センター総選挙では渡辺曜、黒澤ルビィ、桜内梨子の順でしたが、イラストではルビィがずば抜けて多く、次にヨハネ〜1年2年組と固まっています。&lt;/p&gt;

&lt;p&gt;総選挙でも3年生は下にいましたが、イラストでも同じ結果になっています…
とはいえ絶対数ではそもそもそんなに差は無く、μ&amp;rsquo;sのころに比べれば全然多いため、アニメ化や2ndでこれから先どう変化していくのが楽しみです。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;劇場版で爆発的に人気が出たキャラはいなさそう

&lt;ul&gt;
&lt;li&gt;うみぱなが伸びているが、2期以降初めての聖誕祭が今年だったためと思われる&lt;/li&gt;
&lt;li&gt;他の伸びが大きいキャラもそこまでかけ離れてはいない&lt;/li&gt;
&lt;li&gt;にこは伸び率は悪いが投稿数は一番多い&lt;/li&gt;
&lt;li&gt;伸びてないというより、元から凄い人気だっただけかと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;キャラごとにカップリングか単体かはかなり好みが違う

&lt;ul&gt;
&lt;li&gt;西木野真姫と絢瀬絵里はカップリング相手としてかなり人気&lt;/li&gt;
&lt;li&gt;南ことりはカップリングより一人の方が人気&lt;/li&gt;
&lt;li&gt;他のキャラはだいたい単体7:カップリング3ぐらい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サンシャインはいったん落ち着いた

&lt;ul&gt;
&lt;li&gt;μ&amp;rsquo;sの1st以降と同じ傾向&lt;/li&gt;
&lt;li&gt;ただし数自体は全然多い&lt;/li&gt;
&lt;li&gt;総選挙とpixivの人気は違うみたい&lt;/li&gt;
&lt;li&gt;とはいえ、そこまで差は無い&lt;/li&gt;
&lt;li&gt;2016/01で大きく動いたので今後の動きに期待&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サンシャインに関しては先月にかなり大きく動いたため、ここ最近の変化も調べたいと思います。&lt;br /&gt;
ただし、落選ショックから立ち直れたらの話ですが…(´･_･`)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016年01月まとめ</title>
      <link>http://ota42y.com/pages/summary/2016/2016-01/</link>
      <pubDate>Sun, 31 Jan 2016 16:54:04 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2016/2016-01/</guid>
      <description>&lt;p&gt;まとめ。&lt;br /&gt;
Qiitaを再開した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ota42y/items/6d8b2279d6456ff389a0&#34;&gt;Centos7でsquidを立てる&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;必要なときにサクっと作れるの便利&lt;/li&gt;
&lt;li&gt;実際はプロキシサーバはVPNでつないで内部ネットワークにしているので、外部からのアクセスを想定した制限は不要&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/01/22/lovelive-pixiv-illust-2015/&#34;&gt;2015年のpixiv内ラブライブイラストの推移
&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;全落ちつらい…&lt;/li&gt;
&lt;li&gt;サンシャインに関して取り直してるので次はもうちょっと時間かかる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/01/26/tmux-change-pane/&#34;&gt;tmux-change-paneというコマンドを作った&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;便利&lt;/li&gt;
&lt;li&gt;CLIでもUIは大事&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ota42y/items/0364d1da7cbf90df3dc4&#34;&gt;The innodb_system data file~でmacのmysqlが動かない場合の対処法&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;どのタイミングから動かなくなったのかは不明&lt;/li&gt;
&lt;li&gt;無駄に時間を浪費した…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/01/31/override-overload/&#34;&gt;オーバーライドとオーバーロードは全く別物&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;そもそもオーバーロードは必要なのか？という疑問もある。&lt;/li&gt;
&lt;li&gt;動的に切り替わるわけではないので、メソッド名が統一されるという利点があるけど…&lt;/li&gt;
&lt;li&gt;暗黙的にキャストされるので、ビルドは通るけど意図した動作でない事が起きそう&lt;/li&gt;
&lt;li&gt;内容が同じメソッドならいいけど、処理を振り分けるなら危なそう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2015年12月まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/2015-12/</link>
      <pubDate>Sun, 31 Jan 2016 16:36:57 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/2015-12/</guid>
      <description>&lt;p&gt;まとめ忘れていたけどまとめ。&lt;br /&gt;
月5本以上何らかのアウトプットするのは達成。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/12/02/mongodb_update/&#34;&gt;MongoDB の update は部分 update ではない&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;基本部分updateでいい気がするけど、なんでキーを置き換えるようにしているんだろう…？&lt;/li&gt;
&lt;li&gt;MySQLと違ってどんな列があるか明確じゃないし、データを消すのが難しいからとか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/12/08/wl_report/&#34;&gt;Wunderlistでサマリー出力をする&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;まだ使ってる。便利。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/12/09/500_output/&#34;&gt;GithubのContributionsを使ってアウトプットを500日続ける&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;どうも表示される最大長しかカウントされないらしく、今見たらLongestが500より減っていた&lt;/li&gt;
&lt;li&gt;常に手を動かし続ける習慣はできたし、良かったと思う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/12/13/hci_advent_13/&#34;&gt;論文紹介「Unravel: Rapid Web Application Reverse Engineering via Interaction Recording, Source Tracing, and Library Detection」&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;めっちゃ便利。早く標準搭載されて欲しい。&lt;/li&gt;
&lt;li&gt;普通のデバッガはわかっているコードに対してバグ調査に使えるけど、コード理解のお供としては使えないよね。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/12/25/hci_advent_25/&#34;&gt;論文紹介「Corona: Positioning Adjacent Device with Asymmetric Bluetooth Low Energy RSSI Distributions」&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Bluetoothだけで距離計測ができるとか凄い&lt;/li&gt;
&lt;li&gt;実際適当に追実装してもいい精度になるので、ちゃんと作れば凄い良さそう。&lt;/li&gt;
&lt;li&gt;ボードゲームの一部として使えそう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>オーバーライドとオーバーロードは全く別物</title>
      <link>http://ota42y.com/blog/2016/01/31/override-overload/</link>
      <pubDate>Sun, 31 Jan 2016 14:45:49 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/01/31/override-overload/</guid>
      <description>

&lt;p&gt;EffectiveJavaを読んでて、C++でも当てはまるのかな？と思って試してみたら当てはまったので…&lt;/p&gt;

&lt;h1 id=&#34;まとめ:673abe6170b0f105c1aee0e413f3350c&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;オーバーライドされたvirtualなメソッド呼び出しは実行時に決定

&lt;ul&gt;
&lt;li&gt;実態が子クラスなら、親クラスとして扱っても子クラスのメソッドが実行される&lt;/li&gt;
&lt;li&gt;実態が孫クラスの場合は孫クラスのメソッドが呼ばれる&lt;/li&gt;
&lt;li&gt;親から子、孫へと呼び出される関数が探されていく感じ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;オーバーロードされたメソッド呼び出しはコンパイル時に決定

&lt;ul&gt;
&lt;li&gt;virtual関数のように実態で切り替えが出来ない&lt;/li&gt;
&lt;li&gt;実態が子クラスでも、親クラスとして扱うなら親クラスのメソッドが実行される&lt;/li&gt;
&lt;li&gt;一致するものが無い場合は親クラスにキャストして一致するものを探す&lt;/li&gt;
&lt;li&gt;子から親へと一致するものを探していく感じ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;オーバーライドとは:673abe6170b0f105c1aee0e413f3350c&#34;&gt;オーバーライドとは&lt;/h1&gt;

&lt;p&gt;メソッドのオーバーライドとは、親クラスのメソッドを子クラスで再定義することです。
C++では親クラスでvirtualにされているメソッドをオーバーライドすると、
子クラスのオブジェクトを親クラスにキャストしてメソッドを呼び出しても、再定義された子クラスのメソッドが呼ばれます。
(virtualをつけないと親クラスのメソッドが呼ばれます)&lt;/p&gt;

&lt;p&gt;たとえば以下のコードでは、オーバーライドされているためExtのshowメソッドが実行され、「show ext」が表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;cstdio&amp;gt;

class Base {
public:
  virtual void show() { printf(&amp;quot;show base\n&amp;quot;); }
};

class Ext: public Base {
public:
  virtual void show() { printf(&amp;quot;show ext\n&amp;quot;); }
};

int main() {
    Ext *e = new Ext();
    Base *b = static_cast&amp;lt;Base*&amp;gt;(e);
    b-&amp;gt;show();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように、オーバーライドされたメソッドは実行時にどのメソッドが呼ばれるか決定されます。&lt;/p&gt;

&lt;h1 id=&#34;オーバーロードとは:673abe6170b0f105c1aee0e413f3350c&#34;&gt;オーバーロードとは&lt;/h1&gt;

&lt;p&gt;一方、似たような名前でオーバーロードというものもあります。
こちらは継承とは特に関係なく、同じメソッド名で引数の違うものを定義しておくと、
引数の種類をみて自動的に一致するメソッドが実行されます。&lt;/p&gt;

&lt;p&gt;たとえば以下の場合、呼び出しているのはprintという名前の関数ですが、
それぞれ引数が一致する関数が呼ばれるため、base、extと表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;cstdio&amp;gt;

class Base { };

class Ext: public Base { };

void print(Base *b) {printf(&amp;quot;base\n&amp;quot;);}
void print(Ext *b) {printf(&amp;quot;ext\n&amp;quot;);}

int main() {
    Ext *e = new Ext();
    Base *b = new Base();
    print(e);
    print(b);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;オーバーロードはコンパイル時決定:673abe6170b0f105c1aee0e413f3350c&#34;&gt;オーバーロードはコンパイル時決定&lt;/h2&gt;

&lt;p&gt;オーバーライドを見ているとオーバーロードも実行時にどれを呼び出すか決定していそうですが、
実際はコンパイル時にすでにどれが呼び出されるか決定しています。&lt;/p&gt;

&lt;p&gt;そのため、以下のように実態が子クラスだとしても、親クラスとして引数に渡した場合、親クラスのメソッドが呼ばれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;vector&amp;gt;

class Base {
public:
  virtual void show() { printf(&amp;quot;show base\n&amp;quot;); }
};

class Ext: public Base {
public:
  virtual void show() { printf(&amp;quot;show ext\n&amp;quot;); }
};

void print(Base *b) {printf(&amp;quot;base\n&amp;quot;);}
void print(Ext *b) {printf(&amp;quot;ext\n&amp;quot;);}


int main() {
std::vector&amp;lt;Base*&amp;gt; b;
b.push_back(new Base());
b.push_back(new Ext());

for (int i=0; i &amp;lt; b.size(); ++i){
  print(b.at(i));
  b.at(i)-&amp;gt;show();
  }

 return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力は以下の通りです&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;base
show base
base
show ext
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ただし親クラスは検索対象になる:673abe6170b0f105c1aee0e413f3350c&#34;&gt;ただし親クラスは検索対象になる&lt;/h2&gt;

&lt;p&gt;一方でオーバーロードは型が一致するものが無い場合は引数として渡されたクラスの継承ツリーをたどり、一致する親クラスを探してそれにキャストして実行してくれます。
もちろん親クラスから子クラスへはコンパイル時にはわからないため、子クラスから親クラスに検索を行います。
そのため、以下のコードは「ext」と表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;vector&amp;gt;

class Base {
};

class Ext: public Base {
};

class ExtExt: public Ext {
};

void print(Base *b) {printf(&amp;quot;base\n&amp;quot;);}
void print(Ext *b) {printf(&amp;quot;ext\n&amp;quot;);}

int main() {
    ExtExt *b = new ExtExt();
    print(b);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;一意に定まらない場合:673abe6170b0f105c1aee0e413f3350c&#34;&gt;一意に定まらない場合&lt;/h2&gt;

&lt;p&gt;なお、本当にどっちか決められない場合はambiguousというエラーになります&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;vector&amp;gt;

class InterA{
public:
    virtual void interA() = 0;
};

class InterB{
public:
    virtual void interB() = 0;
};

class Base : public InterA, public InterB {
public:
  virtual void interA() { printf(&amp;quot;interA\n&amp;quot;); }
  virtual void interB() { printf(&amp;quot;interB\n&amp;quot;); }
};


void print(InterA *i) { i-&amp;gt;interA(); }
void print(InterB *i) { i-&amp;gt;interB(); }

int main() {
    Base *b = new Base();
    print(b);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;test.cpp:26:5: error: call to &#39;print&#39; is ambiguous
    print(b);
    ^~~~~
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>