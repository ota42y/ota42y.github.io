<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pages on おおたの物置</title>
    <link>http://ota42y.com/pages/</link>
    <description>Recent content in Pages on おおたの物置</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 28 Feb 2016 22:40:59 +0900</lastBuildDate>
    <atom:link href="http://ota42y.com/pages/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>2016年02月まとめ</title>
      <link>http://ota42y.com/pages/summary/2016/2016-02/</link>
      <pubDate>Sun, 28 Feb 2016 22:40:59 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2016/2016-02/</guid>
      <description>&lt;p&gt;まとめ。&lt;br /&gt;
ぎりぎりに一気に書くスタイル…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/02/04/lovelive-pixiv-character-2016/&#34;&gt;2015年のpixiv内ラブライブイラストの分析&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;去年との違いを意識したまとめ&lt;/li&gt;
&lt;li&gt;サンシャインのこれからには期待&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/02/07/dump_restore_command/&#34;&gt;dump/restoreコマンドでデータのバックアップ・リストアをする&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;思った以上に簡単で便利&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/02/25/docker_develop/&#34;&gt;開発・実行環境をDockerで整える&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;開発環境構築に時間かけるの人生の無駄なので凄くいい&lt;/li&gt;
&lt;li&gt;遅いのは何とかしたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/02/28/jenkins_node_select/&#34;&gt;Jenkinsのノード選択をNode and Label parameter pluginでやる&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Pipeline Pluginは自分で道を開かないといけないので大変&lt;/li&gt;
&lt;li&gt;こっちはできる事に限界があるが標準的なジョブ構成で使える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ota42y/items/af90ada86fd671dc5122&#34;&gt;MacのDocker上で動くMongoDBのデータを永続化するの大変そう&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;凄くいいと思ったら意外な落とし穴が&lt;/li&gt;
&lt;li&gt;とりあえずMongoDBは外部に立てて凌いでます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2016年01月まとめ</title>
      <link>http://ota42y.com/pages/summary/2016/2016-01/</link>
      <pubDate>Sun, 31 Jan 2016 16:54:04 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2016/2016-01/</guid>
      <description>&lt;p&gt;まとめ。&lt;br /&gt;
Qiitaを再開した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ota42y/items/6d8b2279d6456ff389a0&#34;&gt;Centos7でsquidを立てる&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;必要なときにサクっと作れるの便利&lt;/li&gt;
&lt;li&gt;実際はプロキシサーバはVPNでつないで内部ネットワークにしているので、外部からのアクセスを想定した制限は不要&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/01/22/lovelive-pixiv-illust-2015/&#34;&gt;2015年のpixiv内ラブライブイラストの推移
&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;全落ちつらい…&lt;/li&gt;
&lt;li&gt;サンシャインに関して取り直してるので次はもうちょっと時間かかる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/01/26/tmux-change-pane/&#34;&gt;tmux-change-paneというコマンドを作った&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;便利&lt;/li&gt;
&lt;li&gt;CLIでもUIは大事&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ota42y/items/0364d1da7cbf90df3dc4&#34;&gt;The innodb_system data file~でmacのmysqlが動かない場合の対処法&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;どのタイミングから動かなくなったのかは不明&lt;/li&gt;
&lt;li&gt;無駄に時間を浪費した…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2016/01/31/override-overload/&#34;&gt;オーバーライドとオーバーロードは全く別物&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;そもそもオーバーロードは必要なのか？という疑問もある。&lt;/li&gt;
&lt;li&gt;動的に切り替わるわけではないので、メソッド名が統一されるという利点があるけど…&lt;/li&gt;
&lt;li&gt;暗黙的にキャストされるので、ビルドは通るけど意図した動作でない事が起きそう&lt;/li&gt;
&lt;li&gt;内容が同じメソッドならいいけど、処理を振り分けるなら危なそう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2015年12月まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/2015-12/</link>
      <pubDate>Sun, 31 Jan 2016 16:36:57 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/2015-12/</guid>
      <description>&lt;p&gt;まとめ忘れていたけどまとめ。&lt;br /&gt;
月5本以上何らかのアウトプットするのは達成。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/12/02/mongodb_update/&#34;&gt;MongoDB の update は部分 update ではない&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;基本部分updateでいい気がするけど、なんでキーを置き換えるようにしているんだろう…？&lt;/li&gt;
&lt;li&gt;MySQLと違ってどんな列があるか明確じゃないし、データを消すのが難しいからとか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/12/08/wl_report/&#34;&gt;Wunderlistでサマリー出力をする&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;まだ使ってる。便利。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/12/09/500_output/&#34;&gt;GithubのContributionsを使ってアウトプットを500日続ける&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;どうも表示される最大長しかカウントされないらしく、今見たらLongestが500より減っていた&lt;/li&gt;
&lt;li&gt;常に手を動かし続ける習慣はできたし、良かったと思う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/12/13/hci_advent_13/&#34;&gt;論文紹介「Unravel: Rapid Web Application Reverse Engineering via Interaction Recording, Source Tracing, and Library Detection」&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;めっちゃ便利。早く標準搭載されて欲しい。&lt;/li&gt;
&lt;li&gt;普通のデバッガはわかっているコードに対してバグ調査に使えるけど、コード理解のお供としては使えないよね。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/12/25/hci_advent_25/&#34;&gt;論文紹介「Corona: Positioning Adjacent Device with Asymmetric Bluetooth Low Energy RSSI Distributions」&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Bluetoothだけで距離計測ができるとか凄い&lt;/li&gt;
&lt;li&gt;実際適当に追実装してもいい精度になるので、ちゃんと作れば凄い良さそう。&lt;/li&gt;
&lt;li&gt;ボードゲームの一部として使えそう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2015年34週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-34/</link>
      <pubDate>Mon, 24 Aug 2015 07:34:15 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-34/</guid>
      <description>

&lt;h1 id=&#34;毎週まとめはおしまい&#34;&gt;毎週まとめはおしまい&lt;/h1&gt;

&lt;p&gt;そもそも自作のTODOアプリで、やったことを見返す習慣が付いたので、やったことを各週ごとにまとめるのはおしまい。&lt;/p&gt;

&lt;h1 id=&#34;rsyncで特定フォルダをバックアップする&#34;&gt;rsyncで特定フォルダをバックアップする&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;rsync -a --delete origin/ backup&lt;/code&gt;&lt;br /&gt;
で、backupフォルダの中身をoriginと一緒になるように同期してくれるため、フォルダごとバックアップすることが出来ます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rsync -a --delete origin backup&lt;/code&gt;&lt;br /&gt;
と、スラッシュを外すと、backupフォルダ内にoriginフォルダを作って同期します。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年33週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-33/</link>
      <pubDate>Mon, 17 Aug 2015 22:08:50 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-33/</guid>
      <description>

&lt;h1 id=&#34;tmux-change-pane作った&#34;&gt;tmux-change-pane作った&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/abicky/swap-pane&#34;&gt;swap-pane&lt;/a&gt;は機能としてはとても便利なのですが、&lt;br /&gt;
ショートカットからの切り替え時に画面全てを切り替えてしまい、&lt;br /&gt;
とても使いづらかったので現在のパネル上で切り替える版を作りました。&lt;br /&gt;
&lt;a href=&#34;https://github.com/ota42y/tmux-change-pane&#34;&gt;tmux-change-pane&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いずれちゃんと記事を書く予定です…&lt;/p&gt;

&lt;h1 id=&#34;c-03だとmapのatが無い&#34;&gt;C++03だとmapのatが無い&lt;/h1&gt;

&lt;p&gt;std::mapの[]は値が無い場合、その値を作ってしまうためconstではありません。&lt;br /&gt;
&lt;a href=&#34;http://www.cplusplus.com/reference/map/map/operator[]/&#34;&gt;http://www.cplusplus.com/reference/map/map/operator[]/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そのため、以下のように配列内の要素を参照する場合、たとえ100％あることがわかっていても、constにすることは出来ません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void printName(int unique_id, const std::map&amp;lt;int, std::string&amp;gt; &amp;amp;uniqueIdToName) {
  printf(&amp;quot;%s\n&amp;quot;, uniqueIdToName[unique_id].c_str());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そのため、以下のようにfindして要素を取り出す必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void printName(int unique_id, const std::map&amp;lt;int, std::string&amp;gt; &amp;amp;uniqueIdToName) {
  std::map&amp;lt;int, std::string&amp;gt;::const_iterator it = uniqueIdToName.find(unique_id);
  printf(&amp;quot;%s\n&amp;quot;, it-&amp;gt;second.c_str());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C++11からだとconstでも使えるatメソッドが用意されているため、これを利用することで、以下のようにかなりすっきりと書くことができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void printName(int unique_id, const std::map&amp;lt;int, std::string&amp;gt; &amp;amp;uniqueIdToName) {
  printf(&amp;quot;%s\n&amp;quot;, uniqueIdToName.at(unique_id).c_str());
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2015年32週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-32/</link>
      <pubDate>Mon, 10 Aug 2015 21:50:30 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-32/</guid>
      <description>

&lt;h1 id=&#34;最近のhci研究を調べてる&#34;&gt;最近のHCI研究を調べてる&lt;/h1&gt;

&lt;p&gt;とりあえずざっとアブストを見て良さそうなものをピックアップする作業。&lt;br /&gt;
いくつかは昔読んだ奴をもう一度読んでいたりします。&lt;/p&gt;

&lt;h2 id=&#34;jamsheets&#34;&gt;jamSheets&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tangible.media.mit.edu/project/jamsheets/&#34;&gt;http://tangible.media.mit.edu/project/jamsheets/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一枚のシートを、人が座れるぐらい堅くしたり、毛布みたいにまで柔らかくしたり、&lt;br /&gt;
自由自在に過多さを変えられるシートを作ったみたい。&lt;br /&gt;
どうなっているのかすごい気になる…&lt;/p&gt;

&lt;h2 id=&#34;inverse-foley-animation&#34;&gt;Inverse-Foley Animation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cs.cornell.edu/projects/Sound/ifa/&#34;&gt;http://www.cs.cornell.edu/projects/Sound/ifa/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;事前に音と3Dモデルを学習しておき、入力された音にマッチする映像を作成する。&lt;br /&gt;
映像にマッチする音じゃなくて、音にマッチする映像を作るのがすごい…&lt;/p&gt;

&lt;h2 id=&#34;afordance&#34;&gt;afordance++&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://hpi.de/baudisch/projects/affordance.html&#34;&gt;http://hpi.de/baudisch/projects/affordance.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ものを持ったときや触れる前に、そのものの情報にあった動きを腕に提示することで、&lt;br /&gt;
触れずとも熱いものがわかったり、どう扱えば良いかがわかるようになる。&lt;br /&gt;
大体視覚と過去の経験に頼ってるアフォーダンスを大幅に拡張できて凄い。&lt;/p&gt;

&lt;h2 id=&#34;3d-object-manipulation-in-a-single-photograph-using-stock-3d-models&#34;&gt;3D Object Manipulation in a Single Photograph using Stock 3D Models&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cs.cmu.edu/~om3d/&#34;&gt;http://www.cs.cmu.edu/~om3d/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一枚の画像から3Dオブジェクトを取り出し、写真と上手く合成してくれるっぽい。&lt;br /&gt;
光の加減とかも調節してくれるため、凄く上手く合成出来ていて凄かった。&lt;/p&gt;

&lt;h2 id=&#34;fluxpaper-reinventing-paper-with-dynamic-actuation-powered-by-magnetic-flux&#34;&gt;FluxPaper: Reinventing Paper With Dynamic Actuation Powered by Magnetic Flux&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://masaogata.com/projects/fluxpaper/&#34;&gt;http://masaogata.com/projects/fluxpaper/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;紙の裏に磁力を持つ物体を付け、磁界を制御することで紙の移動や検索などを可能にしたみたい。&lt;br /&gt;
紙に付ける方のパターンを工夫してるっぽい。&lt;/p&gt;

&lt;h2 id=&#34;scene-completion-using-millions-of-photographs&#34;&gt;Scene Completion Using Millions of Photographs&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://graphics.cs.cmu.edu/projects/scene-completion/&#34;&gt;http://graphics.cs.cmu.edu/projects/scene-completion/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;従来の写真の中の一部分を削除する技術に加え、&lt;br /&gt;
大量の画像の中から似た画像を探し出してくることで、&lt;br /&gt;
消した部分を正しく補完できるみたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年31週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-31/</link>
      <pubDate>Mon, 03 Aug 2015 22:21:40 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-31/</guid>
      <description>

&lt;h1 id=&#34;エンジニアボドゲ会に参加しました&#34;&gt;エンジニアボドゲ会に参加しました&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://tgboardgame.connpass.com/event/17621/&#34;&gt;不思議な力によってエンジニアが多く集まる（エンジニア以外も集まる）ボードゲーム会&lt;/a&gt;に参加しました。&lt;br /&gt;
想像以上にボードゲームがあって凄かったです。&lt;/p&gt;

&lt;p&gt;プレイしたゲームは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;王たちの同人誌

&lt;ul&gt;
&lt;li&gt;同人誌即売会をネタにしたゲーム&lt;/li&gt;
&lt;li&gt;カードの引きにかなり左右される&lt;/li&gt;
&lt;li&gt;イベントあるあるネタが多数&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;枯山水

&lt;ul&gt;
&lt;li&gt;徳を高めて庭を造る&lt;/li&gt;
&lt;li&gt;中々思い通りにならなくて面白い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Splendor

&lt;ul&gt;
&lt;li&gt;拡大再生産を繰り返していく&lt;/li&gt;
&lt;li&gt;素材を元に素材を生み出すカードを買うのでインフレしていく&lt;/li&gt;
&lt;li&gt;インフレさせすぎると他の人にゲームクリアされるので、バランス大事&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;エセ芸術家ニューヨークへ行く

&lt;ul&gt;
&lt;li&gt;お題の絵を一筆ずつ書いていく&lt;/li&gt;
&lt;li&gt;一人だけいる、お題を知らない人（エセ芸術家）を見つける&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ピクテル

&lt;ul&gt;
&lt;li&gt;出されたお題をピクトグラムで表現してあててもらうゲーム&lt;/li&gt;
&lt;li&gt;限られたピクトグラムを組み合わせてお題を表現するのがとても面白い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;init

&lt;ul&gt;
&lt;li&gt;変数の初期化を元にしたゲーム&lt;/li&gt;
&lt;li&gt;ルールがよくわからず、おかしい状態に陥った…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CV 履歴書

&lt;ul&gt;
&lt;li&gt;自分の履歴書を作っていくゲーム&lt;/li&gt;
&lt;li&gt;さいころ運が全てを左右する&lt;/li&gt;
&lt;li&gt;勝敗もそうだけど、どんな履歴書になったかを見るのも面白い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;羊と狼のピースフルワールド

&lt;ul&gt;
&lt;li&gt;カードを自分で見えないように掲げ、自分以外の番号から自分のの番号を推理するゲーム&lt;/li&gt;
&lt;li&gt;頭の体操に良さそう&lt;/li&gt;
&lt;li&gt;番号が書かれていないカードもある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;お蜜柑様

&lt;ul&gt;
&lt;li&gt;指定された動きを取り入れた踊りをするゲーム&lt;/li&gt;
&lt;li&gt;他のチームの動きが何かを推理して、それも踊りに入れる&lt;/li&gt;
&lt;li&gt;1度やってみたいけど2回目以降はやってるのを見ていたいゲーム&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;お邪魔無視

&lt;ul&gt;
&lt;li&gt;お宝まで通路を延ばしていくゲーム&lt;/li&gt;
&lt;li&gt;チームに分かれてたり、お宝を取らせなかったら勝つ人がいたり&lt;/li&gt;
&lt;li&gt;お互い仲間なのか敵なのかわからずに進む感じが面白い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;なつのたからもの

&lt;ul&gt;
&lt;li&gt;なつのたからものを集めるゲーム&lt;/li&gt;
&lt;li&gt;金魚すくい、かき氷、花火大会、etc&amp;hellip;&lt;/li&gt;
&lt;li&gt;カードを集めて合計得点を競う&lt;/li&gt;
&lt;li&gt;欲張りすぎると何も手に入らない等バランス大事&lt;/li&gt;
&lt;li&gt;精神的ダメージが大きい&lt;/li&gt;
&lt;li&gt;あの頃のあの夏は2度と来ない…(´・_・`)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ディクシット

&lt;ul&gt;
&lt;li&gt;出されたお題に最も近いものを手札のカードから選ぶ&lt;/li&gt;
&lt;li&gt;かなり抽象的なカードばかりで、ぴったりのを考えるのが面白い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;情報科学若手の会2015に参加します&#34;&gt;情報科学若手の会2015に参加します&lt;/h1&gt;

&lt;p&gt;今回はショート発表でHCIについて話す予定です。&lt;br /&gt;
おそらく基本的な研究から、最新動向ぐらいまでをざっと話せれば良いかなと思います。&lt;/p&gt;

&lt;p&gt;そのために取り合えずUISTとCHIを見返して、最近の内容をキャッチアップしようと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年30週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-30/</link>
      <pubDate>Mon, 27 Jul 2015 23:09:42 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-30/</guid>
      <description>

&lt;h1 id=&#34;ブログ修正中&#34;&gt;ブログ修正中&lt;/h1&gt;

&lt;p&gt;Bootstrapを使って構築し直してます。&lt;br /&gt;
ついでにHugoをv0.14に上げたところ、いくつかdeprecatedになっていたので修正してます。&lt;/p&gt;

&lt;h1 id=&#34;freeコマンドの出力が変わってる&#34;&gt;freeコマンドの出力が変わってる&lt;/h1&gt;

&lt;p&gt;freeするとavailableなる見慣れない出力が出ます…&lt;br /&gt;
おそらく空きメモリを示しているようですが、ちょっと調べる必要がありそうです。&lt;/p&gt;

&lt;h1 id=&#34;evernoteの代わりを探し中&#34;&gt;Evernoteの代わりを探し中&lt;/h1&gt;

&lt;p&gt;昨日ちょうどEvernoteプレミアムが切れてしまい、慌てて延長しました。&lt;/p&gt;

&lt;p&gt;このとき、一時的に容量超過状態になったため、説明には「コンテンツのアップロードが出来ません」と出ていましたが、&lt;br /&gt;
ローカルのEvernoteクライアント上での編集や新規ノートの作成など、アップロード以外の作業が全て出来なくなっていました。&lt;br /&gt;
また、その際の挙動も編集できないのでは無く、従来通り編集可能ですが保存されないため、&lt;br /&gt;
別の操作をしたタイミングでデータが消滅するというかなり危険な挙動をしていました。&lt;/p&gt;

&lt;p&gt;今回はたまたまオンラインに繋げる環境にいたので大事には至りませんでしたが、&lt;br /&gt;
もしオフライン環境だったらと思うと一大事です…&lt;/p&gt;

&lt;p&gt;Evernoteはオフラインでもそこに保存しておけば次にオンラインになった時に同期されるという仕様のため、&lt;br /&gt;
オフライン環境で特によく使い、その上プレミアムを戻しても非プレミアム中にやった変更は消滅するため、かなり被害が大きいです。&lt;/p&gt;

&lt;p&gt;というわけで、Evernoteは参照オンリーの情報だけ保存するようにし、&lt;br /&gt;
変更が必要なノートなどは別の方式で管理しようと思います。&lt;br /&gt;
元々ノートの容量増加に伴って、Evernoteクライアントの反応速度が低下しつつありましたし、
良い頃合いかと思います。&lt;/p&gt;

&lt;p&gt;おそらくDropbox内に置いたファイルを上手く閲覧するような感じになると思います。&lt;br /&gt;
此方の場合は最悪でもローカルファイルになるだけなので、Evernoteのように変更不可能になることはないため、何かあった場合でも大丈夫です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年29週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-29/</link>
      <pubDate>Tue, 21 Jul 2015 17:56:49 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-29/</guid>
      <description>

&lt;h1 id=&#34;cpuの特権レベルについて調べた&#34;&gt;CPUの特権レベルについて調べた&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/CPU%E3%83%A2%E3%83%BC%E3%83%89&#34;&gt;CPUモード&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%B3%E3%82%B0%E3%83%97%E3%83%AD%E3%83%86%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3&#34;&gt;リングプロテクション&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CPUには複数のモードが存在し、特定の機能やメモリ領域にアクセスできるかどうかがこのモードで制御されるらしいです。&lt;/p&gt;

&lt;p&gt;通常、ユーザのプログラムはレベル３、カーネルがレベル０で動いており、&lt;br /&gt;
ユーザのプログラムはレベル０で動いています。&lt;br /&gt;
そのため、 レベル０用のリソースを使うためにはカーネルに処理をお願いする必要があるそうです。&lt;/p&gt;

&lt;h1 id=&#34;goのビルドツールについて調べる&#34;&gt;goのビルドツールについて調べる&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;go build&lt;/code&gt;を実行することで、コンパイルとリンクをまとめて行うことが出来ます。&lt;br /&gt;
ですが、goではそれを別々に実行することも出来ます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go tool 8g&lt;/code&gt;もしくは&lt;code&gt;go tool 6g&lt;/code&gt;を使うことで、goのソースコードからオブジェクトファイルを作成できます。&lt;br /&gt;
(どちらかは使用しているマシンのアーキテクチャによります)&lt;/p&gt;

&lt;p&gt;生成されるオブジェクトファイルは.8もしくは.6の拡張子になります。&lt;br /&gt;
このファイルを&lt;code&gt;go tool 8l&lt;/code&gt;もしくは&lt;code&gt;go tool 6l&lt;/code&gt;を使ってリンクすることで、実行ファイルを作成できます。&lt;br /&gt;
実行ファイルはファイル名を指定しない場合、8.outもしくは6.outになります。&lt;/p&gt;

&lt;h1 id=&#34;レーベンシュタイン距離計算を実装した&#34;&gt;レーベンシュタイン距離計算を実装した&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/ota42y/29dc71841f4388957020&#34;&gt;https://gist.github.com/ota42y/29dc71841f4388957020&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;二つの文字列のうち、片方をどれくらい編集したらもう片方の文字列に出来るかを求めるやつです。&lt;br /&gt;
アルゴリズム的には凄い簡単ですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年28週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-28/</link>
      <pubDate>Mon, 13 Jul 2015 23:25:27 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-28/</guid>
      <description>

&lt;h1 id=&#34;シェル環境を改善中&#34;&gt;シェル環境を改善中&lt;/h1&gt;

&lt;p&gt;tmux plugin managerを導入しました。&lt;br /&gt;
&lt;a href=&#34;https://github.com/tmux-plugins/tpm&#34;&gt;https://github.com/tmux-plugins/tpm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;tmuxのconfファイルでやる設定をある程度共通化し、
プラグインのインストールだけで使えるようにするものです。&lt;br /&gt;
公式でいくつか便利なものが提供されているので入れてみました。&lt;br /&gt;
プラグインは自分で作れるので、swap-paneもこれで管理したいな…と思います。&lt;/p&gt;

&lt;h1 id=&#34;pecoの導入&#34;&gt;pecoの導入&lt;/h1&gt;

&lt;p&gt;入力からインクリメンタルに行を検索できるツールです。&lt;br /&gt;
goなのでバイナリ単体で簡単に動き、インストールが簡単なのが特徴です。&lt;br /&gt;
&lt;a href=&#34;https://github.com/peco/peco&#34;&gt;https://github.com/peco/peco&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ota42y/dotfiles/commit/62ea2fa76cfa0fab8ee8076e0eb59f3b1421b42e&#34;&gt;前にいたディレクトリをたどる設定&lt;/a&gt;や、
&lt;a href=&#34;https://github.com/ota42y/dotfiles/commit/2d16f36f14520862eb5292b05c278016d180bdf3&#34;&gt;git statusから指定したファイルをinsertする設定&lt;/a&gt;をしました。&lt;/p&gt;

&lt;h1 id=&#34;markdown-modeが便利&#34;&gt;markdown-modeが便利&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://jblevins.org/projects/markdown-mode/&#34;&gt;http://jblevins.org/projects/markdown-mode/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;emacs上でmarkdownのハイライトやスニペット入力が出来る便利モードです。&lt;br /&gt;
個人的には見出しをorg-modeのように折りたたみが出来るので、&lt;br /&gt;
アウトラインエディタとしてものすごく便利です。&lt;/p&gt;

&lt;h1 id=&#34;mecab-ipadicをいじっていた&#34;&gt;mecab-ipadicをいじっていた&lt;/h1&gt;

&lt;p&gt;形態素解析をいじってみたくて、igoとmecab-ipadicについて調べていました。&lt;/p&gt;

&lt;h2 id=&#34;igoとは&#34;&gt;igoとは&lt;/h2&gt;

&lt;p&gt;igoとはjava製の形態素解析です。
&lt;a href=&#34;http://igo.osdn.jp/&#34;&gt;http://igo.osdn.jp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;javaとantがあれば直ぐに使えるため、インストールがとても楽です。&lt;br /&gt;
なお、辞書は同梱されていないため、mecabの辞書を取ってくる必要があります。&lt;br /&gt;
&lt;a href=&#34;http://taku910.github.io/mecab/&#34;&gt;http://taku910.github.io/mecab/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;辞書が組み込みではないので普通に使う分にはちょっと面倒ですが、
今回のように辞書をいじって動きを観察する用途にとても便利でした。&lt;/p&gt;

&lt;h2 id=&#34;ipadicを変更してみる&#34;&gt;ipadicを変更してみる&lt;/h2&gt;

&lt;p&gt;igoの動かし方はサイトの通りなので省略します。&lt;/p&gt;

&lt;p&gt;ipadicから解析用のバイナリ辞書を生成する手順がありますが、&lt;br /&gt;
このときipadicのフォルダに辞書ファイルを追加する事で、新たな辞書を追加する事が出来ます。&lt;br /&gt;
また、既存のファイルを削除することで単語の登録をさせないことが出来るため、&lt;br /&gt;
自分が作った辞書だけにすることで、正しく使えるかどうかを調べることが出来ます。&lt;/p&gt;

&lt;p&gt;なお、バイナリ辞書作成時はフォルダの中のcsvを全て読み込むらしく、&lt;br /&gt;
追加時に必要な設定などは無いようです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年27週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-27/</link>
      <pubDate>Mon, 06 Jul 2015 22:42:53 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-27/</guid>
      <description>

&lt;h1 id=&#34;tmux環境を整えた&#34;&gt;tmux環境を整えた&lt;/h1&gt;

&lt;p&gt;画像のように、tmux内でemacsを開きつつ、zshを表示するようにしました。&lt;br /&gt;
ただペインを分けているだけでなく、ペインの中身はウィンドウなので、&lt;br /&gt;
ウィンドウを作って入れ換えたり、左右の中身を入れ換えたり出来ます。&lt;/p&gt;

&lt;p&gt;具体的にはこんな感じで、分割を維持したまま各シェルを入れ換え可能です。
&lt;img src=&#34;http://ota42y.com/images/blog/2015/2015-07-06-tmux.png&#34; alt=&#34;2015-07-06-tmux.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;入れ替えはswap-paneを利用しています。&lt;br /&gt;
&lt;a href=&#34;https://github.com/abicky/swap-pane&#34;&gt;https://github.com/abicky/swap-pane&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;gemのannotateが便利&#34;&gt;gemのAnnotateが便利&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ctran/annotate_models&#34;&gt;https://github.com/ctran/annotate_models&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DBからSchemaを読み取り、対応するモデルが書かれたファイルにその情報を書き込むgemです。&lt;br /&gt;
このモデルにどんなカラムがあったっけ？って時に、schemeファイルから探し出す必要がなくなるので大変便利です。&lt;br /&gt;
また、情報はコメントに追加されるため、既存のコードの邪魔になったり勝手にアクセサが追加されたりしないのも便利です。&lt;/p&gt;

&lt;h1 id=&#34;emacsのパッケージ管理&#34;&gt;emacsのパッケージ管理&lt;/h1&gt;

&lt;p&gt;現在私のemacsはpackage.el、el-get、init-loaderの3つを使ってパッケージ管理をしています。&lt;br /&gt;
package.el、el-getがパッケージのDLや読み込み、init-loaderが設定ファイルのロードをしています。&lt;/p&gt;

&lt;p&gt;具体的な使い方はググれば解るので省略するとして、使い分けとこの構成になった理由は以下の通りです。&lt;/p&gt;

&lt;p&gt;なお、以下のリポジトリに設定ファイルが置いてあります。
&lt;a href=&#34;https://github.com/ota42y/dotfiles&#34;&gt;https://github.com/ota42y/dotfiles&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;パッケージ本体の管理&#34;&gt;パッケージ本体の管理&lt;/h2&gt;

&lt;p&gt;まず、package.elはMELPA等専用なため、そこにあるパッケージはこちらで管理します。&lt;br /&gt;
一方で、githubや個別のgitリポジトリで管理されているものはel-getでrecipeを書いて管理しています。&lt;br /&gt;
機能的にはel-getだけで完結しますが、package.elの方が楽なので基本はpackage.el、&lt;br /&gt;
そこでカバーできないものをel-getで管理させています。&lt;/p&gt;

&lt;p&gt;また、これらで管理されているものは自動でロードされるようになっているため、&lt;br /&gt;
設定ファイルに追加するだけでインストールが完了します。&lt;/p&gt;

&lt;h2 id=&#34;パッケージ設定の管理&#34;&gt;パッケージ設定の管理&lt;/h2&gt;

&lt;p&gt;init-loderを使うことで、特定フォルダ内の設定ファイルを一気に読み込むことが出来ます。&lt;br /&gt;
このため、気軽に設定ファイルを分割できます。&lt;/p&gt;

&lt;p&gt;ファイル名に数字を入れる事で読み込む順番の設定も出来るため、&lt;br /&gt;
package.elがダウンロードし、読み込みが終了してからパッケージの設定ファイルを読み込むように設定しています。&lt;/p&gt;

&lt;p&gt;また、私の環境では、el-getでinit-loaderを管理しているため、&lt;br /&gt;
el-get&amp;gt;init-loder&amp;gt;package.el&amp;gt;その他の設定ファイルの順で実行をしています。&lt;br /&gt;
el-getも自動インストールするようにしているため、設定ファイルを持って行くだけで全て自動でインストールできます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;recipeに追加（必要なら）&lt;/li&gt;
&lt;li&gt;使用するパッケージを追加する

&lt;ul&gt;
&lt;li&gt;package.elの場合&lt;/li&gt;
&lt;li&gt;init-loderから読まれるpackage.el用の設定ファイル&lt;/li&gt;
&lt;li&gt;無ければ自動で読み込む&lt;/li&gt;
&lt;li&gt;el-getの場合&lt;/li&gt;
&lt;li&gt;emacs.dのinit.elに名前を書く&lt;/li&gt;
&lt;li&gt;recipeを元にDLする&lt;/li&gt;
&lt;li&gt;自動で読み込みも行われる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;設定をconf下に書く

&lt;ul&gt;
&lt;li&gt;init-loderが読み込む&lt;/li&gt;
&lt;li&gt;カスタマイズが必要ならば&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2015年26週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-26/</link>
      <pubDate>Mon, 29 Jun 2015 22:17:29 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-26/</guid>
      <description>

&lt;h1 id=&#34;fluentd-forwarderのビルドの仕組み&#34;&gt;fluentd-forwarderのビルドの仕組み&lt;/h1&gt;

&lt;p&gt;基本はREADMEの通りにすればビルド出来ますが、やっていることがちょっと複雑なのでメモ。&lt;br /&gt;
&lt;a href=&#34;https://github.com/fluent/fluentd-forwarder&#34;&gt;https://github.com/fluent/fluentd-forwarder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;READMEに書いてある一つ目の手順の、&lt;br /&gt;
&lt;code&gt;go get github.com/fluent/fluentd-forwarder/entrypoints/build_fluentd_forwarder&lt;/code&gt;&lt;br /&gt;
で、GOPATH以下にリポジトリがcloneし、&lt;br /&gt;
entrypoints/build_fluentd_forwarder内のビルド作業用バイナリが作られます。&lt;/p&gt;

&lt;p&gt;次に、&lt;code&gt;bin/build_fluentd_forwarder fluentd_forwarder&lt;/code&gt;を実行することで、&lt;br /&gt;
さっき作ったbuild_fluentd_forwarderが&lt;code&gt;go get -u&lt;/code&gt;を実行し、&lt;br /&gt;
リポジトリをcloneして(既にしているけど)、entrypoints/fluentd_forwarder下をビルドします。&lt;/p&gt;

&lt;p&gt;というわけで、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;go getでbuild_fluentd_forwarderをビルドする&lt;/li&gt;
&lt;li&gt;build_fluentd_forwarderがgo getでfluentd_forwarderをビルドする。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という流れになっています。&lt;/p&gt;

&lt;h1 id=&#34;fluentd-forwarderに手を加えてみる&#34;&gt;fluentd-forwarderに手を加えてみる&lt;/h1&gt;

&lt;h2 id=&#34;ローカルで変更する場合&#34;&gt;ローカルで変更する場合&lt;/h2&gt;

&lt;p&gt;fluentd-forwarderに手を加えたい場合、GOPATH下のfluent/fluentd-forwarderを書き換えてビルドするのが最も早い方法です。&lt;br /&gt;
build_fluentd_forwarderがcloneしますが、変更はそのままでビルド出来ます。&lt;/p&gt;

&lt;h2 id=&#34;forkしたリポジトリに変更を加える場合&#34;&gt;Forkしたリポジトリに変更を加える場合&lt;/h2&gt;

&lt;p&gt;Forkしてそこに対して変更をした場合、若干やっかいな事が起きます。&lt;/p&gt;

&lt;p&gt;前述したように、build_fluentd_forwarderはgo getを使い、リポジトリをクローンしてビルドします。&lt;br /&gt;
そのため、build_fluentd_forwarderの中に書いてあるリポジトリを書き換え、自分のリポジトリに変更する必要があります。&lt;/p&gt;

&lt;p&gt;また、entrypoints/fluentd_forwarderはリポジトリルートのファイルを外部ライブラリとしてインポートしています。&lt;br /&gt;
そのため、main.goでfluent/fluentd_folwarderをインポートしている部分も、自分のリポジトリに変更する必要があります。&lt;/p&gt;

&lt;p&gt;以上の変更を加えることで、Forkした自分のリポジトリからビルドすることが出来ます。&lt;/p&gt;

&lt;p&gt;まとめると以下のの2ステップになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;build_fluentd_forwarder内のリポジトリを書き換える

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fluent/fluentd-forwarder/blob/master/entrypoints/build_fluentd_forwarder/main.go&#34;&gt;https://github.com/fluent/fluentd-forwarder/blob/master/entrypoints/build_fluentd_forwarder/main.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ImportPathBaseを書き換える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;fluent/fluentd_forwarderをインポートしている部分を書き換える

&lt;ul&gt;
&lt;li&gt;entrypoints/fluentd_forwarder以下の2ファイル共&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前者はbueild_fluentd_forwarderを変えれば何とかなりそうですが、&lt;br /&gt;
後者はgoのimportの仕組みがリポジトリ名まで指定する仕組みのため、書き換える以外に良い解決方法が思いつきません。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年25週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-25/</link>
      <pubDate>Mon, 22 Jun 2015 22:09:20 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-25/</guid>
      <description>

&lt;h1 id=&#34;go-conに参加していた&#34;&gt;go conに参加していた&lt;/h1&gt;

&lt;p&gt;去年の秋と比べて、実際に使っている例が多くて、&lt;br /&gt;
もうプロダクション投入されてるなーという印象でした。
&lt;a href=&#34;http://ota42y.com/blog/2015/06/21/gocon-2015-summer/&#34;&gt;参加記録 Go Conference 2015 summer&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;atom-ioは辞めた&#34;&gt;atom.ioは辞めた&lt;/h1&gt;

&lt;p&gt;Atom.ioの現状の仕様は、プロジェクトごとにウィンドウを割り当てて使うようになっています。&lt;br /&gt;
ですが、MacではWindowsに比べて同じアプリ内のウィンドウを切り替えるのがとても大変であり、&lt;br /&gt;
このようにウィンドウを細かく分けられると著しく不便です。&lt;br /&gt;
Macのひどい仕様に負けるのはあまり良い気分ではないですが、&lt;br /&gt;
このあたりの仕様が変わるまでは私の使い方では使い物になりません…&lt;/p&gt;

&lt;p&gt;また、立ち上がりが重いのも大きな問題の1つです。&lt;br /&gt;
ビルド中はCPUをものすごく使っているおり、その状態でAtom.ioを立ち上げると起動まで十数秒かかります。&lt;br /&gt;
ただこの点に関しては、ネィティブではなくwebエンジニアであれば問題にならないとは思います。&lt;/p&gt;

&lt;h1 id=&#34;gosweepが便利そう&#34;&gt;gosweepが便利そう&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hailiang/gosweep&#34;&gt;https://github.com/hailiang/gosweep&lt;/a&gt;&lt;br /&gt;
gofmtやgolint等のgoの便利ツールを全て実行してくれる奴です。&lt;br /&gt;
便利＆go vetやgoimports等知らないのもあったので有用そうです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年24週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-24/</link>
      <pubDate>Mon, 15 Jun 2015 22:37:01 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-24/</guid>
      <description>

&lt;h1 id=&#34;c-入出力の書式を制御する&#34;&gt;C++入出力の書式を制御する&lt;/h1&gt;

&lt;p&gt;c++でstreamを使って出力する場合、iomanipに用意されているものを利用することで、&lt;br /&gt;
入出力の書式を制御することが出来ます。&lt;/p&gt;

&lt;p&gt;設定はstreamに対して設定用のオブジェクトを送るように設定するみたいです。&lt;br /&gt;
なお、以下は出力の例です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;iomanip&amp;gt;

int main(void) {
  double a = 25252;
  int p = 2;

  std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; std::endl; // 25252
  std::cout &amp;lt;&amp;lt; std::setprecision(p); //浮動小数点の有効桁数を指定する
  std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; std::endl; // 2.5e+04

  std::cout &amp;lt;&amp;lt; std::oct; // 8進数表示
  std::cout &amp;lt;&amp;lt; 874 &amp;lt;&amp;lt; std::endl; // 1552

  std::cout &amp;lt;&amp;lt; std::showbase; // 基数を表示する
  std::cout &amp;lt;&amp;lt; std::hex; // 16進数表示
  std::cout &amp;lt;&amp;lt; 874 &amp;lt;&amp;lt; std::endl; // 0x36a
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2015年23週目まとめ</title>
      <link>http://ota42y.com/pages/summary/2015/week-23/</link>
      <pubDate>Mon, 08 Jun 2015 23:41:38 +0900</pubDate>
      
      <guid>http://ota42y.com/pages/summary/2015/week-23/</guid>
      <description>

&lt;h1 id=&#34;lock-freeって何&#34;&gt;Lock Freeって何&lt;/h1&gt;

&lt;p&gt;複数スレッドや複数コアから同じデータを更新する場合、&lt;br /&gt;
通常はlockをかけて排他制御を行いますが、lockをかけずに行う方法があるらしいです。&lt;/p&gt;

&lt;p&gt;lockをかける場合、その間そのデータにはアクセスできず、並列処理を止めてしまうため、&lt;br /&gt;
並列数が大きくなるに従って性能が劣化していくそうです。&lt;br /&gt;
lockなしで排他処理を行う場合、並列数を増やしても性能の劣化が無くなるそうです。&lt;/p&gt;

&lt;p&gt;やっていることとしては、値をコピーして変更を加え、&lt;br /&gt;
「コピー前の値と現在の値が一緒かどうかをチェック」「変更した値を書き込む」を一括にやる命令を利用し、&lt;br /&gt;
比較と更新を同時にするというものだそうです。&lt;br /&gt;
(Compare-and-Swap、CAS命令)&lt;/p&gt;

&lt;p&gt;この比較して更新する命令があることで、&lt;br /&gt;
ロックせずに複数から値を変更しても一貫性が保たれるらしいです。&lt;br /&gt;
また、この命令が無いとlock freeが実現できない事が証明されているらしいです。&lt;br /&gt;
 &lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3%E3%83%9A%E3%82%A2%E3%83%BB%E3%82%A2%E3%83%B3%E3%83%89%E3%83%BB%E3%82%B9%E3%83%AF%E3%83%83%E3%83%97&#34;&gt;コンペア・アンド・スワップ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;i386ではCMPXCHG〜命令でこれが出来るらしく、&lt;br /&gt;
goのatomicパッケージでも利用されているようです。&lt;br /&gt;
&lt;a href=&#34;https://github.com/golang/go/blob/master/src/sync/atomic/asm_386.s#L34&#34;&gt;https://github.com/golang/go/blob/master/src/sync/atomic/asm_386.s#L34&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>