<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[おおたの物置]]></title>
  <link href="http://ota42y.com/atom.xml" rel="self"/>
  <link href="http://ota42y.com/"/>
  <updated>2014-11-10T07:57:02+09:00</updated>
  <id>http://ota42y.com/</id>
  <author>
    <name><![CDATA[ota42y]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hubotの追加機能作成をテストで楽にする]]></title>
    <link href="http://ota42y.com/blog/2014/11/10/hubot-test/"/>
    <updated>2014-11-10T07:54:39+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/10/hubot-test</id>
    <content type="html"><![CDATA[<p>Hubotで追加機能を作るときに一番大変なのは、やはりテストの部分だと思います。<br/>
普通に頑張ると、起動してbotにメッセージ送って、動かなければ止めて修正…といった、<br/>
面倒な手順を踏むことになります。<br/>
また、普通に起動するとエラーも吐いてくれないため、デバッグは非常に困難です。</p>

<p>しかし、テストを書いて開発をする場合、メッセージ送信やメッセージのデータ取得など、<br/>
Hubotに依存する部分をstubで置き換えるのはとても面倒な作業です。</p>

<p>そこで、作りたい機能をパッケージ化して作成することで、<br/>
トライアンドエラーをする部分を最低限に絞って開発することができました。</p>

<h1>Hubot用パッケージの構成</h1>

<p>Hubotはpackage.jsonのmainに指定したファイルをロードしてくれるため、<br/>
ここにhubot用のスクリプトを書くことで、Hubotスクリプトをnpmパッケージで管理できます。</p>

<p>さらに、以下のようにhubotスクリプトから、処理をまとめたオブジェクトの特定のメソッドを呼び出すことで、<br/>
Hubotの連携部分と実際の処理を分けることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">PackageClass = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;./package-name/package-class.coffee&#39;</span><span class="p">).</span><span class="nx">PackageClass</span>
</span><span class='line'><span class="nv">module.exports = </span><span class="nf">(robot) -&gt;</span>
</span><span class='line'>  <span class="nv">package_class = </span><span class="k">new</span> <span class="nx">PackageClass</span>
</span><span class='line'>  <span class="nx">robot</span><span class="p">.</span><span class="nx">respond</span> <span class="sr">/test call (\d+)( \w+)?/</span><span class="p">,</span> <span class="nf">(msg) -&gt;</span>
</span><span class='line'>    <span class="nv">arg1 = </span><span class="nb">parseInt</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="nv">arg2 = </span><span class="nx">msg</span><span class="p">.</span><span class="nx">match</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">msg</span><span class="p">.</span><span class="nx">reply</span> <span class="nx">package_class</span><span class="p">.</span><span class="nx">testCall</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>フォルダ構成は以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">parkage</span><span class="o">-</span><span class="nx">root</span><span class="o">/</span>
</span><span class='line'> <span class="err">├</span> <span class="nx">package</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'> <span class="err">│</span>
</span><span class='line'> <span class="err">├</span> <span class="nx">src</span><span class="o">/</span>
</span><span class='line'> <span class="err">│</span>  <span class="err">├</span> <span class="nx">hubot</span><span class="o">-</span><span class="nx">command</span><span class="p">.</span><span class="nx">coffee</span>
</span><span class='line'> <span class="err">│</span>  <span class="err">└</span> <span class="nx">package</span><span class="o">-</span><span class="nx">name</span><span class="o">/</span>
</span><span class='line'> <span class="err">│</span>     <span class="err">└</span> <span class="nx">package</span><span class="o">-</span><span class="k">class</span><span class="p">.</span><span class="nx">coffee</span>
</span><span class='line'> <span class="err">│</span>
</span><span class='line'> <span class="err">└</span> <span class="nx">test</span><span class="o">/</span>
</span><span class='line'>    <span class="err">├</span> <span class="nx">test</span><span class="o">-</span><span class="nx">helper</span><span class="p">.</span><span class="nx">coffee</span>
</span><span class='line'>    <span class="err">└</span> <span class="nx">test</span><span class="o">-</span><span class="nx">package</span><span class="o">-</span><span class="k">class</span><span class="p">.</span><span class="nx">coffee</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように構成し、package-classに対してテストを作成することで、<br/>
Hubot固有の部分を最小限に減らし、通常のnpmパッケージのように開発できました。</p>

<p>前述の通り、hubotとやりとりをするhubot-commandに対してテストをするのは手間がかかります。<br/>
ですが、やっていることは正規表現の結果をクラスのメソッドに渡すだけなので、<br/>
手作業でやってしまう方が簡単で早いです。</p>

<h1>参考</h1>

<p>hubot-scfesはこの方針に則って作ったため、参考になるかもしれません。<br/>
<a href="https://github.com/ota42y/hubot-scfes">https://github.com/ota42y/hubot-scfes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[size_tは環境によって定義が変わるという話]]></title>
    <link href="http://ota42y.com/blog/2014/11/08/size-t/"/>
    <updated>2014-11-08T13:39:51+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/08/size-t</id>
    <content type="html"><![CDATA[<p>size_tが何bitになるかは環境によって定義が異なります。<br/>
そのため、以下のコードは多くの32bit下で上手くいきますが、64bit化などで環境が変わると動かなくなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">test</span> <span class="o">=</span> <span class="s">&quot;test text&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;size_t %lu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">size_t</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pos</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;ms&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;pos %lu, %lu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)</span><span class="n">pos</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">npos</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">pos</span> <span class="o">!=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">npos</span><span class="p">){</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">text</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">pos</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">text</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>std::stringのfindは引数の文字列が最初に出てくる位置か、見つからなかった場合にstd::string::nposを返します。<br/>
この時、戻り値の型はsize_tになります。</p>

<p>size_tは32bit上ではunsigned intの別名として定義される事が多いため、上記のコードは問題なく動きます。<br/>
ですが64bitにした場合、size_tはunsigned long(8bit)の別名として定義される事があるため、<br/>
unsigned int(4bit)で表せない範囲の値だった場合はデータが一部消滅します。</p>

<p>さらに、std::string::nposは-1として定義されており、unsignedとして解釈した場合にはその値の最大値になります。<br/>
size_tがunsigned intの場合、両者は同じ大きさのため特に意識する必要はありません。</p>

<p>ですが、size_tがunsigned longとして定義されている場合、その最大値はunsined intでは表せないため、<br/>
データが消滅し、結果として比較に失敗するという事が起きます。</p>

<p>私の環境では、上記のコードは-1をunsigend intにした4294967295と,<br/>
-1をunsigend longにした18446744073709551615とを比較し、<br/>
<code>test text</code>の4294967295文字目にアクセスして異常終了します。</p>

<p>やっかいなことに、size_tをunsigned intではなくintに代入した場合、<br/>
-1は-1として解釈されるため、unsigend longと比較した際に最大値に変換されるため、上手くいってしまいます。</p>

<p>とはいえ、安全性を求めるならば、出来るだけsize_tはsize_tとして扱うようにした方がいいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[void型のポインタとint型を相互変換するなという話]]></title>
    <link href="http://ota42y.com/blog/2014/11/07/cpp-64bit-cast/"/>
    <updated>2014-11-07T07:42:43+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/07/cpp-64bit-cast</id>
    <content type="html"><![CDATA[<p>int型をvoid *に変換する場合も、その逆の場合も、32bitだと問題なく動くことが多いため、<br/>
コンパイラもエラーにしない場合が多いです。<br/>
ですが、64bitだと問題が起きることが多いため、64bitを対象にした場合にエラー扱いをする場合があり、<br/>
突然わいて出る大量のエラーに悩まされる事があります…(´･_･`)</p>

<h1>intからvoid型のポインタへの変換</h1>

<p>int型の値をvoid *を利用して保持したい場合、<a href="http://ota42y.com/blog/2014/11/06/cpp-void-pointer/">前の例</a>のように、int型を保持するオブジェクトを作り、<br/>
その中に値を入れた上で、そのオブジェクトへのポインタを持たせる必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">Container</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Num</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// int型を保存する</span>
</span><span class='line'><span class="n">Num</span><span class="o">*</span> <span class="n">numPointer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Num</span><span class="p">();</span>
</span><span class='line'><span class="n">numPointer</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="n">Container</span> <span class="n">con</span><span class="p">;</span>
</span><span class='line'><span class="n">con</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">numPointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 42を取り出す</span>
</span><span class='line'><span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="p">((</span><span class="n">Num</span><span class="o">*</span><span class="p">)</span><span class="n">con</span><span class="p">.</span><span class="n">data</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// newしたので必ず破棄する</span>
</span><span class='line'><span class="k">delete</span> <span class="n">con</span><span class="p">.</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="n">con</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ですが、世の中にはたまにvoid *にint型（やその他のプリミティブ型）を代入する不届き者がいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Container</span> <span class="n">con</span><span class="p">;</span>
</span><span class='line'><span class="n">con</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 42を取り出す</span>
</span><span class='line'><span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">con</span><span class="p">.</span><span class="n">data</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>void <em>はポインタのため、32bit環境ではvoid</em>は32bitであり、intも基本的には32bitで同じサイズのため、<br/>
32bit環境に限れば問題なくコンパイル、実行が出来ます。<br/>
(エラーになる場合は、g++ test.cpp -m32で32bitのみのコンパイルが出来ます)</p>

<p>ですが、当然ながら64bit環境ではvoid *は64bitのため、intが32bitの場合は足りない分が消滅します。<br/>
多くのコンパイラでは64bitでコンパイルしようとしたときに、このキャストが行われるとエラーを出してくれますが、<br/>
32bitのみコンパイルした場合は出してくれない場合があるため、<br/>
対応しようとした時に大量のエラーに悩まされることになります…</p>

<p>このような場合は最初に述べたとおり、オブジェクトを作ってそのポインタを利用しましょう。</p>

<h1>ポインタ型をint型に代入している場合</h1>

<p>上記の例は32bitを64bitにしてから32bitに戻すため、キャストの仕様によっては問題なく動きます。<br/>
ですが、以下のようにポインタをintにキャストした場合、64bit環境かつintが32bitの場合、<br/>
intに入りきらない部分が消滅してしまうため、ポインタに戻しても正しく戻すことができません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">str</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)(</span><span class="n">a</span><span class="p">);</span> <span class="c1">// ここで不正なアドレスになる</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">string</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>この場合、メモリ破壊などといった特定しにくいエラーを引き起こすため、注意が必要です。<br/>
ただし、例によってポインタとintサイズが同一の環境では問題なく動くため、<br/>
そうでない環境に対応しようとした場合に悩まされる事になります。</p>

<p>一見するとあまり使わなそうな書き方ですが、フレームワークで用意されているクラスとかでvoid *が無い場合、<br/>
クラスのポインタを持たせたいが為に、適当なint型に持たせる…みたいな事をやらかす輩がいますので、<br/>
注意が必要です。</p>

<p>またそれ以外にも、ポインタに対して演算を行いたい場合に、int型に変換して計算をする場合があります。<br/>
このような場合は、intptr_tかuintptr_tというポインタを扱う整数型が用意されており、<br/>
こちらを使うことで32bitや64bitに適したサイズに変換されて扱うことができます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[汎用ポインタを使う]]></title>
    <link href="http://ota42y.com/blog/2014/11/06/cpp-void-pointer/"/>
    <updated>2014-11-06T07:24:31+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/06/cpp-void-pointer</id>
    <content type="html"><![CDATA[<p>int型のポインタとchar型のポインタは違う型のため、同じものとして扱うことは出来ません。<br/>
ですが、実際にはポインタ型はメモリ上の特定アドレスを示すもののため、<br/>
どの型のポインタであっても、データ自体はメモリ上のアドレスを示す何bitかの数値であり、全く同じです。<br/>
（勿論、ポインタの示すアドレスに何があるかは異なります）</p>

<p>そのため、ポインタ専用の変数を利用することで、あらゆる型のポインタを同じ変数に代入することができます。</p>

<p>ただし、コンパイラの型チェックが効かなくなる等の理由から、基本的にはオススメできない手法です。<br/>
C++の場合はテンプレートやクラスの継承、dynamic_castで解決できる場合はそちらを利用した方が安全です。</p>

<h1>汎用ポインタ</h1>

<p>void *型は汎用ポインタと呼ばれ、あらゆるポインタを代入することができます。<br/>
これはたとえば以下のように、何の型かは指定しないけど、変数として持ちたいという場合に利用できます。</p>

<p>この場合、変数定義をvoid *型にしておき、使う前後に目的の型にキャストすることで、<br/>
様々な型を1つの変数で扱うことが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">Container</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Num</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">text</span> <span class="o">=</span> <span class="s">&quot;text&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">Container</span> <span class="n">con1</span><span class="p">;</span>
</span><span class='line'><span class="n">con1</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">text</span><span class="p">;</span> <span class="c1">// dataにconst charのポインタを入れる</span>
</span><span class='line'>
</span><span class='line'><span class="n">Num</span><span class="o">*</span> <span class="n">numPointer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Num</span><span class="p">();</span>
</span><span class='line'><span class="n">numPointer</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="n">Container</span> <span class="n">con2</span><span class="p">;</span>
</span><span class='line'><span class="n">con2</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">numPointer</span><span class="p">;</span> <span class="c1">// dataにNum型のポインタを入れる</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">con1</span><span class="p">.</span><span class="n">data</span><span class="p">);</span> <span class="c1">// 取り出す際にキャストする</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">((</span><span class="n">Num</span><span class="o">*</span><span class="p">)</span><span class="n">con2</span><span class="p">.</span><span class="n">data</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">n</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>なお、違うポインタを違う型にキャストして使うと、メモリ破壊などの予期せぬエラーを引き起こしますが、<br/>
構文上はvoid *から元の型に戻す際のキャストは全て正しいと処理されます。</p>

<p>そのため、おかしくなるキャストをしていてもコンパイラの型チェックでエラー検出が出来ません。<br/>
前述の通り、C++の場合はvoid *を使わず、テンプレートやクラスの継承、dynamic_castで解決した方が安全です。</p>

<h1>mallocの戻り値</h1>

<p>void *はmallocの戻り値としても使われています。<br/>
<a href="http://www.cplusplus.com/reference/cstdlib/malloc/">http://www.cplusplus.com/reference/cstdlib/malloc/</a></p>

<p>mallocの戻り値が何にでもキャスト出来るのは、この仕様によるものです。　</p>

<h1>ポインタを整数値として扱う</h1>

<p>ポインタを整数値として利用したい場合、intptr_tとuintptr_tが利用できます。<br/>
これはそれぞれ符号つき、符号なしの整数として扱うことができます。</p>

<p>間違ってもそのままintにキャスとして代入してはいけません。<br/>
<a href="http://ota42y.com/blog/2014/11/07/cpp-64bit-cast/">void型のポインタとint型を相互変換するなという話</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hubot-ircではmsg.replyのリプライ先が変わるので注意]]></title>
    <link href="http://ota42y.com/blog/2014/11/01/hubot-reply/"/>
    <updated>2014-11-01T21:02:11+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/01/hubot-reply</id>
    <content type="html"><![CDATA[<p>hubot-ircを使い、こういうコードで一定時間後に後からユーザに通知しようとしてたところ、<br/>
replyしてるのに発言元とは別のチャットに送信してしまうという問題が起きました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">robot</span><span class="p">.</span><span class="nx">respond</span> <span class="sr">/進捗 start/i</span><span class="p">,</span> <span class="nf">(msg) -&gt;</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">msg</span><span class="p">.</span><span class="nx">reply</span> <span class="s">&quot;進捗どうですか？&quot;</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">,</span> <span class="mi">30</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">msg</span><span class="p">.</span><span class="nx">send</span> <span class="s">&quot;進捗 start&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>何度か意図的に起こしてみたところ、どうやらmsg.replyの送信先は、<br/>
そのユーザがreplyする時に最後に発言したチャットに対して行われるらしく、<br/>
メッセージが作られた後に別のチャットに発言した場合、そちらに送られてしまうようです。</p>

<p>そのため、以下のように送信先を待避することで回避できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">robot</span><span class="p">.</span><span class="nx">respond</span> <span class="sr">/進捗 start/i</span><span class="p">,</span> <span class="nf">(msg) -&gt;</span>
</span><span class='line'>  <span class="nv">user = </span><span class="nx">msg</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>  <span class="nv">room = </span><span class="nx">msg</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">room</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">robot</span><span class="p">.</span><span class="nx">send</span> <span class="p">{</span><span class="nv">room: </span><span class="nx">room</span><span class="p">},</span> <span class="s">&quot;</span><span class="si">#{</span><span class="nx">user</span><span class="si">}</span><span class="s"> 進捗どうですか？&quot;</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">,</span> <span class="mi">30</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">msg</span><span class="p">.</span><span class="nx">send</span> <span class="s">&quot;進捗 start&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>原因となるコードを捜す</h1>

<p>というのは振る舞いから推測したものなので、実際にコードを追ってみます。</p>

<h2>hubot-irc.reply</h2>

<p>まずはhubot-ircのmsg.replyの中を見ます。<br/>
<a href="https://github.com/nandub/hubot-irc/blob/master/src/irc.coffee#L78">https://github.com/nandub/hubot-irc/blob/master/src/irc.coffee#L78</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">reply: </span><span class="nf">(envelope, strings...) -&gt;</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">str</span> <span class="k">in</span> <span class="nx">strings</span>
</span><span class='line'>    <span class="nx">@send</span> <span class="nx">envelope</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span> <span class="s">&quot;</span><span class="si">#{</span><span class="nx">envelope</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="s">: </span><span class="si">#{</span><span class="nx">str</span><span class="si">}</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>メッセージをユーザ宛に変換し、sendメソッドにenvelope.userと一緒に渡しています。</p>

<h2>hubot-irc.send</h2>

<p>次にsendメソッドの中身を見ます。<br/>
<a href="https://github.com/nandub/hubot-irc/blob/522c50166f15e57ada0c10f181d4de26b4349717/src/irc.coffee#L16">https://github.com/nandub/hubot-irc/blob/522c50166f15e57ada0c10f181d4de26b4349717/src/irc.coffee#L16</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">send: </span><span class="nf">(envelope, strings...) -&gt;</span>
</span><span class='line'>  <span class="c1"># Use @notice if SEND_NOTICE_MODE is set</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">@notice</span> <span class="nx">envelope</span><span class="p">,</span> <span class="nx">strings</span> <span class="k">if</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">HUBOT_IRC_SEND_NOTICE_MODE</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">target = </span><span class="nx">@_getTargetFromEnvelope</span> <span class="nx">envelope</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">unless</span> <span class="nx">target</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">logger</span><span class="p">.</span><span class="nx">error</span> <span class="s">&quot;ERROR: Not sure who to send to. envelope=&quot;</span><span class="p">,</span> <span class="nx">envelope</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">str</span> <span class="k">in</span> <span class="nx">strings</span>
</span><span class='line'>    <span class="nx">@bot</span><span class="p">.</span><span class="nx">say</span> <span class="nx">target</span><span class="p">,</span> <span class="nx">str</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>envelope</code>（replyメソッドのenvelope.user）から<code>_getTargetFromEnvelope</code>でターゲットを取り出し、<br/>
<code>@bot.say</code>で発言をしています。</p>

<p>このとき、@botはnodeのircパッケージのオブジェクトで、<br/>
sayメソッドはtargetに対してメッセージを送るようになっています。<br/>
そのため、このtargetに設定される返信先が変更される可能性が高そうです。</p>

<h1>hubt-irc._getTargetFromEnvelope</h1>

<p><a href="https://github.com/nandub/hubot-irc/blob/master/src/irc.coffee#L336">https://github.com/nandub/hubot-irc/blob/master/src/irc.coffee#L336</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">_getTargetFromEnvelope: </span><span class="nf">(envelope) -&gt;</span>
</span><span class='line'>  <span class="nv">user = </span><span class="kc">null</span>
</span><span class='line'>  <span class="nv">room = </span><span class="kc">null</span>
</span><span class='line'>  <span class="nv">target = </span><span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># as of hubot 2.4.2, the first param to send() is an object with &#39;user&#39;</span>
</span><span class='line'>  <span class="c1"># and &#39;room&#39; data inside. detect the old style here.</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">envelope</span><span class="p">.</span><span class="nx">reply_to</span>
</span><span class='line'>    <span class="nv">user = </span><span class="nx">envelope</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="c1"># expand envelope</span>
</span><span class='line'>    <span class="nv">user = </span><span class="nx">envelope</span><span class="p">.</span><span class="nx">user</span>
</span><span class='line'>    <span class="nv">room = </span><span class="nx">envelope</span><span class="p">.</span><span class="nx">room</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">user</span>
</span><span class='line'>    <span class="c1"># most common case - we&#39;re replying to a user in a room</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">user</span><span class="p">.</span><span class="nx">room</span>
</span><span class='line'>      <span class="nv">target = </span><span class="nx">user</span><span class="p">.</span><span class="nx">room</span>
</span><span class='line'>    <span class="c1"># reply directly</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="nx">user</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>      <span class="nv">target = </span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>    <span class="c1"># replying to pm</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="nx">user</span><span class="p">.</span><span class="nx">reply_to</span>
</span><span class='line'>      <span class="nv">target = </span><span class="nx">user</span><span class="p">.</span><span class="nx">reply_to</span>
</span><span class='line'>    <span class="c1"># allows user to be an id string</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="nx">user</span><span class="p">.</span><span class="nx">search</span><span class="o">?</span><span class="p">(</span><span class="sr">/@/</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>      <span class="nv">target = </span><span class="nx">user</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="nx">room</span>
</span><span class='line'>    <span class="c1"># this will happen if someone uses robot.messageRoom(jid, ...)</span>
</span><span class='line'>    <span class="nv">target = </span><span class="nx">room</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">target</span>
</span></code></pre></td></tr></table></div></figure>


<p>ユーザの情報を使ってリプライ先を決定しているようです。<br/>
この中で、envelope.roomが存在すれば、それをtargetとして設定するようになっています。<br/>
なお、このメソッド内のenvelopeは、replyメソッドのenvelope.userを差しています。</p>

<p>そのため、次はreplyメソッドのenvelope.user.roomが書き換わるかどうかを調べていきます。</p>

<h2>replyメソッドの呼ばれ方</h2>

<p>コールスタックをさかのぼっていくと、以下のメソッドが順に呼ばれていました。<br/>
<a href="https://github.com/github/hubot/blob/39681ea35de6375154748418e11f533ef51c3340/src/listener.coffee#L22">https://github.com/github/hubot/blob/39681ea35de6375154748418e11f533ef51c3340/src/listener.coffee#L22</a><br/>
<a href="https://github.com/github/hubot/blob/39681ea35de6375154748418e11f533ef51c3340/src/robot.coffee#L192">https://github.com/github/hubot/blob/39681ea35de6375154748418e11f533ef51c3340/src/robot.coffee#L192</a><br/>
<a href="https://github.com/github/hubot/blob/39681ea35de6375154748418e11f533ef51c3340/src/adapter.coffee#L65">https://github.com/github/hubot/blob/39681ea35de6375154748418e11f533ef51c3340/src/adapter.coffee#L65</a><br/>
<a href="https://github.com/nandub/hubot-irc/blob/522c50166f15e57ada0c10f181d4de26b4349717/src/irc.coffee#L237">https://github.com/nandub/hubot-irc/blob/522c50166f15e57ada0c10f181d4de26b4349717/src/irc.coffee#L237</a></p>

<p>この中で、最後のhubt-ircの以下の部分で、nodeのircがメッセージを受信した場合に、<br/>
メッセージから特定されたuserオブジェクトが、replyメソッドのenvelope.userになっていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">bot</span><span class="p">.</span><span class="nx">addListener</span> <span class="s">&#39;message&#39;</span><span class="p">,</span> <span class="nf">(from, to, message) -&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">nick</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">==</span> <span class="nx">to</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span>
</span><span class='line'>    <span class="c1"># this is a private message, let the &#39;pm&#39; listener handle it</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">from</span> <span class="k">in</span> <span class="nx">options</span><span class="p">.</span><span class="nx">ignoreUsers</span>
</span><span class='line'>    <span class="nx">logger</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s">&#39;Ignoring user: %s&#39;</span><span class="p">,</span> <span class="nx">from</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># we&#39;ll ignore this message if it&#39;s from someone we want to ignore</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">logger</span><span class="p">.</span><span class="nx">debug</span> <span class="s">&quot;From </span><span class="si">#{</span><span class="nx">from</span><span class="si">}</span><span class="s"> to </span><span class="si">#{</span><span class="nx">to</span><span class="si">}</span><span class="s">: </span><span class="si">#{</span><span class="nx">message</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">user = </span><span class="nx">self</span><span class="p">.</span><span class="nx">createUser</span> <span class="nx">to</span><span class="p">,</span> <span class="nx">from</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">user</span><span class="p">.</span><span class="nx">room</span>
</span><span class='line'>    <span class="nx">logger</span><span class="p">.</span><span class="nx">info</span> <span class="s">&quot;</span><span class="si">#{</span><span class="nx">to</span><span class="si">}</span><span class="s"> &lt;</span><span class="si">#{</span><span class="nx">from</span><span class="si">}</span><span class="s">&gt; </span><span class="si">#{</span><span class="nx">message</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">unless</span> <span class="nx">message</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">to</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nv">message = </span><span class="s">&quot;</span><span class="si">#{</span><span class="nx">to</span><span class="si">}</span><span class="s">: </span><span class="si">#{</span><span class="nx">message</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="nx">logger</span><span class="p">.</span><span class="nx">debug</span> <span class="s">&quot;msg &lt;</span><span class="si">#{</span><span class="nx">from</span><span class="si">}</span><span class="s">&gt; </span><span class="si">#{</span><span class="nx">message</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">self</span><span class="p">.</span><span class="nx">receive</span> <span class="k">new</span> <span class="nx">TextMessage</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>userオブジェクトは、受け取ったメッセージからcreateUserを使って求めているようです</p>

<h2>hubot-irc.createUser</h2>

<p><a href="https://github.com/nandub/hubot-irc/blob/522c50166f15e57ada0c10f181d4de26b4349717/src/irc.coffee#L111">https://github.com/nandub/hubot-irc/blob/522c50166f15e57ada0c10f181d4de26b4349717/src/irc.coffee#L111</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nv">createUser: </span><span class="nf">(channel, from) -&gt;</span>
</span><span class='line'>    <span class="nv">user = </span><span class="nx">@getUserFromId</span> <span class="nx">from</span>
</span><span class='line'>    <span class="nv">user.name = </span><span class="nx">from</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nx">channel</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^[&amp;#]/</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">user.room = </span><span class="nx">channel</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nv">user.room = </span><span class="kc">null</span>
</span><span class='line'>    <span class="nx">user</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで、user.roomに最新のメッセージが送られたchannelをセットしています。<br/>
そのため、getUserFromIdが返すuserオブジェクトがメッセージごとに共通なら、<br/>
replyメソッドに渡された後に別のメッセージによって書き換わる可能性があると言えます。</p>

<h2>hubot.getUserFromId</h2>

<p>getUserFromIdはhubot.getUserFromIdを呼び出しているだけでした。<br/>
（HubotのAPIが変わったため、一手間挟んでいる）</p>

<p><a href="https://github.com/github/hubot/blob/39681ea35de6375154748418e11f533ef51c3340/src/brain.coffee#L103">https://github.com/github/hubot/blob/39681ea35de6375154748418e11f533ef51c3340/src/brain.coffee#L103</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'> <span class="nv">userForId: </span><span class="nf">(id, options) -&gt;</span>
</span><span class='line'>    <span class="nv">user = </span><span class="nx">@data</span><span class="p">.</span><span class="nx">users</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span>
</span><span class='line'>    <span class="k">unless</span> <span class="nx">user</span>
</span><span class='line'>      <span class="nv">user = </span><span class="k">new</span> <span class="nx">User</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">options</span>
</span><span class='line'>      <span class="nx">@data</span><span class="p">.</span><span class="nx">users</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">user</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nx">options</span> <span class="o">and</span> <span class="nx">options</span><span class="p">.</span><span class="nx">room</span> <span class="o">and</span> <span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">.</span><span class="nx">room</span> <span class="o">or</span> <span class="nx">user</span><span class="p">.</span><span class="nx">room</span> <span class="o">isnt</span> <span class="nx">options</span><span class="p">.</span><span class="nx">room</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">user = </span><span class="k">new</span> <span class="nx">User</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">options</span>
</span><span class='line'>      <span class="nx">@data</span><span class="p">.</span><span class="nx">users</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">user</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">user</span>
</span></code></pre></td></tr></table></div></figure>


<p>@data内に保存されているユーザを帰しています。<br/>
そのため、各メッセージ毎に共通のuserオブジェクトが返されます。</p>

<p>hubot-irc.createUser内でこのオブジェクトのroomを書き換えているため、<br/>
ユーザが発言を行うと、robot.replyの時に使用するuserオブジェクトが変更され、<br/>
慈顔をおいて発言しようとすると別のチャットに発言していたようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スクフェス用の機能が詰まったHubotパッケージを作った]]></title>
    <link href="http://ota42y.com/blog/2014/10/28/hubot-scfes/"/>
    <updated>2014-10-28T07:34:32+09:00</updated>
    <id>http://ota42y.com/blog/2014/10/28/hubot-scfes</id>
    <content type="html"><![CDATA[<p><a href="http://lovelive.bushimo.jp/">スクフェス</a>用の色々便利な機能が入ったHubotパッケージを作りました。<br/>
<a href="https://github.com/ota42y/hubot-scfes">https://github.com/ota42y/hubot-scfes</a></p>

<p>今のところ主な機能は2つです。</p>

<h2>スタミナがMaxになる時間になったら通知する</h2>

<p><code>hubot scfes remind stamina 10 50</code><br/>
で、スタミナの現在値が10、最大値が50の場合に、Maxになる時刻に通知してくれます。<br/>
それ以外の値の場合は調節してください。</p>

<h2>スタミナがnの倍数になったときに通知する</h2>

<p><code>hubot scfes remind stamina 10 50 25</code><br/>
で、スタミナの現在値が10、最大値が50として、25の倍数の時に通知してくれます。<br/>
EXでちょうど使い切れるタイミングで通知するといった使い方を想定しています。</p>

<h2>未実装機能</h2>

<p>イベント終了までにどれくらいスタミナが回復するかとか、<br/>
レベルアップするのはいつぐらいになるかとか、<br/>
そういった頭の中で適当に計算してる奴を機能化していこうと思います。</p>

<p>ちなみにこいつは前に作った<a href="https://github.com/ota42y/stamina-calculator">stamina-calculator</a>を内部で使用しています。<br/>
node.jsで細かくパッケージに分けて開発ってどうやるんだろうなーと思って、実益と練習がてら作った感じです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux上でrubyのPTYを使うと、Errno::EIOが出る]]></title>
    <link href="http://ota42y.com/blog/2014/10/26/pty-ieo-error/"/>
    <updated>2014-10-26T14:06:39+09:00</updated>
    <id>http://ota42y.com/blog/2014/10/26/pty-ieo-error</id>
    <content type="html"><![CDATA[<p>以下のコードはMac OS X上だと上手く動きますが、Linux上だと<br/>
<code>Errno::EIO: Input/output error @ io_fillbuf</code>
というエラーが起きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;pty&#39;</span>
</span><span class='line'><span class="no">PTY</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;ls&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="n">pid</span><span class="o">|</span>
</span><span class='line'>    <span class="k">until</span> <span class="n">r</span><span class="o">.</span><span class="n">eof?</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">r</span><span class="o">.</span><span class="n">readline</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>どうやら、読み込んだ際にBSDだとnilになりますが、GNU/LinuxだとErrno::EIOが発生する仕様らしいです。</p>

<p><a href="http://stackoverflow.com/questions/10238298/ruby-on-linux-pty-goes-away-without-eof-raises-errnoeio">Ruby on Linux PTY goes away without EOF, raises Errno::EIO</a><br/>
にあるように、resqueするSafePtyを作ることで回避できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascriptの関数リテラルではインスタンス変数にアクセスできない]]></title>
    <link href="http://ota42y.com/blog/2014/10/23/javascript-callback/"/>
    <updated>2014-10-23T07:41:23+09:00</updated>
    <id>http://ota42y.com/blog/2014/10/23/javascript-callback</id>
    <content type="html"><![CDATA[<p>関数リテラルではローカル変数には自由にアクセスできるので、<br/>
ついインスタンスメソッド等にもアクセス出来ると思ってしまいましたが、違うようです。</p>

<p>以下のように、コールバックとして自分のインスタンスメソッドを呼び出す関数を渡した場合、<br/>
実行時にエラーになります。<br/>
(coffeescriptで書いていますがjavascriptと同じ結果です)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Test</span>
</span><span class='line'>  <span class="nv">hello: </span><span class="nf">(num) -&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;hello &quot;</span> <span class="o">+</span> <span class="nx">num</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">call: </span><span class="nf">(test2) -&gt;</span>
</span><span class='line'>    <span class="nx">@hello</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">test2</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">@hello</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nx">Test2</span>
</span><span class='line'>  <span class="nv">call: </span><span class="nf">(callback) -&gt;</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>関数リテラルはそれを作ったオブジェクトとは別のオブジェクトから呼び出されるらしく、<br/>
またその時のthis(coffeescriptなので@hello(2)はthis.hello(2)と等価です)は、<br/>
そのオブジェクトになり、メソッドがないため失敗するようです。</p>

<p>以下のように、一度thisを待避させることで呼び出すことが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Test</span>
</span><span class='line'>  <span class="nv">hello: </span><span class="nf">(num) -&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;hello &quot;</span> <span class="o">+</span> <span class="nx">num</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">call: </span><span class="nf">(test2) -&gt;</span>
</span><span class='line'>    <span class="nx">@hello</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">self = </span><span class="k">this</span>
</span><span class='line'>    <span class="nx">test2</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">hello</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nx">Test2</span>
</span><span class='line'>  <span class="nv">call: </span><span class="nf">(callback) -&gt;</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>完全なコードはこちら</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Test</span>
</span><span class='line'>  <span class="nv">hello: </span><span class="nf">(num) -&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;hello &quot;</span> <span class="o">+</span> <span class="nx">num</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">call: </span><span class="nf">(test2) -&gt;</span>
</span><span class='line'>    <span class="vi">@test = </span><span class="s">&quot;test&quot;</span>
</span><span class='line'>    <span class="nx">@hello</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">self = </span><span class="k">this</span>
</span><span class='line'>    <span class="nx">test2</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="c1"># ここで@hello(2) はエラー</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">hello</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Test2オブジェクトでもないので、これもエラー</span>
</span><span class='line'>      <span class="c1"># @world()</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nx">Test2</span>
</span><span class='line'>  <span class="nv">call: </span><span class="nf">(callback) -&gt;</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">world: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;world&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">test = </span><span class="k">new</span> <span class="nx">Test</span>
</span><span class='line'><span class="nv">test2 = </span><span class="k">new</span> <span class="nx">Test2</span>
</span><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">test2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[goでtime.Timeをmysqlから読む]]></title>
    <link href="http://ota42y.com/blog/2014/10/08/go-mysql-time/"/>
    <updated>2014-10-08T07:44:37+09:00</updated>
    <id>http://ota42y.com/blog/2014/10/08/go-mysql-time</id>
    <content type="html"><![CDATA[<p>goでtime.Time型をmysqlのDATETIME型として保存すると、以下のエラーが出て読み取りに失敗します…<br/>
<code>sql: Scan error on column index 3: unsupported driver -&gt; Scan pair: []uint8 -&gt; *time.Time</code></p>

<p>どうやらDSNに<code>parseTime=true</code>オプションをつける必要があるようです(何故かは不明)<br/>
<code>db, err := sql.Open("mysql", "username:passy@/database_name?parseTime=true")</code></p>

<p>参考リンク<br/>
<a href="https://github.com/go-sql-driver/mysql#timetime-support">https://github.com/go-sql-driver/mysql#timetime-support</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[進捗どうですか？を訪ねるhubotスクリプトを作った]]></title>
    <link href="http://ota42y.com/blog/2014/10/05/shinchoku/"/>
    <updated>2014-10-05T11:07:10+09:00</updated>
    <id>http://ota42y.com/blog/2014/10/05/shinchoku</id>
    <content type="html"><![CDATA[<p>作りました。<br/>
30分ごとに進捗どうですか？と聞いてきます。</p>

<p>何をやったかを計測するために定期的にログを残そうと思うのですが、<br/>
大体忘れるので、こうやって適度に通知することで思いだそう！という試みです。</p>

<h1>使い方</h1>

<p><code>進捗 start</code>で30分ごとに進捗どうですか？と聞いてきます。<br/>
<code>進捗 stop</code>でストップします。</p>

<h1>ホラー体験</h1>

<p>setTimeoutが秒設定だと間違えて…(´･_･`)<br/>
<img src="http://ota42y.com/images/posts/2014-10-05-shinchok.png" alt="ホラー体験" /></p>

<h1>コード</h1>

<script src="https://gist.github.com/ota42y/41fed7d94c23836f3440.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[goでmysqlを使う]]></title>
    <link href="http://ota42y.com/blog/2014/10/04/go-mysql/"/>
    <updated>2014-10-04T18:18:22+09:00</updated>
    <id>http://ota42y.com/blog/2014/10/04/go-mysql</id>
    <content type="html"><![CDATA[<p><a href="http://github.com/go-sql-driver/mysql">http://github.com/go-sql-driver/mysql</a><br/>
がありましたので、それを使います。</p>

<p>以下のように読み込むことで、<code>sql.Open</code>でmysqlを開くことが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">_</span> <span class="s">&quot;github.com/go-sql-driver/mysql&quot;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>DB設定</h1>

<p>以下の用に指定する事で、ローカルのmysqlの指定したデータベースにアクセス出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sql</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;mysql&quot;</span><span class="p">,</span> <span class="s">&quot;user:password@/dbname&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">Error</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>サーバやデータベース名などはDSN (Data Source Name)で指定するようです。<br/>
あまり聞かない方法ですが、公式のREADMEに書いてあるのでそれを参考にすると良いと思います。</p>

<h1>使い方</h1>

<h2>前提条件</h2>

<p>上記の方法でsql.Openの結果を変数のdbに保存済み、<br/>
以下の構造体をDBに書き込むとします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Post</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">RoomName</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">Message</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">MessageId</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">IsSend</span> <span class="kt">bool</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、tableNameに書き込むテーブル名が保存されているとします。</p>

<h2>INSERT</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">post</span> <span class="o">:=</span> <span class="nx">getPost</span><span class="p">()</span><span class="err">　</span><span class="c1">// 書き込むためのデータを取得する</span>
</span><span class='line'>
</span><span class='line'><span class="nx">stmtIns</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Prepare</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;INSERT INTO %s (room_name, message, message_id, is_send) VALUES (?, ?, ?, ?)&quot;</span><span class="p">,</span> <span class="nx">tableName</span><span class="p">))</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">Error</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">stmtIns</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span> <span class="c1">// Close the statement when we leave main() / the program terminates</span>
</span><span class='line'>
</span><span class='line'><span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">stmtIns</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="nx">post</span><span class="p">.</span><span class="nx">RoomName</span><span class="p">,</span> <span class="nx">post</span><span class="p">.</span><span class="nx">Message</span><span class="p">,</span> <span class="nx">post</span><span class="p">.</span><span class="nx">MessageId</span><span class="p">,</span> <span class="nx">post</span><span class="p">.</span><span class="nx">IsSend</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>db.PrepareでSQL文を用意し、Execの引数にプレースフォルダの数だけ書き込むデータを渡しています。<br/>
テーブル名をプレースホルダにするなど、SQLの文法的におかしい場合は、db.Prepareの戻り値がエラーになります。</p>

<h2>UPDATE</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">stmtIns</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Prepare</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;UPDATE %s SET is_send = 1 WHERE ( message_id = ?)&quot;</span><span class="p">,</span> <span class="nx">tableName</span><span class="p">))</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">Error</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">stmtIns</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">stmtIns</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="nx">post</span><span class="p">.</span><span class="nx">MessageId</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>INSERTとほぼ同じです。</p>

<h2>SELECT</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">stmtOut</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Prepare</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;SELECT room_name, message, message_id, is_send FROM %s WHERE message_id = ? LIMIT 1&quot;</span><span class="p">,</span> <span class="nx">tableName</span><span class="p">))</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">Error</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">stmtOut</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">room_name</span> <span class="kt">string</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">message</span> <span class="kt">string</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">message_id</span> <span class="kt">string</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">is_send</span> <span class="kt">bool</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">stmtOut</span><span class="p">.</span><span class="nx">QueryRow</span><span class="p">(</span><span class="nx">searchMessageId</span><span class="p">).</span><span class="nx">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">room_name</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">message</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">message_id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">is_send</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">postData</span> <span class="nx">Post</span>
</span><span class='line'><span class="nx">postData</span><span class="p">.</span><span class="nx">RoomName</span> <span class="p">=</span> <span class="nx">room_name</span>
</span><span class='line'><span class="nx">postData</span><span class="p">.</span><span class="nx">Message</span> <span class="p">=</span> <span class="nx">message</span>
</span><span class='line'><span class="nx">postData</span><span class="p">.</span><span class="nx">MessageId</span> <span class="p">=</span> <span class="nx">message_id</span>
</span><span class='line'><span class="nx">postData</span><span class="p">.</span><span class="nx">IsSend</span> <span class="p">=</span> <span class="nx">is_send</span>
</span></code></pre></td></tr></table></div></figure>


<p>ORマッパーではないので、一つ一つ取り出した値をオブジェクトにセットしていく必要があります。</p>

<h2>複数SELECT</h2>

<p>上の例はLIMIT 1を設定して1件だけ取得していましたが、複数取得の場合はscanではうまきいきません。
複数取り出す場合はこちらです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">rows</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Query</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;SELECT room_name, message, message_id, is_send FROM %s WHERE is_send = false LIMIT 100&quot;</span><span class="p">,</span> <span class="nx">tableName</span><span class="p">))</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">Error</span><span class="p">())</span> <span class="c1">// proper error handling instead of panic in your app</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">posts</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="nx">Post</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="nx">rows</span><span class="p">.</span><span class="nx">Next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">room_name</span> <span class="kt">string</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">message</span> <span class="kt">string</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">message_id</span> <span class="kt">string</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">is_send</span> <span class="kt">bool</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rows</span><span class="p">.</span><span class="nx">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">room_name</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">message</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">message_id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">is_send</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">postData</span> <span class="nx">Post</span>
</span><span class='line'>  <span class="nx">postData</span><span class="p">.</span><span class="nx">RoomName</span> <span class="p">=</span> <span class="nx">room_name</span>
</span><span class='line'>  <span class="nx">postData</span><span class="p">.</span><span class="nx">Message</span> <span class="p">=</span> <span class="nx">message</span>
</span><span class='line'>  <span class="nx">postData</span><span class="p">.</span><span class="nx">MessageId</span> <span class="p">=</span> <span class="nx">message_id</span>
</span><span class='line'>  <span class="nx">postData</span><span class="p">.</span><span class="nx">IsSend</span> <span class="p">=</span> <span class="nx">is_send</span>
</span><span class='line'>  <span class="nx">posts</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">posts</span><span class="p">,</span> <span class="nx">postData</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nextを利用して一件ずつScanしています。</p>

<h1>まとめ</h1>

<p>dp.Prepareでプレースホルダー付きのSQL文を作成。<br/>
INSERTやUPDATEはExecで実行、SELECTはQueryやQueryRowで実行してScanでデータを取り出します。<br/>
テーブル構造が変わると読み込み部分が変わったり、順番を間違えると悲惨なことになるため面倒です。<br/>
ORマッパーは偉大ですね…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HDDのパーティションテーブルが消えてからのデータ復旧]]></title>
    <link href="http://ota42y.com/blog/2014/10/03/hdd-post/"/>
    <updated>2014-10-03T07:36:29+09:00</updated>
    <id>http://ota42y.com/blog/2014/10/03/hdd-post</id>
    <content type="html"><![CDATA[<p>先日デスクトップPCのデータ用HDDが吹っ飛びました。<br/>
原因は不明ですがデータは消えておらず、パーティションテーブルか完全に消えていました。<br/>
復旧に成功したのでその手順をメモっておきます。</p>

<h1>問題推定</h1>

<p>初めは何故データが消えたのかわからなかったため、その調査から始めました。<br/>
消えたのはデータ用HDDで、Windows本体は問題なく起動していたため、WindowsからHDDを見ると、<br/>
未フォーマット状態のディスクとして認識され、パーティションスタイルの選択から始まっていました。</p>

<p>HDDは数ヶ月前に新調したものであり、異音やエラーなどの問題も無かったため、物理的な可能性は薄いと考えました。<br/>
また、直前に大量にデータを書き込んでもいないため、データを削除した線も薄そうです。</p>

<p>さらに、一部のデータが読み込めなくなるのではなく、全データが一度に読み取り不能になったことから、<br/>
何らかの要因でパーティションが消えてデータが読み取り不能になり、<br/>
データ自体は残っているのではないかと考えました。</p>

<h1>パーティションの確認</h1>

<p>運良く手元にLinuxの起動ディスクがあったため、とりあえずパーティションがどうなっているかを確認しました。</p>

<p>手順としては以下のようになります。<br/>
なお、HDDがsdaにマウントされていると仮定します。</p>

<ul>
<li>ddコマンドでHDDの先頭をコピーする<br/>
ddコマンドはディスクからファイルやディスクにデータをコピーできるコマンドです。<br/>
<code>sudo dd if=/dev/sda of=/tmp/hdd count=100</code><br/>
のようにすることで、sdaの先頭から100ブロック分を/tmp/hddファイルにコピーします。</li>
<li>hexdumpコマンドで中身を見る<br/>
hexdumpコマンドはファイルの中身を16進数で出力します。<br/>
<code>hexdump /tmp/hdd</code></li>
</ul>


<p>私の場合、hexdumpの出力が先頭50MBぐらい全て0だらけだったので、<br/>
パーティションが全て0埋めされて消えていました。</p>

<p>そのため、次にパーティションの復活を試みます。</p>

<h1>TestDiskでパーティション復活</h1>

<p>壊れたディスクはPBRにしていたため、MBRと比べて大変になる場合が多いらしいですが、<br/>
TestDiskを使うと特に問題なく修復できました。</p>

<p>詳しい使い方はこちら。<br/>
<a href="http://uiuicy.cs.land.to/testdisk1.html">【TestDisk】について</a></p>

<p>私の場合、これでNTFSのパーティションを修復できましたが、<br/>
何故か書き込んでいないはずのWindowsディスクが壊れてしまい、<br/>
データと引き替えにWindowsが消えてしまいました…</p>

<p>幸いWindowsディスクには特に重要なデータを入れていなかったのと、<br/>
Macからデータを読み出すことができたために難を逃れました。</p>

<p>念のため、Windowsディスクは外して作業をした方がよさそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ソシャゲ用のスタミナ計算機を作った]]></title>
    <link href="http://ota42y.com/blog/2014/10/02/social-game-stamina-calc/"/>
    <updated>2014-10-02T07:35:04+09:00</updated>
    <id>http://ota42y.com/blog/2014/10/02/social-game-stamina-calc</id>
    <content type="html"><![CDATA[<p>作りました。</p>

<p>スタミナmaxまでどれくらいかなー？とか、次イベント曲(25消費)をやるのに区切りがいいのはいつかなー<br/>
みたいなのを計算するのが面倒だったので、その辺の計算を自動でやってくれます。</p>

<h1>使い方</h1>

<h2>初期化</h2>

<p>スタミナ1あたりいくつ回復するかはゲームによって違うので、コンストラクタで渡します。<br/>
なお、指定は秒で行います。<br/>
<code>stamina_calculator = new StaminaCalculator 6*60</code><br/>
この例ですと、6分で1スタミナ回復するゲームになります。</p>

<h2>指定した値までの回復時間(getNextMaxStaminaTime)</h2>

<p>現在値と指定値を渡すと、指定した値までに何秒かかるかを返します。<br/>
Maxまでどれくらいかな？とか、50になるのは何分後か？みたいな計算に使います。<br/>
<code>stamina_calculator.getNextMaxStaminaTime(10, 60)</code></p>

<h2>指定した倍数の値まで回復する時間(getMultipleRecoveryTime)</h2>

<p>現在値とMAX値、それと倍数を渡すことで、指定した倍数になる時間を返します。<br/>
今30で、一回25消費できるから、50か75か100になる時間を知りたい…みたいな時に使います。<br/>
<code>next_multiple_time = calc.getMultipleRecoveryTime(10, 80, 25)</code></p>

<h2>結果をDateオブジェクトにする</h2>

<p>メソッドを呼んだ時間から指定秒たった時点のDateオブジェクトを返します。<br/>
Dateオブジェクトのコンストラクタには、指定時間後のオブジェクトを作る方法が見当たらなかったので作りました。<br/>
<code>stamina_calculator.convertToDate(second)</code></p>

<h1>サンプルコード</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>StaminaCalculator = require('stamina-calculator').StaminaCalculator;
</span><span class='line'>
</span><span class='line'>stamina_calculator = new StaminaCalculator 6*60
</span><span class='line'>
</span><span class='line'>second = stamina_calculator.getNextMaxStaminaTime(10, 60)
</span><span class='line'>
</span><span class='line'>console.log second
</span><span class='line'># 今から何秒後にスタミナが５０回復するか
</span><span class='line'>
</span><span class='line'>console.log stamina_calculator.convertToDate(second)
</span><span class='line'># 現在時刻からスタミナが５０回復する時間がDateオブジェクトで帰ってくる</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npmにパッケージを公開する手順]]></title>
    <link href="http://ota42y.com/blog/2014/09/29/npm-publish/"/>
    <updated>2014-09-29T07:49:16+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/29/npm-publish</id>
    <content type="html"><![CDATA[<p>とても簡単でしたがつい忘れるのでメモ。</p>

<h1>公開手順</h1>

<ol>
<li><p>npmjsに開発者登録をします。<br/>
<a href="https://www.npmjs.org/">https://www.npmjs.org/</a></p></li>
<li><p><code>npm adduser</code>で~/.npmrcにnpmへのログイントークンを保存します。</p></li>
<li><p>package.jsonに必要事項を書きます。<br/>
<a href="https://github.com/ota42y/stamina-calculator/blob/master/package.json">こんな感じ</a>ですね。</p></li>
<li><p><code>npm publish</code>で公開</p></li>
<li><p>アップグレード版の配布も<code>npm publish</code>で可能です。<br/>
(ただし、package.json内のバージョンを変えないと新しいバージョンにはなりません)</p></li>
</ol>


<h1>非公開手順</h1>

<p>間違えて変なバージョンを公開した場合など、公開したパッケージを削除したい場合は、<br/>
<code>npm unpublish パッケージ名前@バージョン</code>で削除出来ます。<br/>
何も指定しない場合全てのバージョンが対象になりますが、<code>--force</code>をつける必要があります。</p>

<p>ただし、削除してしまうので、そのパッケージに依存しているパッケージが悲惨なことになります。<br/>
そのため、<code>npm deprecate</code>の方がアップグレードを促せるし推奨すると<a href="https://www.npmjs.org/doc/cli/npm-unpublish.html">公式サイト</a>には書いてあります。<br/>
unpublishは間違えて公開した場合用ですね。</p>

<p>なお、全てのバージョンを削除するとnpmからパッケージの情報も削除されます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian squeezeでShellShock対策]]></title>
    <link href="http://ota42y.com/blog/2014/09/26/shell-shock/"/>
    <updated>2014-09-26T07:35:47+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/26/shell-shock</id>
    <content type="html"><![CDATA[<p>Debianは探しても見つからなかったので…(´･_･`)</p>

<h1>ShellShock(CVE-2014-6271)</h1>

<p>CVE-2014-6271(とCVE-2014-7169)として、bashに第三者から任意のコードが実行される脆弱性が見つかりました。<br/>
<a href="https://www.jpcert.or.jp/at/2014/at140037.html">GNU bash の脆弱性に関する注意喚起</a><br/>
<a href="http://d.hatena.ne.jp/Kango/20140925/1411612246">bashの脆弱性(CVE-2014-6271) #ShellShock の関連リンクをまとめてみた</a><br/>
<a href="https://x86-64.jp/blog/CVE-2014-6271">Blog: bashの脆弱性がヤバすぎる件 – x86-64.jp - くりす研</a></p>

<p>bashで以下のスクリプトを実行し、出力文字列に<code>vulnerable</code>が出てきたらまずい状態です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>env <span class="nv">x</span><span class="o">=</span><span class="s1">&#39;() { :;}; echo vulnerable&#39;</span> bash -c <span class="s1">&#39;echo hello&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>修正パッチ状況</h1>

<p>この問題に対しては(まだ不十分ですが)修正パッチが公開されており、また各ディストリビューションでも修正したbashが配布されています。</p>

<p>Redhad系の対策はこちら<br/>
<a href="http://qiita.com/richmikan@github/items/5f54114a46e64178133d">2014/09/24に発表されたBash脆弱性と解決法(RedHat系)</a><br/>
Mac OS X系の対策はこちら<br/>
<a href="http://qiita.com/syui/items/809c1cd8ed57c8cdb055">CVE-2014-6271のbashの脆弱性に対応する方法</a>　　</p>

<p>私の使っているDebian(squeeze)でも、パッチが適応されたbashを配布しています。<br/>
<a href="https://security-tracker.debian.org/tracker/CVE-2014-6271">https://security-tracker.debian.org/tracker/CVE-2014-6271</a></p>

<h1>修正版へのアップデート</h1>

<p>修正されたbashはsqueezeの通常のリポジトリには修正版は公開されておらず、<br/>
ltsリポジトリを参照する必要があります。(2014/09/26 7:00現在)<br/>
<a href="https://wiki.debian.org/LTS/Using#Add_squeeze-lts_to_your_sources.list">LTS/Using - Debian Wiki</a>にリポジトリが書いてあるので、それをapt-getの参照先に追加します。</p>

<p>/etc/apt/sources.list.d`に、lts.listを作り、以下のように書き込みます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>deb http://http.debian.net/debian/ squeeze-lts main contrib non-free
</span><span class='line'>deb-src http://http.debian.net/debian/ squeeze-lts main contrib non-free
</span></code></pre></td></tr></table></div></figure>


<p>(手元に環境がないので確認できませんが、おそらくWheezyでは以下のリポジトリで行けると思います)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>deb http://security.debian.org/ wheezy/updates main
</span><span class='line'>deb-src http://security.debian.org/ wheezy/updates main
</span></code></pre></td></tr></table></div></figure>


<p>この状態で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install bash
</span></code></pre></td></tr></table></div></figure>


<p>をすることで、新しくできます。</p>

<p>ただし、この修正だけでは不十分という指摘があり、今後さらなる修正パッチが出てくる可能性があります。<br/>
おそらく同じリポジトリに更新が来ると思うので、上記の手順を実行したならば、<br/>
apt-getの<code>update</code>と<code>install bash</code>だけですむと思われます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++で少しでもビルド速度を速くする方法]]></title>
    <link href="http://ota42y.com/blog/2014/09/23/cpp-build/"/>
    <updated>2014-09-23T09:15:48+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/23/cpp-build</id>
    <content type="html"><![CDATA[<h1>結論</h1>

<ul>
<li>キャッシュを使う</li>
<li>不要なinclude削除</li>
<li>static or dynamic library化する</li>
<li>並列コンパイルする</li>
<li>分散コンパイルする</li>
<li>いいパソコンを使う</li>
</ul>


<p>C++のビルドをちょっとでも高速化したかったので、<br/>
どうすれば早くなるのかを調べたのでまとめました。</p>

<p>どれか一つをやるというよりかは、複数の手法を組み合わせていくのがいいと思います。</p>

<h1>キャッシュを使う</h1>

<p>ccacheのように、コンパイル結果をキャッシュしておくソフトを使うことで、<br/>
2回目以降のビルドは差分だけをコンパイルし直すため早くなります。<br/>
といっても、多分使わない方が珍しいと思いますが。</p>

<h1>不要なinclude削除</h1>

<p><a href="http://ota42y.com/blog/2014/09/22/cpp-include/">C++で不要なincludeを減らす</a>のように、<br/>
不要なincludeを減らすことでコンパイル時間の短縮化と、キャッシュを最大限活用することができます。</p>

<h1>Static Library or Dynamic Library化する</h1>

<p>切り出せる部分はライブラリとして切り出し、先にコンパイルしておくことで、<br/>
本体のコンパイル時間が短縮されます。<br/>
簡単に早くなりますが、ライブラリの切り出し方を工夫しないと効果が無い場合があります。</p>

<p>Static Libraryの場合はリンクが必要なので、リンク時間は減らせませんが、<br/>
コンパイル時間は省略できるため大幅に早くなります。</p>

<p>Dynamic Libraryはリンク時間が不要になりますが、その分実際の実行時に時間がかかります。<br/>
代わりに、ライブラリの部分だけ入れ換えるといったことができます。<br/>
ただし、iOSでは使えません…(´・_・`)　</p>

<h1>並列コンパイルする</h1>

<p>makeにはjオプションがあり、指定した数だけ並列実行されます。<br/>
多くしすぎると逆効果らしく、一般的にはコア数×2ぐらいを指定すると良いそうです。</p>

<h1>分散コンパイルする</h1>

<p>distcc等を使って分散コンパイルをすることで、劇的にコンパイル時間を短くできます。<br/>
ただしその分だけPCが必要なのと、Xcodeは非対応です…(´・_・`)</p>

<h1>いいパソコンを使う</h1>

<p>当たり前ですが、メモリ、CPU、SSDの性能を上げると早くなります。<br/>
ただし、高いPCはコスパが悪いので、他の手法と組み合わせて上手い具合に良いところを見つけてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++で不要なincludeを減らす]]></title>
    <link href="http://ota42y.com/blog/2014/09/22/cpp-include/"/>
    <updated>2014-09-22T07:50:08+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/22/cpp-include</id>
    <content type="html"><![CDATA[<h1>不要なinclude削除</h1>

<p>cppでは、includeは単にそこに書かれているファイルの内容を展開するだけになっています。<br/>
そのため、includeする量が増えるほどコンパイラが解析する量も増え、<br/>
結果としてコンパイル時間が長くなります。</p>

<p>また、キャッシュを利用している場合、<br/>
includeされているファイルのどれか一つでも変更があった場合はビルドし直しになるため、<br/>
不要なincludeを消すとよりキャッシュを活用できます。</p>

<h1>クラスの前方宣言を活用する</h1>

<p>クラスのメソッドやプロパティへのアクセスをしない場合、クラスの実態を知る必要はありません。<br/>
そのため、メンバ変数にクラスを持つ場合に、ポインタとして持たせることで、<br/>
ヘッダファイルにincludeを書く必要が無くなります。<br/>
これにより、不要なincludeを減らすことができます。</p>

<p>例えば、以下のようなAクラスがあるとします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// TestA.h</span>
</span><span class='line'><span class="cp">#include “InClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestA</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">TestA</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getNumber</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">InClass</span> <span class="n">m_inclass</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//TestA.cpp</span>
</span><span class='line'><span class="cp">#include “TestA.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">TestA</span><span class="o">::</span><span class="n">TestA</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getNumber</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m_inclass</span><span class="p">.</span><span class="n">getNumber</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>このとき、TestAクラスをincludeするクラスは、InClassを使わない場合でも、<br/>
TestA.hに書かれているために読み込んでしまいます。<br/>
そのため、コンパイラが処理する量が増えるのと、<br/>
InClass.hに変更があった場合に使っていないファイルまでコンパイルし直しになります。</p>

<p>ここで、以下のようにクラスの前方宣言を使い、<br/>
cppファイル側で読み込むことで、includeをヘッダファイルから削除できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//TestA.h</span>
</span><span class='line'><span class="k">class</span> <span class="nc">InClass</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestA</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">TestA</span><span class="p">();</span>
</span><span class='line'>  <span class="o">~</span><span class="n">TestA</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getNumber</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">InClass</span><span class="o">*</span> <span class="n">m_inclass</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//TestA.cpp</span>
</span><span class='line'><span class="cp">#include “TestA.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;InClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">TestA</span><span class="o">::</span><span class="n">TestA</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">m_inclass</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InClass</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">TestA</span><span class="o">::~</span><span class="n">TestA</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">m_inclass</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getNumber</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m_inclass</span><span class="o">-&gt;</span><span class="n">getNumber</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、TestAクラスをincludeしているクラスは、InClass.hをincludeしなくなります。<br/>
これにより、コンパイラが処理するコード量が減りますし、InClass.hに変更があった場合でも、<br/>
TestAクラスだけをコンパイルすれば良くなります。</p>

<p>ただし、メモリをきちんと確保しないと行けないため、デストラクタでの解放忘れなどに注意する必要があります。<br/>
また、最近の環境ではそれほど問題にはならないと思いますが、ヒープを確保するのでメモリが断片化します。</p>

<h1>Pimplイディオム</h1>

<p>classの前方宣言をさらに活用し、privateな物を全て別クラスにして持つ方法です。
これにより、privateの変数を外から完全に見えなくしたり、<br/>
内部実装の変更時に外への影響の抑止できます。</p>

<p>以下のようにprivateな変数を持つクラスがあるとします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//TestA.h</span>
</span><span class='line'><span class="k">class</span> <span class="nc">InClass</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TestA</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">TestA</span><span class="p">();</span>
</span><span class='line'>  <span class="o">~</span><span class="n">TestA</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getNumber</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getWeight</span><span class="p">(</span><span class="kt">int</span> <span class="n">density</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">width</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">depth</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InClass</span><span class="o">*</span> <span class="n">m_inclass</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getVolume</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>この中で、privateな部分を全て別クラスにしてしまい、メンバ変数をヘッダから消すことが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//TestA.h</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TestA</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">TestA</span><span class="p">();</span>
</span><span class='line'>  <span class="o">~</span><span class="n">TestA</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getNumber</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getWeight</span><span class="p">(</span><span class="kt">int</span> <span class="n">density</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">TestApImpl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">TestApImpl</span><span class="o">*</span> <span class="n">pImpl</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//TestA.cpp</span>
</span><span class='line'><span class="cp">#include &quot;test.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;InClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestA</span><span class="o">::</span><span class="n">TestApImpl</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">TestApImpl</span><span class="p">()</span> <span class="o">:</span> <span class="n">height</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">width</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">depth</span><span class="p">(</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">m_inclass</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="o">~</span><span class="n">TestApImpl</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">m_inclass</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getVolume</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">height</span><span class="o">*</span><span class="n">width</span><span class="o">*</span><span class="n">depth</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">width</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">depth</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">InClass</span><span class="o">*</span> <span class="n">m_inclass</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">TestA</span><span class="o">::</span><span class="n">TestA</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">pImpl</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TestApImpl</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">TestA</span><span class="o">::~</span><span class="n">TestA</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">pImpl</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getNumber</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">pImpl</span><span class="o">-&gt;</span><span class="n">m_inclass</span><span class="o">-&gt;</span><span class="n">getNumber</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getWeight</span><span class="p">(</span><span class="kt">int</span> <span class="n">density</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">pImpl</span><span class="o">-&gt;</span><span class="n">getVolume</span><span class="p">()</span> <span class="o">*</span> <span class="n">density</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより実装を外側から完全に隠せるのと、内部の実装変更時にヘッダファイルを変更する必要がなくなり、<br/>
コンパイル時のキャッシュを最大限に活用できます。</p>

<p>ただし、一つのcppに複数のクラスが入り、さらに外から見える部分と実際の実装が離れるため、<br/>
かなりコードが読みにくくなります。</p>

<h1>前方宣言を使えない場合</h1>

<p>クラスの実態を持つ場合や、継承したクラスの場合は前方宣言にすることはできません。<br/>
このような場合はポインタを持つようにしたり、<a href="http://ja.m.wikipedia.org/wiki/Decorator_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">Decorator パターン</a>によって、<br/>
継承を使わなくすることで前方宣言を利用できます。</p>

<p>ただし、それによってコードが読みにくくなると別の問題を引き起こすので、ケースバイケースになります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitterのoath_callbackは設定していないと上書きできない]]></title>
    <link href="http://ota42y.com/blog/2014/09/19/twitter-callback/"/>
    <updated>2014-09-19T07:49:01+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/19/twitter-callback</id>
    <content type="html"><![CDATA[<p>Twitterは<a href="https://dev.twitter.com/oauth/reference/post/oauth/request_token">oauth/request_token</a>へのアクセス時に、<br/>
認証後のコールバック先をoauth_callbackパラメータで上書きできます。</p>

<p>Twitterの開発者画面からは独自スキーマは登録できませんが、<br/>
この機能で上書きをすると任意のスキーマをコールバックに設定できます。</p>

<p>ただし、Twitterに何らかのURL(ダミーでも可)を設定してないと上書きできないようです。</p>

<p>たとえば以下のようなコードを書いた場合、Twitterの開発者画面でURLを登録していないと、<br/>
<code>401 Authorization Required (OAuth::Unauthorized)</code>が帰ってきますが、<br/>
<code>http://example.com</code>のようにダミーURLを登録すると認証画面用のURLが帰ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;oauth&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">consumer_key</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">consumer_secret</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">consumer</span> <span class="o">=</span> <span class="ss">OAuth</span><span class="p">:</span><span class="ss">:Consumer</span><span class="o">.</span><span class="n">new</span> <span class="n">consumer_key</span><span class="p">,</span> <span class="n">consumer_secret</span><span class="p">,</span> <span class="ss">site</span><span class="p">:</span> <span class="s2">&quot;https://api.twitter.com&quot;</span>
</span><span class='line'><span class="n">request_token</span> <span class="o">=</span> <span class="n">consumer</span><span class="o">.</span><span class="n">get_request_token</span>  <span class="n">oauth_callback</span><span class="p">:</span> <span class="s2">&quot;ota42y://test&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Please visit here: </span><span class="si">#{</span><span class="n">request_token</span><span class="o">.</span><span class="n">authorize_url</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考: <a href="http://qiita.com/johnny-miyake/items/a432cc4fea3b1b8c6b1e">Twitter の AccessToken と AccessTokenSecret を Ruby で取得する</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Travis CI Meetup Tokyoに行ってきた]]></title>
    <link href="http://ota42y.com/blog/2014/09/18/travisci-meetup/"/>
    <updated>2014-09-18T08:09:43+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/18/travisci-meetup</id>
    <content type="html"><![CDATA[<p>前半はTravis CIのデモ、真ん中てCEOのお話、最後にLTと三部構成でした。<br/>
こちらに動画があるそうです。<br/>
<a href="http://www.ustream.tv/recorded/52769967">http://www.ustream.tv/recorded/52769967</a></p>

<p>デモは一通りのTravis CIの使い方をデモしていただきました。<br/>
何となくわかってるデフォルトの挙動などにちゃんと説明がはいり、<br/>
基礎知識を固めるには凄く良かったです。<br/>
また、いくつか知らない機能(sudo false)や、<br/>
.travis.ymlの書式をオンラインで確認できる<a href="http://lint.travis-ci.org/">Travis WebLint</a>等が紹介されていました。</p>

<p>なお、デモに使ったリポジトリは以下にあるようです。<br/>
<a href="https://github.com/BanzaiMan/travis-intro-tokyo">https://github.com/BanzaiMan/travis-intro-tokyo</a></p>

<p>CEOの話では、現在のjob数やVM数、サーバの数などを話していただきました。<br/>
それと後半では環境によって良くはまる10個が紹介されていました。<br/>
ファイルシステムのケースセンシティブや、GNUとBSDの違いだったり、aptから古いバージョンが消えたり、<br/>
タイムゾーンやOSの違いによる環境構築や<a href="https://github.com/travis-ci/travis-ci/issues/2755">言語自体のバグ</a>等々…<br/>
ここ最近に当たった奴がいくつかあり頭が痛かったです…(´･_･`)</p>

<p>最後のLTではいろんな発表が行われました。<br/>
見つけた分だけまとめておきます。</p>

<h2>Automated releasing iOS app with Travis CI</h2>

<p><a href="https://speakerdeck.com/kishikawakatsumi/automated-releasing-ios-app-with-travis-ci">https://speakerdeck.com/kishikawakatsumi/automated-releasing-ios-app-with-travis-ci</a><br/>
私はJenkinsを使っていますが、似たような構成でやってるので参考になりました。<br/>
ただ、ビルド時間が5倍ぐらい長いので、こちらのプロジェクトにそのまま導入は難しそうです…<br/>
xcarchiveに書き出すと、申請用ビルドでテストフライトに出せるというのは新たな発見でした。<br/>
(追記: 発表者様から指摘がありました)　　</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/ota42y">@ota42y</a> 僕の話し方が悪かったのですが、xcarchiveだから、というわけではなくて、AppStoreとAdHocのプロビジョニングは互換性があるので、xcarchiveからipaにするところでプロビジョニングをAdHocにしています。同じビルドで署名だけ変える方法です。</p>&mdash; kishikawa katsumi (@k_katsumi) <a href="https://twitter.com/k_katsumi/status/512399910176432130">2014, 9月 18</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>Travis CI API LT</h2>

<p><a href="https://speakerdeck.com/pinzolo/travis-ci-api-lt">https://speakerdeck.com/pinzolo/travis-ci-api-lt</a><br/>
Travis CIのAPIと、gemの利用例です。<br/>
パッと見た限り、必要最低限は揃ってそうなので、hubotから叩くみたいなことが出来そうです。</p>

<h2>QUnit on Travis CI @shigemk2</h2>

<p><a href="https://shigemk2.github.io/travisci_jp/#/step-1">https://shigemk2.github.io/travisci_jp/#/step-1</a><br/>
jsのライブラリを作った際の利用例でした。<br/>
実際に作る際に参考に出来そうでした。</p>

<h2>When was the build passing?</h2>

<p><a href="http://sanemat.github.io/talks/20140917-travis-ci-meetup-tachikoma-io/">http://sanemat.github.io/talks/20140917-travis-ci-meetup-tachikoma-io/</a><br/>
依存してるライブラリが更新すると、いつの間にかテストが落ちるようになってるけど、<br/>
テストが実行されないとわからないので、活発でないプロジェクトだと大変だよね…って話です。</p>

<p>これに対して、定期的にPRを送る<a href="http://tachikoma.io/">Tachikoma.io - Interval Pull Request App</a>というものを作ったそうです。<br/>
bundle updateをしてPR送るみたいなこともやってくれるため、とりあえず仕掛けておいて損は無さそうです。</p>

<h2>Testing your app with Selenium on Travis CI by Yusuke Ando</h2>

<p><a href="https://speakerdeck.com/yandod/testing-your-app-with-selenium-on-travis-ci-1">https://speakerdeck.com/yandod/testing-your-app-with-selenium-on-travis-ci-1</a><br/>
Travis CIでのSelenium導入の話です。<br/>
FirefoxやX等ははじめから入っているため、立ち上げるだけでいいらしく、<br/>
面倒なインストールをしなくていいためとても楽そうでした。</p>

<h1>懇親会</h1>

<p>DeNAさんがお寿司を出してくれました！！！！！！！！</p>

<blockquote class="twitter-tweet" lang="ja"><p>お寿司だヽ( ･∀･)ﾉ <a href="https://twitter.com/hashtag/travisci_jp?src=hash">#travisci_jp</a> <a href="http://t.co/zrmrhO6WMw">pic.twitter.com/zrmrhO6WMw</a></p>&mdash; おおた (@ota42y) <a href="https://twitter.com/ota42y/status/512210649699463168">2014, 9月 17</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>懇親会で聞いたところ、大体の人がJenkinsは保守が死ねるよね…<br/>
って言っていたので、やっぱりみんな大変なんだな…となりました(´･_･`)<br/>
やはりYAMLで設定できるTravis CIの方が楽ですよね…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スタックに確保した変数の有効範囲に気をつける]]></title>
    <link href="http://ota42y.com/blog/2014/09/16/stack-heap/"/>
    <updated>2014-09-16T07:46:07+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/16/stack-heap</id>
    <content type="html"><![CDATA[<p>C++にはスタックとヒープという、使い方の違うメモリ領域が存在します。<br/>
rubyとかjavaではこのような違いは基本的に意識する必要が無いため、間違った使い方をしてしまう場合があります。</p>

<p>例えば、普通の変数はスタックに積まれるため、スコープを抜けるとたとえ使っていても破棄されます。</p>

<p>以下に、関数の中で文字バッファをスタックに確保し、その参照を戻す関数の間違った例を上げます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">getTextFilename</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">basename</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">1024</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="n">strncpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">basename</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">basename</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">strncat</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">&quot;.txt&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">test_filename</span> <span class="o">=</span> <span class="n">getTextFilename</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_filename</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">example_filename</span> <span class="o">=</span> <span class="n">getTextFilename</span><span class="p">(</span><span class="s">&quot;example&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">example_filename</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_filename</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>環境によりますが、おそらく二回目のtest_filenameの出力がおかしくなると思います。<br/>
私の場合は以下のように、test_filenameにexample_filenameの内容が書き込まれていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">test</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">example</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">example</span><span class="p">.</span><span class="n">txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>getTextFilename内のstrはスタックに確保されるので、関数終了時に解放されます。<br/>
そのため、戻り値の指し示す文字列は解放済みメモリとなり、勝手に変更される可能性があります。</p>

<p>上の例ではたまたま同じアドレスが再利用されたため、同じ文字列が設定されました。<br/>
ですが、間に様々な処理を実行した場合は、謎の値が書き込まれるなどがあり得るため注意が必要です。</p>

<h1>対策</h1>

<p>このような場合、いくつかの対策があります。</p>

<h2>引数で渡す</h2>

<p>1つ目が、strncpyやstrncatのように、メモリ利用域を引数として受け取る方法です。<br/>
これにより、自分のスコープから外れても値を保持することができます。<br/>
先ほどの例ですと、main側でcharの配列を確保して関数の引数でそれを受け取るといった形です。</p>

<p>確保したスコープを抜けるとやはり解放されますが、確実に解放されるためとても楽です。</p>

<h2>ヒープに確保する</h2>

<p>2つ目はmallocやnewでヒープ領域に確保する方法です。<br/>
以下はnewで配列を確保するように書き換えました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">getTextFilename</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">basename</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>  <span class="n">strncpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">basename</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">basename</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">strncat</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">&quot;.txt&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">test_filename</span> <span class="o">=</span> <span class="n">getTextFilename</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_filename</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">example_filename</span> <span class="o">=</span> <span class="n">getTextFilename</span><span class="p">(</span><span class="s">&quot;example&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">example_filename</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_filename</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">　</span><span class="c1">// 明示的に解放しないと絶対に解放されない</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">test_filename</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">example_filename</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>newやmallocでメモリ領域を確保した場合、ヒープ領域に確保され、スコープを超えてメモリを確保し続けられます。<br/>
ただし、明示的に解放しないとメモリリークが起きるため、注意が必要です。</p>

<h2>オブジェクトをコピーする</h2>

<p>3つめがコピーを使う方法です。<br/>
今回の関数では配列を使っていますが、コピーコンストラクタをもつstd::stringを使うと、<br/>
スタック上の内容を関数の外に安全にコピー出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">getTextFilename</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">basename</span><span class="p">){</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">text</span><span class="p">(</span><span class="n">basename</span><span class="p">);</span>
</span><span class='line'>  <span class="n">text</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;.txt&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">test_filename</span> <span class="o">=</span> <span class="n">getTextFilename</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_filename</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">example_filename</span> <span class="o">=</span> <span class="n">getTextFilename</span><span class="p">(</span><span class="s">&quot;example&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">example_filename</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_filename</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>関数の戻り値は戻り先にコピーされるまでは保持されるという仕様があるらしく、<br/>
コピー可能なものに関しては戻り値としてちゃんと返すことが出来ます。<br/>
(これが無い場合、return 0の0も変更される可能性が出てきてしまうため、当然の仕様と言えます)</p>

<p>ただし、コピー処理が走るため、オブジェクトが巨大な場合、<br/>
メモリ消費が増えたり、時間がかかる可能性があるので注意が必要です。</p>

<h1>　まとめ</h1>

<p>スタックで確保した場合、解放忘れ等がないためとても簡単ですが、<br/>
スコープから抜けると解放されてしまうため、有効範囲を考えないといけません。</p>

<p>今回は文字列で例を挙げましたが、自作クラスなどでもほぼ同じ事がいえます。<br/>
ただし、3つ目の方法はそのクラスと、メンバ変数として持ってるクラス全てにコピーコンストラクタを書いていないと、
中途半端にコピーされ、ß予期せぬエラーに繋がります。　　</p>
]]></content>
  </entry>
  
</feed>
