<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[おおたの物置]]></title>
  <link href="http://ota42y.com/atom.xml" rel="self"/>
  <link href="http://ota42y.com/"/>
  <updated>2014-10-03T07:49:16+09:00</updated>
  <id>http://ota42y.com/</id>
  <author>
    <name><![CDATA[ota42y]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HDDのパーティションテーブルが消えてからのデータ復旧]]></title>
    <link href="http://ota42y.com/blog/2014/10/03/hdd-post/"/>
    <updated>2014-10-03T07:36:29+09:00</updated>
    <id>http://ota42y.com/blog/2014/10/03/hdd-post</id>
    <content type="html"><![CDATA[<p>先日デスクトップPCのデータ用HDDが吹っ飛びました。<br/>
原因は不明ですがデータは消えておらず、パーティションテーブルか完全に消えていました。<br/>
復旧に成功したのでその手順をメモっておきます。</p>

<h1>問題推定</h1>

<p>初めは何故データが消えたのかわからなかったため、その調査から始めました。<br/>
消えたのはデータ用HDDで、Windows本体は問題なく起動していたため、WindowsからHDDを見ると、<br/>
未フォーマット状態のディスクとして認識され、パーティションスタイルの選択から始まっていました。</p>

<p>HDDは数ヶ月前に新調したものであり、異音やエラーなどの問題も無かったため、物理的な可能性は薄いと考えました。<br/>
また、直前に大量にデータを書き込んでもいないため、データを削除した線も薄そうです。</p>

<p>さらに、一部のデータが読み込めなくなるのではなく、全データが一度に読み取り不能になったことから、<br/>
何らかの要因でパーティションが消えてデータが読み取り不能になり、<br/>
データ自体は残っているのではないかと考えました。</p>

<h1>パーティションの確認</h1>

<p>運良く手元にLinuxの起動ディスクがあったため、とりあえずパーティションがどうなっているかを確認しました。</p>

<p>手順としては以下のようになります。<br/>
なお、HDDがsdaにマウントされていると仮定します。</p>

<ul>
<li>ddコマンドでHDDの先頭をコピーする<br/>
ddコマンドはディスクからファイルやディスクにデータをコピーできるコマンドです。<br/>
<code>sudo dd if=/dev/sda of=/tmp/hdd count=100</code><br/>
のようにすることで、sdaの先頭から100ブロック分を/tmp/hddファイルにコピーします。</li>
<li>hexdumpコマンドで中身を見る<br/>
hexdumpコマンドはファイルの中身を16進数で出力します。<br/>
<code>hexdump /tmp/hdd</code></li>
</ul>


<p>私の場合、hexdumpの出力が先頭50MBぐらい全て0だらけだったので、<br/>
パーティションが全て0埋めされて消えていました。</p>

<p>そのため、次にパーティションの復活を試みます。</p>

<h1>TestDiskでパーティション復活</h1>

<p>壊れたディスクはPBRにしていたため、MBRと比べて大変になる場合が多いらしいですが、<br/>
TestDiskを使うと特に問題なく修復できました。</p>

<p>詳しい使い方はこちら。<br/>
<a href="http://uiuicy.cs.land.to/testdisk1.html">【TestDisk】について</a></p>

<p>私の場合、これでNTFSのパーティションを修復できましたが、<br/>
何故か書き込んでいないはずのWindowsディスクが壊れてしまい、<br/>
データと引き替えにWindowsが消えてしまいました…</p>

<p>幸いWindowsディスクには特に重要なデータを入れていなかったのと、<br/>
Macからデータを読み出すことができたために難を逃れました。</p>

<p>念のため、Windowsディスクは外して作業をした方がよさそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ソシャゲ用のスタミナ計算機を作った]]></title>
    <link href="http://ota42y.com/blog/2014/10/02/social-game-stamina-calc/"/>
    <updated>2014-10-02T07:35:04+09:00</updated>
    <id>http://ota42y.com/blog/2014/10/02/social-game-stamina-calc</id>
    <content type="html"><![CDATA[<p>作りました。</p>

<p>スタミナmaxまでどれくらいかなー？とか、次イベント曲(25消費)をやるのに区切りがいいのはいつかなー<br/>
みたいなのを計算するのが面倒だったので、その辺の計算を自動でやってくれます。</p>

<h1>使い方</h1>

<h2>初期化</h2>

<p>スタミナ1あたりいくつ回復するかはゲームによって違うので、コンストラクタで渡します。<br/>
なお、指定は秒で行います。<br/>
<code>stamina_calculator = new StaminaCalculator 6*60</code><br/>
この例ですと、6分で1スタミナ回復するゲームになります。</p>

<h2>指定した値までの回復時間(getNextMaxStaminaTime)</h2>

<p>現在値と指定値を渡すと、指定した値までに何秒かかるかを返します。<br/>
Maxまでどれくらいかな？とか、50になるのは何分後か？みたいな計算に使います。<br/>
<code>stamina_calculator.getNextMaxStaminaTime(10, 60)</code></p>

<h2>指定した倍数の値まで回復する時間(getMultipleRecoveryTime)</h2>

<p>現在値とMAX値、それと倍数を渡すことで、指定した倍数になる時間を返します。<br/>
今30で、一回25消費できるから、50か75か100になる時間を知りたい…みたいな時に使います。<br/>
<code>next_multiple_time = calc.getMultipleRecoveryTime(10, 80, 25)</code></p>

<h2>結果をDateオブジェクトにする</h2>

<p>メソッドを呼んだ時間から指定秒たった時点のDateオブジェクトを返します。<br/>
Dateオブジェクトのコンストラクタには、指定時間後のオブジェクトを作る方法が見当たらなかったので作りました。<br/>
<code>stamina_calculator.convertToDate(second)</code></p>

<h1>サンプルコード</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>StaminaCalculator = require('stamina-calculator').StaminaCalculator;
</span><span class='line'>
</span><span class='line'>stamina_calculator = new StaminaCalculator 6*60
</span><span class='line'>
</span><span class='line'>second = stamina_calculator.getNextMaxStaminaTime(10, 60)
</span><span class='line'>
</span><span class='line'>console.log second
</span><span class='line'># 今から何秒後にスタミナが５０回復するか
</span><span class='line'>
</span><span class='line'>console.log stamina_calculator.convertToDate(second)
</span><span class='line'># 現在時刻からスタミナが５０回復する時間がDateオブジェクトで帰ってくる</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npmにパッケージを公開する手順]]></title>
    <link href="http://ota42y.com/blog/2014/09/29/npm-publish/"/>
    <updated>2014-09-29T07:49:16+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/29/npm-publish</id>
    <content type="html"><![CDATA[<p>とても簡単でしたがつい忘れるのでメモ。</p>

<h1>公開手順</h1>

<ol>
<li><p>npmjsに開発者登録をします。<br/>
<a href="https://www.npmjs.org/">https://www.npmjs.org/</a></p></li>
<li><p><code>npm adduser</code>で~/.npmrcにnpmへのログイントークンを保存します。</p></li>
<li><p>package.jsonに必要事項を書きます。<br/>
<a href="https://github.com/ota42y/stamina-calculator/blob/master/package.json">こんな感じ</a>ですね。</p></li>
<li><p><code>npm publish</code>で公開</p></li>
<li><p>アップグレード版の配布も<code>npm publish</code>で可能です。<br/>
(ただし、package.json内のバージョンを変えないと新しいバージョンにはなりません)</p></li>
</ol>


<h1>非公開手順</h1>

<p>間違えて変なバージョンを公開した場合など、公開したパッケージを削除したい場合は、<br/>
<code>npm unpublish パッケージ名前@バージョン</code>で削除出来ます。<br/>
何も指定しない場合全てのバージョンが対象になりますが、<code>--force</code>をつける必要があります。</p>

<p>ただし、削除してしまうので、そのパッケージに依存しているパッケージが悲惨なことになります。<br/>
そのため、<code>npm deprecate</code>の方がアップグレードを促せるし推奨すると<a href="https://www.npmjs.org/doc/cli/npm-unpublish.html">公式サイト</a>には書いてあります。<br/>
unpublishは間違えて公開した場合用ですね。</p>

<p>なお、全てのバージョンを削除するとnpmからパッケージの情報も削除されます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian squeezeでShellShock対策]]></title>
    <link href="http://ota42y.com/blog/2014/09/26/shell-shock/"/>
    <updated>2014-09-26T07:35:47+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/26/shell-shock</id>
    <content type="html"><![CDATA[<p>Debianは探しても見つからなかったので…(´･_･`)</p>

<h1>ShellShock(CVE-2014-6271)</h1>

<p>CVE-2014-6271(とCVE-2014-7169)として、bashに第三者から任意のコードが実行される脆弱性が見つかりました。<br/>
<a href="https://www.jpcert.or.jp/at/2014/at140037.html">GNU bash の脆弱性に関する注意喚起</a><br/>
<a href="http://d.hatena.ne.jp/Kango/20140925/1411612246">bashの脆弱性(CVE-2014-6271) #ShellShock の関連リンクをまとめてみた</a><br/>
<a href="https://x86-64.jp/blog/CVE-2014-6271">Blog: bashの脆弱性がヤバすぎる件 – x86-64.jp - くりす研</a></p>

<p>bashで以下のスクリプトを実行し、出力文字列に<code>vulnerable</code>が出てきたらまずい状態です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>env <span class="nv">x</span><span class="o">=</span><span class="s1">&#39;() { :;}; echo vulnerable&#39;</span> bash -c <span class="s1">&#39;echo hello&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>修正パッチ状況</h1>

<p>この問題に対しては(まだ不十分ですが)修正パッチが公開されており、また各ディストリビューションでも修正したbashが配布されています。</p>

<p>Redhad系の対策はこちら<br/>
<a href="http://qiita.com/richmikan@github/items/5f54114a46e64178133d">2014/09/24に発表されたBash脆弱性と解決法(RedHat系)</a><br/>
Mac OS X系の対策はこちら<br/>
<a href="http://qiita.com/syui/items/809c1cd8ed57c8cdb055">CVE-2014-6271のbashの脆弱性に対応する方法</a>　　</p>

<p>私の使っているDebian(squeeze)でも、パッチが適応されたbashを配布しています。<br/>
<a href="https://security-tracker.debian.org/tracker/CVE-2014-6271">https://security-tracker.debian.org/tracker/CVE-2014-6271</a></p>

<h1>修正版へのアップデート</h1>

<p>修正されたbashはsqueezeの通常のリポジトリには修正版は公開されておらず、<br/>
ltsリポジトリを参照する必要があります。(2014/09/26 7:00現在)<br/>
<a href="https://wiki.debian.org/LTS/Using#Add_squeeze-lts_to_your_sources.list">LTS/Using - Debian Wiki</a>にリポジトリが書いてあるので、それをapt-getの参照先に追加します。</p>

<p>/etc/apt/sources.list.d`に、lts.listを作り、以下のように書き込みます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>deb http://http.debian.net/debian/ squeeze-lts main contrib non-free
</span><span class='line'>deb-src http://http.debian.net/debian/ squeeze-lts main contrib non-free
</span></code></pre></td></tr></table></div></figure>


<p>(手元に環境がないので確認できませんが、おそらくWheezyでは以下のリポジトリで行けると思います)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>deb http://security.debian.org/ wheezy/updates main
</span><span class='line'>deb-src http://security.debian.org/ wheezy/updates main
</span></code></pre></td></tr></table></div></figure>


<p>この状態で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install bash
</span></code></pre></td></tr></table></div></figure>


<p>をすることで、新しくできます。</p>

<p>ただし、この修正だけでは不十分という指摘があり、今後さらなる修正パッチが出てくる可能性があります。<br/>
おそらく同じリポジトリに更新が来ると思うので、上記の手順を実行したならば、<br/>
apt-getの<code>update</code>と<code>install bash</code>だけですむと思われます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++で少しでもビルド速度を速くする方法]]></title>
    <link href="http://ota42y.com/blog/2014/09/23/cpp-build/"/>
    <updated>2014-09-23T09:15:48+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/23/cpp-build</id>
    <content type="html"><![CDATA[<h1>結論</h1>

<ul>
<li>キャッシュを使う</li>
<li>不要なinclude削除</li>
<li>static or dynamic library化する</li>
<li>並列コンパイルする</li>
<li>分散コンパイルする</li>
<li>いいパソコンを使う</li>
</ul>


<p>C++のビルドをちょっとでも高速化したかったので、<br/>
どうすれば早くなるのかを調べたのでまとめました。</p>

<p>どれか一つをやるというよりかは、複数の手法を組み合わせていくのがいいと思います。</p>

<h1>キャッシュを使う</h1>

<p>ccacheのように、コンパイル結果をキャッシュしておくソフトを使うことで、<br/>
2回目以降のビルドは差分だけをコンパイルし直すため早くなります。<br/>
といっても、多分使わない方が珍しいと思いますが。</p>

<h1>不要なinclude削除</h1>

<p><a href="http://ota42y.com/blog/2014/09/22/cpp-include/">C++で不要なincludeを減らす</a>のように、<br/>
不要なincludeを減らすことでコンパイル時間の短縮化と、キャッシュを最大限活用することができます。</p>

<h1>Static Library or Dynamic Library化する</h1>

<p>切り出せる部分はライブラリとして切り出し、先にコンパイルしておくことで、<br/>
本体のコンパイル時間が短縮されます。<br/>
簡単に早くなりますが、ライブラリの切り出し方を工夫しないと効果が無い場合があります。</p>

<p>Static Libraryの場合はリンクが必要なので、リンク時間は減らせませんが、<br/>
コンパイル時間は省略できるため大幅に早くなります。</p>

<p>Dynamic Libraryはリンク時間が不要になりますが、その分実際の実行時に時間がかかります。<br/>
代わりに、ライブラリの部分だけ入れ換えるといったことができます。<br/>
ただし、iOSでは使えません…(´・_・`)　</p>

<h1>並列コンパイルする</h1>

<p>makeにはjオプションがあり、指定した数だけ並列実行されます。<br/>
多くしすぎると逆効果らしく、一般的にはコア数×2ぐらいを指定すると良いそうです。</p>

<h1>分散コンパイルする</h1>

<p>distcc等を使って分散コンパイルをすることで、劇的にコンパイル時間を短くできます。<br/>
ただしその分だけPCが必要なのと、Xcodeは非対応です…(´・_・`)</p>

<h1>いいパソコンを使う</h1>

<p>当たり前ですが、メモリ、CPU、SSDの性能を上げると早くなります。<br/>
ただし、高いPCはコスパが悪いので、他の手法と組み合わせて上手い具合に良いところを見つけてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++で不要なincludeを減らす]]></title>
    <link href="http://ota42y.com/blog/2014/09/22/cpp-include/"/>
    <updated>2014-09-22T07:50:08+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/22/cpp-include</id>
    <content type="html"><![CDATA[<h1>不要なinclude削除</h1>

<p>cppでは、includeは単にそこに書かれているファイルの内容を展開するだけになっています。<br/>
そのため、includeする量が増えるほどコンパイラが解析する量も増え、<br/>
結果としてコンパイル時間が長くなります。</p>

<p>また、キャッシュを利用している場合、<br/>
includeされているファイルのどれか一つでも変更があった場合はビルドし直しになるため、<br/>
不要なincludeを消すとよりキャッシュを活用できます。</p>

<h1>クラスの前方宣言を活用する</h1>

<p>クラスのメソッドやプロパティへのアクセスをしない場合、クラスの実態を知る必要はありません。<br/>
そのため、メンバ変数にクラスを持つ場合に、ポインタとして持たせることで、<br/>
ヘッダファイルにincludeを書く必要が無くなります。<br/>
これにより、不要なincludeを減らすことができます。</p>

<p>例えば、以下のようなAクラスがあるとします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// TestA.h</span>
</span><span class='line'><span class="cp">#include “InClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestA</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">TestA</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getNumber</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">InClass</span> <span class="n">m_inclass</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//TestA.cpp</span>
</span><span class='line'><span class="cp">#include “TestA.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">TestA</span><span class="o">::</span><span class="n">TestA</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getNumber</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m_inclass</span><span class="p">.</span><span class="n">getNumber</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>このとき、TestAクラスをincludeするクラスは、InClassを使わない場合でも、<br/>
TestA.hに書かれているために読み込んでしまいます。<br/>
そのため、コンパイラが処理する量が増えるのと、<br/>
InClass.hに変更があった場合に使っていないファイルまでコンパイルし直しになります。</p>

<p>ここで、以下のようにクラスの前方宣言を使い、<br/>
cppファイル側で読み込むことで、includeをヘッダファイルから削除できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//TestA.h</span>
</span><span class='line'><span class="k">class</span> <span class="nc">InClass</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestA</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">TestA</span><span class="p">();</span>
</span><span class='line'>  <span class="o">~</span><span class="n">TestA</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getNumber</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">InClass</span><span class="o">*</span> <span class="n">m_inclass</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//TestA.cpp</span>
</span><span class='line'><span class="cp">#include “TestA.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;InClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">TestA</span><span class="o">::</span><span class="n">TestA</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">m_inclass</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InClass</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">TestA</span><span class="o">::~</span><span class="n">TestA</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">m_inclass</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getNumber</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m_inclass</span><span class="o">-&gt;</span><span class="n">getNumber</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、TestAクラスをincludeしているクラスは、InClass.hをincludeしなくなります。<br/>
これにより、コンパイラが処理するコード量が減りますし、InClass.hに変更があった場合でも、<br/>
TestAクラスだけをコンパイルすれば良くなります。</p>

<p>ただし、メモリをきちんと確保しないと行けないため、デストラクタでの解放忘れなどに注意する必要があります。<br/>
また、最近の環境ではそれほど問題にはならないと思いますが、ヒープを確保するのでメモリが断片化します。</p>

<h1>Pimplイディオム</h1>

<p>classの前方宣言をさらに活用し、privateな物を全て別クラスにして持つ方法です。
これにより、privateの変数を外から完全に見えなくしたり、<br/>
内部実装の変更時に外への影響の抑止できます。</p>

<p>以下のようにprivateな変数を持つクラスがあるとします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//TestA.h</span>
</span><span class='line'><span class="k">class</span> <span class="nc">InClass</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TestA</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">TestA</span><span class="p">();</span>
</span><span class='line'>  <span class="o">~</span><span class="n">TestA</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getNumber</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getWeight</span><span class="p">(</span><span class="kt">int</span> <span class="n">density</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">width</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">depth</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InClass</span><span class="o">*</span> <span class="n">m_inclass</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getVolume</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>この中で、privateな部分を全て別クラスにしてしまい、メンバ変数をヘッダから消すことが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//TestA.h</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TestA</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">TestA</span><span class="p">();</span>
</span><span class='line'>  <span class="o">~</span><span class="n">TestA</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getNumber</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getWeight</span><span class="p">(</span><span class="kt">int</span> <span class="n">density</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">TestApImpl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">TestApImpl</span><span class="o">*</span> <span class="n">pImpl</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//TestA.cpp</span>
</span><span class='line'><span class="cp">#include &quot;test.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;InClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestA</span><span class="o">::</span><span class="n">TestApImpl</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">TestApImpl</span><span class="p">()</span> <span class="o">:</span> <span class="n">height</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">width</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">depth</span><span class="p">(</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">m_inclass</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="o">~</span><span class="n">TestApImpl</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">m_inclass</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getVolume</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">height</span><span class="o">*</span><span class="n">width</span><span class="o">*</span><span class="n">depth</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">width</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">depth</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">InClass</span><span class="o">*</span> <span class="n">m_inclass</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">TestA</span><span class="o">::</span><span class="n">TestA</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">pImpl</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TestApImpl</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">TestA</span><span class="o">::~</span><span class="n">TestA</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">pImpl</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getNumber</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">pImpl</span><span class="o">-&gt;</span><span class="n">m_inclass</span><span class="o">-&gt;</span><span class="n">getNumber</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getWeight</span><span class="p">(</span><span class="kt">int</span> <span class="n">density</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">pImpl</span><span class="o">-&gt;</span><span class="n">getVolume</span><span class="p">()</span> <span class="o">*</span> <span class="n">density</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより実装を外側から完全に隠せるのと、内部の実装変更時にヘッダファイルを変更する必要がなくなり、<br/>
コンパイル時のキャッシュを最大限に活用できます。</p>

<p>ただし、一つのcppに複数のクラスが入り、さらに外から見える部分と実際の実装が離れるため、<br/>
かなりコードが読みにくくなります。</p>

<h1>前方宣言を使えない場合</h1>

<p>クラスの実態を持つ場合や、継承したクラスの場合は前方宣言にすることはできません。<br/>
このような場合はポインタを持つようにしたり、<a href="http://ja.m.wikipedia.org/wiki/Decorator_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">Decorator パターン</a>によって、<br/>
継承を使わなくすることで前方宣言を利用できます。</p>

<p>ただし、それによってコードが読みにくくなると別の問題を引き起こすので、ケースバイケースになります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitterのoath_callbackは設定していないと上書きできない]]></title>
    <link href="http://ota42y.com/blog/2014/09/19/twitter-callback/"/>
    <updated>2014-09-19T07:49:01+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/19/twitter-callback</id>
    <content type="html"><![CDATA[<p>Twitterは<a href="https://dev.twitter.com/oauth/reference/post/oauth/request_token">oauth/request_token</a>へのアクセス時に、<br/>
認証後のコールバック先をoauth_callbackパラメータで上書きできます。</p>

<p>Twitterの開発者画面からは独自スキーマは登録できませんが、<br/>
この機能で上書きをすると任意のスキーマをコールバックに設定できます。</p>

<p>ただし、Twitterに何らかのURL(ダミーでも可)を設定してないと上書きできないようです。</p>

<p>たとえば以下のようなコードを書いた場合、Twitterの開発者画面でURLを登録していないと、<br/>
<code>401 Authorization Required (OAuth::Unauthorized)</code>が帰ってきますが、<br/>
<code>http://example.com</code>のようにダミーURLを登録すると認証画面用のURLが帰ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;oauth&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">consumer_key</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">consumer_secret</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">consumer</span> <span class="o">=</span> <span class="ss">OAuth</span><span class="p">:</span><span class="ss">:Consumer</span><span class="o">.</span><span class="n">new</span> <span class="n">consumer_key</span><span class="p">,</span> <span class="n">consumer_secret</span><span class="p">,</span> <span class="ss">site</span><span class="p">:</span> <span class="s2">&quot;https://api.twitter.com&quot;</span>
</span><span class='line'><span class="n">request_token</span> <span class="o">=</span> <span class="n">consumer</span><span class="o">.</span><span class="n">get_request_token</span>  <span class="n">oauth_callback</span><span class="p">:</span> <span class="s2">&quot;ota42y://test&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Please visit here: </span><span class="si">#{</span><span class="n">request_token</span><span class="o">.</span><span class="n">authorize_url</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考: <a href="http://qiita.com/johnny-miyake/items/a432cc4fea3b1b8c6b1e">Twitter の AccessToken と AccessTokenSecret を Ruby で取得する</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Travis CI Meetup Tokyoに行ってきた]]></title>
    <link href="http://ota42y.com/blog/2014/09/18/travisci-meetup/"/>
    <updated>2014-09-18T08:09:43+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/18/travisci-meetup</id>
    <content type="html"><![CDATA[<p>前半はTravis CIのデモ、真ん中てCEOのお話、最後にLTと三部構成でした。<br/>
こちらに動画があるそうです。<br/>
<a href="http://www.ustream.tv/recorded/52769967">http://www.ustream.tv/recorded/52769967</a></p>

<p>デモは一通りのTravis CIの使い方をデモしていただきました。<br/>
何となくわかってるデフォルトの挙動などにちゃんと説明がはいり、<br/>
基礎知識を固めるには凄く良かったです。<br/>
また、いくつか知らない機能(sudo false)や、<br/>
.travis.ymlの書式をオンラインで確認できる<a href="http://lint.travis-ci.org/">Travis WebLint</a>等が紹介されていました。</p>

<p>なお、デモに使ったリポジトリは以下にあるようです。<br/>
<a href="https://github.com/BanzaiMan/travis-intro-tokyo">https://github.com/BanzaiMan/travis-intro-tokyo</a></p>

<p>CEOの話では、現在のjob数やVM数、サーバの数などを話していただきました。<br/>
それと後半では環境によって良くはまる10個が紹介されていました。<br/>
ファイルシステムのケースセンシティブや、GNUとBSDの違いだったり、aptから古いバージョンが消えたり、<br/>
タイムゾーンやOSの違いによる環境構築や<a href="https://github.com/travis-ci/travis-ci/issues/2755">言語自体のバグ</a>等々…<br/>
ここ最近に当たった奴がいくつかあり頭が痛かったです…(´･_･`)</p>

<p>最後のLTではいろんな発表が行われました。<br/>
見つけた分だけまとめておきます。</p>

<h2>Automated releasing iOS app with Travis CI</h2>

<p><a href="https://speakerdeck.com/kishikawakatsumi/automated-releasing-ios-app-with-travis-ci">https://speakerdeck.com/kishikawakatsumi/automated-releasing-ios-app-with-travis-ci</a><br/>
私はJenkinsを使っていますが、似たような構成でやってるので参考になりました。<br/>
ただ、ビルド時間が5倍ぐらい長いので、こちらのプロジェクトにそのまま導入は難しそうです…<br/>
xcarchiveに書き出すと、申請用ビルドでテストフライトに出せるというのは新たな発見でした。<br/>
(追記: 発表者様から指摘がありました)　　</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/ota42y">@ota42y</a> 僕の話し方が悪かったのですが、xcarchiveだから、というわけではなくて、AppStoreとAdHocのプロビジョニングは互換性があるので、xcarchiveからipaにするところでプロビジョニングをAdHocにしています。同じビルドで署名だけ変える方法です。</p>&mdash; kishikawa katsumi (@k_katsumi) <a href="https://twitter.com/k_katsumi/status/512399910176432130">2014, 9月 18</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>Travis CI API LT</h2>

<p><a href="https://speakerdeck.com/pinzolo/travis-ci-api-lt">https://speakerdeck.com/pinzolo/travis-ci-api-lt</a><br/>
Travis CIのAPIと、gemの利用例です。<br/>
パッと見た限り、必要最低限は揃ってそうなので、hubotから叩くみたいなことが出来そうです。</p>

<h2>QUnit on Travis CI @shigemk2</h2>

<p><a href="https://shigemk2.github.io/travisci_jp/#/step-1">https://shigemk2.github.io/travisci_jp/#/step-1</a><br/>
jsのライブラリを作った際の利用例でした。<br/>
実際に作る際に参考に出来そうでした。</p>

<h2>When was the build passing?</h2>

<p><a href="http://sanemat.github.io/talks/20140917-travis-ci-meetup-tachikoma-io/">http://sanemat.github.io/talks/20140917-travis-ci-meetup-tachikoma-io/</a><br/>
依存してるライブラリが更新すると、いつの間にかテストが落ちるようになってるけど、<br/>
テストが実行されないとわからないので、活発でないプロジェクトだと大変だよね…って話です。</p>

<p>これに対して、定期的にPRを送る<a href="http://tachikoma.io/">Tachikoma.io - Interval Pull Request App</a>というものを作ったそうです。<br/>
bundle updateをしてPR送るみたいなこともやってくれるため、とりあえず仕掛けておいて損は無さそうです。</p>

<h2>Testing your app with Selenium on Travis CI by Yusuke Ando</h2>

<p><a href="https://speakerdeck.com/yandod/testing-your-app-with-selenium-on-travis-ci-1">https://speakerdeck.com/yandod/testing-your-app-with-selenium-on-travis-ci-1</a><br/>
Travis CIでのSelenium導入の話です。<br/>
FirefoxやX等ははじめから入っているため、立ち上げるだけでいいらしく、<br/>
面倒なインストールをしなくていいためとても楽そうでした。</p>

<h1>懇親会</h1>

<p>DeNAさんがお寿司を出してくれました！！！！！！！！</p>

<blockquote class="twitter-tweet" lang="ja"><p>お寿司だヽ( ･∀･)ﾉ <a href="https://twitter.com/hashtag/travisci_jp?src=hash">#travisci_jp</a> <a href="http://t.co/zrmrhO6WMw">pic.twitter.com/zrmrhO6WMw</a></p>&mdash; おおた (@ota42y) <a href="https://twitter.com/ota42y/status/512210649699463168">2014, 9月 17</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>懇親会で聞いたところ、大体の人がJenkinsは保守が死ねるよね…<br/>
って言っていたので、やっぱりみんな大変なんだな…となりました(´･_･`)<br/>
やはりYAMLで設定できるTravis CIの方が楽ですよね…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スタックに確保した変数の有効範囲に気をつける]]></title>
    <link href="http://ota42y.com/blog/2014/09/16/stack-heap/"/>
    <updated>2014-09-16T07:46:07+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/16/stack-heap</id>
    <content type="html"><![CDATA[<p>C++にはスタックとヒープという、使い方の違うメモリ領域が存在します。<br/>
rubyとかjavaではこのような違いは基本的に意識する必要が無いため、間違った使い方をしてしまう場合があります。</p>

<p>例えば、普通の変数はスタックに積まれるため、スコープを抜けるとたとえ使っていても破棄されます。</p>

<p>以下に、関数の中で文字バッファをスタックに確保し、その参照を戻す関数の間違った例を上げます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">getTextFilename</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">basename</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">1024</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="n">strncpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">basename</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">basename</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">strncat</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">&quot;.txt&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">test_filename</span> <span class="o">=</span> <span class="n">getTextFilename</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_filename</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">example_filename</span> <span class="o">=</span> <span class="n">getTextFilename</span><span class="p">(</span><span class="s">&quot;example&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">example_filename</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_filename</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>環境によりますが、おそらく二回目のtest_filenameの出力がおかしくなると思います。<br/>
私の場合は以下のように、test_filenameにexample_filenameの内容が書き込まれていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">test</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">example</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">example</span><span class="p">.</span><span class="n">txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>getTextFilename内のstrはスタックに確保されるので、関数終了時に解放されます。<br/>
そのため、戻り値の指し示す文字列は解放済みメモリとなり、勝手に変更される可能性があります。</p>

<p>上の例ではたまたま同じアドレスが再利用されたため、同じ文字列が設定されました。<br/>
ですが、間に様々な処理を実行した場合は、謎の値が書き込まれるなどがあり得るため注意が必要です。</p>

<h1>対策</h1>

<p>このような場合、いくつかの対策があります。</p>

<h2>引数で渡す</h2>

<p>1つ目が、strncpyやstrncatのように、メモリ利用域を引数として受け取る方法です。<br/>
これにより、自分のスコープから外れても値を保持することができます。<br/>
先ほどの例ですと、main側でcharの配列を確保して関数の引数でそれを受け取るといった形です。</p>

<p>確保したスコープを抜けるとやはり解放されますが、確実に解放されるためとても楽です。</p>

<h2>ヒープに確保する</h2>

<p>2つ目はmallocやnewでヒープ領域に確保する方法です。<br/>
以下はnewで配列を確保するように書き換えました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">getTextFilename</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">basename</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>  <span class="n">strncpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">basename</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">basename</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">strncat</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">&quot;.txt&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">test_filename</span> <span class="o">=</span> <span class="n">getTextFilename</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_filename</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">example_filename</span> <span class="o">=</span> <span class="n">getTextFilename</span><span class="p">(</span><span class="s">&quot;example&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">example_filename</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_filename</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">　</span><span class="c1">// 明示的に解放しないと絶対に解放されない</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">test_filename</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">example_filename</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>newやmallocでメモリ領域を確保した場合、ヒープ領域に確保され、スコープを超えてメモリを確保し続けられます。<br/>
ただし、明示的に解放しないとメモリリークが起きるため、注意が必要です。</p>

<h2>オブジェクトをコピーする</h2>

<p>3つめがコピーを使う方法です。<br/>
今回の関数では配列を使っていますが、コピーコンストラクタをもつstd::stringを使うと、<br/>
スタック上の内容を関数の外に安全にコピー出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">getTextFilename</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">basename</span><span class="p">){</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">text</span><span class="p">(</span><span class="n">basename</span><span class="p">);</span>
</span><span class='line'>  <span class="n">text</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;.txt&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">test_filename</span> <span class="o">=</span> <span class="n">getTextFilename</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_filename</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">example_filename</span> <span class="o">=</span> <span class="n">getTextFilename</span><span class="p">(</span><span class="s">&quot;example&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">example_filename</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_filename</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>関数の戻り値は戻り先にコピーされるまでは保持されるという仕様があるらしく、<br/>
コピー可能なものに関しては戻り値としてちゃんと返すことが出来ます。<br/>
(これが無い場合、return 0の0も変更される可能性が出てきてしまうため、当然の仕様と言えます)</p>

<p>ただし、コピー処理が走るため、オブジェクトが巨大な場合、<br/>
メモリ消費が増えたり、時間がかかる可能性があるので注意が必要です。</p>

<h1>　まとめ</h1>

<p>スタックで確保した場合、解放忘れ等がないためとても簡単ですが、<br/>
スコープから抜けると解放されてしまうため、有効範囲を考えないといけません。</p>

<p>今回は文字列で例を挙げましたが、自作クラスなどでもほぼ同じ事がいえます。<br/>
ただし、3つ目の方法はそのクラスと、メンバ変数として持ってるクラス全てにコピーコンストラクタを書いていないと、
中途半端にコピーされ、ß予期せぬエラーに繋がります。　　</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第47回情報科学若手の会2014に参加してきた]]></title>
    <link href="http://ota42y.com/blog/2014/09/15/wakate2014/"/>
    <updated>2014-09-15T21:14:50+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/15/wakate2014</id>
    <content type="html"><![CDATA[<p>2014年9月13日(土)〜15日(月)に静岡県伊東市の山喜旅館で開催された、<br/>
第47回情報科学若手の会2014に参加してきました。<br/>
二年ぶり三回目の参加です。<br/>
今回はLTもやりました。</p>

<p>当日の様子はこちらのまとめをどうぞ<br/>
<a href="http://togetter.com/li/719110">第47回情報科学若手の会2014 ツイートまとめ #wakate2014</a></p>

<h1>旅館について</h1>

<p>山喜旅館さんのネットワークが超強化されていました。<br/>
2年前とは雲泥の差でとても快適で、導入した旅館と幹事さんには頭が下がります…<br/>
50人数位が普通に使っても回線部分はびくともしなかったため、
開発合宿には最適ではないでしょうか(宣伝)</p>

<h1>発表について</h1>

<p>今年は大学の講義をこれにしてくれれば…みたいな、凄くわかりやすい発表が多かったです。<br/>
私が把握した範囲で、公開されている資料をまとめました。</p>

<h2>招待講演: サイバーセキュリティの世界に飛び込こもう！</h2>

<p>招待講演の資料は公開されていないようですが、紹介されていたnicterとDAEDALUSはとても凄いシステムでした。<br/>
従来なら、テキストベースのログとしてしか表現されていなかった悪意のある攻撃を、<br/>
わかりやすくかつリアルタイムに(さらにかっこよく)可視化しており、まさに機能美を揃えたシステムでした。<br/>
映像を見つけたので是非見ておくことをオススメします。<br/>
<a href="https://www.youtube.com/watch?v=jLYs52OBh_A">ネットワーク攻撃可視化・分析技術 - nicter #DigInfo</a><br/>
<a href="https://www.youtube.com/watch?v=f44eum6Hz50">サイバー攻撃をリアルタイムに可視化、警告を発する「DAEDALUS」 #DigInfo</a></p>

<h2>若手特別講演: 本当は楽しいインターネット</h2>

<p><a href="http://www.slideshare.net/yuyarin/ss-39061287">http://www.slideshare.net/yuyarin/ss-39061287</a><br/>
インターネットへの愛がある上に、基本的な事柄を凄くわかりやすく説明していただいてます。<br/>
特にAS周りの話は名前を聞いたことがある…ぐらいの知識でしたので、<br/>
この資料で凄く良く理解することが出来ました。</p>

<h2>ないんたんの天気予報と画像処理アルゴリズム（2014年9月13日 情報科学若手の会）</h2>

<p><a href="https://docs.google.com/presentation/d/1KSIVmHvBR57uzJUkDEIMgi7JpAW51KequMCuws5COdY/edit#slide=id.p">https://docs.google.com/presentation/d/1KSIVmHvBR57uzJUkDEIMgi7JpAW51KequMCuws5COdY/edit#slide=id.p</a><br/>
画像処理のオプティカルフローを使って、天気の画像からその先の状態を計算して予報しているらしいです。<br/>
割と簡単で、計算量もさくらVPSで1秒ぐらいなのに、<br/>
精度の高い結果がでていて凄いなーと思いました。はぴぴーん</p>

<h2>シュワルツ超関数としての信号処理理論</h2>

<p><a href="http://pel.es.hokudai.ac.jp/~akita/SignalAsDistribution.pdf">http://pel.es.hokudai.ac.jp/~akita/SignalAsDistribution.pdf</a><br/>
実際の発表資料とは違いますが参考資料として…<br/>
フーリエ変換系のは種類が色々あって、どこに何を使うのかよくわからなかったのですが、<br/>
とてもわかりやすく整理して話していただけました。</p>

<p>また、階段関数の微分はぱっと見意味不明だったのが、<br/>
話を聞くとちゃんと理解できるようになっていて、おお！って思いました。</p>

<h2>私の発表</h2>

<p><a href="http://ota42y.com/blog/2014/09/14/wakate2014-presentation/">http://ota42y.com/blog/2014/09/14/wakate2014-presentation/</a></p>

<h1>その他</h1>

<h2>交流会</h2>

<p>交流会では謎解きゲームが行われました。<br/>
旅館の一階を全体的に使って謎探しから始まり、旅館やITに関係していそうな謎が用意されていました。<br/>
謎をを説いたチームには景品もあり、かなり白熱していました。<br/>
難易度やチーム編成も工夫されており、とても良かったです。</p>

<h2>ナイトセッション</h2>

<p>例年のごとく、中々濃い話や他では言えない話が繰り広げられていました。<br/>
例によって４時や５時ぐらいまで行われていたみたいですが、<br/>
さすがに体がついていかなく、２時３時でダウンしていました…</p>

<p>参加者の中に機械式計算機を持ってきてくださった方がいました。<br/>
所々の機械式ならではの工夫が見られ、初めて見た私にとっては凄く新鮮でした。<br/>
特にオーバーフロー、アンダーフローした時にベルがなるのは素晴らしかったです。</p>

<iframe width="420" height="315" src="//www.youtube.com/embed/_CNy57aUazg" frameborder="0" allowfullscreen></iframe>


<h1>まとめ</h1>

<p>帰りにkuro_m88さんと、「HCI系の人いないですよね−」と話していたんですが、<br/>
いないなら多分HCI系の話をするのは凄い有用だろうし、<br/>
来年はHCI系の話で一般かショート発表に申し込みたいと思います。</p>

<h1>その後</h1>

<p>帰りは三島の桜屋でうな重を食べました。</p>

<p><img src="http://ota42y.com/images/posts/2014-09-15-wakate2014.jpg" alt="うなぎ" /></p>

<p>うなぎを富士の雪解け水に数日間流しているらしく、その成果余計な油っぽさ等がなくなっています。<br/>
しつこくないタレと相まって、凄いさっぱりとしてうなぎの味を直接堪能できました。<br/>
「本当のうなぎってこういう味だったんだ…」と、タレにごまかされない美味しいうなぎでした。<br/>
熱海から15分程度ととても近く、超オススメです(2時に行っても1時間待ちでしたが…)</p>

<p>本来は水がとても綺麗と噂の柿田川公園にも足を伸ばす予定でしたが、<br/>
バスの時間が1時間に一本な上に、曇っている事を加味すると、今日行っても<br/>
微妙そうでしたので、来年チャレンジします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[情報科学若手の会2014で発表してきた]]></title>
    <link href="http://ota42y.com/blog/2014/09/14/wakate2014-presentation/"/>
    <updated>2014-09-14T13:41:49+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/14/wakate2014-presentation</id>
    <content type="html"><![CDATA[<script async class="speakerdeck-embed" data-id="805e4bc01e29013299017e6feed6723a" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>LT発表してきました。</p>

<p>最近CIとか継続的デリバリーとか流行ってるけど、<br/>
ネット上にあふれている事例は、テスト(ビルド)が頑張れば5分程度で出来たり、<br/>
ユーザにすぐに提供できるWebサービスの話が多く、<br/>
それ以外の事例に適応した話が全然無いなーと思っていました。</p>

<p>特にスマホアプリでは、一つのjobに時間がかかったり、<br/>
ユーザに届けるのにもの凄く時間がかかるため、<br/>
良くあるやり方をそのまま持って行っても、<br/>
全然上手くいかないんですよね。</p>

<p>ただし、やり方をそっくり持ってくるんじゃなくって、<br/>
その手法をやると何がうれしいの？を考えていくと、<br/>
自ずとその環境に沿ったいい方法、というのが見つかる気がします。</p>

<p>より実践的なTipsになるので削った補足事項等</p>

<ul>
<li>コンパイルだけに出来ないのか

<ul>
<li>ビルドのほとんどがコンパイル時間なのでそれほど効果がありません…(´･_･`)</li>
</ul>
</li>
<li>キャッシュは使っていないのか

<ul>
<li>キャッシュが悪さをする可能性が考えられるため意図的に切っています。<br/>
手元で開発する場合は活用しています。</li>
</ul>
</li>
<li>ビルド自体の速度は速くしないのか

<ul>
<li>分散コンパイル等で早くできますが、Xcodeは対応していないのでAndroidのみになり、<br/>
そんなに効果がありません。</li>
</ul>
</li>
<li>スライドで並列ビルドすればいいじゃん！と書いてますが、それも問題があります

<ul>
<li>アップロード先が並列で受け付けていないので、デプロイ時に失敗しまくります</li>
<li>排他制御しようとすると、Jenkinsの仕様とJob割り振りがよろしくないので<br/>
もの凄く辛いことになります。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cronやinit.dでsudoを実行するとエラーになって実行できない]]></title>
    <link href="http://ota42y.com/blog/2014/09/13/sudo-error/"/>
    <updated>2014-09-13T13:21:06+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/13/sudo-error</id>
    <content type="html"><![CDATA[<p>cronやinit.d以下に置いたスクリプトで、<br/>
別の以外のユーザで作業しようと思い、sudoを実行したところ、<br/>
以下のようなエラーが出て実行できませんでした。</p>

<p><code>sudo: sorry, you must have a tty to run sudo</code></p>

<p>どうやら、ttyを使わない場合、sudoは権限に関係なく実行できないようです。</p>

<p>sudoersにある<br/>
<code>Defaults    requiretty</code><br/>
をコメントアウトすることで解決しました。</p>

<p><a href="http://www.idimmu.net/2013/09/27/sudo-sorry-must-tty-run-sudo/">参考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux起動時に特定のシェルスクリプトを実行する]]></title>
    <link href="http://ota42y.com/blog/2014/09/12/init-d/"/>
    <updated>2014-09-12T07:40:38+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/12/init-d</id>
    <content type="html"><![CDATA[<p>hubotを自動で実行してほしいなーと思ったので、<br/>
OSの起動時にスクリプトを自動実行する方法を調べました。</p>

<p>まず、<code>/etc/init.d/</code>
に実行可能なスクリプトを置きます。</p>

<p>次に、スクリプトの二行目に、起動設定を書きます。<br/>
<code># chkconfig: 345 99 01</code></p>

<p>一つ目がランレベル、二つ目が起動順番、三つ目が終了順番になります。<br/>
起動・終了は小さい数値から行われるため、<br/>
前述の例ですと一番最後に起動し、一番最初に終了します。</p>

<p>ランレベルについては
<a href="http://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%B3%E3%83%AC%E3%83%99%E3%83%AB">Wikipediaの記事</a>
を参考にしてください</p>

<p>最後に、<code>chkconfig --add (init.dに置いたスクリプト名)</code>を実行して登録を行います。</p>

<p>これで、起動時にスクリプトが実行されます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[strncpyははまりやすい]]></title>
    <link href="http://ota42y.com/blog/2014/09/11/strncpy-bug/"/>
    <updated>2014-09-11T07:45:25+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/11/strncpy-bug</id>
    <content type="html"><![CDATA[<p>strncpyは結構はまりどころがあります。</p>

<p>たとえば以下のコードは正しく動作しません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">c</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">strncpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">c</span><span class="p">));</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>strncpyはコピー先、コピー元、コピー長を引数で取ります。<br/>
この際、strlen等でコピー元の文字長ぴったりを指定すると、<br/>
終端文字がコピー先にコピーされません。</p>

<p>そのため、事前に終端文字を設定しておかないと、<br/>
未初期化の部分まで文字列扱いになります。</p>

<p>以下のコードでその様子をうかがえます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;z&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">str</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;z&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">str</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;z&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">str</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;z&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">str</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;z&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">c</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">strncpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">c</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">length %lu</span><span class="se">\n</span><span class="s">original length %lu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">),</span> <span class="n">strlen</span><span class="p">(</span><span class="n">c</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">strcat</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">&quot;.txt&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">length %lu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>testz
</span><span class='line'>length 5
</span><span class='line'>original length 4
</span><span class='line'>testz.txt
</span><span class='line'>length 9
</span></code></pre></td></tr></table></div></figure>


<p>testという文字列をコピーし、.txtという文字列を追加して、<br/>
test.txt作る予定が、間に他の値が入っています。</p>

<p>strcatは第一引数の文字列の終わりに第二引数をつなげます。<br/>
そのため、コピー時に終端文字を設定していなかったため、<br/>
意図しない文字が間に挟まっています。<br/>
特にバッファの初期化を忘れていた場合、終端文字がいつ現れるか確定しないため、<br/>
注意が必要です。</p>

<p>この挙動は文字列の間に置換する場合には重宝しますが、<br/>
文字列結合などをする場合は気をつける必要があります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go runしても分割したファイルが認識されない]]></title>
    <link href="http://ota42y.com/blog/2014/09/10/golang-file-split/"/>
    <updated>2014-09-10T07:48:24+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/10/golang-file-split</id>
    <content type="html"><![CDATA[<blockquote><p>Go言語では、ひとつのパッケージのソースファイルを一度にまとめてコンパイルするので、特別な決め事や宣言をすることなく、とあるファイルから別ファイル内の定数、変数、型、関数を参照することができます。</p></blockquote>

<p><a href="http://golang.jp/tag/go%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9">Goコードの書き方</a></p>

<p>とのことなので、試しに以下のようにmainパッケージを分割してコンパイルしたところ、上手くいきませんでした(´･_･`)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// main.go</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;main file&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">OutputDiv</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// div.go</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">OutputDiv</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;div file&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>go runの結果、分割したファイルにある関数を見つけられないエラーになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go run main.go
</span><span class='line'><span class="c"># command-line-arguments</span>
</span><span class='line'>./main.go:9: undefined: OutputDiv
</span></code></pre></td></tr></table></div></figure>


<p>どうやら、go runした場合は引数のファイルのみがコンパイル対象になるため、<br/>
go run *.goか、必要なファイルを全てオプションとして渡す必要があるようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go run main.go div.go
</span><span class='line'>main file
</span><span class='line'>div file
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golangでcronを使う]]></title>
    <link href="http://ota42y.com/blog/2014/09/09/golang-cron/"/>
    <updated>2014-09-09T07:32:37+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/09/golang-cron</id>
    <content type="html"><![CDATA[<p>cronというライブラリがあるので、それを使うととても簡単です。
なお、終了すると当然ながら実行しないので、
time.Sleep等で処理を止めておく必要があります。</p>

<script src="https://gist.github.com/ota42y/d8c0d2426bb5dc0cf9e9.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パスワードの文字として避けた方がいい文字]]></title>
    <link href="http://ota42y.com/blog/2014/09/08/password-word/"/>
    <updated>2014-09-08T07:44:40+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/08/password-word</id>
    <content type="html"><![CDATA[<p>ニンテンドー3DSのプリペイドカード入力画面を見て、<br/>
見間違えやすい文字は使わないようにしてるんだーと気づいたので、<br/>
他にもそういうのが無いかまとめました。</p>

<p>もちろんaやtに代表されるように、フォントによって形は全然違うため、<br/>
全ての状況に対して当てはまるとは限りませんが、<br/>
目安程度としては使えると思います。</p>

<p>横一列が間違える可能性の高い文字集合です。</p>

<table>
<thead>
<tr>
<th></th>
<th align="center"></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">0</td>
<td>o</td>
<td>O</td>
<td>Q</td>
<td>D</td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">1</td>
<td>7</td>
<td>i</td>
<td>I</td>
<td>l</td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">2</td>
<td>z</td>
<td>Z</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">5</td>
<td>s</td>
<td>S</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">6</td>
<td>b</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">8</td>
<td>B</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">9</td>
<td>q</td>
<td>g</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">a</td>
<td>d</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">c</td>
<td>C</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">k</td>
<td>K</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">u</td>
<td>U</td>
<td>v</td>
<td>V</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">w</td>
<td>W</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">x</td>
<td>X</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">z</td>
<td>Z</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>


<p>まとめると、</p>

<p>数字だけを扱う場合は<br/>
<code>2 3 4 5 6 8 9 0</code></p>

<p>小文字大文字を区別する場合は<br/>
<code>3 4 e f h j m n p r y A E F G H J L M N P R Y</code></p>

<p>小文字大文字を区別しない場合は<br/>
<code>3 4 c e f h j k m n p r t w x w x y z</code></p>

<p>となります。<br/>
思ったより少ないですね…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitで現在のブランチ名をクリップボードにコピーする]]></title>
    <link href="http://ota42y.com/blog/2014/09/07/git-copy-current-branch/"/>
    <updated>2014-09-07T09:19:58+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/07/git-copy-current-branch</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># copy current branch</span>
</span><span class='line'><span class="nv">ccb</span> <span class="o">=</span> <span class="s2">&quot;!f() { echo `git symbolic-ref --short HEAD` | tr -d &#39;\n&#39; ``| pbcopy; pbpaste ; echo &#39;&#39;;}; f&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jenkinsでブランチ○○をビルドしたいような場合に、<br/>
jenkinsに渡すために現在のブランチを調べるのが面倒だったので、<br/>
簡単にコピペできるようにしました。</p>

<p>なお、Mac限定です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CEDEC2014 9月3日まとめ]]></title>
    <link href="http://ota42y.com/blog/2014/09/06/cedec2014-09-03/"/>
    <updated>2014-09-06T10:20:41+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/06/cedec2014-09-03</id>
    <content type="html"><![CDATA[<p>この日だけ参加したのでまとめ</p>

<h1>ウェアラブルコンピューティングの動向とウェアラブルゲームへの展開</h1>

<ul>
<li><p>ウェアラブルの特徴</p>

<ul>
<li>コンピュータを服のように着る

<ul>
<li>常時ON</li>
<li>生活密着</li>
<li>ハンズフリー</li>
</ul>
</li>
<li>Occlusは基本的にウェアラブルではない</li>
</ul>
</li>
<li><p>ウェアラブルは実は難しい</p>

<ul>
<li>装着して利用してみないと解らないことがたくさん</li>
<li>ウェアラブルは一日中身につける（≠持ち歩く）

<ul>
<li>モバイル機器とはまた別のノウハウが必要なのか。</li>
</ul>
</li>
</ul>
</li>
<li><p>汎用vs専用</p>

<ul>
<li>汎用

<ul>
<li>SmartWatch</li>
<li>高性能高機能</li>
<li>まだ実用性低い</li>
</ul>
</li>
<li>専用

<ul>
<li>アクションカメラとか　</li>
</ul>
</li>
<li>デジカメ、音楽プレーヤー等と同じく、少しづつ汎用の性能が上がっていく</li>
</ul>
</li>
<li><p>ウェアラブルゲームではリアルの遊びが重要</p>

<ul>
<li>ちょっとした時間に暇つぶし</li>
<li>ジョギングなど、別のことをしながら</li>
<li>ファッション</li>
<li>コンピュータはバーチャル空間に伸びたので、それとは違う道</li>
</ul>
</li>
</ul>


<h1>「楽しさ」の設計と評価～我々はどこで失敗し，どこへ向かうのか</h1>

<ul>
<li><p>楽しさの評価</p>

<ul>
<li>完成するよりも前に、それが面白いものなのか、どうすれば面白くなるのか？</li>
<li>経験則やコンテンツに左右されない、一般的な評価手法を探すのが目的らしい</li>
</ul>
</li>
<li><p>心理学的手法</p>

<ul>
<li>アンケートとか</li>
<li>かなりあやふや

<ul>
<li>過去にやったゲームとか</li>
<li>調整しました！と言われると、変わって無くても変わったと感じる</li>
</ul>
</li>
</ul>
</li>
<li><p>３つ以上のパラメータを同時に調整するのは困難</p>

<ul>
<li>職人はベターは出せるがベストとは限らない</li>
<li>パラメータか困難なものはよりわからない</li>
<li>調整可能な項目をクリアして、調整困難な協会に時間をかけるのがベター

<ul>
<li>調整可能

<ul>
<li>ロード時間のストレス</li>
<li>ボタン反応の応答時間等</li>
</ul>
</li>
</ul>
</li>
<li>調整困難

<ul>
<li>ユーザに書ける適切なストレスとか</li>
</ul>
</li>
</ul>
</li>
<li><p>人間らしいAIの自動獲得</p>

<ul>
<li>見ていて機械的な不自然さを感じない</li>
<li>相手に合わせて強さを調整できるAI

<ul>
<li>人間の生物学的制約、人為的ミス・エラーの導入</li>
<li>揺らぎ、遅れ、使える、技術・知識の不足、錯誤・失念</li>
</ul>
</li>
</ul>
</li>
<li><p>人間らしさの評価</p>

<ul>
<li>主観的実験（チューリングテスト）</li>
<li>実験のインストラクションが異なると違ってくる</li>
<li>マリオの動きの人間らしさ

<ul>
<li>初心者にちょっとしたテクニックを教えると初心者に見えなくなる

<ul>
<li>人間らしさの評価が変化してしまう</li>
</ul>
</li>
</ul>
</li>
<li>実際はAIでも、AIと伝えるか人間と伝えるかで反応が全然違う</li>
</ul>
</li>
<li><p>演奏家は時間進行に伴って視聴者の心理をコントロールする</p>

<ul>
<li>場面場面での常道のコントロール

<ul>
<li>ゲームっぽい</li>
<li>単調増加する音楽はつまらない

<ul>
<li>下がったり上がったりしつつ全体として上がっていく</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>音楽評価の難しさ</p>

<ul>
<li>一般性vs趣向に関する個人性</li>
<li>蓼食う虫も好き好き</li>
</ul>
</li>
<li><p>脳センサについて</p>

<ul>
<li>脳をはかっただけじゃ何もわかれない

<ul>
<li>しっかりと差が解る実験をしたからわかる</li>
</ul>
</li>
<li>相関関係が解っても因果関係が解らない

<ul>
<li>ここが活性化したけど、それってゲームが面白いから？</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>「サーバとの通信が切れました」の無いゲームのために、インターネットと出来る事。</h1>

<p>口外禁止</p>

<h1>「ゲーム実況」時代のゲームプロモーション　niconicoの事例から</h1>

<p>口外禁止との会場アナウンスとOKのアナウンス両方流れてよくわからない。<br/>
よって何も書かない。</p>

<h1>Cocos2d-x ver.3.xで進む2Dのリッチゲーム開発</h1>

<p>Cocos2d-xは大体知ってるので省略</p>

<ul>
<li><p>CRI ADX2</p>

<ul>
<li>サウンド周りのシステム</li>
<li>フェードとかかなり頑張ってる</li>
<li>端末ごとの差異とかどれくらい吸収するんだろう？</li>
</ul>
</li>
<li><p>CRI Sofdec2</p>

<ul>
<li>映像をα合成できてて凄い</li>
<li>どれだけ軽いかが気になる</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS7でAndroid SDKとNDKを使う]]></title>
    <link href="http://ota42y.com/blog/2014/09/04/centos7-android-build/"/>
    <updated>2014-09-04T07:46:28+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/04/centos7-android-build</id>
    <content type="html"><![CDATA[<h1>環境設定</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum install  java-1.7.0-openjdk-devel  java-1.7.0-openjdk ant zip
</span><span class='line'>sudo yum install ld-linux.so.2 libstdc++.i686 zlib.i686
</span></code></pre></td></tr></table></div></figure>


<p>他にもいくつかあった気がしますが、<br/>
後はエラーとして出たコマンドをインストールするだけなので都度入れてください</p>

<h1>Android SDKとNDKのダウンロード</h1>

<p><a href="http://developer.android.com/sdk/index.html">http://developer.android.com/sdk/index.html</a><br/>
<a href="https://developer.android.com/tools/sdk/ndk/index.html">https://developer.android.com/tools/sdk/ndk/index.html</a><br/>
からそれぞれ対応する物を取ってきて好きなフォルダに解凍します。<br/>
その後、sdkとndkのディレクトリ、及びsdkのplatform-toolsディレクトリをPATHに追加します。</p>

<h1>SDK Platformのインストール</h1>

<p>Eclipseが使えないためSDK Managerは使えませんが、<br/>
代わりにコマンドラインからインストールすることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>android update sdk -u -a -t tools,platform-tools
</span><span class='line'>android update sdk -u -a -t android-19
</span><span class='line'>android update sdk -u -a -t extra-google-google_play_services
</span></code></pre></td></tr></table></div></figure>


<p>後は通常のコマンドラインからビルドする方法でビルド可能です。</p>

<h1>注意点</h1>

<p>なお、MacやWindowsだとファイル名はcase insensitiveですが、<br/>
CentOSだと普通はcase sensitiveなので注意です。<br/>
特にCのincludeは大文字小文字を区別せずに動くため、<br/>
case sensitiveな環境に持って行った場合に特に死にやすいです…(´・_・`)</p>
]]></content>
  </entry>
  
</feed>
