<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[おおたの物置]]></title>
  <link href="http://ota42y.com/atom.xml" rel="self"/>
  <link href="http://ota42y.com/"/>
  <updated>2014-12-27T12:33:34+09:00</updated>
  <id>http://ota42y.com/</id>
  <author>
    <name><![CDATA[ota42y]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pixivのタグから読み解くラブライブイラスト投稿者分析]]></title>
    <link href="http://ota42y.com/blog/2014/12/27/lovelive-age/"/>
    <updated>2014-12-27T12:11:29+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/27/lovelive-age</id>
    <content type="html"><![CDATA[<p><a href="http://ota42y.com/blog/2014/12/26/lovelive-cp/">昨日</a>、<a href="http://ota42y.com/blog/2014/12/25/lovelive/">一昨日</a>とラブライブイラストについて見ていきましたが、<br/>
最後にイラストを投稿している投稿者さんについて見ていきます。</p>

<h1>投稿者の性別傾向</h1>

<h2>集計方法</h2>

<p>キャラのイラストと、ラブライブ関連イラストを投稿した人全員に対して、性別と年齢を調べてまとめました。<br/>
なお、各データはユーザページで公開されているものを利用したため、<br/>
全体に情報を公開している人のみの集計になります。</p>

<h2>各キャラ毎の性別傾向</h2>

<p>各キャラ毎に、男性と女生徒でどれくらいの割合で投稿しているかを集計しました。<br/>
なお、キャラ毎に投稿数ユーザ数がそもそも違うため、<br/>
そのキャラに投稿した人のうち性別が判別できるユーザがどれくらいの割合なのかを集計しています。</p>

<p><img src="http://ota42y.com/images/posts/2014-12-27-lovelive_chara_user.png" height="100" alt="キャラ毎の性別傾向" /></p>

<p>ラブライブタグ全体では女性投稿者の方が多い結果になりました。</p>

<p>キャラ毎では、男性投稿者が多いキャラが５人に、女性投稿者が多いキャラ人気が４人と、<br/>
μ&#8217;sメンバーの中でも男女のユーザ数が半分に別れています。</p>

<p>特に男性からの投稿が多いのは高坂穂乃果、園田海未の二名です。<br/>
女性からの投稿が特に多いのは、南ことり、矢澤にこの二名になります。<br/>
また、星空凛は男女共にほぼ同数の投稿人数になります。</p>

<p>なお、昨日の記事でも紹介した、閲覧数の多いカップリングである、<br/>
「にこまき」「のぞえり」「ことうみ」「りんぱな」ですが、<br/>
カップリングの片方ずつで男性投稿者と女性投稿者の投稿数が割れています。<br/>
男性女性、それぞれから支持を得るキャラ同士のカップリングだから人気だったりするのでしょうか？</p>

<h2>カップリング毎の性別傾向</h2>

<p>前回の記事で集計した総閲覧数1,000,000以上のカップリングに対して、<br/>
性別ごとに投稿者の割合を集計しました。</p>

<p><img src="http://ota42y.com/images/posts/2014-12-27-lovelive_cp_user.png" height="100" alt="カップリング毎の性別傾向" /></p>

<p>人気のカップリングでは女性投稿者が多いことがわかります。<br/>
また、キャラごとの傾向では片方が6割を超えることはありませんでしたが、<br/>
カップリングごとでは6割超えが多く見られ、かなり偏りがあります。</p>

<p>なお、キャラ別に比べて有効なユーザ数が少ないため、<br/>
必ずしも正確な調査ではない部分にご注意ください。</p>

<h1>ラブライブ投稿者の年齢層</h1>

<h2>集計方法</h2>

<p>ラブライブのイラストを投稿した全ユーザから、年齢を公開しているユーザを集計しました。<br/>
各キャラ毎に年齢別にユーザ数を出していましたが、<br/>
ほぼ全キャラ同じ傾向になったため、ラブライブイラスト全体で出すことにします。</p>

<h2>集計結果</h2>

<p>有効なデータ数は男性3665、女性2771、性別不明765の7201件でした。<br/>
なお、10才から5才区切りで集計しています。</p>

<p><img src="http://ota42y.com/images/posts/2014-12-27-lovelive_user_age.png" alt="ラブライブイラストの年齢傾向" /></p>

<p>20〜25才未満が最も投稿している結果になりました。</p>

<p>そこから+-5才が二番目に多いすが、25才以上は男性がほとんどなのに対し、<br/>
20才未満は女性が多くを占めています。<br/>
そのため、20代男性と、15〜25才の女性投稿者が多いようです。</p>

<h1>まとめ</h1>

<ul>
<li>ラブライブイラスト全体では女性投稿者の方が多い

<ul>
<li>キャラ毎では、男性の投稿者に人気、女性の投稿者に人気がわかれている</li>
<li>人気の4カップリングは、男性人気+女性人気の組み合わせキャラだった</li>
</ul>
</li>
<li>カップリングイラスト投稿者は女性投稿者の方が多い

<ul>
<li>投稿者の男女別人気も、キャラのそれよりも偏りが大きい</li>
</ul>
</li>
<li>投稿者は男女で若干世代が違う

<ul>
<li>女性は15〜25才、男性は20〜30才</li>
</ul>
</li>
<li>最も投稿が多いユーザは一人で250件以上投稿していた

<ul>
<li>そのほぼ半分に西木野真姫タグがついており、同キャラの最多投稿ユーザ</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pixivのタグから読み解くラブライブカップリング傾向(2014年11月現在)]]></title>
    <link href="http://ota42y.com/blog/2014/12/26/lovelive-cp/"/>
    <updated>2014-12-26T07:41:49+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/26/lovelive-cp</id>
    <content type="html"><![CDATA[<p><a href="http://ota42y.com/blog/2014/12/25/lovelive/">昨日</a>はラブライブタグ全体と、各キャラについて見ていきましたが、<br/>
今日はカップリングについて見ていきます。</p>

<p>なお、既に調べられていたので、半分ぐらいはその内容のアップデートになります。<br/>
<a href="http://iwiwi.hatenadiary.jp/entry/2014/06/28/003736">pixiv のタグ情報を用いた「ラブライブ！ School idol project」のカップリングネットワークの構築</a></p>

<h1>収集方法</h1>

<p>pixivのタグから、各カップリングタグ（「にこまき」、「のぞえり」等）とラブライブタグがついているものを収集し、
そのイラストの閲覧数の和を集計しました。</p>

<p>条件にラブライブタグを含めないと、高坂雪穂と星空凛の「ゆきりん」タグで別のゆきりんが引っかかる等、<br/>
ラブライブとは関係のないものも含まれてしまうため、このような条件にしています。</p>

<p>また、「まきりんぱな」や「ことほのうみ」といった３人を含むタグについては、<br/>
「まきりん」と「りんぱな」として集計することはせず、結果から除外しています。</p>

<p>なお、元となったエントリの詳しい収集方法がわからないため、<br/>
単純な数値比較は出来ませんのでご注意ください。</p>

<h1>順番を加味しない場合</h1>

<p>「にこまき」と「まきにこ」を同一視する場合です。</p>

<h2>収集結果</h2>

<p>(クリックで大きく見られます)</p>

<p><a href="http://ota42y.com/images/posts/2014-12-26-lovelive_cp.png"><img src="http://ota42y.com/images/posts/2014-12-26-lovelive_cp.png" height="200" alt="順番を加味しない" /></a></p>

<p>にこまきの人気は相変わらず圧倒的です
時点がのぞえりなのも前回から変わりません。<br/>
ですが、３番目のことうみが、前回よりも他を大きく引き離してきています。</p>

<p>また、つばほのがマイナーカップリングを凌ぐほどの人気になっていたり、<br/>
ゆきありが地味に伸びていたりと、メインキャラ以外の部分にも多少変化があります。</p>

<h2>グラフ</h2>

<h3>1,000,000以上のみの場合</h3>

<p>元記事に習い、1,000,000未満の辺がﾐﾄﾒﾗﾚﾅｲ場合、組み合わせはこのようなグラフになります。</p>

<p><img src="http://ota42y.com/images/posts/2014-12-26-lovelive_1000000.png" alt="1000000" /></p>

<p>前回は生徒会グループと、広義の一年生グループとに別れていましたが、<br/>
ほのまきとのぞにこの人気が上がったことにより、全てが繋がりました。</p>

<p>また、高坂穂乃果は4種類のカップリングがあり、最もカップリングの種類が多いキャラになっています。</p>

<h3>100,000以上のみの場合</h3>

<p>100,000未満の辺がﾐﾄﾒﾗﾚﾅｲ場合は以下のようなグラフになります。</p>

<p><img src="http://ota42y.com/images/posts/2014-12-26-lovelive_100000.png" alt="100000" /></p>

<p>西木野真姫、絢瀬絵里、高坂穂乃果に線が集中し、りんぱなにはそれほど線がありません。<br/>
また、高坂雪穂と絢瀬亜里沙はどちらも実の姉とは繋がっていないのがわかります。</p>

<p>最もカップリングが多いのは、μ&#8217;sメンバー全員と繋がっている西木野真姫と、<br/>
8人＋綺羅ツバサと繋がっている高坂穂乃果になります。</p>

<h1>順番を加味する場合</h1>

<p>「にこまき」と「まきにこ」を別物として数えます。</p>

<h2>集計結果</h2>

<p>行＋列のカップリングスコアになります。<br/>
(クリックで大きく見られます)</p>

<p><a href="http://ota42y.com/images/posts/2014-12-26-lovelive_cp.png"><img src="http://ota42y.com/images/posts/2014-12-26-lovelive_cp_dict.png" height="200" alt="順番を加味する" /></a></p>

<p>複数のイラストを含んだ投稿などで、「のぞえり」と「えりのぞ」が両方つけられるような場合があり、<br/>
前述の順番を加味しない場合と、順番を加味した場合の和は異なっています。</p>

<p>基本的には「のぞにこ」と「ほのまき」が増えた以外は前の結果とほぼ変わりませんでした。</p>

<p>なお、前回の結果と比べて「まきりん」が減少していますが、<br/>
不審に思って調べたところ、「まきりん」タグ自体の登録数は少なく、<br/>
そもそも前回の結果のような大きい値になることは考えにくいです。</p>

<p>一方で、タグを完全一致ではなく部分一致にし、「まきりん」の集計に「まきりんぱな」も入れると、<br/>
似たような大きな値になるため、おそらくはこれが原因だと思われます。</p>

<h2>グラフ</h2>

<p>1,000,000未満の辺がﾐﾄﾒﾗﾚﾅｲ場合、グラフは以下のようになります。</p>

<p><img src="http://ota42y.com/images/posts/2014-12-26-lovelive_1000000_dict.png" alt="1000000" /></p>

<p>南ことり、星空凛は常に先に来ているのに対し、西木野真姫、園田海未は誰が相手でも常に後に来ています。</p>

<p>また、「のぞえり」と「えりのぞ」だけがお互いに辺を作っています。<br/>
一番人気の「にこまき」の方向がほぼ固定なのと比較すると、かなり特徴的です。</p>

<p>なお、これ以下の閾値やR-18作品の結果などは前回と大きな変化が見られなかったため、省略します。</p>

<h1>カップリングイラスト投稿数推移</h1>

<p>カップリングは全部で72通りあるため、投稿数1,000,000以上のカップリングのアニメ化後の推移をまとめました。<br/>
なお、月ごとの投稿数で調べたところあまりにも乱高下が激しく、わかりづらいグラフだったため、<br/>
月ごとの累計投稿数で集計を行いました。</p>

<h2>投稿数1,000,000以上のカップリングの推移</h2>

<p><img src="http://ota42y.com/images/posts/2014-12-26-cp_all.png" alt="投稿数1,000,000以上のカップリングの推移" /></p>

<p>一期放映直後から、にこまきの投稿数が圧倒的であることがわかります。<br/>
また、量が多いのでわかりにくいですが、<br/>
二期第２話「優勝をめざして」の直後あたりに投稿数が一気に伸びていました。</p>

<p>のぞえりは二期になってから一気に伸びています。<br/>
詳しく調べたところ、アニメ放映直後からしばらくの間はりんぱなやほのえりとほぼ同じ程度の投稿数でしたが、<br/>
二月のライブ以降投稿数が増加していき、<br/>
５月末の第８話「私の望み」から東條希の誕生日(6/9)周辺で一気に増加しました。</p>

<h2>上位２組以外のカップリング推移</h2>

<p>にこまき、のぞえりが多すぎるため、この二つを取り除いたグラフも用意しました。</p>

<p><img src="http://ota42y.com/images/posts/2014-12-26-cp_without.png" alt="にこまきとのぞえり以外のカップリングの推移" /></p>

<p>りんぱな、ほのえりは一期の頃から投稿数が多かったでしたが、<br/>
りんぱなが二期も同じぐらい押されて、増加ペースを伸ばしたのに対し、<br/>
ほのえりは二期ではそれほど押されていなかったためか、増加ペースは変わっていません。</p>

<p>対してことうみ、えりうみは二期が始まってから増加ペースが伸びていきました。<br/>
特にことうみは５月頭のコミティアから５月中頃の僕らのラブライブ４にかけて、一気に投稿数が増加していました。</p>

<p>また、上記の総閲覧数ではりんぱなよりことうみの方が多いのですが、<br/>
イラストの投稿数自体はりんぱなの方が量が多いです。<br/>
詳しく調べたところ、最も閲覧数の多いイラストもりんぱなの方が１万ぐらい多いのですが、<br/>
中央値等はことうみのほうが２倍ぐらい大きくなっていました。<br/>
あまりデータ分析方法は知らないため、この逆転現象の原因を探るのは難しそうです…</p>

<h1>まとめ</h1>

<ul>
<li>にこまきの人気凄い

<ul>
<li>のぞえり、ことうみ、りんぱなの人気が続く</li>
<li>(・8・)ﾎﾉｶﾁｬﾝ…</li>
</ul>
</li>
<li>ただし、投稿数1,000,000以上のカップリングに一番出てくるのは高坂穂乃果

<ul>
<li>⊂(・8・)⊃＜ﾎﾉｶﾁｬｧｧｧﾝ!</li>
<li>ほのこと、ほのうみ、ほのまき、ほのえりの４つ</li>
<li>時点は西木野真姫と園田海未、綾瀬絵里

<ul>
<li>にこまき、ほのまき、りんまき</li>
<li>ことうみ、えりうみ、ほのうみ</li>
<li>のぞえり、ほのえり、えりうみ</li>
</ul>
</li>
</ul>
</li>
<li>キャラ個別と同じく、アニメでフォーカスが当たると投稿数が伸びる</li>
<li>投稿数が多い≠閲覧数が多い

<ul>
<li>ものすごい人気の作品があるわけではない</li>
<li>絵師さん人気よりも非絵師さん人気があるとか？</li>
</ul>
</li>
</ul>


<h1>次回予告</h1>

<p>次回はラブライブイラストを描いている投稿者の分析をしようと思います。<br/>
<a href="http://ota42y.com/blog/2014/12/27/lovelive-age/">pixivのタグから読み解くラブライブイラスト投稿者分析</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pixivのタグから読み解くラブライブイラストの歩み]]></title>
    <link href="http://ota42y.com/blog/2014/12/25/lovelive/"/>
    <updated>2014-12-25T07:00:00+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/25/lovelive</id>
    <content type="html"><![CDATA[<p>⊂(・8・)⊃＜776O776J7722776B772s772n772n772n776dIQ==</p>

<p>さて、<a href="http://www.adventar.org/calendars/398">ラブライブ！ Advent Calendar 2014</a>最終日は、<br/>
pixiv上のラブライブのイラストについて見ていこうと思います。</p>

<p>内容としては以下になります。</p>

<ul>
<li>pixiv上のラブライブイラストの推移(本記事)</li>
<li><a href="http://ota42y.com/blog/2014/12/26/lovelive-cp/">pixivのタグから読み解くラブライブカップリング傾向</a></li>
<li><a href="http://ota42y.com/blog/2014/12/27/lovelive-age/">pixivのタグから読み解くラブライブイラスト投稿者分析</a></li>
</ul>


<p>なお、一つの記事にするには長すぎたため、<br/>
3記事に分割しています。</p>

<p>今日はpixiv上のラブライブイラストの推移について書いていきます。</p>

<h1>集計方法</h1>

<p>各キャラ毎のイラストに関しては、そのキャラの本名、<br/>
もしくは別名+ラブライブタグがついたイラストを集計しています。<br/>
(ことりちゃんや凛ちゃん、のんたん等、ラブライブ以外の同名タグを含めないため)</p>

<p>ラブライブ！タグとしては、ラブライブ！およびLoveLive!といった作品名のタグのついたイラストと、<br/>
各登場人物のイラストを重複排除して集計しました。<br/>
（ラブライブ！タグのついてないキャラのイラストもあるため）</p>

<p>集計期間は、ラブライブイラストが初めて投稿された2010年8月〜2014年11月になります。</p>

<h1>年間イラスト数の推移</h1>

<p><img src="http://ota42y.com/images/posts/2014-12-25-lovelive_01.png" alt="年間イラスト数推移" /></p>

<p>一期放送の2013年に投稿数が増えた後、二期放送の2014年でさらに4倍近くイラスト数が伸びています。</p>

<p>ご覧の通り、アニメ化以前と以後とでは、投稿数が100倍ぐらい差があるため、<br/>
ここから先はアニメ化以前とアニメ化以後、およびキャラ毎の3種類に分けて見ていきます。</p>

<h1>アニメ化以前の月刊イラスト投稿数</h1>

<p><img src="http://ota42y.com/images/posts/2014-12-25-lovelive_02.png" alt="アニメ化以前の月刊イラスト投稿数" /></p>

<p>各シングル発売のたびにイラストが増加しています。</p>

<p>1stシングル発売後は一度投稿数が落ち込みましたが、<br/>
2ndシングル「Snow halation」が発売してからは安定した投稿数を確保しています。<br/>
その後も、3rd、4thと着実に投稿数が伸びています。</p>

<p>4thシングル&amp;1stライブ&amp;アニメ化発表の時の盛り上がりが凄いですが、<br/>
同時に3月まで5thシングルの総選挙があったため、3月の投票数も伸びています。</p>

<p>なお、この月の誕生日の園田海未を除くと、<br/>
南ことり、矢澤にこ、西木野真姫の3人が他のキャラと比べて増加していましたが、<br/>
総選挙の上位三人になっており、データ数が少ないので偶然かもしれませんが、ちゃんと対応が取れていました。</p>

<p>ちなみに、5thシングル前の7月にも山が見られますが、調べたところにこの聖誕祭効果でした。</p>

<h1>アニメ化以降の月刊イラスト投稿数</h1>

<p><img src="http://ota42y.com/images/posts/2014-12-25-lovelive_03.png" alt="アニメ化以降の月刊イラスト投稿数" /></p>

<p>アニメ化以前は月間投稿数が100を超えることはありませんでしたが、<br/>
アニメ化以降一気に投稿数が伸び、放送終了後以降は月刊投稿数が1000を切ることがないぐらいにまで成長しました。</p>

<p>投稿数の増加は夏コミまで続きますが、夏コミ(C84)が終わった後はいったん沈静化します。<br/>
ですが、12月の冬コミ(C85)と3rdのDVD/BD発売から再び火がつき、<br/>
2月のライブにかけて再びイラスト数が増加していきます。</p>

<p>特に、ライブ直後の二週間だけで投稿数が2000を超すなど、二期を直前にして盛り上がりは最高潮に達しています。</p>

<p>二期が放映されてからは一期以上のペースで伸びていき、<br/>
一期と同じく夏コミ(C86)まで増加して一度沈静化しました。</p>

<p>今月は冬コミ(C87)が控えているため、おそらくそれによってまた増加すると思われます。</p>

<h1>学年ごとの集計</h1>

<p>一週間筒キャラ毎にまとめたのを用意したので、もう少し細かく見ていくことにします。</p>

<p>なお、各キャラ共に誕生日とその次の日にかけて、聖誕祭イラストとして投稿数が増加します。<br/>
そのため、キャラの誕生日と次の日を別の週として集計すると、実態と集計結果がずれてしまいます。</p>

<p>幸いなことに、投稿数が増えた2013年〜2014年の間で水曜日が誕生日のキャラはいないため、<br/>
木曜〜水曜の一週間で集計し、誕生日と次の日が分割されることを回避しています。</p>

<h2>1年生</h2>

<p><img src="http://ota42y.com/images/posts/2014-12-25-lovelive_04.png" alt="まきりんぱな" /></p>

<p>これは全てのキャラに言えることですが、各キャラの誕生日ごとにスパイクが発生し、<br/>
イラスト数が増加しているのがわかります。<br/>
また、こちらも各キャラ共通ですが、4thライブ直後にもイラスト数が増加しています。</p>

<p>キャラとしては、アニメ化前からちょくちょく人気でしたが、やはり西木野真姫の投稿数は安定しています。<br/>
また、2013年はイラスト数が少なかったため、矢澤にこの聖誕祭でにこまきカップリングとして、<br/>
投稿数が伸びていました。
なお、2014年はイラスト数が増えたため、相対的に影響が小さくなっています。</p>

<p>2014年の西木野真姫の誕生日に隠れていますが、<br/>
二期の第５話「新しい私」直後から、星空凛の投稿数が上がっています。</p>

<p>小泉花陽はアニメ二期後の誕生日が来月のため、そちらのデータに期待です。</p>

<h2>2年生</h2>

<p><img src="http://ota42y.com/images/posts/2014-12-25-lovelive_05.png" alt="ことほのうみ" /></p>

<p>アニメ化以前から人気だった南ことりの投稿数は多いですが、<br/>
二期以前は他の二人も同じぐらいの投稿数があり、それほど差がついてはいませんでした。</p>

<p>なお、2014年の南ことりの誕生祭は、今のところ全キャラ中トップの投稿数になります。</p>

<p>高坂穂乃果聖誕祭の陰に隠れていますが、海の日に園田海未のイラスト投稿数が増加しています。<br/>
彼女も小泉花陽と同じく、アニメ二期後の誕生日がまだですので（３月）そちらのデータに期待です。</p>

<h2>3年生</h2>

<p><img src="http://ota42y.com/images/posts/2014-12-25-lovelive_06.png" alt="にこのぞえり" /></p>

<p>やはりアニメ化前からの人気キャラの矢澤にこの投稿数は凄いです。<br/>
ですが元から人気があったため、二期第４話の「宇宙ナンバーワンアイドル」の影響はそんなに見られませんでした。</p>

<p>一方で東條希は二期第８話「私の望み」とその直後の誕生祭で一気に投稿数が上がっています。<br/>
絢瀬絵里はお当番回が一期８話だったこともあり、二期以降で目立った変化はありませんでした。</p>

<h2>A-RAISEとゆきあり</h2>

<p><img src="http://ota42y.com/images/posts/2014-12-25-lovelive_07.png" alt="つばあんえれゆきあり" /></p>

<p>メインキャラではないため、やはりイラストの数が全然違います。</p>

<p>高坂雪穂や絢瀬亜里沙は一期後もぽつぽつと投稿が見られました。</p>

<p>A-RISEもほぼ同じ状況でしたが、やはり二期第３話で「ユメノトビラ」ライブをしてから、<br/>
一気に投稿数が上昇しています。<br/>
その後の最終予選でももう一度盛り上がりを見せ、以降は少しずつ投稿が行われています。</p>

<p>なお、２０１４年９月頃にまた投稿数が上がっていますが、<br/>
同人誌即売会の僕らのラブライブ５（聖地の秋葉原UTXで開催）の影響でした。<br/>
データ数がそれほど多くないため、同人イベントによる増加が大きく出ているようです。<br/>
（一応、矢澤にこや西木野真姫のグラフにも若干影響が出ています）</p>

<p>なお、神モブであるヒフミトリオに関しては、同名キャラが引っかかりノイズも多く、<br/>
有効なデータ数が少なすぎるため集計していません。<br/>
せめてフルネームがあればいいのですが…</p>

<h1>まとめ</h1>

<ul>
<li>アニメ化以後の投稿数の上がり方は凄い

<ul>
<li>一期でも増えたが、二期になってさらに増えている</li>
</ul>
</li>
<li>何かしらのイベントがあると投稿数が伸びる

<ul>
<li>ライブ、コミケ等</li>
<li>特に聖誕祭の効果はすさまじい

<ul>
<li>どのキャラも、二期の聖誕祭は一期に比べて四倍以上増えてる</li>
</ul>
</li>
<li>4thライブの影響は大きかった

<ul>
<li>4thライブ後でどのキャラも投稿数が上がり、そのまま二期に入っている。</li>
<li>アニメ化前の盛り上げ方としてかなり効果がある結果になっている（イラスト投稿数的には）</li>
</ul>
</li>
</ul>
</li>
<li>キャラのトレンドは大きく分けて三つ

<ul>
<li>前から人気の真姫、ことり、にこ</li>
<li>二期で大きく伸びた凛、希</li>
<li>大きな変化がない花陽、穂乃果、海未、絵里</li>
</ul>
</li>
<li>実感として特別不人気のキャラはいないと思っていたが、実際いなかった</li>
</ul>


<p>なお、今月末には冬コミが、1/31〜2/1にはライブがあるので、どう変化するかが楽しみです。</p>

<h1>次回予告</h1>

<p>明日はカップリングについて現状と、その推移を調べていきます。<br/>
<a href="http://ota42y.com/blog/2014/12/26/lovelive-cp/">pixivのタグから読み解くラブライブカップリング傾向(2014年11月現在)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphvizを使うと、グラフ描画がとても楽になる]]></title>
    <link href="http://ota42y.com/blog/2014/12/22/graphviz/"/>
    <updated>2014-12-22T07:42:27+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/22/graphviz</id>
    <content type="html"><![CDATA[<p>こんな感じの画像を作る際に</p>

<p><img src="http://ota42y.com/images/posts/2014-12-22-grahviz.png" alt="グラフ" /></p>

<p>これまではパワポの図形機能とかペイントで頑張って作っていましたが、<br/>
Graphvizを使うと自動で出力できます。</p>

<h2>Graphvizとは</h2>

<p>AT&amp;Tが作ったグラフ描画のツールパッケージです。<br/>
<a href="http://ja.wikipedia.org/wiki/Graphviz">http://ja.wikipedia.org/wiki/Graphviz</a></p>

<p>DOT言語というグラフ記述言語で記述されたグラフを、画像ファイル等に変換することができます。</p>

<p>グラフのレイアウト等はGraphviz内のアルゴリズムによって自動で配置されますが、<br/>
SVGで出力できるため、他のソフトで調整ができます。</p>

<h1>使い方</h1>

<h2>インストール</h2>

<p>brew gts graphviz</p>

<h2>dotファイルの作成</h2>

<p>最初に見せたグラフは以下のように作ります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>digraph G {
</span><span class='line'>  Hono[image="th_hono.png", label="", shape=plaintext];
</span><span class='line'>  Koto[image="th_koto.png", label="", shape=plaintext];
</span><span class='line'>  Umi[image="th_umi.png", label="", shape=plaintext];
</span><span class='line'>  Maki[image="th_maki.png", label="", shape=plaintext];
</span><span class='line'>  Rin[image="th_rin.png", label="", shape=plaintext];
</span><span class='line'>  Pana[image="th_pana.png", label="", shape=plaintext];
</span><span class='line'>  Nico[image="th_nico.png", label="", shape=plaintext];
</span><span class='line'>  Nozo[image="th_nozo.png", label="", shape=plaintext];
</span><span class='line'>  Eli[image="th_eli.png", label="", shape=plaintext];
</span><span class='line'>  Yuki[label="雪穂"];
</span><span class='line'>
</span><span class='line'>  Nico -&gt; Maki;
</span><span class='line'>  Koto -&gt; Umi;
</span><span class='line'>  Rin -&gt; Pana;
</span><span class='line'>  Rin -&gt; Maki;
</span><span class='line'>  Nozo -&gt; Eli;
</span><span class='line'>  Nozo -&gt; Nico;
</span><span class='line'>  Koto -&gt; Hono[dir = none];
</span><span class='line'>  Hono -&gt; Umi;
</span><span class='line'>  Hono -&gt; Nico;
</span><span class='line'>  Hono -&gt; Maki;
</span><span class='line'>  Hono -&gt; Yuki;
</span><span class='line'>  Hono -&gt; Eli;
</span><span class='line'>  Hono -&gt; Rin;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>初めにレイアウトに使うアルゴリズムを書きます。<br/>
次に画像だけ、文字だけといったノードを定義し、その関係を記述します。</p>

<h2>出力</h2>

<p>上記のファイルをcp.dotという名前で保存し、以下のコマンドを実行するとSVGファイルに出力されます。<br/>
<code>dot -Tsvg cp.dot -o cp.svg</code></p>

<p>SVG以外にもgifやpngへの出力が可能です。<br/>
<code>dot -Tpng cp.dot -o cp.png</code></p>

<h1>レイアウト詳細</h1>

<p>配置アルゴリズム等はこちらの記事が参考になると思います。<br/>
<a href="http://melborne.github.io/2013/04/02/graphviz-layouts/">Graphvizレイアウトサンプル</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[参加記録 Android Bazaar and Conference 2014 Winter]]></title>
    <link href="http://ota42y.com/blog/2014/12/21/abc2014w/"/>
    <updated>2014-12-21T20:57:45+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/21/abc2014w</id>
    <content type="html"><![CDATA[<p><a href="http://abc.android-group.jp/2014w/">Android Bazaar and Conference 2014 Winter</a>に参加してきました。</p>

<p>なかなか興味深いお話を聞けたので、気になった部分を抜粋</p>

<ul>
<li><p>携帯は９５％の人類が持ってる</p>

<ul>
<li>インターネットを利用するのは４割

<ul>
<li>スマホ利用者は３２％</li>
<li>スマホは１０年前の携帯と同じ水準まで来てる
-１０年後は世界の携帯がスマホに置き換わる</li>
</ul>
</li>
<li>今後１０年間で７０億人がインターネットに繋がる</li>
<li>Androidは今のところ全世界で84.4%のシェア</li>
</ul>
</li>
<li><p>各国のもの作り政策</p>

<ul>
<li><p>ドイツのINDUSTRIE 4.0</p>

<ul>
<li>第四次産業革命</li>
<li>多数の企業を結んだバリューネットワーク</li>
<li>工場内の結合されたネットワーク　は出来てる</li>
</ul>
</li>
<li><p>アメリカ</p>

<ul>
<li>AMP立ち上げ</li>
<li>アメリカで発明し、アメリカで製造する</li>
<li>Made in Americaの復活</li>
</ul>
</li>
<li><p>中国</p>

<ul>
<li>2008年以降世界の製造業売り上げTop

<ul>
<li>EU全体を合わせて、ようやく中国をちょっと上回る</li>
</ul>
</li>
<li>第１２期５カ年計画

<ul>
<li>５年で１６８兆円使う</li>
<li>IoTを重視する</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Googleが買収したNest</p>

<ul>
<li><a href="http://japan.cnet.com/news/commentary/35042541/">http://japan.cnet.com/news/commentary/35042541/</a></li>
<li>ネットに繋がるサーモスタット</li>
</ul>
</li>
<li><p>Android Wear</p>

<ul>
<li>WearのNotificationはアプリの顔になる

<ul>
<li>ノイジーな通知をするとアンインストールされる</li>
</ul>
</li>
<li>リストから選んで起動するのではなく、通知によってしかるべきタイミングで起動する

<ul>
<li>わざわざ起動するのは減っていく</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoのORマッパーGORMが便利]]></title>
    <link href="http://ota42y.com/blog/2014/12/19/gorm/"/>
    <updated>2014-12-19T07:40:11+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/19/gorm</id>
    <content type="html"><![CDATA[<p>golangではmysqldriverでmysqlにアクセスできますが、<br/>
一つ一つ構造体に入れないといけなかったりと、けっこう辛いものがあります。<br/>
<a href="http://ota42y.com/blog/2014/10/04/go-mysql/">goでmysqlを使う</a></p>

<p>そこでいろいろ探していたところ、<br/>
ActiveRecordのように構造体を使ってDBにアクセスできるORMがありました。<br/>
<a href="https://github.com/jinzhu/gorm">https://github.com/jinzhu/gorm</a></p>

<p>自動でテーブル作ってくれたり、変更してくれたりと、他のORマッパーよりかはActiveRecordっぽいです。<br/>
リレーションも勝手に貼ってくれるみたいです。<br/>
ただし、取り出すときは元のオブジェクト→リレーションのオブジェクトと、<br/>
順に取ってくる必要があり、自動でリレーション先のオブジェクトの取得はしてくれるわけではありません。<br/>
(使わない場合は無駄なアクセスになるので、正しいと言えば正しいですが)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'><span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="s">&quot;github.com/jinzhu/gorm&quot;</span>
</span><span class='line'><span class="nx">_</span> <span class="s">&quot;github.com/lib/pq&quot;</span>
</span><span class='line'><span class="nx">_</span> <span class="s">&quot;github.com/go-sql-driver/mysql&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Id</span>           <span class="kt">int64</span>
</span><span class='line'>  <span class="nx">Name</span>         <span class="kt">string</span>  <span class="s">`sql:&quot;size:255&quot;`</span>
</span><span class='line'>  <span class="nx">Emails</span>            <span class="p">[]</span><span class="nx">Email</span>         <span class="c1">// One-To-Many relationship (has many)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Email</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Id</span>         <span class="kt">int64</span>
</span><span class='line'>  <span class="nx">UserId</span>     <span class="kt">int64</span>   <span class="c1">// Foreign key for User (belongs to)</span>
</span><span class='line'>  <span class="nx">Email</span>      <span class="kt">string</span>  <span class="s">`sql:&quot;type:varchar(100);&quot;`</span> <span class="c1">// Set field&#39;s type</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">gorm</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;mysql&quot;</span><span class="p">,</span> <span class="s">&quot;root@/testdb?charset=utf8&amp;parseTime=True&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">DB</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">AutoMigrate</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">Email</span><span class="p">{})</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">AutoMigrate</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">User</span><span class="p">{})</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">user</span> <span class="o">:=</span> <span class="nx">User</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">Name</span><span class="p">:</span>            <span class="s">&quot;ota42y&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Emails</span><span class="p">:</span>          <span class="p">[]</span><span class="nx">Email</span><span class="p">{</span> <span class="p">{</span><span class="nx">Email</span><span class="p">:</span> <span class="s">&quot;ota42y@example.com&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nx">Email</span><span class="p">:</span> <span class="s">&quot;ota42y@example@example.com&quot;</span><span class="p">}</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">user</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">me</span> <span class="nx">User</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">Where</span><span class="p">(</span><span class="s">&quot;name = ?&quot;</span><span class="p">,</span> <span class="s">&quot;ota42y&quot;</span><span class="p">).</span><span class="nx">First</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">me</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">me</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">emails</span> <span class="p">[]</span><span class="nx">Email</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">Model</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">me</span><span class="p">).</span><span class="nx">Related</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">emails</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">emails</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golangでYAMLファイルを読み込んで構造体に入れる]]></title>
    <link href="http://ota42y.com/blog/2014/12/03/go-yaml-struct/"/>
    <updated>2014-12-03T07:46:50+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/03/go-yaml-struct</id>
    <content type="html"><![CDATA[<p>使い方がかなり特殊だったのでメモ<br/>
(ドキュメントには書いてありますが…)</p>

<p>goyamlでは、YAMLの構造とGoの構造体の構造を揃えておくと、<br/>
データを構造体にセットした状態で読み込むことが出来ます。</p>

<p>特にGoでは構造体を使わない場合、<a href="http://ota42y.com/blog/2014/11/13/go-yaml/">interfaceへの変換を書きまくる事になる</a>ので、<br/>
できる限り構造体を利用した方がお勧めです。</p>

<p>以下のように、YAMLのキーとGoの構造体の名前を揃えることで、<br/>
YAMLから構造体に直接データを代入できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Data</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">UserId</span>      <span class="kt">int</span>
</span><span class='line'>  <span class="nx">UserName</span>    <span class="kt">string</span> <span class="s">`yaml:&quot;user_name&quot;`</span>
</span><span class='line'>  <span class="nx">Follownum</span>   <span class="kt">int</span>    <span class="s">`yaml:&quot;followNum&quot;`</span>
</span><span class='line'>  <span class="nx">MessageText</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">invaliddata</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">userid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">123</span>
</span><span class='line'><span class="l-Scalar-Plain">user_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name</span>
</span><span class='line'><span class="l-Scalar-Plain">followNum</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">42</span>
</span><span class='line'><span class="l-Scalar-Plain">messageText</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">text</span>
</span><span class='line'><span class="l-Scalar-Plain">invaliddata</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">data</span>
</span></code></pre></td></tr></table></div></figure>


<p>後述するコードでYAMLを読み込むと、出力は以下の通りになります、<br/>
<code>=&gt; {123 name 42  }</code></p>

<p>UserIdに123、UserNameにname、Follownumに42、<br/>
MessageTextとinvaliddataは空になっています。</p>

<h1>構造体とYAMLの対応付け仕様</h1>

<p>特に指定をしない場合、構造体の変数名に対応するキーと対応付けられます。<br/>
対応するキーは以下のような仕様になっているようです。</p>

<ul>
<li>指定が無い場合、変数名を全て小文字にしたYAMLのキーと対応付ける

<ul>
<li>UserIdはuseridと対応付けられます</li>
</ul>
</li>
<li>後述する方法で明示的な指定をしない限り、YAMLのキーは全て小文字のみ受け付けます

<ul>
<li>messageTextはダメで、messagetextでないといけません</li>
</ul>
</li>
<li>構造体のメンバは大文字から始まる

<ul>
<li>そのため、invaliddataにはデータ入っていません</li>
<li>大文字から始まれば、途中が大文字でも大丈夫です

<ul>
<li>UserIdはuseridと対応付けられます</li>
</ul>
</li>
<li>途中を大文字にしても、全て小文字のキーを見に行きます

<ul>
<li>MessageTextはmessagetextと対応付けられます</li>
</ul>
</li>
</ul>
</li>
<li>明示的に対応を設定することもできる

<ul>
<li>UserNameをuser_nameと対応付けたり(通常はUser_Nameというメンバ変数にしないといけない)</li>
<li>Follownumの変数をfollowNumと対応付けるなど、上記の制限は無くなる</li>
</ul>
</li>
</ul>


<p>暗黙のルールが多いですが、それさえ理解すればかなり簡単に書くことができます。</p>

<h1>サンプルコード</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;gopkg.in/yaml.v2&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Data</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">UserId</span>      <span class="kt">int</span>
</span><span class='line'>  <span class="nx">UserName</span>    <span class="kt">string</span> <span class="s">`yaml:&quot;user_name&quot;`</span>
</span><span class='line'>  <span class="nx">Follownum</span>   <span class="kt">int</span>     <span class="s">`yaml:&quot;followNum&quot;`</span>
</span><span class='line'>  <span class="nx">MessageText</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">invaliddata</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">buf</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadFile</span><span class="p">(</span><span class="s">&quot;test.yml&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">d</span> <span class="nx">Data</span>
</span><span class='line'>  <span class="nx">err</span> <span class="p">=</span> <span class="nx">yaml</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">(</span><span class="nx">buf</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">d</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[参加記録 Go Conference 2014 autumn]]></title>
    <link href="http://ota42y.com/blog/2014/12/01/gocon-2014-autumn/"/>
    <updated>2014-12-01T07:42:00+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/01/gocon-2014-autumn</id>
    <content type="html"><![CDATA[<p><a href="http://gocon.connpass.com/event/9748/">Go Conference 2014 autumn</a>に参加しました。<br/>
<a href="http://togetter.com/li/751700">togetterまとめ</a><br/>
大体スライドが公開されているので、正確な内容はそちらをどうぞ。</p>

<h1>まとめ</h1>

<ul>
<li>Go言語のシンプルさへのこだわりが凄い</li>
<li>開発陣の徳の高さが凄い

<ul>
<li>難しい部分は俺らに任せておけ！的な</li>
</ul>
</li>
<li>明日から使えるGo言語的な情報が盛りだくさん

<ul>
<li>エラーを<em>で無視して済みません…(´･</em>･`)</li>
</ul>
</li>
<li>椅子が痛い

<ul>
<li>1時間半じゃなくて、1時間ごとぐらいに休憩を挟んでほしかったです…</li>
</ul>
</li>
<li>英語頑張ろう

<ul>
<li>日本語スライドありがたや…</li>
</ul>
</li>
</ul>


<h1>Keynote1: Rob Pike (@rob_pike) (45min)</h1>

<p>スライドは未公開？</p>

<p>Go言語の設計者<a href="http://ja.wikipedia.org/wiki/%E3%83%AD%E3%83%96%E3%83%BB%E3%83%91%E3%82%A4%E3%82%AF">ロブ・パイク</a>さんのGo言語の思想とかについての話です。</p>

<p>Go言語がいかに単純さ(≒簡潔さ)を重要視しているかについてとても示唆のある話をしていただけました。<br/>
他の言語が相互に機能を取り込み、ほぼ同じ機能を持つように進化していっているのに対し、<br/>
Goは1.0の時点で言語の機能を固定し、機能をとても少なく持つようにしたそうです。<br/>
書く楽しさはなくなるけど、代わりに保守のしやすさを選んだとのことです。</p>

<p>プレゼンの中で特にハッとさせられたのは、単純なコードと簡潔なコードとは異なるということです。<br/>
言語の機能を使って、数行程度でいろんな事に対応しようとすると、コードの量自体は少なくて済みますが、<br/>
必要とする前提知識が増え、かつその数行を完全に理解するのにとても時間がかかります。<br/>
おそらく、適当な言語のワンライナーを理解するのに必要な知識と時間を想像すれば大体わかると思います。</p>

<p>簡潔な記述でも理解するのが大変な複雑な事ができるため、<br/>
簡潔なコード≠単純なコードと言えるのかなと思いました。</p>

<p>また、Goではコード側ができる限り簡単になるように、<br/>
複雑な事を可能な限り言語側で隠蔽しているとも言われていました。<br/>
実際、GoのGCや並行処理、パッケージなどは設計や実装自体は凄く複雑にも関わらず、<br/>
使う側からはそれほど大変さを感じることなく使えます。</p>

<p>ここ（複雑な部分）は俺にまかせろーといった感じで、開発者の方々には頭が下がります…</p>

<h1>Keynote2: Goに入ってはGoに従え @fumitoshi_ukai (45min)</h1>

<p><a href="http://ukai-go-talks.appspot.com/2014/gocon.slide#1">資料</a></p>

<p>Google社内でGo Readability Approverをされている@fumitoshi_ukaiさんの発表です。</p>

<p>Go言語らしく書くにはどうすればいいのか？といった思想的な部分と、<br/>
ダメな例と良い例を挙げてひたすら赤ペン先生をする発表でした。</p>

<p>これがGo言語のやり方か！となりっぱなしで、まさに明日から使えるGo言語といった感じなので、<br/>
是非ともスライドが公開されるといいなーと思います。</p>

<h1>LT1</h1>

<h2>Gardener &amp; Go</h2>

<p><a href="https://docs.google.com/presentation/d/1cPtFXGVgWcjG7qpwNz7jLbMh9BUW13dM_n1-ls-2u0s/edit#slide=id.p">資料</a></p>

<p>@nuki_ponさんが某位置情報ゲームの色をした、GoCon Tシャツを作ってくださったそうです。<br/>
<a href="http://ec-mail.freegufo.com/items/910014">GoCon 2014 Autumn Tシャツ | FreeGufo メール便対</a></p>

<h1>セッション</h1>

<h2>App Engine for Golang Performance</h2>

<p><a href="http://sinmetal-slide.appspot.com/2014/gocon1130/gaego.slide#1">資料</a></p>

<p>@sinmetalさんのGAEとMVM上でのGoとJavaの速度比較です。<br/>
Goは基本的に倍ぐらい速く、JavaはJavaらしくJVMの起動に時間がかかるといった結果みたいです。</p>

<h2>Golang @ISUCON</h2>

<p><a href="https://speakerdeck.com/ymatsuwitter/golang-at-isucon">資料</a></p>

<p>@y_matsuwitterさんのISUCONでGo言語を使った話です。<br/>
ISUCONでやった、Go言語の様々な効率化についてまとめられていました。</p>

<p>話を聞くとかなり複雑な事をしているようですが、スライドのコードだととても簡単そうで凄いです。</p>

<h2>mackerel-agent 徹底解説</h2>

<p><a href="http://songmu.github.io/slides/gocon2014-autumn/#0">資料</a></p>

<p>@Songmuさんによる、mackerel-agentのソースコード解説です。<br/>
NewRelicっぽいサービスですが、OSSな分色々出来そうで夢が広がる感じです。</p>

<h2>Why my Go program is slow?</h2>

<p><a href="http://www.slideshare.net/InadaNaoki/gocon2014-pprof">資料</a></p>

<p>@methaneさんによるCPUプロファイリングについての発表です。<br/>
アセンブラまで出してくれるpprofの凄さをひしひしと感じます…</p>

<p>また、Goでは他の関数呼び出しのない末端の関数をインライン展開してくれるので、<br/>
関数に分けると早かったり、<br/>
関数呼び出しで呼び出し側が使っているレジスタを全部待避するので、<br/>
呼び出された側が使った分だけ待避する？Cよりも関数呼び出しは遅いなど、<br/>
Goの速度についてしっかりと説明されています。</p>

<h2>Golang JP Community</h2>

<p><a href="https://docs.google.com/presentation/d/1UTi4uqt4sOrQ1dHJE0y8UB9BR9iqDK7dLP57QAfrOX4/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.g4f1d3881c_00">資料</a><br/>
<a href="https://www.youtube.com/watch?v=LJvEIjRBSDA">資料２</a></p>

<p>@qt_luigiさんの日本のGo言語コミュニティの話でした。<br/>
いくつか知っているものもありましたが、思った以上に大量にあって驚きました…</p>

<h2>(タイトルメモり損ねました…GengoでGoの利用事例なお話)</h2>

<p>PHPのAPIをGoに置き換えていったら、500msが10msになったというお話です。<br/>
クリティカルな所ではなく影響の少ないところから、<br/>
一気にではなく少しずつ置き換えていくといいそうです。</p>

<p>Goで作られたデプロイツールが便利そうでした。<br/>
<a href="https://github.com/gengo/goship">https://github.com/gengo/goship</a></p>

<h2>NSQ-Centric Architecture</h2>

<p><a href="http://www.slideshare.net/guregu/nsqcentric-architecture-gocon-autumn-2014">資料</a></p>

<p><a href="https://github.com/guregu">gureguさん</a>のNSQの話です。</p>

<p>bit.lyが作ったGo製のメッセージキューである<a href="https://github.com/bitly/nsq">NSQ</a>を使って、<br/>
チャットアプリを作った発表でした。</p>

<h2>(Go言語のコンパイラをハックした話)</h2>

<p><a href="http://moriyoshi.hatenablog.com/entry/2014/06/03/121728">参考資料</a></p>

<p>@moriyoshitさんがGo言語で寿司関数を作りたいがために？w　Goのコンパイラをハックしたのと、<br/>
コンパイラの中についてのお話でした。</p>

<p>教科書通りのコンパイラの作りしてるんだなーという印象でした。<br/>
魔境と噂のGCCとかはどうなってるんだろう…と思いました。</p>

<h1>LT</h1>

<h2>nginx-build</h2>

<p><a href="https://speakerdeck.com/cubicdaiya/nginx-build">https://speakerdeck.com/cubicdaiya/nginx-build</a><br/>
NginxをビルドするためのツールのDLと、ビルドをやってくれるツールを書いたそうです。<br/>
バイナリ単体で配布できますし、こういう用途には便利そうな感じ…</p>

<h2>(楽天でTerraformを使てる話)</h2>

<p>AWSとかのインスタンスをコードから立ち上げられるTerraformを利用して、<br/>
楽天社内でinfrastructure as codeを進めている話です。</p>

<h2>ビルドパイプラインツールをGoで作った話</h2>

<p><a href="https://speakerdeck.com/ainoya/birudopaipurainturuwogodezuo-tutahua">資料</a></p>

<p>個人的にはJenkinsでビルドパイプラインっぽいのを作るのには、<br/>
いろんな点からうんざりしていたので、なんか凄い便利そうで気になります！　　
似たようなのを作ろうと画策していたので、先を越された感はありますが…</p>

<h2>go/parser, go/astの話</h2>

<p><a href="http://yuroyoro.net/gocon_2014_autumn_lt/#/">資料</a></p>

<p>Goの抽象構文木を生成する標準パッケージの紹介と、可視化するツールを作ったお話です。<br/>
Goの<a href="http://ja.wikipedia.org/wiki/Lint">lint</a>ではここで紹介した技術を使って実装しているらしいです。</p>

<h2>Unit-testing programs depend on I/O in Go</h2>

<p><a href="https://yuya-takeyama.github.io/presentations/2014/11/30/gocon_2014_autumn/">資料</a></p>

<p>表題の通り、I/Oに依存したテストについてのお話です。<br/>
Keynote2の@fumitoshi_ukaiさんも言っていたように、<br/>
データを読み書きするだけでファイルとしての挙動が不要な場合は、<br/>
<code>os.File</code>ではなく<code>io.Reader</code>や<code>io.Writer</code>を使うと、ファイル以外の引数も与えられるため、<br/>
汎用性が上がり、テストもしやすいそうです。</p>

<h2>(consul.ioの話)</h2>

<p><a href="https://consul.io/">https://consul.io/</a>を使うと、色々はかどるらしいが…<br/>
ごめんなさい理解できてないです(´･_･`)</p>

<h2>Togetterまとめ</h2>

<p>Togetterは遙か彼方の地から遠隔で@yukotanさんがまとめてくれたそうです。<br/>
振り返る際にとてもお世話になったので、感謝の限りです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのアップデート手順]]></title>
    <link href="http://ota42y.com/blog/2014/11/30/octopress-update/"/>
    <updated>2014-11-30T07:50:22+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/30/octopress-update</id>
    <content type="html"><![CDATA[<p>見た目は変わっていませんが、このブログのOctopressをアップデートしました。<br/>
だいぶ前のOctopressをforkして、このブログ用の変更をコミットしていったため、<br/>
forkして手を加えたリポジトリにfork元の修正を取り入れる事になったので、やりかたをメモしておきます。</p>

<h1>ブログ用リポジトリの状態</h1>

<p>このブログは現在Github Pagesで運用しており、リポジトリはこちらになります。<br/>
<a href="https://github.com/ota42y/ota42y.github.io">https://github.com/ota42y/ota42y.github.io</a></p>

<p>ですが、これはOctopressの出力先のリポジトリであり、<br/>
bitbucket上にOctopress自体のリポジトリが存在します。<br/>
このリポジトリはだいぶ前のOctopressをベースに、このブログ用の修正や記事をコミットしていました。</p>

<h1>Octopressのアップデート</h1>

<p>普段はOctopress側のリポジトリは使わないため、remoteからも削除してあるのでそれを入れます。<br/>
その後、Octopress側のmasterとマージをするだけになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add octopress git@github.com:imathis/octopress.git
</span><span class='line'>git fetch octopress
</span><span class='line'>git merge octopress/master</span></code></pre></td></tr></table></div></figure>


<p>その後、bundle installすれば終了…のはずでしたが、1つ落とし穴がありました。<br/>
Jekyllがアップデートされたため、日付を出力するdate_time_htmlが変更されていました。<br/>
<a href="https://github.com/imathis/octopress/pull/1643/files">https://github.com/imathis/octopress/pull/1643/files</a><br/>
そのため、これを直すことで、無事アップデートは終了になりました。</p>

<p>date_time_htmlが無くなったことはすぐに発見できましたが、<br/>
このメソッドを持っていたオブジェクトが何なのかの発見に手間取り、結構時間がかかりました。<br/>
Rubyの特徴上、変数にあらゆるオブジェクトが入る事があるため仕方ないのですが、<br/>
その変数が何のオブジェクトなのかを簡単に調べる方法がほしいですね…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[参加記録 BPStudy ♯87]]></title>
    <link href="http://ota42y.com/blog/2014/11/29/bpstudy-87/"/>
    <updated>2014-11-29T17:17:19+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/29/bpstudy-87</id>
    <content type="html"><![CDATA[<p><a href="http://bpstudy.connpass.com/event/9741/">BPStudy#87</a>に参加しました。<br/>
<a href="http://togetter.com/li/751302">togetterまとめ</a></p>

<h1>じっくりと把握する iOS8 / iPhone6 最前線〜ユーザーにとって、開発者にとって何が変わったのか？</h1>

<p><a href="http://www.slideshare.net/yukio.andoh/bpstudy-87-ios8-iphone6">http://www.slideshare.net/yukio.andoh/bpstudy-87-ios8-iphone6</a></p>

<p>iOS8とiPhone6の新機能まとめと、それによって生じる問題紹介でした。</p>

<p>スライド46ページ目の親指の可動範囲の図を見せられると一目瞭然ですが、<br/>
画面サイズが大きくなったことによるタッチ領域の変化はとても激しく、<br/>
iPhone6や6+では従来のUIはかなり使いづらいものになってしまいます。</p>

<p>あと、リモートで任意の端末をレンタルできるRemote TestKitが凄い便利そうでした。<br/>
<a href="http://appkitbox.com/testkit/">Remote TestKit</a></p>

<h1>iPhone 6がリリースされて2ヶ月が過ぎました　〜iOSの分断化時代を乗り切ろう〜</h1>

<p><a href="http://www.slideshare.net/masashiono1/bpstudy-87">http://www.slideshare.net/masashiono1/bpstudy-87</a><br/>
<a href="https://github.com/akisute/AutoLayoutTest">akisute/AutoLayoutTest</a></p>

<p>前半のスワイプUIのススメは、前の発表のiPhone6や6+向けのUIの回答として、<br/>
かなり良い回答ではないかなと思いました。<br/>
あと後半のSwiftのまとめが、Swiftの闇をひしひしと感じる内容で凄いです…<em>(:3 」∠)</em></p>

<h1>LT</h1>

<p>一件目はiOS7と8で遭遇したブラウザバグの紹介でした。<br/>
<a href="http://slides.com/monjudoh/ios_browser_bugs">資料</a></p>

<p>画像を範囲指定で切り抜くと何故か指定したサイズより大きくなるとか、<br/>
同時接続数が2個になったが、レスポンスの受信時間がかぶるとクラッシュするので同時接続してはいけないとか、<br/>
かなり辛い感じのバグが多かったです…</p>

<p>二件目ではペアプロ合コンに参加した人が、相手側の女性の手によって公開処刑される様子を見物していました…<br/>
恐ろしい…(((;ﾟДﾟ)))ｶﾞｸﾌﾞﾙｶﾞｸﾌﾞﾙ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkinsのbuild flow pluginを使うとjobの設定管理が少し楽になる]]></title>
    <link href="http://ota42y.com/blog/2014/11/27/jenkins-build-flow-plugin/"/>
    <updated>2014-11-27T07:44:41+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/27/jenkins-build-flow-plugin</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>Jenkinsのjobの設定管理はリポジトリのバージョンと揃えないと行けないため面倒</li>
<li>全てをスクリプトで実行するのが理想だが、本体の機能を使いたい場合は対応できない</li>
<li>build flow pluginがファイルを読み込んで実行できるようになった</li>
<li>これにより、Jenkinsのjobを呼び出すスクリプトをリポジトリ内に入れてバージョン管理出来る</li>
</ul>


<h1>Jenkinsのjob設定問題</h1>

<p>Jenkinsの大きな問題の一つは、Jenkinsのjob設定をどう管理するかだと思います。</p>

<p>例えばビルド手順を変更する場合、プラグイン設定に後方互換性がないような変更を行うと、<br/>
前のバージョンをビルドしたときにエラーになります。</p>

<p>このような場合、通常は最新の変更を取り込む事で解決しますが、<br/>
コードフリーズ中のリリースブランチのように、最新の変更を取り込めない場合はこの方法で解決できません。</p>

<p>このような場合、二通りの解決方法が存在します。</p>

<h2>全部スクリプトで処理する方法</h2>

<p>一つ目が全部スクリプトでやってしまう方法です。<br/>
Jenkinsのjobからは単一のスクリプトだけを実行し、その中で全てを行います。</p>

<p>この方法はJenkinsを単なるcronとしてしか使わないため、<br/>
全部自分でやる必要がありますが自由度がとても高いのが特徴です。</p>

<p>ですがこの方法では、プラグインや下流jobとの連携、特定の処理だけ別ノードで実行するなど、<br/>
Jenkinsの機能が使えなくなります。</p>

<h2>新しいJobを作っていく方法</h2>

<p>これに対し、jobの変更管理を諦め、どんどん新しいjobを作ってく方法があります。<br/>
Jenkinsはjobのコピーが容易なため、後方互換性のない変更を加える段階で新しいjobに切り替え、<br/>
以降はそちらでビルドし、過去のバージョン用のビルドが必要なときには残してある前のjobを実行します。</p>

<p>この方法の場合、Jenkinsの機能を利用しつつ、複数のビルド設定を同時に扱うことが出来ますが、<br/>
どのバージョンでどのjobを動かせばいいかを保存しておけないため、jobが増えていくと問題になります。</p>

<p>これに対し、build flow pluginを使う事で、どのjobでビルドするかといった情報を、<br/>
リポジトリ内に入れてバージョン管理することが出来ます。</p>

<h1>build flow pluginでjobの関係をリポジトリに入れる</h1>

<p>Jenkinsのbuild flow pluginでは、複数のjobをスクリプトから実行することが出来ます。<br/>
<a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin">Build Flow Plugin</a></p>

<p>具体的には以下のように書くことで、job1が成功したらjob2を実行するといったことが出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 失敗から成功に変わったか判定
</span><span class='line'>def isFixedBuild(result){
</span><span class='line'>  prev = build.previousBuild
</span><span class='line'>  return prev.result != SUCCESS && result == SUCCESS
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// job1を実行
</span><span class='line'>b = build("job1")
</span><span class='line'>// job1のログを出力する
</span><span class='line'>out.println b.getLog()
</span><span class='line'>
</span><span class='line'>if(b.result == SUCCESS){
</span><span class='line'>  // job1が成功していたらjob2を実行
</span><span class='line'>  b = build("job2")
</span><span class='line'>
</span><span class='line'>  if (isFixedBuild(b.result)){
</span><span class='line'>    out.println "fixed"
</span><span class='line'>  }else{
</span><span class='line'>    out.println "success"
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>このbuild flow pluginですが、最近の変更でリポジトリ内のファイルを実行することができるようになりました。<br/>
そのため、メインのjobがリポジトリ内のスクリプトを読み込んで、ビルド用のjobを呼び出すように構築することで、<br/>
二つ目の新しいjobを作っていく方法の問題点だった、リポジトリのバージョンとjobの対応付けが解決します。</p>

<p>残念ながら、job自体の設定は管理出来ないため、設定を変更したい場合はjobを増やしていく必要がありますが、<br/>
呼び出しはスクリプトから行うため、ビルドの実行自体はスクリプトを呼ぶだけで済みます。</p>

<p>これは一つ目の全てをスクリプトで行う方法と同じく、リポジトリ内のgroovyファイルを実行する方法になりますが、<br/>
Jenkinsのjobをスクリプト内から呼び出せるため、プラグインといったJenkinsの機能を利用できる利点があります。</p>

<p>ただし、別のjobに別れてしまうため、<br/>
実行時に設定したパラメーターなどは、呼び出すjob側に一つ一つ明示的に渡す必要があったり、<br/>
ファイルの受け渡しを成果物とCopy Artifact Pluginを利用して行う必要があるなど、<br/>
job間のデータの受け渡しが面倒になるという問題が生じますので注意が必要です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerとは何か]]></title>
    <link href="http://ota42y.com/blog/2014/11/26/docker/"/>
    <updated>2014-11-26T07:33:43+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/26/docker</id>
    <content type="html"><![CDATA[<p>Dockerについて調べたので概要と簡単な使い方のメモ</p>

<h1>Dockerとは何か</h1>

<p>いわゆるコンテナ型仮想化ツールの1つです。<br/>
VMwareやKVMのような完全仮想化と違い、<br/>
ユーザや、ネットワーク、ファイルシステムなどを隔離した環境を作ってそこで動くらしいです。</p>

<p>あくまで隔離された環境のため、環境ごと作る完全仮想化に比べてオーバーヘッドが少なく、<br/>
手元の数年前のmac book airでもかなり快適に動いています。</p>

<p>あくまでゲストOSを隔離環境に置いただけのため 、<br/>
ファイルシステムは分離されておらず、ホストからは中身が見えるのも特徴らしいです。<br/>
(ゲストからはホストの中身は当然見えない)</p>

<p>また、DockerではDockerfileというファイルに設定を書くことで、<br/>
その設定を反映した状態のコンテナを作成することが出来ます。<br/>
そのため、OSの状態をDockerfileとして管理でき、いわゆるimmutable infrastructureと相性がいいみたいです。</p>

<h1>Docker上のCent OSにJenkinsを立てる</h1>

<h2>Dockerの起動</h2>

<p>Dockerコマンドを実行するためには、Macだとboot2dockerを<br/>
<code>boot2docker start</code>で起動し、そのとき提示された環境変数を設定する必要があります。</p>

<p>また、<br/>
<code>boot2docker ip</code><br/>
を実行し、コンテナに対してアクセスできるようにする必要があります。<br/>
なお、この時出たURLは後で使います。</p>

<h2>Cent OSの構築</h2>

<h3>Dockerfileの準備</h3>

<p>以下のファイルをDockerfileという名前で適当なディレクトリに保存します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM centos:centos6
</span><span class='line'>
</span><span class='line'>RUN curl -o /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
</span><span class='line'>RUN rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
</span><span class='line'>RUN yum -y install java-1.7.0-openjdk jenkins</span></code></pre></td></tr></table></div></figure>


<p>見ての通り、Jenkins公式の入れ方のコマンドを実行しているだけです。</p>

<h3>コンテナの作成</h3>

<p>次に、Dockerfileを保存したディレクトリで<br/>
<code>docker build -t jenkins .</code>
を実行し、カレントディレクトリのDockerfileを使って、jenkinsというタグをつけてコンテナを作成させます。</p>

<h3>コンテナの起動</h3>

<p><code>docker run -p 8080:8080 -i -t jenkins bash</code><br/>
を実行してホストの8080とコンテナの8080を結びつけ、先ほど作ったjenkinsコンテナにbashで入り、<br/>
<code>service jenkins start</code><br/>
を実行するとjenkinsが起動します。</p>

<p>この状態で、<code>boot2docker ip</code>で出てきたURLの8080ポートにブラウザでアクセスすると、<br/>
いつものJenkins画面が表示されます。</p>

<h1>その他</h1>

<p>Dockerには他にも、VMのスナップショットのように作成したOSのイメージを保存しておき、<br/>
それを他のセットアップの下地にするといったことも出来るそうです。</p>

<p>また、Dockerはフォアグラウンドのプロセスがないと自動的に終了するため、<br/>
Jenkinsの用にサービスとして動かすものは、ログインして起動するか特別な方法で落とさない工夫が要るみたいです。<br/>
今回はとりあえずさわりだけなので、手で起動してログインしっぱなしにしています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAMLでnilをキーにしたハッシュを扱う]]></title>
    <link href="http://ota42y.com/blog/2014/11/25/ruby-hash/"/>
    <updated>2014-11-25T07:55:14+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/25/ruby-hash</id>
    <content type="html"><![CDATA[<p><em>例は全てRuby 2.0を利用しています</em></p>

<p>nilをキーとした値を持つハッシュをYAMLに書きたい場合、<br/>
以下のように書いても&#8221;nil&#8221;という文字列として認識されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">nil</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>=&gt; {"nil"=&gt;"nil"}</code></p>

<p>データがnilの場合は、データ部分に何も書かないことでnilを表現できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">datanil</span> <span class="p-Indicator">:</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>=&gt; {"datanil"=&gt;nil}</code></p>

<p>キーをnilにしたい場合、以下のように書いても、(Rubyだと)パースに失敗します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'>  <span class="p-Indicator">:</span> <span class="s">&quot;key</span><span class="nv"> </span><span class="s">nil&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>このような場合もYAMLの仕様では想定済みらしく、<br/>
クエッションマークを使うことで、その後ろにあるものがキーであると明示できる仕様があります。<br/>
<a href="http://yaml.org/spec/1.2/spec.html#id2772075">http://yaml.org/spec/1.2/spec.html#id2772075</a></p>

<p>これを利用して、以下のようにクエッションマークの後に何も書かず、<br/>
その後コロンと値を設定することで、nilをキーとして設定できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">?</span>
</span><span class='line'><span class="p-Indicator">:</span> <span class="s">&quot;key</span><span class="nv"> </span><span class="s">nil&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>rubyで長い文字列をキーにする</h2>

<p>Rubyが利用しているPsychでは、以下のように128byte以上のデータをキーにして書き出した場合、<br/>
?マークをつけて書き出します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;yaml&#39;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">mkhash</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>  <span class="n">h</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span>
</span><span class='line'>  <span class="n">h</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">long</span> <span class="o">=</span> <span class="s2">&quot;a&quot;</span> <span class="o">*</span> <span class="mi">129</span>
</span><span class='line'><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;long.yml&quot;</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">write</span> <span class="no">YAML</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">mkhash</span><span class="p">(</span><span class="n">long</span><span class="p">,</span> <span class="s2">&quot;long&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">?</span> <span class="l-Scalar-Plain">aaaaaaaaaaaaaaaaaaaaaaaaaa...aaa</span>
</span><span class='line'><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">long</span>
</span></code></pre></td></tr></table></div></figure>


<p>どうやらRubyが使っているYAMLライブラリのPsych内で、<br/>
128文字以上だったら?マークを出力するようにしているみたいです。</p>

<p><a href="https://github.com/tenderlove/psych/blob/7e7ccf6fa4ee084c673d5a52888e2e18a41bfb5b/ext/psych/yaml/emitter.c#L816">https://github.com/tenderlove/psych/blob/7e7ccf6fa4ee084c673d5a52888e2e18a41bfb5b/ext/psych/yaml/emitter.c#L816</a>
<a href="https://github.com/tenderlove/psych/blob/7e7ccf6fa4ee084c673d5a52888e2e18a41bfb5b/ext/psych/yaml/emitter.c#L1168">https://github.com/tenderlove/psych/blob/7e7ccf6fa4ee084c673d5a52888e2e18a41bfb5b/ext/psych/yaml/emitter.c#L1168</a></p>

<p>一応YAMLの仕様としては1024文字までは?を使わなくてもいいらしいですが、何故128byteで切ってるのかは謎です。
<a href="http://yaml.org/spec/1.2/spec.html#id2792501">http://yaml.org/spec/1.2/spec.html#id2792501</a></p>

<p>なお読み込む際は、クエッションマークをつけずに128byte以上のキーを指定しても問題なく読み込めます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Pagesの新しいIPアドレス対応]]></title>
    <link href="http://ota42y.com/blog/2014/11/20/github-pages-new-ip/"/>
    <updated>2014-11-20T07:54:24+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/20/github-pages-new-ip</id>
    <content type="html"><![CDATA[<p>これまでGithub Pagesで独自ドメインを運用していましたが、9月ぐらいから記事のアップロードのたびに、<br/>
新しいIDアドレスを利用するようにとのwarningが来るようになりました。</p>

<p>そのときに解消方法を調べたのですが、よくわからず放置していたところ、<br/>
12月から新しいアドレスに設定にしないと使えなくなるらしいので慌ててアップデートしました。</p>

<blockquote class="twitter-tweet" data-cards="hidden" lang="ja"><p>GitHub Pagesの旧IPアドレスが利用できなくなります。独自ドメインを利用しているユーザーで旧IPアドレスのままのレポジトリが影響されます。 <a href="https://t.co/1XI3X3NheA">https://t.co/1XI3X3NheA</a></p>&mdash; GitHub Japan (@GitHubJapan) <a href="https://twitter.com/GitHubJapan/status/530526223785811969">2014, 11月 7</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h1>確認方法</h1>

<p>正しく設定されているかは、
<a href="https://github.com/blog/1917-github-pages-legacy-ip-deprecation">GitHub Pages Legacy IP Deprecation</a>
に書いてある確認スクリプトを実行して、<br/>
OK以外が表示されたらダメです。</p>

<p>このサイトの場合は以下の通りですね。<br/>
<code>dig ota42y.com | grep -E '(207.97.227.245|204.232.175.78|199.27.73.133)' || echo “OK”</code></p>

<h1>修正手順</h1>

<p>修正手順は簡単で、自分の持っているドメインを管理しているサービスに行って、<br/>
Aレコードを下記のページにあるように変更するだけです。<br/>
<a href="https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/">Tips for configuring an A record with your DNS provider - User Documentation</a></p>

<p>私はさくらインターネットを使っていたため、以下の手順で変更できました。</p>

<ol>
<li><a href="https://secure.sakura.ad.jp/menu/domain/">ドメインメニュー</a></li>
<li>対象のドメインのゾーン編集をクリック</li>
<li>左側の変更をクリック</li>
<li>既存のIPアドレスをクリックし、前述のGithubの新しいIPアドレスを設定する</li>
</ol>


<p><img src="http://ota42y.com/images/posts/2014-11-20-github-pages-ip.png" alt="設定画面" /></p>

<p>変更をすると、先ほどのdigコマンドがOKを出すようになり、<br/>
Github Pagesにコミットしても警告メールが飛ばなくなります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golangでYAMLファイルを読み込む]]></title>
    <link href="http://ota42y.com/blog/2014/11/13/go-yaml/"/>
    <updated>2014-11-13T07:31:35+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/13/go-yaml</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/go-yaml/yaml">https://github.com/go-yaml/yaml</a>を使う事で、
goでYAMLを扱うことが出来ます。</p>

<p>サイトにはメモリ上のデータに対してYAML化するサンプルしかありませんが、<br/>
以下のようにすることでファイルからYAMLを読み込み、Mapとして扱うことが出来ます。</p>

<p>またExampleには型を決めて読み込む方法しか乗っていませんが、<br/>
以下の例では、<a href="http://qiita.com/yamasaki-masahide/items/d6e406c4c11d5870a1c6">go で yaml 等を「map[interface{}]interface{}」型で読み込んだ際の動的型の参照方法</a><br/>
を参考に型を決めずにMapで読み込んでいます。</p>

<p>かなり冗長な表現になっていますが…(´･_･`)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">a</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Easy!</span>
</span><span class='line'><span class="l-Scalar-Plain">b</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">c</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'>  <span class="l-Scalar-Plain">d</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">3</span><span class="p-Indicator">,</span> <span class="nv">4</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;gopkg.in/yaml.v2&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">buf</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadFile</span><span class="p">(</span><span class="s">&quot;test.yml&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">m</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kd">interface</span><span class="p">{}]</span><span class="kd">interface</span><span class="p">{})</span>
</span><span class='line'>  <span class="nx">err</span> <span class="p">=</span> <span class="nx">yaml</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">(</span><span class="nx">buf</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">m</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s\n&quot;</span><span class="p">,</span> <span class="nx">m</span><span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d\n&quot;</span><span class="p">,</span> <span class="nx">m</span><span class="p">[</span><span class="s">&quot;b&quot;</span><span class="p">].(</span><span class="kd">map</span><span class="p">[</span><span class="kd">interface</span> <span class="p">{}]</span><span class="kd">interface</span> <span class="p">{})[</span><span class="s">&quot;c&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>出力結果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">Easy</span><span class="p">!</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スクフェス用パッケージの更新]]></title>
    <link href="http://ota42y.com/blog/2014/11/12/scfes-update/"/>
    <updated>2014-11-12T11:28:23+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/12/scfes-update</id>
    <content type="html"><![CDATA[<p><a href="http://ota42y.com/blog/2014/10/28/hubot-scfes/">前に作った</a>スクフェス用パッケージを更新しました。<br/>
<a href="https://github.com/ota42y/hubot-scfes">https://github.com/ota42y/hubot-scfes</a></p>

<p>今回は、いつぐらいにレベルアップするかを計算するコマンドを用意しました。<br/>
真夜中にレベルアップが起きたりすると面倒なので、これを見て事前に石を使うなり、<br/>
別の難易度をやって遅らせるなりして、レベルアップのタイミング調整をすることが簡単になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># 次のレベルアップまでexを何回プレイするか</span>
</span><span class='line'><span class="nx">hubot</span> <span class="nx">scfes</span> <span class="nx">levelup</span> <span class="nx">count</span> <span class="mi">830</span> <span class="nx">ex</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 次のレベルアップはいつか</span>
</span><span class='line'><span class="nx">hubot</span> <span class="nx">scfes</span> <span class="nx">levelup</span> <span class="nx">time</span> <span class="mi">830</span> <span class="nx">ex</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="nx">next</span> <span class="nx">levelup</span> <span class="o">is</span> <span class="nx">Sun</span> <span class="nx">Aug</span> <span class="mi">3</span> <span class="mi">2014</span> <span class="mi">2</span><span class="o">:</span><span class="mi">52</span><span class="o">:</span><span class="mi">52</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">0900</span> <span class="p">(</span><span class="nx">JST</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>なお、現在のスタミナ値は考慮していないため、実際は今たまってる分だけ早くなります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hubotの追加機能作成をテストで楽にする]]></title>
    <link href="http://ota42y.com/blog/2014/11/10/hubot-test/"/>
    <updated>2014-11-10T07:54:39+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/10/hubot-test</id>
    <content type="html"><![CDATA[<p>Hubotで追加機能を作るときに一番大変なのは、やはりテストの部分だと思います。<br/>
普通に頑張ると、起動してbotにメッセージ送って、動かなければ止めて修正…といった、<br/>
面倒な手順を踏むことになります。<br/>
また、普通に起動するとエラーも吐いてくれないため、デバッグは非常に困難です。</p>

<p>しかし、テストを書いて開発をする場合、メッセージ送信やメッセージのデータ取得など、<br/>
Hubotに依存する部分をstubで置き換えるのはとても面倒な作業です。</p>

<p>そこで、作りたい機能をパッケージ化して作成することで、<br/>
トライアンドエラーをする部分を最低限に絞って開発することができました。</p>

<h1>Hubot用パッケージの構成</h1>

<p>Hubotはpackage.jsonのmainに指定したファイルをロードしてくれるため、<br/>
ここにhubot用のスクリプトを書くことで、Hubotスクリプトをnpmパッケージで管理できます。</p>

<p>さらに、以下のようにhubotスクリプトから、処理をまとめたオブジェクトの特定のメソッドを呼び出すことで、<br/>
Hubotの連携部分と実際の処理を分けることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">PackageClass = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;./package-name/package-class.coffee&#39;</span><span class="p">).</span><span class="nx">PackageClass</span>
</span><span class='line'><span class="nv">module.exports = </span><span class="nf">(robot) -&gt;</span>
</span><span class='line'>  <span class="nv">package_class = </span><span class="k">new</span> <span class="nx">PackageClass</span>
</span><span class='line'>  <span class="nx">robot</span><span class="p">.</span><span class="nx">respond</span> <span class="sr">/test call (\d+)( \w+)?/</span><span class="p">,</span> <span class="nf">(msg) -&gt;</span>
</span><span class='line'>    <span class="nv">arg1 = </span><span class="nb">parseInt</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="nv">arg2 = </span><span class="nx">msg</span><span class="p">.</span><span class="nx">match</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">msg</span><span class="p">.</span><span class="nx">reply</span> <span class="nx">package_class</span><span class="p">.</span><span class="nx">testCall</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>フォルダ構成は以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">parkage</span><span class="o">-</span><span class="nx">root</span><span class="o">/</span>
</span><span class='line'> <span class="err">├</span> <span class="nx">package</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'> <span class="err">│</span>
</span><span class='line'> <span class="err">├</span> <span class="nx">src</span><span class="o">/</span>
</span><span class='line'> <span class="err">│</span>  <span class="err">├</span> <span class="nx">hubot</span><span class="o">-</span><span class="nx">command</span><span class="p">.</span><span class="nx">coffee</span>
</span><span class='line'> <span class="err">│</span>  <span class="err">└</span> <span class="nx">package</span><span class="o">-</span><span class="nx">name</span><span class="o">/</span>
</span><span class='line'> <span class="err">│</span>     <span class="err">└</span> <span class="nx">package</span><span class="o">-</span><span class="k">class</span><span class="p">.</span><span class="nx">coffee</span>
</span><span class='line'> <span class="err">│</span>
</span><span class='line'> <span class="err">└</span> <span class="nx">test</span><span class="o">/</span>
</span><span class='line'>    <span class="err">├</span> <span class="nx">test</span><span class="o">-</span><span class="nx">helper</span><span class="p">.</span><span class="nx">coffee</span>
</span><span class='line'>    <span class="err">└</span> <span class="nx">test</span><span class="o">-</span><span class="nx">package</span><span class="o">-</span><span class="k">class</span><span class="p">.</span><span class="nx">coffee</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように構成し、package-classに対してテストを作成することで、<br/>
Hubot固有の部分を最小限に減らし、通常のnpmパッケージのように開発できました。</p>

<p>前述の通り、hubotとやりとりをするhubot-commandに対してテストをするのは手間がかかります。<br/>
ですが、やっていることは正規表現の結果をクラスのメソッドに渡すだけなので、<br/>
手作業でやってしまう方が簡単で早いです。</p>

<h1>参考</h1>

<p>hubot-scfesはこの方針に則って作ったため、参考になるかもしれません。<br/>
<a href="https://github.com/ota42y/hubot-scfes">https://github.com/ota42y/hubot-scfes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[size_tは環境によって定義が変わるという話]]></title>
    <link href="http://ota42y.com/blog/2014/11/08/size-t/"/>
    <updated>2014-11-08T13:39:51+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/08/size-t</id>
    <content type="html"><![CDATA[<p>size_tが何bitになるかは環境によって定義が異なります。<br/>
そのため、以下のコードは多くの32bit下で上手くいきますが、64bit化などで環境が変わると動かなくなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">test</span> <span class="o">=</span> <span class="s">&quot;test text&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;size_t %lu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">size_t</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pos</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;ms&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;pos %lu, %lu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)</span><span class="n">pos</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">npos</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">pos</span> <span class="o">!=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">npos</span><span class="p">){</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">text</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">pos</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">text</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>std::stringのfindは引数の文字列が最初に出てくる位置か、見つからなかった場合にstd::string::nposを返します。<br/>
この時、戻り値の型はsize_tになります。</p>

<p>size_tは32bit上ではunsigned intの別名として定義される事が多いため、上記のコードは問題なく動きます。<br/>
ですが64bitにした場合、size_tはunsigned long(8bit)の別名として定義される事があるため、<br/>
unsigned int(4bit)で表せない範囲の値だった場合はデータが一部消滅します。</p>

<p>さらに、std::string::nposは-1として定義されており、unsignedとして解釈した場合にはその値の最大値になります。<br/>
size_tがunsigned intの場合、両者は同じ大きさのため特に意識する必要はありません。</p>

<p>ですが、size_tがunsigned longとして定義されている場合、その最大値はunsined intでは表せないため、<br/>
データが消滅し、結果として比較に失敗するという事が起きます。</p>

<p>私の環境では、上記のコードは-1をunsigend intにした4294967295と,<br/>
-1をunsigend longにした18446744073709551615とを比較し、<br/>
<code>test text</code>の4294967295文字目にアクセスして異常終了します。</p>

<p>やっかいなことに、size_tをunsigned intではなくintに代入した場合、<br/>
-1は-1として解釈されるため、unsigend longと比較した際に最大値に変換されるため、上手くいってしまいます。</p>

<p>とはいえ、安全性を求めるならば、出来るだけsize_tはsize_tとして扱うようにした方がいいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[void型のポインタとint型を相互変換するなという話]]></title>
    <link href="http://ota42y.com/blog/2014/11/07/cpp-64bit-cast/"/>
    <updated>2014-11-07T07:42:43+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/07/cpp-64bit-cast</id>
    <content type="html"><![CDATA[<p>int型をvoid *に変換する場合も、その逆の場合も、32bitだと問題なく動くことが多いため、<br/>
コンパイラもエラーにしない場合が多いです。<br/>
ですが、64bitだと問題が起きることが多いため、64bitを対象にした場合にエラー扱いをする場合があり、<br/>
突然わいて出る大量のエラーに悩まされる事があります…(´･_･`)</p>

<h1>intからvoid型のポインタへの変換</h1>

<p>int型の値をvoid *を利用して保持したい場合、<a href="http://ota42y.com/blog/2014/11/06/cpp-void-pointer/">前の例</a>のように、int型を保持するオブジェクトを作り、<br/>
その中に値を入れた上で、そのオブジェクトへのポインタを持たせる必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">Container</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Num</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// int型を保存する</span>
</span><span class='line'><span class="n">Num</span><span class="o">*</span> <span class="n">numPointer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Num</span><span class="p">();</span>
</span><span class='line'><span class="n">numPointer</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="n">Container</span> <span class="n">con</span><span class="p">;</span>
</span><span class='line'><span class="n">con</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">numPointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 42を取り出す</span>
</span><span class='line'><span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="p">((</span><span class="n">Num</span><span class="o">*</span><span class="p">)</span><span class="n">con</span><span class="p">.</span><span class="n">data</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// newしたので必ず破棄する</span>
</span><span class='line'><span class="k">delete</span> <span class="n">con</span><span class="p">.</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="n">con</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ですが、世の中にはたまにvoid *にint型（やその他のプリミティブ型）を代入する不届き者がいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Container</span> <span class="n">con</span><span class="p">;</span>
</span><span class='line'><span class="n">con</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">num</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 42を取り出す</span>
</span><span class='line'><span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">con</span><span class="p">.</span><span class="n">data</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>void <em>はポインタのため、32bit環境ではvoid</em>は32bitであり、intも基本的には32bitで同じサイズのため、<br/>
32bit環境に限れば問題なくコンパイル、実行が出来ます。<br/>
(エラーになる場合は、g++ test.cpp -m32で32bitのみのコンパイルが出来ます)</p>

<p>ですが、当然ながら64bit環境ではvoid *は64bitのため、intが32bitの場合は足りない分が消滅します。<br/>
多くのコンパイラでは64bitでコンパイルしようとしたときに、このキャストが行われるとエラーを出してくれますが、<br/>
32bitのみコンパイルした場合は出してくれない場合があるため、<br/>
対応しようとした時に大量のエラーに悩まされることになります…</p>

<p>このような場合は最初に述べたとおり、オブジェクトを作ってそのポインタを利用しましょう。</p>

<h1>ポインタ型をint型に代入している場合</h1>

<p>上記の例は32bitを64bitにしてから32bitに戻すため、キャストの仕様によっては問題なく動きます。<br/>
ですが、以下のようにポインタをintにキャストした場合、64bit環境かつintが32bitの場合、<br/>
intに入りきらない部分が消滅してしまうため、ポインタに戻しても正しく戻すことができません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">str</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)(</span><span class="n">a</span><span class="p">);</span> <span class="c1">// ここで不正なアドレスになる</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">string</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>この場合、メモリ破壊などといった特定しにくいエラーを引き起こすため、注意が必要です。<br/>
ただし、例によってポインタとintサイズが同一の環境では問題なく動くため、<br/>
そうでない環境に対応しようとした場合に悩まされる事になります。</p>

<p>一見するとあまり使わなそうな書き方ですが、フレームワークで用意されているクラスとかでvoid *が無い場合、<br/>
クラスのポインタを持たせたいが為に、適当なint型に持たせる…みたいな事をやらかす輩がいますので、<br/>
注意が必要です。</p>

<p>またそれ以外にも、ポインタに対して演算を行いたい場合に、int型に変換して計算をする場合があります。<br/>
このような場合は、intptr_tかuintptr_tというポインタを扱う整数型が用意されており、<br/>
こちらを使うことで32bitや64bitに適したサイズに変換されて扱うことができます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[汎用ポインタを使う]]></title>
    <link href="http://ota42y.com/blog/2014/11/06/cpp-void-pointer/"/>
    <updated>2014-11-06T07:24:31+09:00</updated>
    <id>http://ota42y.com/blog/2014/11/06/cpp-void-pointer</id>
    <content type="html"><![CDATA[<p>int型のポインタとchar型のポインタは違う型のため、同じものとして扱うことは出来ません。<br/>
ですが、実際にはポインタ型はメモリ上の特定アドレスを示すもののため、<br/>
どの型のポインタであっても、データ自体はメモリ上のアドレスを示す何bitかの数値であり、全く同じです。<br/>
（勿論、ポインタの示すアドレスに何があるかは異なります）</p>

<p>そのため、ポインタ専用の変数を利用することで、あらゆる型のポインタを同じ変数に代入することができます。</p>

<p>ただし、コンパイラの型チェックが効かなくなる等の理由から、基本的にはオススメできない手法です。<br/>
C++の場合はテンプレートやクラスの継承、dynamic_castで解決できる場合はそちらを利用した方が安全です。</p>

<h1>汎用ポインタ</h1>

<p>void *型は汎用ポインタと呼ばれ、あらゆるポインタを代入することができます。<br/>
これはたとえば以下のように、何の型かは指定しないけど、変数として持ちたいという場合に利用できます。</p>

<p>この場合、変数定義をvoid *型にしておき、使う前後に目的の型にキャストすることで、<br/>
様々な型を1つの変数で扱うことが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">Container</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Num</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">text</span> <span class="o">=</span> <span class="s">&quot;text&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">Container</span> <span class="n">con1</span><span class="p">;</span>
</span><span class='line'><span class="n">con1</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">text</span><span class="p">;</span> <span class="c1">// dataにconst charのポインタを入れる</span>
</span><span class='line'>
</span><span class='line'><span class="n">Num</span><span class="o">*</span> <span class="n">numPointer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Num</span><span class="p">();</span>
</span><span class='line'><span class="n">numPointer</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="n">Container</span> <span class="n">con2</span><span class="p">;</span>
</span><span class='line'><span class="n">con2</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">numPointer</span><span class="p">;</span> <span class="c1">// dataにNum型のポインタを入れる</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">con1</span><span class="p">.</span><span class="n">data</span><span class="p">);</span> <span class="c1">// 取り出す際にキャストする</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">((</span><span class="n">Num</span><span class="o">*</span><span class="p">)</span><span class="n">con2</span><span class="p">.</span><span class="n">data</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">n</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>なお、違うポインタを違う型にキャストして使うと、メモリ破壊などの予期せぬエラーを引き起こしますが、<br/>
構文上はvoid *から元の型に戻す際のキャストは全て正しいと処理されます。</p>

<p>そのため、おかしくなるキャストをしていてもコンパイラの型チェックでエラー検出が出来ません。<br/>
前述の通り、C++の場合はvoid *を使わず、テンプレートやクラスの継承、dynamic_castで解決した方が安全です。</p>

<h1>mallocの戻り値</h1>

<p>void *はmallocの戻り値としても使われています。<br/>
<a href="http://www.cplusplus.com/reference/cstdlib/malloc/">http://www.cplusplus.com/reference/cstdlib/malloc/</a></p>

<p>mallocの戻り値が何にでもキャスト出来るのは、この仕様によるものです。　</p>

<h1>ポインタを整数値として扱う</h1>

<p>ポインタを整数値として利用したい場合、intptr_tとuintptr_tが利用できます。<br/>
これはそれぞれ符号つき、符号なしの整数として扱うことができます。</p>

<p>間違ってもそのままintにキャスとして代入してはいけません。<br/>
<a href="http://ota42y.com/blog/2014/11/07/cpp-64bit-cast/">void型のポインタとint型を相互変換するなという話</a></p>
]]></content>
  </entry>
  
</feed>
