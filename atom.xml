<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[おおたの物置]]></title>
  <link href="http://ota42y.com/atom.xml" rel="self"/>
  <link href="http://ota42y.com/"/>
  <updated>2014-09-01T08:09:10+09:00</updated>
  <id>http://ota42y.com/</id>
  <author>
    <name><![CDATA[ota42y]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MongoDBでインデックスとexplainを使う]]></title>
    <link href="http://ota42y.com/blog/2014/09/01/mongodb-explain/"/>
    <updated>2014-09-01T08:01:51+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/01/mongodb-explain</id>
    <content type="html"><![CDATA[<h1>事前データ準備</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> for (var i=0; i&lt;100; i++) { db.test_object.save({name: "test1", num: i}) }
</span><span class='line'> for (var i=0; i&lt;100; i++) { db.test_object.save({name: "test2", num: i*1000}) }
</span><span class='line'> for (var i=0; i&lt;100; i++) { db.test_object.save({name: "test3", num: i*10000}) }</span></code></pre></td></tr></table></div></figure>


<p>stringは3種類100個ずつ、numはuniqueなオブジェクトを作成します。</p>

<h1>インデックス作成</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.test_object.ensureIndex({"name": 1})</span></code></pre></td></tr></table></div></figure>


<p>で、test_objectコレクションのnameに対してインデックスを作成できます。</p>

<p>また、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.test_object.getIndexes()</span></code></pre></td></tr></table></div></figure>


<p>でインデックスを確認出来ます。</p>

<p>なお、MongoDBのばあい、インデックスに使用したキーが存在しない場合もあります。
そのような場合は、キーを持っていないものはNULLとして扱われます。</p>

<h1>explain</h1>

<p>検索したときにindexが使われているかはexplainで確認出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.test_object.find({"name": "test1", "num": 10}).explain()
</span><span class='line'>{
</span><span class='line'>        "cursor" : "BtreeCursor name_1",
</span><span class='line'>        "isMultiKey" : false,
</span><span class='line'>        "n" : 1,
</span><span class='line'>        "nscannedObjects" : 100,
</span><span class='line'>        "nscanned" : 100,
</span><span class='line'>        "nscannedObjectsAllPlans" : 100,
</span><span class='line'>        "nscannedAllPlans" : 100,
</span><span class='line'>        "scanAndOrder" : false,
</span><span class='line'>        "indexOnly" : false,
</span><span class='line'>        "nYields" : 0,
</span><span class='line'>        "nChunkSkips" : 0,
</span><span class='line'>        "millis" : 0,
</span><span class='line'>        "indexBounds" : {
</span><span class='line'>                "string" : [
</span><span class='line'>                        [
</span><span class='line'>                                "test1",
</span><span class='line'>                                "test1"
</span><span class='line'>                        ]
</span><span class='line'>                ]
</span><span class='line'>        },
</span><span class='line'>        "server" : "ota42y:27017",
</span><span class='line'>        "filterSet" : false
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>cursorが BasicCursorではなく、<br/>
getIndexesで表示されたインデックス名が表示されていれば大丈夫です。</p>

<p>nscannedはキーを使って絞り込みをしたオブジェクトの数です。<br/>
この場合は事前の設定通り、100個の&#8221;test1&#8221;をキーに持つオブジェクトが引っかかっています。<br/>
その後numキーによって検索が行われ、<br/>
&#8220;n&#8221;の個数分(1件)表示されます。</p>

<p>できる限りn=nscannedに近くなるようにインデックスを貼ったり、<br/>
検索クエリを工夫するといいと思います。</p>

<p>詳しくはこちら<br/>
http://docs.mongodb.org/manual/reference/method/cursor.explain/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golangでtwitter APIを使う]]></title>
    <link href="http://ota42y.com/blog/2014/08/31/go-anaconda/"/>
    <updated>2014-08-31T10:55:48+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/31/go-anaconda</id>
    <content type="html"><![CDATA[<p>anacondaが良さそう(ただしストリーミングAPI非対応)</p>

<p><code>go get github.com/ChimeraCoder/anaconda</code></p>

<script src="https://gist.github.com/ota42y/258616adf5087d2d2186.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sending authentication information]]></title>
    <link href="http://ota42y.com/blog/2014/08/30/sending-authentication-information/"/>
    <updated>2014-08-30T10:07:58+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/30/sending-authentication-information</id>
    <content type="html"><![CDATA[<p>Mac OS X 10.8+MySQL5.6の環境でmysqlコマンドでログインしようとすると、<br/>
<code>'sending authentication information', system error: 32".</code><br/>
といったエラーが出て、mysqlへのログインすら不可能になってしまいました。</p>

<p>どうやら、MySQL5.6から<br/>
<code>innodb_file_per_table</code>のデフォルト値が変わったのが原因みたいです。</p>

<p>my.cnfに<br/>
<code>innodb_file_per_table = OFF</code><br/>
を書くことでで解決します。<br/>
<a href="http://bugs.mysql.com/bug.php?id=71960">参考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[受け取ったPOSTデータをチャットに送信するHubotスクリプトを作った]]></title>
    <link href="http://ota42y.com/blog/2014/08/29/hubot-post-server/"/>
    <updated>2014-08-29T07:42:48+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/29/hubot-post-server</id>
    <content type="html"><![CDATA[<p>実はHubotはWebサーバを立ち上げており、チャットからの入力以外にも、<br/>
Webサーバへのアクセスに対して反応することができます。<br/>
例: <a href="https://github.com/github/hubot/blob/master/src/scripts/httpd.coffee">scripts/httpd.coffee</a></p>

<p>今回はその機能を利用し、<br/>
/hubot/send_messageにPOSTされたデータをチャットに流すスクリプトを作りました。</p>

<p>Hubot以外のアプリからこのURLを叩くことで、hubotの接続しているチャットに対して簡単にデータを送信できます。</p>

<script src="https://gist.github.com/ota42y/5b4342b36ba845d40197.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コマンドラインからiOSアプリをビルドする]]></title>
    <link href="http://ota42y.com/blog/2014/08/28/ios-build/"/>
    <updated>2014-08-28T07:42:55+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/28/ios-build</id>
    <content type="html"><![CDATA[<p>JenkinsのXCode Pluginが便利なのですが、中で何をやっているか気になったので調べたところ、<br/>
普通にコマンドラインからビルドを実行していただけなので、
使っているコマンドをまとめました。</p>

<p>なお、以下のサンプルプロジェクトを使って確認しました。<br/>
<a href="https://developer.apple.com/library/ios/samplecode/CustomHTTPProtocol/Introduction/Intro.html#//apple_ref/doc/uid/DTS40013653">CustomHTTPProtocol</a></p>

<h1>/usr/bin/agvtool</h1>

<h2>バージョンを設定する</h2>

<p><code>/usr/bin/agvtool new-version -all (VERSION_NUMBER)</code><br/>
xcodeのプロジェクト設定の、build部分(CFBundleVersion)を変更できます。</p>

<h2>バージョンを確認する</h2>

<p><code>/usr/bin/agvtool mvers -terse</code>
アプリのバージョン番号を確認出来ます。<br/>
プロジェクト設定のVersionの部分ですね。<br/>
(mversはmarketing-versionの略です)</p>

<h1>使える証明書を確認する</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/bin/security find-identity -p codesigning -v
</span><span class='line'>  1<span class="o">)</span> ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="o">(</span>識別子<span class="o">)</span> <span class="s2">&quot;iPhone Developer: ota42y (XXXXXXXX識別子)&quot;</span>
</span><span class='line'>     1 valid identities found
</span></code></pre></td></tr></table></div></figure>


<p>このコンピュータで使えるcodesigningの一覧が取れます。</p>

<h1>/usr/bin/xcodebuild</h1>

<h2>使えるSDKを確認する</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/bin/xcodebuild -showsdks
</span><span class='line'>OS X SDKs:
</span><span class='line'>        OS X 10.8                       -sdk macosx10.8
</span><span class='line'>        OS X 10.9                       -sdk macosx10.9
</span><span class='line'>
</span><span class='line'>iOS SDKs:
</span><span class='line'>        iOS 7.1                         -sdk iphoneos7.1
</span><span class='line'>
</span><span class='line'>iOS Simulator SDKs:
</span><span class='line'>        Simulator - iOS 6.1             -sdk iphonesimulator6.1
</span><span class='line'>        Simulator - iOS 7.1             -sdk iphonesimulator7.1
</span></code></pre></td></tr></table></div></figure>


<p>使えるSDK一覧が表示されます。</p>

<h2>ビルド設定を表示する</h2>

<p><code>/usr/bin/xcodebuild -list</code></p>

<p>プロジェクトで使えるビルド設定一覧と
デフォルトで何が有効になっているかを表示できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Information about project <span class="s2">&quot;CustomHTTPProtocol&quot;</span>:
</span><span class='line'>    Targets:
</span><span class='line'>        CustomHTTPProtocol
</span><span class='line'>
</span><span class='line'>    Build Configurations:
</span><span class='line'>        Debug
</span><span class='line'>        Release
</span><span class='line'>
</span><span class='line'>    If no build configuration is specified and -scheme is not passed <span class="k">then</span> <span class="s2">&quot;Release&quot;</span> is used.
</span><span class='line'>
</span><span class='line'>    Schemes:
</span><span class='line'>        CustomHTTPProtocol
</span></code></pre></td></tr></table></div></figure>


<h2>ビルドする</h2>

<p><code>/usr/bin/xcodebuild -target CustomHTTPProtocol -configuration Debug build CONFIGURATION_BUILD_DIR=./app</code><br/>
でビルドを実行できます。<br/>
target、configurationを指定し、appディレクトリにappファイルとdSYMファイルを作成します。</p>

<h1>appを署名してipaファイルにする</h1>

<p><code>/usr/bin/xcrun -sdk iphoneos PackageApplication -v (appファイルへのフルパス) -o (保存するipaファイルのフルパス)</code><br/>
何故か相対パスだとうまくいきませんでした</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブラウザからArduinoを制御する]]></title>
    <link href="http://ota42y.com/blog/2014/08/27/arduino-browser/"/>
    <updated>2014-08-27T07:52:09+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/27/arduino-browser</id>
    <content type="html"><![CDATA[<p>Webブラウザから、接続されているArduinoの値を取りたいのですが、<br/>
当然ながらブラウザ本体やJavascriptにはそんな機能はありません。</p>

<p>そこで、Arduinoの制御をやるWebサーバをローカルに立てて、<br/>
そこに向けて通信すれば、ブラウザからもArduinoの制御ができるのでは？<br/>
と考えたところ、既にそのようなものがありました。</p>

<p>試した結果をまとめます。</p>

<h1>noduino</h1>

<p><a href="http://semu.github.io/noduino/">http://semu.github.io/noduino/</a><br/>
Node.jsでArduinoを制御できます。
<a href="https://github.com/ecto/duino">duino</a>というNode.jsからArduinoに接続するライブラリを利用し、<br/>
Webサーバとして扱えるようにしているものみたいです。</p>

<p>かなりいろいろな事ができ、使いやすいように作られていますが、<br/>
ブラウザから制御するのはかなり苦労します。
ですが、Node.jsで実行する前提ならば、<br/>
簡単でいろいろなことができるため最適だと思います。</p>

<h1>Serialport-server</h1>

<p><a href="http://shokai.github.io/serialport-server/">http://shokai.github.io/serialport-server/</a><br/>
RubyからArduinoにアクセスし、その結果を返すサーバです。<br/>
noduinoに比べるとできることは少ないですが、<br/>
サンプルがちゃんと動き、Webブラウザから簡単に値がとれそうです。</p>

<br />


<p>というわけで、ブラウザからArduinoを制御する場合は、<br/>
Serialport-serverが良さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavascriptでオプションのパースをするOptparse-js]]></title>
    <link href="http://ota42y.com/blog/2014/08/26/optparse/"/>
    <updated>2014-08-26T07:49:10+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/26/optparse</id>
    <content type="html"><![CDATA[<p><code>find /tmp -name core -type f -print</code>
のように、渡されたオプションを解析するのはよく行うことのため、<br/>
各言語でそれをやってくれるライブラリが作られています。</p>

<p>javascriptでそれにあたるのがOptparse-jsですが、<br/>
使い方がちょっと独特です。</p>

<h1>インストール</h1>

<p><a href="https://github.com/jfd/optparse-js">https://github.com/jfd/optparse-js</a>からどうぞ。<br/>
npmにも登録されているので、node.jsからも簡単に使えます。</p>

<h1>使い方</h1>

<h2>オプション指定</h2>

<p>どのようなオプションを宇受け取るかは配列で定義します。<br/>
なお、短縮形も同時に定義できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">[</span><span class="s2">&quot;-n&quot;</span><span class="p">,</span> <span class="s2">&quot;--name FILENAME&quot;</span><span class="p">,</span> <span class="s2">&quot;filename&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="s2">&quot;-t&quot;</span><span class="p">,</span> <span class="s2">&quot;--type TYPE&quot;</span><span class="p">,</span> <span class="s2">&quot;type&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>この場合、filenameを受け取る-nもしくは&#8211;nameと、<br/>
typeを受け取る-tもしくは&#8211;typeを定義しています。</p>

<p>この配列をOptionParserに渡してパーサー用オブジェクトを受け取ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">optparse</span><span class="p">.</span><span class="nx">OptionParser</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>オプション処理</h2>

<p>オプションを受け取ったときの処理は、パーサーオブジェクトに関数を渡して登録します。<br/>
第一引数にオプション名、第二引数にそのオプションがあったときの処理を渡します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">parser</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">opt</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">parameter</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">filename</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>パース実行</h2>

<p>パーサーオブジェクトのparseメソッドでパースを実行できます。
ただし、スペースを自分で区切ってはくれないため、<br/>
先に配列に分けておく必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">parser</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">command_str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>(勝手にオプション足したり、区切り文字を自由に設定できる、こうしていると思われます)</p>

<h1>サンプルコード</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">optparse</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;optparse&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">command_str</span> <span class="o">=</span> <span class="s2">&quot;-name core -type f&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">[</span><span class="s2">&quot;-n&quot;</span><span class="p">,</span> <span class="s2">&quot;--name FILENAME&quot;</span><span class="p">,</span> <span class="s2">&quot;filename&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="s2">&quot;-t&quot;</span><span class="p">,</span> <span class="s2">&quot;--type TYPE&quot;</span><span class="p">,</span> <span class="s2">&quot;type&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">optparse</span><span class="p">.</span><span class="nx">OptionParser</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">parameter</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">parser</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">opt</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">parameter</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">filename</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">parser</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;type&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">opt</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">parameter</span><span class="p">[</span><span class="s2">&quot;type&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">parser</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">command_str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">parameter</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スマホアプリ開発でgit-new-workdirがとても便利だった]]></title>
    <link href="http://ota42y.com/blog/2014/08/25/git-new-workdir/"/>
    <updated>2014-08-25T07:42:04+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/25/git-new-workdir</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>ビルドに時間がかかる環境下では、ビルドのキャッシュが重要</li>
<li>ブランチを切り替えると、ブランチ間の差分だけキャッシュが聞かなくなる</li>
<li>別ブランチでちょっとした修正を行おうとすると、移動と戻りとで二回ビルドし直しが起きる</li>
<li>リポジトリを複数cloneすると、管理が面倒</li>
<li>git-new-workdirなら、.gitを共用しつつ、別々のフォルダで作業できる</li>
<li>そのため、ビルドのキャッシュを最大限活用できる</li>
<li>スマホアプリじゃなくても便利</li>
</ul>


<h1>ビルドのキャッシュ</h1>

<p>Objective-cやJava、C++でスマホアプリを作成する場合、<br/>
どの言語もコンパイルが必要になります。<br/>
このコンパイルにかかる時間は、アプリの規模が大きくなるにつれて長くなっていきます。</p>

<p>ただし、多くの場合はキャッシュ機能が有効になっており、<br/>
変更したファイルのみがコンパイルされるため、<br/>
フルビルドをしなければ気にならないはずです。</p>

<h1>gitのチェックアウトによるファイル変更問題</h1>

<p>gitの場合、ブランチを切り替えると関連するファイルに対して全部変更が走ります。<br/>
これにより、ブランチ間の差分が全てビルド対象になってしまいます。</p>

<p>当然と言えば当然ですが、例えばちょっとした変更を別ブランチで行い多場合、<br/>
別ブランチに切り替えて一回、作業後戻ってきて一回と、二回ビルドが必要になります。<br/>
ブランチ間の差次第ですが、5分で終わる作業のために30分のフルビルド2回…<br/>
なんてこともあり、時間が勿体ないです。</p>

<p>かといって、リポジトリを二つ別々のフォルダにcloneすると、<br/>
別々にリポジトリ更新したり、容量圧迫、間違えてコミットしたときにcherry-pickできない等々<br/>
いろいろと問題が起きます。</p>

<p>こういった場合、git-new-workdirを使うことで、
だいぶ楽に解決することができます。</p>

<h1>git-new-workdirとは</h1>

<p>これは同じ.gitを使って、複数のディレクトリにリポジトリをcloneできる機能になります。<br/>
これにより、二つの別々のフォルダにそれぞれgit cloneしたのと同じ状態を維持しつつ、<br/>
片方で作成したコミットや、ローカルブランチ、git stashなどをもう片方で参照することができます。</p>

<p>また、gitのワーキングディレクトリやステージングエリアは共用されないため、<br/>
コミットしていない変更が別のディレクトリに影響をあたることはありません。　</p>

<h2>インストール</h2>

<p><code>git/contrib/workdir/git-new-workdir</code>に入っていたので、<br/>
<code>export PATH=/usr/local/share/git-core/contrib/workdir/:$PATH</code>
でパスを通しました。</p>

<h2>使い方</h2>

<p><code>git-new-workdir repository_folder new_workdir branch_name(オプション)</code>です。<br/>
後述するように、gitのcloneは行わず、元のディレクトリへのシンボリックリンクを張るだけなので、<br/>
ほぼcheckout時間しかかかりません。</p>

<p>新しくできたworkdirは、普通にgit cloneしたときと同じように扱えます。</p>

<h1>注意点</h1>

<p>同じブランチを同時に変更すると、予期せぬ結果になるので注意が必要です。<br/>
なお、片方からもう片方が何をチェックアウトしているかはわからないため、<br/>
main/subといった使い方や、develop/releaseといった風に分けたり、<br/>
必要な時だけ作るといった方が事故らないと思います。</p>

<p>また、新しいディレクトリの.gitには、HEADとindex、logの3つのみが新たに作られ、<br/>
残りは全て元の.gitの該当ディレクトリへのシンボリックリンクになっています。<br/>
そのため、高速に新しいworkdirを作れますが、<br/>
元のリポジトリを消すとworkdirの方もおかしくなると思われます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[selenium-webdriverでRuby からブラウザを操作する]]></title>
    <link href="http://ota42y.com/blog/2014/08/24/selenium/"/>
    <updated>2014-08-24T18:53:52+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/24/selenium</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>selenium-webdriverでプログラムからブラウザを制御できる</li>
<li>ページのロードをまったり、ページ内のJSを実行したりできる。</li>
<li>rubyのgemがあり、簡単に導入できる</li>
<li>Firefoxならgemを入れるだけで動かせる</li>
</ul>


<h1>Rubyのスクレイピング方法</h1>

<p>Rubyでスクレイピングする方法としては、
NokogiriやMechanizeが存在します。</p>

<p>どちらもHTMLを解析してページの要素にアクセスします。<br/>
ですが、実際のWebブラウザのエンジンとは違うため、若干の差異があったり、<br/>
Javascriptで動的に変化するページなどにちゃんと対応するのはとても大変です。</p>

<p>そこで、Webブラウザを直接操作してスクレイピングするライブラリの一つが、<br/>
selenium-webdriverになります。</p>

<h1>selenium-webdriverのインストール</h1>

<p>Rubyではselenium-webdrierのgemをインストールするだけで完了です。</p>

<p>なお、Google Chromeだとgem以外にもう一つインストールするものがありますが、<br/>
今回は説明が面倒なので省略し、Firefoxで動かします。</p>

<h1>使い方</h1>

<p><code>Selenium::WebDriver.for :firefox</code>
で、firefoxのウインドウに対応するWebDriverオブジェクトが取得できます。<br/>
このWebDriverに対して、移動先のURLやDOM要素の取得などを行えます。</p>

<p>また、細かい設定などの変更のために、Profileというものが用意されています。<br/>
これに対して様々な設定をし、WebDriver作成時に設定することで、<br/>
ブラウザの挙動を変更出来ます。</p>

<p>以下は、pdfを開いたときに特定のフォルダに保存する設定がされた状態で、<br/>
Googleでpdfを検索し、先頭の一つをdownフォルダにダウンロードするコードになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;selenium-webdriver&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">profile</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">::</span><span class="ss">Firefox</span><span class="p">:</span><span class="ss">:Profile</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">profile</span><span class="o">[</span><span class="s1">&#39;browser.download.dir&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">))</span><span class="si">}</span><span class="s2">/down&quot;</span>
</span><span class='line'><span class="n">profile</span><span class="o">[</span><span class="s1">&#39;browser.download.folderList&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">profile</span><span class="o">[</span><span class="s1">&#39;browser.download.useDownloadDir&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">profile</span><span class="o">[</span><span class="s1">&#39;browser.helperApps.neverAsk.saveToDisk&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;application/pdf&quot;</span>
</span><span class='line'><span class="n">profile</span><span class="o">[</span><span class="s1">&#39;pdfjs.disabled&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:firefox</span><span class="p">,</span> <span class="ss">:profile</span> <span class="o">=&gt;</span> <span class="n">profile</span>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">navigate</span><span class="o">.</span><span class="n">to</span> <span class="s2">&quot;https://www.google.com/search?as_q=&amp;as_epq=&amp;as_oq=&amp;as_eq=&amp;as_nlo=&amp;as_nhi=&amp;lr=&amp;cr=&amp;as_qdr=all&amp;as_sitesearch=&amp;as_occt=any&amp;safe=images&amp;as_filetype=pdf&amp;as_rights=&amp;gws_rd=ssl&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">links</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:class</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="ss">:tag_name</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">links</span>
</span><span class='line'>  <span class="n">links</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">element</span><span class="o">.</span><span class="n">displayed?</span>
</span><span class='line'>      <span class="n">element</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>      <span class="nb">exit</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mocha+chai+sinsonでテストを書く為に必要な最低限の知識]]></title>
    <link href="http://ota42y.com/blog/2014/08/22/mocha-test/"/>
    <updated>2014-08-22T07:52:16+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/22/mocha-test</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>Mochaではrspecっぽい感じにテストが書ける</li>
<li>ただし、done()を呼ぶ必要がある等、細かい部分に差異がある</li>
<li>sinonにはいろいろ便利機能がある</li>
</ul>


<h1>Mochaの使い方</h1>

<p>coffeescriptを前提にしています。</p>

<h2>テストの書き方</h2>

<p>Mochaのテストは以下のように、itにテスト内容を書いた関数を渡し、<br/>
そのitを呼び出す関数をdescribeに渡すしようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&quot;test root&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">it</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="nf">(done) -&gt;</span>
</span><span class='line'>        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span> <span class="nx">getUserName</span><span class="p">,</span> <span class="s">&quot;user&quot;</span>
</span><span class='line'>        <span class="nx">done</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただし、it関数では必ずdone()を呼び出す必要があります。<br/>
これを呼ばない場合は終了を待ち続け、<br/>
一定時間後にタイムアウトしてテストが失敗した扱いになります。</p>

<h2>beforeの使い方</h2>

<p> rspecのbeforeにあたるものは、beforeEachになります。<br/>
 なお、変数を他のブロックに渡したい場合、<br/>
 以下のようにdescribeの中に変数名を書いておいて、<br/>
 beforeEachのなかで設定する必要があるみたいです。<br/>
<a href="http://stackoverflow.com/questions/20584233/mocha-pass-variable-to-the-next-test">参考</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">room_name = </span><span class="kc">undefined</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">(done) -&gt;</span>
</span><span class='line'>    <span class="nv">room_name = </span><span class="s">&quot;test_room&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">done</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span> <span class="s">&quot;functions&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">it</span> <span class="s">&quot;executeNoteShow&quot;</span><span class="p">,</span> <span class="nf">(done) -&gt;</span>
</span><span class='line'>        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span> <span class="nx">getRoomName</span><span class="p">(</span><span class="nx">room_name</span><span class="p">),</span> <span class="nx">room_name</span>
</span><span class='line'>        <span class="nx">done</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>pendingテストの作り方</h2>

<p>テストの用意はしたけど、とりあえずpendingにしておきたい場合は二通りの方法があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">describe</span> <span class="s">&quot;functions&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">it</span> <span class="s">&quot;pending test&quot;</span> <span class="o">//</span> <span class="err">関数を渡さない場合</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="o">//</span> <span class="nx">it</span><span class="p">.</span><span class="nx">skip</span><span class="err">の場合、引数を渡しても実行されずにスキップする</span>
</span><span class='line'>      <span class="nx">it</span><span class="p">.</span><span class="nx">skip</span> <span class="s">&quot;pending test 2&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>          <span class="nx">done</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>外部ファイル読み込み</h2>

<p>test.coffeeで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Test</span>
</span><span class='line'>  <span class="err">なんかいろいろ</span>
</span><span class='line'><span class="nv">module.exports.Test = </span><span class="nx">Test</span>
</span></code></pre></td></tr></table></div></figure>


<p>と、クラスを宣言し、module.exportsに代入します。
その後、使いたいファイル側で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">Test = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;../src/test.coffee&#39;</span><span class="p">).</span><span class="nx">Test</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書くと、以降Testでそのクラスが呼び出せます。</p>

<h1>chaiの使い方</h1>

<h2>assertを使う</h2>

<p>前述のテストではassertを使っていますが、Mochaにはassertは入っていないため、<br/>
別ライブラリのchaiを読み込む必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">global.assert = </span><span class="nx">require</span><span class="p">(</span><span class="s">&quot;chai&quot;</span><span class="p">).</span><span class="nx">assert</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、 assert.equalや assert.notEqualが使えます。</p>

<h1>sinonの使い方</h1>

<h2>mockやstubを使う</h2>

<p>Mochaにはmockやstubの為の物は含まれていないので、<br/>
今度はsinonを読み込む必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">global.sinon = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;simon&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使い方は以下の通りです</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="o">//</span> <span class="nx">robot</span><span class="p">.</span><span class="nx">brain</span><span class="err">が</span><span class="nx">stub</span><span class="err">になる</span>
</span><span class='line'><span class="nv">robot = </span><span class="k">new</span> <span class="nb">Object</span><span class="p">()</span>
</span><span class='line'><span class="nv">robot.brain = </span><span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="nx">hubot_note</span><span class="p">.</span><span class="nx">executeNoteShow</span><span class="err">を置き換え、</span>
</span><span class='line'><span class="o">//</span> <span class="nx">hubot_note</span><span class="p">.</span><span class="nx">executeMessage</span><span class="err">実行時に、</span>
</span><span class='line'><span class="o">//</span> <span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="err">の引数で一回だけ実行されたかをチェックする</span>
</span><span class='line'>
</span><span class='line'><span class="nv">spy = </span><span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(</span><span class="nx">hubot_note</span><span class="p">,</span> <span class="s">&quot;executeNoteShow&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">spy</span><span class="p">.</span><span class="nx">withArgs</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">)</span>
</span><span class='line'><span class="nv">response = </span><span class="nx">hubot_note</span><span class="p">.</span><span class="nx">executeMessage</span><span class="p">(</span><span class="nx">room_name</span><span class="p">,</span> <span class="s">&quot;hubot note show&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">ok</span> <span class="nx">spy</span><span class="p">.</span><span class="nx">withArgs</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">).</span><span class="nx">calledOnce</span>
</span></code></pre></td></tr></table></div></figure>


<h2>時間変更の仕方</h2>

<p><code>new Date()</code>などによって日付がちゃんと設定されたかどうかを確認したい場合、<br/>
グローバルなDate()部分を置き換える必要があります。</p>

<p>…というのはよくあることなので、sinon側で既に用意されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="vi">@clock = </span><span class="nx">sinon</span><span class="p">.</span><span class="nx">useFakeTimers</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;setTimeout&quot;</span><span class="p">,</span> <span class="s">&quot;clearTimeout&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;setInterval&quot;</span><span class="p">,</span> <span class="s">&quot;clearInterval&quot;</span><span class="p">,</span> <span class="s">&quot;Date&quot;</span><span class="p">)</span><span class="o">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、以降のDateコマンドは第一引数で指定した0(1970年1月1日0時0分0秒)を必ず返すようになるため、<br/>
この時間かどうかをチェックすれば大丈夫です。<br/>
また、以下のように戻り値のオブジェクトのtickメソッドにより、<br/>
指定したミリ秒だけ時間を進めることもできます。<br/>
<code>@clock.tick(3600000)</code></p>

<h2>sinonのその他の機能</h2>

<p>sinonに関しては他にもいろいろ有用なものがあります。<br/>
ちょっと古いですが、以下のmixiさんのブログ記事は参考になると思います。</p>

<p><a href="http://alpha.mixi.co.jp/2011/10798/">http://alpha.mixi.co.jp/2011/10798/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ IDEAで node.jsとmochaを使ってテストする]]></title>
    <link href="http://ota42y.com/blog/2014/08/21/intellij-node/"/>
    <updated>2014-08-21T07:40:33+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/21/intellij-node</id>
    <content type="html"><![CDATA[<p>node.js+mocha+coffeescriptな環境で開発をしていたところ、<br/>
IntelliJ IDEAの設定方法が調べても無かったのでメモ。</p>

<h1>Node.jsプラグインのインストール</h1>

<p>Node.jsプラグインは公式から提供されています。<br/>
そのため、IntelliJ のPreferences からPluginsを選び、<br/>
NodeJSプラグインを選択するだけでインストール出来ます。</p>

<h1>ビルド設定</h1>

<p>以下の画像の通りです。</p>

<p><img src="http://ota42y.com/images/posts/2014-08-21-intellij-node.png" alt="設定画像" /></p>

<ul>
<li>Node interpreter<br/>
node.jsの実行ファイルの位置を設定します。</li>
<li>working directory<br/>
対象のディレクトリ</li>
<li>Mocha package<br/>
Mochaの実行ファイルの位置</li>
<li>Extra Mocha options<br/>
Mochaの設定を指定します
詳しくは後述</li>
<li>Test Directory<br/>
Mochaのテストが入っている場所</li>
</ul>


<h1>Mochaのオプション</h1>

<p>私の環境では主に次のような設定をしています、</p>

<ul>
<li>coffeescriptを利用している</li>
<li>spec形式で出力</li>
<li>共通で読み込むファイルがある</li>
</ul>


<p>これは、以下のオプションを入れることで実現できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--compilers
</span><span class='line'>coffee:coffee-script/register
</span><span class='line'>--reporter
</span><span class='line'>spec
</span><span class='line'>--require
</span><span class='line'>coffee-script
</span><span class='line'>--require
</span><span class='line'>test/test_helper.coffee
</span><span class='line'>--colors</span></code></pre></td></tr></table></div></figure>


<h1>問題点</h1>

<p>以上で設定は終わりですが、いくつか問題点があります。</p>

<ul>
<li>デバッガが動かない<br/>
coffeescriptから変換してるので、<br/>
ブレークポイントがうまく動きません</li>
<li>エラーになったテストに飛べない<br/>
テストがエラーになったとしても、そのテストの位置に飛ぶ機能がありません。<br/>
最も、IDEを使わずに開発している時と同じく、<br/>
テストメッセージを頼りにテストファイルに移動すればいいので、<br/>
大きな問題ではありませんが。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pixivの検索フィルタ作った]]></title>
    <link href="http://ota42y.com/blog/2014/08/20/pixiv-follow-filter/"/>
    <updated>2014-08-20T07:52:49+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/20/pixiv-follow-filter</id>
    <content type="html"><![CDATA[<p>まとめ</p>

<ul>
<li>Pixivの検索は全ユーザから</li>
<li>○○が好きな新しいユーザを探したい時に既にフォローしている人はノイズになる</li>
<li>検索結果からフォローしている人を非表示にする拡張作った</li>
<li>DLは<a href="https://chrome.google.com/webstore/detail/pixivfollowerfilter/oopgkhmlkjnooncplailjfanlichdalp?hl=ja&amp;authuser=1">ここ</a>から</li>
</ul>


<h1>Pixivのイラスト検索でフォロワーを除外できない</h1>

<p>Pixivでイラスト検索をした場合、全ユーザを対象に検索が行われるため、<br/>
検索結果にフォローしてる人とそうでない人が交じります。</p>

<p>私の場合、<a href="http://www.pixiv.net/bookmark_new_illust.php">フォロー新着作品</a>を全てチェックしているため、<br/>
検索をする場合は、このイラスト書いてる新しい人を見つけたい！といった目的で行うことがほとんどです。</p>

<p>そのため、フォロワー以外からの検索を行いたいのですが、<br/>
残念ながらPixivにそのような機能はありませんでした。</p>

<p>というわけで、Chrome拡張で実現しました。</p>

<h1>フィルタの基本機能</h1>

<p>DLは<a href="https://chrome.google.com/webstore/detail/pixivfollowerfilter/oopgkhmlkjnooncplailjfanlichdalp?hl=ja&amp;authuser=1">ここ</a>から。</p>

<p>検索結果にはユーザのユニークIDが含まれているため、<br/>
自分のフォローしている人と一致していれば非表示にしています。</p>

<p>また、毎回通信するのは無駄が多いため、<br/>
事前にフォローしている人のIDをローカルに保存し、そこから読み出しています。<br/>
そのため、ポップアップウィンドウから定期的にデータの更新をする必要があります。</p>

<h1>ソースコード</h1>

<p><a href="https://github.com/ota42y/pixiv_follower_filter">https://github.com/ota42y/pixiv_follower_filter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chrome extensionでデータを保存する]]></title>
    <link href="http://ota42y.com/blog/2014/08/17/local-storage/"/>
    <updated>2014-08-17T10:56:58+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/17/local-storage</id>
    <content type="html"><![CDATA[<p>Chrome拡張でデータを保存しようとした場合に、<br/>
最も簡単に扱えるのが、localStorageです。</p>

<h1>manifest.jsonの設定</h1>

<p>manifest.jsonに以下のパーミッションを追加してください</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>  <span class="s2">&quot;permissions&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;storage&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;unlimitedStorage&quot;</span>
</span><span class='line'>  <span class="p">]</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<h1>使い方</h1>

<p>localStorageという辞書型の変数が定義されるので、<br/>
それに対して読み書きを行うだけで大丈夫です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">localStorage</span><span class="p">[</span><span class="err">‘data’</span><span class="p">]</span> <span class="err">=</span> <span class="err">‘aaa&#39;</span>
</span><span class='line'><span class="err">var</span> <span class="err">data</span> <span class="err">=</span> <span class="err">localStorage</span><span class="p">[</span><span class="err">‘data’</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>注意点</h1>

<h2>保存形式の制約</h2>

<p>この方法で保存できるのは文字列だけになります。<br/>
true/falseを保存しても文字列として出てきますし、<br/>
オブジェクトを入れても正しく保存されません。</p>

<p>このような場合、JSON.stringifyとJSON.parseを使い、<br/>
JSONに変換して保存すると解決します。</p>

<h2>読み出せる場所の制約</h2>

<p>localStorageはページごとに保存するデータがわかれているため、<br/>
読み書きは同じ場所で行う必要があります。</p>

<p>基本的にはbackgruond.jsで読み書きを行い、<br/>
content_scriptsやpopupからbackground.jsを呼び出すのがいいと思います。</p>

<p>popupからは以下のように、background.jsの関数を簡単に呼び出すことができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// background.jsのgetDataを呼び出す</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">chrome</span><span class="p">.</span><span class="nx">extension</span><span class="p">.</span><span class="nx">getBackgroundPage</span><span class="p">().</span><span class="nx">getData</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>content_scriptsからは直接アクセスできないため、<br/>
メッセージを通して呼び出す必要があり、少々面倒です。</p>

<p>まず、background側にメッセージ受け取りと、コールバックを定義します。<br/>
content_scriptsからのメッセージ内容がrequestに入っているので、<br/>
それによって処理を分けています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">chrome</span><span class="p">.</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">onMessage</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">sender</span><span class="p">,</span> <span class="nx">sendResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">method</span> <span class="o">==</span> <span class="s2">&quot;getUser&quot;</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">sendResponse</span><span class="p">({</span><span class="nx">user_id</span><span class="o">:</span> <span class="nx">localStorage</span><span class="p">[</span><span class="nx">request</span><span class="p">.</span><span class="nx">user_id</span><span class="p">]});</span>
</span><span class='line'>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">sendResponse</span><span class="p">({});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>content_scriptから呼び出す場合は以下のように、<br/>
データとコールバックを渡します。<br/>
受け取り側でsendResponse()を読んだときの引数がresponseに入るので、<br/>
それを利用してデータを取り出します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">chrome</span><span class="p">.</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">sendMessage</span><span class="p">({</span><span class="nx">method</span><span class="o">:</span> <span class="s2">&quot;getUser&quot;</span><span class="p">,</span> <span class="nx">user_id</span><span class="o">:</span> <span class="nx">user_id</span><span class="p">},</span>
</span><span class='line'> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">user_name</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">user_name</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutomatorでEvernoteのノートリンクを置き換える]]></title>
    <link href="http://ota42y.com/blog/2014/08/16/evernote-url/"/>
    <updated>2014-08-16T09:46:56+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/16/evernote-url</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>シェルスクリプトをAlfredから直接実行すると無駄にターミナルが立ち上がる</li>
<li>Automatorならターミナルを立ち上げずにスクリプトを実行できる</li>
</ul>


<h1>Automatorでスクリプトを実行する</h1>

<p>前回(<a href="http://ota42y.com/blog/2014/08/10/evernote-link/">Evernoteのノートリンクが仕様変更で使い物にならないので何とかしようとした</a>)
では、<br/>
スクリプトの実行方法が微妙たったのでもう少し修正してみました。</p>

<p>結論としては、Macと標準で入っているAutomatorを使うことで、<br/>
ターミナルアプリを立ち上げずにシェルスクリプトを実行できます。</p>

<h1>Automatorのワークフローを作る</h1>

<p>単体のアプリケーションとして実行するため、<br/>
Automatorを立ち上げアプリケーションを選択します。</p>

<h2>実行ディレクトリの取得</h2>

<p>私の環境では、clipboardのインストール先はグローバルではなく、<br/>
スクリプトのあるフォルダにbundler専用のディレクトリを作り、<br/>
そこにインストールしています。</p>

<p>そのため、スクリプトを実行するためにはそのパスに移動しないといけません。<br/>
ですが、Automatorを実行した場合、<br/>
カレントパスはユーザのホームディレクトリになり、<br/>
実行したファイルのディレクトリではありません。<br/>
参考: <a href="http://mattintosh.hatenablog.com/entry/2013/03/19/152813">iNSTANTWiNE or Wine.framework と Automator の連携</a></p>

<p>そのため、Apple Scriptを先に実行し、<br/>
Automatorの実行ファイルがあるパスを求め、<br/>
そこに移動するようにしています。</p>

<h2>自分自身のパスを求めるApple Script</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>on run {input, parameters}
</span><span class='line'>set p to POSIX path of (path to me)
</span><span class='line'>return {p}
</span><span class='line'>
</span><span class='line'>return input
</span><span class='line'>end run</span></code></pre></td></tr></table></div></figure>


<p>AutomatorのAppleScriptを実行を選び、<br/>
このスクリプトを後述するシェルスクリプトの前に実行するようにします。<br/>
これでシェルスクリプトに引数としてパスを渡せます。</p>

<h2>Evernote URLを置換するスクリプト</h2>

<p>内容はほぼ前回と同じです。<br/>
ただし、各種環境設定は読み込んでくれないため、<br/>
sourceで読み込む必要があります。</p>

<p>また、Automator側で引数の引き渡し方法を<br/>
<code>引数として</code>に設定する必要もあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> .zshrc
</span><span class='line'>
</span><span class='line'><span class="nb">pushd</span> <span class="k">$(</span>dirname <span class="nv">$1</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'>bundle <span class="nb">exec </span>ruby -e <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">require &#39;clipboard&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">url = Clipboard.paste</span>
</span><span class='line'><span class="s2">r = Regexp.new(\&quot;https://www.evernote.com/shard/s2/nl/([0-9]*)/(.*)/\&quot;)</span>
</span><span class='line'><span class="s2">result = r.match url</span>
</span><span class='line'><span class="s2">if result</span>
</span><span class='line'><span class="s2">  new_url = \&quot;evernote:///view/#{result[1]}/s2/#{result[2]}/#{result[2]}/\&quot;</span>
</span><span class='line'><span class="s2">  p new_url</span>
</span><span class='line'><span class="s2">  Clipboard.copy new_url</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">popd</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうして作ったアプリケーションを.appに書き出し、<br/>
Alfredから実行することでターミナルを立ち上げることなく、<br/>
クリップボードのノートリンクを置換できます。</p>

<h1>完成品</h1>

<p>できあがったスクリプトは<br/>
<a href="https://github.com/ota42y/dotfiles/tree/master/home/.scripts/evernote_url_replace">https://github.com/ota42y/dotfiles/tree/master/home/.scripts/evernote_url_replace</a><br/>
にあります。</p>

<p>github上では.appがフォルダとして扱われていますが、<br/>
Mac上ではアプリケーションとして扱われます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sortやfind_ifの条件指定はどういう動きをしているのか]]></title>
    <link href="http://ota42y.com/blog/2014/08/11/find-if/"/>
    <updated>2014-08-11T07:17:02+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/11/find-if</id>
    <content type="html"><![CDATA[<p>C++でsortやfind_ifでは、イテレータのbeginとendに加えて、<br/>
関数orオブジェクトを渡すことで条件を自由に設定できます。<br/>
<a href="http://www.cplusplus.com/reference/algorithm/sort/">参考</a></p>

<p>このとき内部がどういう処理をして渡した関数を呼び出しているのかが気になったので調べました。<br/>
特に、第三引数にクラスを渡す場合、何故()オペレータに条件を書く必要があるのかが気になりました。</p>

<p>結論としては、実装を見れば簡単に解決しました。</p>

<h1>内部実装</h1>

<h2>find_ifの場合</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">_InputIter</span><span class="p">,</span> <span class="k">class</span> <span class="nc">_Predicate</span><span class="o">&gt;</span>
</span><span class='line'><span class="kr">inline</span> <span class="n">_InputIter</span> <span class="n">find_if</span><span class="p">(</span><span class="n">_InputIter</span> <span class="n">__first</span><span class="p">,</span> <span class="n">_InputIter</span> <span class="n">__last</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">_Predicate</span> <span class="n">__pred</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">input_iterator_tag</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">__first</span> <span class="o">!=</span> <span class="n">__last</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">__pred</span><span class="p">(</span><span class="o">*</span><span class="n">__first</span><span class="p">))</span>
</span><span class='line'>    <span class="o">++</span><span class="n">__first</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">__first</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ソートの場合</h2>

<p>ソートは少々複雑なので、該当部分だけ抜き出します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">_RandomAccessIter</span><span class="p">,</span> <span class="k">class</span> <span class="nc">_Tp</span><span class="p">,</span> <span class="k">class</span> <span class="nc">_Compare</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">__unguarded_linear_insert</span><span class="p">(</span><span class="n">_RandomAccessIter</span> <span class="n">__last</span><span class="p">,</span> <span class="n">_Tp</span> <span class="n">__val</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">_Compare</span> <span class="n">__comp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">_RandomAccessIter</span> <span class="n">__next</span> <span class="o">=</span> <span class="n">__last</span><span class="p">;</span>
</span><span class='line'>  <span class="o">--</span><span class="n">__next</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">__comp</span><span class="p">(</span><span class="n">__val</span><span class="p">,</span> <span class="o">*</span><span class="n">__next</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">__last</span> <span class="o">=</span> <span class="o">*</span><span class="n">__next</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__last</span> <span class="o">=</span> <span class="n">__next</span><span class="p">;</span>
</span><span class='line'>    <span class="o">--</span><span class="n">__next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="o">*</span><span class="n">__last</span> <span class="o">=</span> <span class="n">__val</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>動きとしてはとても簡単で、比較が必要なところで引数を実行しているだけです。</p>

<p>おそらく、テンプレートの展開時に第三期引数の()を呼び出すように展開されるため、<br/>
関数の場合はそのまま関数呼び出しに、クラスの場合は()オペレーターの実行になるようです。</p>

<p><a href="https://www.sgi.com/tech/stl/download.html">参考ソース</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evernoteのノートリンクが仕様変更で使い物にならないので何とかしようとした]]></title>
    <link href="http://ota42y.com/blog/2014/08/10/evernote-link/"/>
    <updated>2014-08-10T18:03:43+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/10/evernote-link</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>Evernoteのノートリンクの仕様が変わって使い物にならなくなった</li>
<li>前の仕様でも動くので変換スクリプトを書いた</li>
<li>ただし、Macではスクリプトの実行方法で問題あり</li>
</ul>


<h1>Evernoteのノートリンク仕様の変更</h1>

<p>Evernoteでは図のように、「ノートリンクをコピー」で特定のノートに一対一対応するURIを取れます。</p>

<p><img src="http://ota42y.com/images/posts/2014-08-10-evernote-link.jpg" alt="Evernote link" /></p>

<p>この機能でコピーされるのは、これまでは evernote:///という独自スキームが使われていました。<br/>
そのため、開こうとするとEvernoteアプリが立ち上がり、対応するノートを開いてくれていました。<br/>
AndroidやiPhoneでもEvernoteアプリをインストールしてあれば、<br/>
同じようにアプリでノートを開いてくれるため、とても便利でした。</p>

<p>しかし、最近の変更により、https://www.evernote.com/ へのリンクに変わってしまい、<br/>
ブラウザが起動してノートがEvernoteのサイト上で表示され、<br/>
そこからさらにEvernoteのアプリが開くという挙動になりました。</p>

<p>これにより、モバイル端末などではEvernoteへの通信時間が余計にかかるようになったうえに、<br/>
オフライン状態ではノートを開くことができなくなってしまいました。</p>

<p>正直使い物にならないレベルになってしまったのですが、<br/>
幸いなことにevernote:///スキームは未だ有効です。<br/>
また、必要な情報はどちらにも含まれているため、URIの変換スクリプトを書くことで対応可能です。</p>

<h1>リンク置換スクリプトの作成</h1>

<h2>ノートリンクの仕様</h2>

<p><strong><em>以下は予想であり、正確なものではありません</em></strong></p>

<p>Evernoteのhttpsリンクは以下のようになっています。<br/>
<code>https://www.evernote.com/shard/s2/nl/ユーザ固有の文字列/ノート固有の文字列/</code><br/>
対して、evernote:///スキームは以下のようになっています。<br/>
<code>evernote:///view/ユーザ固有の文字列/s2/ノート固有の文字列/ノート固有の文字列/</code><br/>
<code>(ノート固有の文字列は二回とも同じ値になります)</code>　　</p>

<p>どちらもユーザ固有の文字列とノート固有の文字列は含まれているため、相互に変換可能です。</p>

<p>Windowsならクリップボードの置換ソフトはたくさんあるのですが、<br/>
Macでは残念ながらまともな物はありませんでした。</p>

<p>一応、<a href="http://www.clipmenu.com/ja/">ClipMenu</a>は正規表現で置換ができますが、<br/>
それを実行するまでにかなりキーストロークが必要なため、見送りました。<br/>
理想は自動置換、最低でもスクリプトを簡単に実行できるのが最低条件です。</p>

<h2>リンク置換スクリプト</h2>

<p>結局、クリップボードのURLをevernote:///に変換するスクリプトを作りました。<br/>
事前にclipboard gemをインストールしておく必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">pushd</span> <span class="k">$(</span>dirname <span class="nv">$0</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'>bundle <span class="nb">exec </span>ruby -e <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">require &#39;clipboard&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">url = Clipboard.paste</span>
</span><span class='line'><span class="s2">r = Regexp.new(\&quot;https://www.evernote.com/shard/s2/nl/([0-9]*)/(.*)/\&quot;)</span>
</span><span class='line'><span class="s2">result = r.match url</span>
</span><span class='line'><span class="s2">if result</span>
</span><span class='line'><span class="s2">  new_url = \&quot;evernote:///view/#{result[1]}/s2/#{result[2]}/#{result[2]}/\&quot;</span>
</span><span class='line'><span class="s2">  p new_url</span>
</span><span class='line'><span class="s2">  Clipboard.copy new_url</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">popd</span>
</span></code></pre></td></tr></table></div></figure>


<p>これをevernote.commandという名前で保存して、<br/>
Alfredなどから実行すればいける！！と思ったのですが、<br/>
実行すると新たなターミナルが起動してスクリプトが実行され、<br/>
終了後にターミナルがそのまま残るという状態になってしまいました。</p>

<p>毎回ターミナルを消すのは面倒すぎるので、とりあえずこの手法の採用は見送ることにします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRCはCL-LFでメッセージを区切る]]></title>
    <link href="http://ota42y.com/blog/2014/08/09/irc/"/>
    <updated>2014-08-09T22:14:32+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/09/irc</id>
    <content type="html"><![CDATA[<p>IRCのプロトコルはRFCで決められていて、<br/>
一つのメッセージが512文字以下、CR-LFで区切られている前提らしいです。<br/>
<a href="http://tools.ietf.org/html/rfc1459.html#section-2.3">http://tools.ietf.org/html/rfc1459.html#section-2.3</a></p>

<p>が、古いやつとかは対応してない場合もあるらしく、<br/>
メッセージを受け取る部分は両方に対応できるようにした方がいいとのことです。<br/>
<a href="http://tools.ietf.org/html/rfc1459.html#section-8">http://tools.ietf.org/html/rfc1459.html#section-8</a></p>

<p>と、ちょうどLFしか送ってこないIRCサーバに、<br/>
node-ircで接続したらはまったのでメモ。</p>

<p>修正プルリクは出したけど、メンテ止まってる予感が…<br/>
<a href="https://github.com/martynsmith/node-irc/pull/246">https://github.com/martynsmith/node-irc/pull/246</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkinsで複雑な処理をするときのjob構成について]]></title>
    <link href="http://ota42y.com/blog/2014/07/21/jenkins-architecture/"/>
    <updated>2014-07-21T21:12:36+09:00</updated>
    <id>http://ota42y.com/blog/2014/07/21/jenkins-architecture</id>
    <content type="html"><![CDATA[<p>変数やビルド後の通知設定等が違うために、<br/>
ほぼ同じ内容のjobを15個ぐらい使っていたら、<br/>
だんだんと運用が死んできたのでメモ。</p>

<h1>まとめ</h1>

<p>Jenkinsはプラグインの挙動を変えるのが難しいため、<br/>
ほぼ同じだけれど若干違う手順を行う必要がある場合、<br/>
似たようなjobが大量に並び、<br/>
手順の変更時などに全てのjobを変えきるのが辛くなります。</p>

<p>そこで、可能な限りビルド手順はスクリプトにするのと、<br/>
jobを種類別に細かく分け、<br/>
最上位のjobにはどの下流jobを実行するかだけを管理させることで、<br/>
複雑なjobでも変更に強くすることができるようになります。</p>

<h1>前提条件</h1>

<ul>
<li>設定が全部で7種類ぐらいある</li>
<li>1ビルドはCPUをフルパワーで使って30分程度</li>
<li>一部の設定は定期実行やマージ毎でもビルドしたい</li>
<li>設定ごとに用途や使う頻度が違う為、定期実行タイミングは個別に設定したい</li>
<li>ビルド後のデプロイ先や通知先、通知条件がいくつかある</li>
<li>ビルド手順はバージョン/デプロイ先によって変化する</li>
</ul>


<h1>問題点</h1>

<p>大きな問題として、<br/>
Jenkins pulginで提供されている機能を切り替えるのが難しいという問題があります。</p>

<p>たとえば、Jenkinsの拡張メールプラグインでは、<br/>
そのjobの結果によって通知先や通知内容等を変更することができます。<br/>
ですが、その定義自体を切り替えることが難しく、<br/>
この場合は成功時にメールしないけど、<br/>
この場合は成功時にメールするといった切り替えができませんでした。</p>

<p>また、定期的に変更チェックするブランチや、チェックする間隔が設定毎に異なりますが、<br/>
JenkinsのGit プラグインではそのあたりをうまく設定することが難しいようです。</p>

<p>他にもdeploy先によって使うプラグインが微妙に違うなどの問題があり、<br/>
ほぼ同じだけれど若干違うjobを15個並べるといった運用をしていました。</p>

<p>こんな感じに、ほぼ同じだけれど若干違うビルドが並びます。<br/>
<img src="http://ota42y.com/images/posts/2014-07-21-jenkins-1.png" alt="こんな感じ" /></p>

<p>結果として、ビルド手順の変更時などに全てのビルドを変更しきることが難しかったり、<br/>
古い手順のバージョンのマイクロアップデートと、<br/>
新しい手順のメジャーアップデートが重なったときに、<br/>
ビルド前にJenkinsの設定を必ず変更する必要がある等、<br/>
運用がかなり辛くなってきました。</p>

<p>これに対する対策を考えましたが、あまり良いのが無い感じですが、<br/>
とりあえずまとまったのでメモをしておきます。</p>

<h1>解決案</h1>

<h2>1.ビルド手順や通知を全てをシェルスクリプトにし、Jenkinsはシェルを叩くだけにする</h2>

<p> Jenkinsのプラグインをほぼ使用せず、全てスクリプトで解決する手法です。<br/>
 ビルド手順や通知がSCMに保存されるため、ビルド手順とバージョンが完全に紐付き、<br/>
 常に正しい手順で実行できるという利点があります。</p>

<p> だだし、Jenkinsプラグインの恩恵を得られないため、<br/>
 今プラグインでやっている処理を全て置き換える必要があります。<br/>
 また、新たな手順の追加が大変と言った問題もあります。</p>

<h2>2.ワークスペース共有を使ってうまくやる</h2>

<p>  チェックアウトとビルドジョブを切り離し、<br/>
  SCMのポーリング&amp;チェックアウトだけを行うjobから、<br/>
  ビルドジョブを下流ビルドとして呼び出す方式です。</p>

<p>  こんな感じですね。<br/>
  <img src="http://ota42y.com/images/posts/2014-07-21-jenkins-2.png" alt="ワークスペース共有" /></p>

<p>  ワークスペース共有を使い、<br/>
  下流ビルドは上流のワークスペース上でビルド作業を行うようにすることで、<br/>
  ビルドjobの数を大幅に減らすことができます。</p>

<p>  だだし、下流が実行中は上流ビルドが動かない事を保証しなければなりません。<br/>
  (ビルド途中に次のキューによってワークスペースが書き換えられる可能性がある)
  Parameterize pluginで下流が終わるまで終了を待つ事ができますが、<br/>
  複数のビルドが同時に走った場合にデッドロックに陥る可能性があります。
  - A-Cとビルドするjobと、B-Cとビルドするjobがあり、jenkinsの同時実行が2の場合、<br/>
   2つのビルドを同時に実行するとCが2つともキューに積まれて進まない場合がある</p>

<h2>3.jobを疎結合にして成果物を使ってうまくやる</h2>

<p>  2のデッドロックを回避するために、疎結合にした版になります。<br/>
  この方式ではワークスペースを共有せず、<br/>
  コミットのSHA1を渡してビルドジョブ側でcheckout, buildします。<br/>
  また、Remote APIを利用することで、シェルスクリプトから次に実行するビルドの指定もできます。</p>

<p>  2の利点をそのまま受け継ぎ、ワークスペース共有しないのでブロックしなくなります。<br/>
  ビルド結果などは成果物の保存と、Copy Artifact Pluginを利用して受け渡します。<br/>
  そのため、後続のjobの実行前にワークスペースが変更されても問題なく進められます。</p>

<p>  ただし、ポーリング用とビルド用とで二重にSCMをチェックアウトする必要があるのと、<br/>
  ビルドログが完全に細切れになるため追いにくく、<br/>
  またいつ何が正常に終了したかを把握しにくいという問題があります。</p>

<h2>4.master-slaveにして、masterからslaveのjobを呼び出すようにする</h2>

<p> 3のやりかたを踏まえつつ、個別のjobでは無く下流のjobとして運用する方法です。<br/>
 そのために、2で問題となっていたキューが埋まる問題への解決策を入れました。</p>

<p> 具体的には、ポーリング等を実行する最上流のjobをJenkinsのmasterでのみ実行し、<br/>
 ビルドや通知を下流jobとしてslaveでビルドするようにします。<br/>
 このように設定することで、masterが全て上流jobで埋まったとしても、<br/>
 slaveで下流jobが実行されるため、デッドロックが発生しません。</p>

<p> これにより、上流jobはビルドが完全に終了するまで終了を待つことができ、<br/>
 終了タイミングを把握しやすくなります。</p>

<p> だたし、問題点としてmaster-slave構成にするため、稼働するマシンが増える、<br/>
 jobをmasterとslaveどっちでやるかを考えないといけない、<br/>
 下流jobとして紐付けはされるが、ログはまだ細切れになっているといった問題があります。</p>

<h1>おわりに</h1>

<p>とりあえず今のところは、4番が一番いい方法ではないかと考えています。<br/>
そのためしばらくこれで運用し、また問題が起きた場合、<br/>
次なる手を考えるとして、今のところは4番で行く予定です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2進数の引き算で補数を使う]]></title>
    <link href="http://ota42y.com/blog/2014/07/18/2jin-shu-falseyin-kisuan-debu-shu-woshi-u/"/>
    <updated>2014-07-18T00:00:00+09:00</updated>
    <id>http://ota42y.com/blog/2014/07/18/2jin-shu-falseyin-kisuan-debu-shu-woshi-u</id>
    <content type="html"><![CDATA[<p>2進数の引き算で補数表現を使うと足し算にできることの説明が見あたら無かったのでやってみる</p>

<p>ここでは2の補数表現の求め方がすでに解っている前提で進める、<br/>
(要するに1000-101=010+1=011は相互に変換可能ということ)</p>

<p>結果がプラスになる場合</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x        = 5 - 2 (10進数)
</span><span class='line'>x        = 101 - 010 (2進数に変換)
</span><span class='line'>x + 1000 = 101 - 010 + 1000  (両辺に+1000)
</span><span class='line'>x + 1000 = 101 + (1000 - 010)
</span><span class='line'>x + 1000 = 101 + 110 (2の補数表現)
</span><span class='line'>x + 1000 = 1011
</span><span class='line'>x        = 1011 - 1000
</span><span class='line'>x        = 11
</span><span class='line'>x        = 3 (10進数に変換)</span></code></pre></td></tr></table></div></figure>


<p>結果がマイナスになる場合</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x        = 2 - 5 (10進数)
</span><span class='line'>x        = 010 - 101 (2進数に変換)
</span><span class='line'>x + 1000 = 010 - 101 + 1000  (両辺に+1000)
</span><span class='line'>x + 1000 = 010 + (1000 - 101)
</span><span class='line'>x + 1000 = 010 + 011 (2の補数表現)
</span><span class='line'>x + 1000 = 101
</span><span class='line'>x        = 101 - 1000
</span><span class='line'>x        = - (1000 - 101)
</span><span class='line'>x        = - (11) (2の補数表現)
</span><span class='line'>x        = - (3) (10進数に変換)
</span><span class='line'>x        = - 3</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Kaigiに行ってきた]]></title>
    <link href="http://ota42y.com/blog/2014/06/03/github-kaigi/"/>
    <updated>2014-06-03T22:49:12+09:00</updated>
    <id>http://ota42y.com/blog/2014/06/03/github-kaigi</id>
    <content type="html"><![CDATA[<h1>スライドまとめ</h1>

<ul>
<li><p><a href="http://hiroki.jp/githubkaigi">GitHub実践入門は活用するためのガイドブック</a></p></li>
<li><p><a href="https://speakerdeck.com/shibayu36/hatenaburogutimufalsekai-fa-hurotogithub">はてなブログチームの開発フローとGitHub</a></p></li>
<li><p><a href="https://speakerdeck.com/a_matsuda/oss-to-github">OSS と GitHub</a></p></li>
<li><p><a href="https://speakerdeck.com/cobyism/how-github-works-github-kaigi-tokyo-2014">How GitHub Works (GitHub Kaigi, Tokyo, 2014)</a></p></li>
<li><p><a href="http://www.slideshare.net/inao/githubkaigi">GitHubで雑誌・書籍を作る</a></p></li>
<li><p><a href="https://www.dropbox.com/s/utaud80bk5egse3/Atom%20%E2%80%93%20GitHub%20Kaigi_jp.pdf">Atom, the Programmable Text Editor</a></p></li>
<li><p><a href="https://speakerdeck.com/yuku/ru-men-shu-nihazai-tutenai-git-and-github-tips">入門書には載ってない Git &amp; GitHub Tips</a></p></li>
</ul>


<p>LTは用事があって聞けませんでした…(´･_･`)</p>

<h1>感想</h1>

<h2>全体的な感想</h2>

<p>githubのハックや事例はもちろんですが、<br/>
どちらかというとgithubを利用してのワークフローとか、<br/>
エンジニアを含む環境がどう変化したか的なお話が多かったです。</p>

<p>一番はじめの、GitHub実践入門や、Gitのティップスに関しては、<br/>
すぐに導入したいような内容ばかりでした。<br/>
特に前者は凄くいい本っぽかったので(載せられてる)、会場で注文しましたw</p>

<p><img src="http://ota42y.com/images/posts/2014-06-03-github-kaigi.jpg" alt="届いた" /></p>

<h2>Atomの発表が凄かった</h2>

<p>他にもいろいろ発表がありましたが、特に私にヒットしたのは、Atomのプレゼンでした。</p>

<p>AtomはChromiumベースで、エディタ部分をHTML5/CSSで作っているので、<br/>
Developer Toolsを使ってWebサイトのように、Atomのデザインを変えられます。<br/>
プレゼン中に変更している様子を見せてもらいましたが、<br/>
本当に何でもリアルタイムで変更できて凄く未来を感じました。</p>

<p>また、DOM要素を直接いじることで、APIが提供されていなくても、<br/>
画面上の全ての要素(Macのメニューバーに出てる部分ですら！）を<br/>
自由に変更することが可能で、javascriptをコンソールに書いて、<br/>
新しいメニューがついたのは本当に度肝を抜かれました。</p>

<p>スライドの資料には映像がないため、<br/>
後日映像がアップロードされるのを待つしか無いのが凄く残念ですが、<br/>
とにかく未来を感じるエディタでした。</p>

<p>もの凄くおもしろかったので、第二回開催はまだですかね。</p>
]]></content>
  </entry>
  
</feed>
