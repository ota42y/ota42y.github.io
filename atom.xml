<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[おおたの物置]]></title>
  <link href="http://ota42y.com/atom.xml" rel="self"/>
  <link href="http://ota42y.com/"/>
  <updated>2015-02-15T19:01:47+09:00</updated>
  <id>http://ota42y.com/</id>
  <author>
    <name><![CDATA[ota42y]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2015年7週目まとめ]]></title>
    <link href="http://ota42y.com/blog/2015/02/15/summary/"/>
    <updated>2015-02-15T14:42:50+09:00</updated>
    <id>http://ota42y.com/blog/2015/02/15/summary</id>
    <content type="html"><![CDATA[<p>既に今年の1/8が終わっているという事実…</p>

<h1>JenkinsのWorkflow Pluginがとても便利</h1>

<p><a href="http://ota42y.com/blog/2015/02/10/workflow-plugin/">Jenkins Workflow Pluginで複数slaveを扱うのが楽になる</a><br/>
<a href="http://ota42y.com/blog/2015/02/11/jenkins-workflow/">Jenkins Workflow Pluginでリポジトリ内のスクリプトを読み込む時の注意点 </a><br/>
にまとめています。
Build Flow Pluginを多用していたならば、こっちに乗り換えた方がいろいろ楽ですね。</p>

<p>ただし、まだ出たばかりでバグがあったり、所々かゆいところに手が届かなかったりするので、<br/>
その辺の辛いところは結構あります…</p>

<h1>Remember The Milkが使いにくく感じる</h1>

<ul>
<li><p>良い点</p>

<ul>
<li>タスクの追加時に独自の記法で様々な条件をつけられる</li>
<li>オフラインでAndroid, iOSで見られる(有料)</li>
<li>繰り返し処理、期日等の設定が十分に豊富</li>
<li>Evernotのノートとタスクを関連づけれる

<ul>
<li>タスクと参考資料をくっつけられる</li>
<li>ただし、RTM側でつけられる細かい情報をつけられない</li>
<li>そのため設定はRTMでする必要があり、そこまで便利ではない</li>
</ul>
</li>
</ul>
</li>
<li><p>悪い点</p>

<ul>
<li>PC上で使いづらい

<ul>
<li>ブラウザアプリはURLをショートカットキーで使えない</li>
<li>送信済みリスト等、複数人での作業用機能がOFFにできない</li>
<li>別のリストに移動するショートカットキーがない</li>
</ul>
</li>
<li>サブタスクが使えない

<ul>
<li>特定のタスクを細かく分割できない</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>特にサブタスクが使えず、かつリスト操作が弱いのがものすごく不便で、<br/>
特定の大タスクに対してやることをざっと書き出したときに、<br/>
それを上手くまとめられず、タスクの優先順位等がわかり辛くなります。</p>

<p>もっとも、オフライン機能とか追加時のUIとかはすごく良いのでまだぎりぎり使えますが、<br/>
代わりのサービスを探すか作るかしようと思います…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins Workflow Pluginでリポジトリ内のスクリプトを読み込む時の注意点]]></title>
    <link href="http://ota42y.com/blog/2015/02/11/jenkins-workflow/"/>
    <updated>2015-02-11T18:54:24+09:00</updated>
    <id>http://ota42y.com/blog/2015/02/11/jenkins-workflow</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>ブランチをパラメーターにするとスクリプトを読めない

<ul>
<li>中身ではなく変数名のブランチを探しに行く</li>
<li>多分バグ</li>
</ul>
</li>
<li>ファイルから読み込むるスクリプトを書けば解決

<ul>
<li>公式のflow.groovyを参考に</li>
<li>変数を使おうとすると面倒

<ul>
<li>java.io.Serializableを実装する必要あり</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>gitリポジトリ内のスクリプトを指定できない</h1>

<p>(以下に用意されているdocker上のJenkinsで確認しました)<br/>
<a href="https://github.com/jenkinsci/workflow-plugin/blob/master/demo/README.md">https://github.com/jenkinsci/workflow-plugin/blob/master/demo/README.md</a></p>

<p>Workflow Pluginでは、リポジトリ内のgroovyスクリプトを読み込んで実行する機能があります。<br/>
この機能を使うことで、リポジトリの内容とそれに対応するビルド手順を同時にバージョン管理出来るため、<br/>
ビルド手順の変更がとてもやりやすくなります。</p>

<p>ですが残念ながら、パラメータで指定したブランチをチェックアウトして読み込むと、以下のエラーになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; git config remote.origin.url /var/lib/jenkins/workflow-plugin-pipeline-demo # timeout=10
</span><span class='line'>Fetching upstream changes from /var/lib/jenkins/workflow-plugin-pipeline-demo
</span><span class='line'>&gt; git --version # timeout=10
</span><span class='line'>&gt; git -c core.askpass=true fetch --tags --progress /var/lib/jenkins/workflow-plugin-pipeline-demo
</span><span class='line'>+refs/heads/*:refs/remotes/origin/*
</span><span class='line'>&gt; git rev-parse origin/$BRANCH_NAME^{commit} # timeout=10
</span><span class='line'>&gt; git rev-parse $BRANCH_NAME^{commit} # timeout=10</span></code></pre></td></tr></table></div></figure>


<p>パラメータの内容ではなく、パラメータの名前そのものを探しに行っており、おそらくバグと思われます。<br/>
通常のJobでGit Pluginを使うと問題なくパラメータ指定が出来るため、Workflowのバグと思われます。</p>

<p>このバグは、Jenkinsでは事前に設定した特定ブランチしかビルドしない場合は問題ありません。<br/>
ですが、様々なブランチで実行する可能性がある場合、JenkinsのJob設定にスクリプトを書かなければならず、<br/>
ビルド手順自体の管理が大変になります。</p>

<p>このような場合、スクリプトをロードして実行するスクリプトをJobに設定することで、<br/>
指定したブランチからスクリプトを読み込んで実行できます。</p>

<h1>スクリプトをロードして実行するスクリプト</h1>

<p>(公式のdockerにも<a href="https://github.com/jenkinsci/workflow-plugin-pipeline-demo/blob/master/flow.groovy">スクリプト</a>がありますが、より簡単化したもので説明します)</p>

<p>以下のようなスクリプトをリポジトリのルートに起きます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// build.groovy</span>
</span><span class='line'><span class="kt">def</span> <span class="nf">build</span><span class="o">(){</span>
</span><span class='line'>  <span class="n">node</span><span class="o">(</span><span class="s2">&quot;slave&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">git</span> <span class="nl">url:</span> <span class="err">‘</span><span class="n">RIPOSITORY_URL</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">branch:</span> <span class="err">“</span><span class="n">$BRANCH_NAME</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">    sh “rake build&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="k">this</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jobには以下のスクリプトを書きます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">flow</span>
</span><span class='line'><span class="nf">node</span><span class="o">(</span><span class="s2">&quot;master&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">git</span> <span class="nl">url:</span> <span class="err">‘</span><span class="n">RIPOSITORY_URL</span><span class="s1">&#39;, branch: “$BRANCH_NAME&quot;</span>
</span><span class='line'><span class="s1">    flow = load &#39;</span><span class="n">flow</span><span class="o">.</span><span class="na">groovy</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">flow</span><span class="o">.</span><span class="na">build</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>loadは指定したパスのgroovyスクリプトを読み込み、returnしたオブジェクトを返します。<br/>
そのため、これでリポジトリ内のファイルをロードして実行することが出来ます。<br/>
また、buildメソッドをnodeの外側で実行することで、ビルド中はmasterのキューを開けておくことが出来ます。</p>

<h1>ロード時に変数を保存したい場合</h1>

<p>上記の方式の場合、masterにcloneしてその後にslave上に再度cloneしてビルドを始めています。<br/>
slaveの選択を凝らない場合は問題ないですが、リリースビルド専用マシンがあったり、<br/>
特定のミドルウェアを使うビルドの場合など、slaveの選択をパラメータによって切り替えたい場合があります。</p>

<p>パラメータだけで決定できる場合は問題ありませんが、リポジトリ内のファイルを読み込む必要がある場合、<br/>
上記のスクリプトの場合でいうところの、node(&ldquo;master&rdquo;)内で処理しなければなりません。<br/>
当然Job側にそれを書くとメンテが大変になるため、flow.groovy内に書く必要があります。</p>

<p>このような場合、groovyスクリプトの戻り値で独自クラスを返すことで解決できます。</p>

<h1>load関数の戻り値で独自クラスを返す</h1>

<p>Jenkinsから以下のようなgroovyスクリプトを読み込むことで、slaveの選択も柔軟にできるようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="nf">buildSlave</span><span class="o">(</span><span class="n">slaveName</span><span class="o">){</span>
</span><span class='line'>  <span class="n">slave</span><span class="o">(</span><span class="n">slaveName</span><span class="o">){</span>
</span><span class='line'>    <span class="n">sh</span> <span class="s2">&quot;echo ’slave&#39;&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">FlowStruct</span> <span class="kd">implements</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span><span class="o">{</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">slaveName</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">flow</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">build</span><span class="o">(){</span>
</span><span class='line'>    <span class="n">flow</span><span class="o">.</span><span class="na">buildSlave</span><span class="o">(</span><span class="n">slaveName</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FlowStruct</span><span class="o">()</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="na">slaveName</span> <span class="o">=</span> <span class="n">readFile</span><span class="o">(</span><span class="err">“</span><span class="n">settings</span><span class="o">/</span><span class="n">config_$</span><span class="o">{</span><span class="n">SETTING</span><span class="o">}</span><span class="err">&quot;</span><span class="o">).</span><span class="na">trim</span><span class="o">()</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="na">flow</span> <span class="o">=</span> <span class="k">this</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">f</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>load関数では通常の文はすべて実行されるため、FlowStruct()以降が実行されてから関数が終了します。<br/>
また、戻り値は固定ではないため、上記のように独自のクラスを作成して返すことができます。<br/>
この際、戻り値はjava.io.Serializableを実装している必要がありますのでご注意ください。</p>

<p>これで、複雑な設定をしていたとしても、すべてリポジトリ内のスクリプトで処理することが出来ます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins Workflow Pluginで複数slaveを扱うのが楽になる]]></title>
    <link href="http://ota42y.com/blog/2015/02/10/workflow-plugin/"/>
    <updated>2015-02-10T07:51:32+09:00</updated>
    <id>http://ota42y.com/blog/2015/02/10/workflow-plugin</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>Jenkinsはjob単位でしかノードに割り振れない

<ul>
<li>複数ノードで分散ビルドするには設定を駆使する必要がある</li>
<li>結果としてjobの数が増えて管理コストが増大する</li>
</ul>
</li>
<li>Workflow Pluginで大幅に改善する

<ul>
<li>スクリプトからノードを指定してコマンドを実行できる</li>
<li>複数のjobを組み合わせていたのが一つのスクリプトですむ</li>
<li>スクリプトをVCSに入れればビルド設定のバージョン管理も可能</li>
</ul>
</li>
</ul>


<h1>複数ノードをコントロールするのは難しい</h1>

<p>Jenkinsを一つのノードで運用している場合はそれほど問題になりませんが、<br/>
複数のノードで、jobの一部の部分だけを別のノードで実行するなど、<br/>
ある程度複雑な分散をやろうとすると、Jenkins本体の機能では不足してきます。</p>

<p>このような問題に対して、これまではBuild Flow Pluginを使う事で解決が可能でしたが、<br/>
Workflow Pluginを使う事で、さらに簡単に解決することが出来ます。</p>

<h1>Build Flow Pluginの問題点</h1>

<p>Build Flow Pluginは基本的に複数の下流ビルドを管理するために作られているため、<br/>
処理を分けようとするとjobの数が増加していきます。</p>

<p>例えばネイティブアプリのビルドのようなCPUパワーを使う処理と、パワーを使わないアップロード処理がある場合、<br/>
一つのノードで全てやるよりも、非力なサーバを確保してアップロード処理をそちらで実行した方が、<br/>
ビルド用のノードはビルドに専念でき、無駄なくjobを実行できます。<br/>
(また、masterとビルドを同じノードでやるとJenkins本体の処理が遅くなるため、分割する利点は他にもあります)</p>

<p><img src="http://ota42y.com/images/posts/2015-02-10-master-slave.jpg" alt="分割イメージ" /><br/>
(上段のup#4はup#3の間違いです…)</p>

<p>ビルドが数十分、数時間かかるような巨大な処理の場合、<br/>
処理を分散することで稼げる時間はかなりのものになります。</p>

<p>従来では分割する作業を別のjobにし、かつBuild Flow Plugin用のjobを作る必要があります。<br/>
さらに、ファイルの受け渡しもできないため、成果物として保存して、<br/>
次のjobは前のjobの特定のビルド番号の成果物を取り出す…といった風になります。</p>

<p>jobの数が増えると管理も大変ですし、使う方もどれを使えば良いのか解らなくなります。<br/>
ここで、Workflow Pluginを使うことで大きく改善することが出来ます。</p>

<h1>Workflow Pluginを使ったビルド</h1>

<p>Workflow Pluginでは、slaveを選択してコマンドを実行、<br/>
特定のファイルを別のslaveにコピーして処理を実行ということががスクリプトで書けます。</p>

<p>例えば以下のように書くことで、masterでファイルを生成してslaveで実行、<br/>
その後結果をmasterにコピーしてアップロードみたいな事が出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">node</span><span class="o">(</span><span class="s2">&quot;master&quot;</span><span class="o">){</span>
</span><span class='line'>  <span class="n">sh</span> <span class="s2">&quot;rake config&quot;</span>
</span><span class='line'>  <span class="n">archive</span> <span class="s2">&quot;config.yml&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">node</span><span class="o">(</span><span class="s2">&quot;slave&quot;</span><span class="o">){</span>
</span><span class='line'>  <span class="n">unarchive</span> <span class="nl">mapping:</span> <span class="o">[</span><span class="s1">&#39;config.yml&#39;</span> <span class="o">:</span> <span class="s1">&#39;./&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sh</span> <span class="s2">&quot;rake build&quot;</span>
</span><span class='line'>  <span class="n">archive</span> <span class="s2">&quot;result.zip&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">node</span><span class="o">(</span><span class="s2">&quot;master&quot;</span><span class="o">){</span>
</span><span class='line'>  <span class="n">unarchive</span> <span class="nl">mapping:</span> <span class="o">[</span><span class="s1">&#39;result.zip&#39;</span> <span class="o">:</span> <span class="s1">&#39;.&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sh</span> <span class="s2">&quot;rake upload&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、複数平行してのビルド等も出来るため、Jenkinsで複数ノードを使って分散ビルドをしたい場合に、<br/>
一つのスクリプトで全てをコントロールできるため、とても重宝します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年6週目まとめ]]></title>
    <link href="http://ota42y.com/blog/2015/02/09/summary/"/>
    <updated>2015-02-09T07:37:10+09:00</updated>
    <id>http://ota42y.com/blog/2015/02/09/summary</id>
    <content type="html"><![CDATA[<p>ちゃんとその週に何をやったかをまとめると、<br/>
今週はあんまり活動していない事がよくわかりますね…</p>

<h1>Jenkins Workflow Pluginが素晴らしそう</h1>

<p><a href="http://ota42y.com/blog/2015/01/11/jenkins-conference/">Jenkins ユーザ・カンファレンス 2015 東京</a>で知った、Workflow Pluginが思った以上に良さそうです。<br/>
Jenkins本体の機能では出来ないmaster/slaveを選択してコマンドを実行するといったことが可能になり、<br/>
効率の良い分散ビルドが出来るようになります。</p>

<p>そのうち詳しくまとめる予定…</p>

<h1>思った以上にTwitterに時間を取られる</h1>

<p><a href="https://play.google.com/store/apps/details?id=com.binerx.aptrax&amp;hl=ja">Aptrax | App Usage Tracker</a>というツールで、<br/>
スマホの各アプリの使用時間を計測していますが、Twitterの使用率が凄い結果になっていました。</p>

<p>PC上で見ている時間も結構多く、かなりの時間を浪費している気がします…<br/>
重要なことだけ抜き出してできる限り見ないみたいな事が必要ですね。</p>

<h1>twieveでツイートをevernoteに保存</h1>

<p><a href="http://twieve.net/">twieve</a>を使って、ツイートをevernoteに保存するようにしました。<br/>
これでやってることを呟いておけば、今週何をやったかを簡単に思い出せるようになるはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語で一次の最小二乗法を実装した]]></title>
    <link href="http://ota42y.com/blog/2015/02/03/leastsquaresmethod/"/>
    <updated>2015-02-03T07:56:01+09:00</updated>
    <id>http://ota42y.com/blog/2015/02/03/leastsquaresmethod</id>
    <content type="html"><![CDATA[<p>こんな感じです。<br/>
暗黙的にキャストしてくれないので若干面倒です。</p>

<script src="https://gist.github.com/ota42y/db4ff0298d9c945cd261.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年5週目まとめ]]></title>
    <link href="http://ota42y.com/blog/2015/02/02/summary/"/>
    <updated>2015-02-02T22:14:43+09:00</updated>
    <id>http://ota42y.com/blog/2015/02/02/summary</id>
    <content type="html"><![CDATA[<p>今週は二日ほど有給を取っていました。<br/>
家で引きこもっていましたが、かなり有効に引きこもれたと思います。</p>

<p>毎日色々していますが、やりたいことがどんどん増えてきます…<br/>
効率をあげるにも限度がありますし、どうしたものですかね。</p>

<h1>Jenkins Workflow Plugin便利そう</h1>

<p>Jenkins ユーザ・カンファレンス 2015で聞いた<a href="https://github.com/jenkinsci/workflow-plugin">jenkinsci/workflow-plugin</a>を試しています。<br/>
スレーブを指定してタスクを実行できたり、ファイルをスレーブから取ってきて別のスレーブに渡す等、<br/>
今までBuild Pipeline Pluginでやっていたことがだいたい実現できて凄く良いです。<br/>
あとはプロパティ等をファイルから読み込む方法さえ解れば完璧なのですが…</p>

<h1>Evernoteリンクを開くChrome拡張の更新</h1>

<p><a href="http://ota42y.com/blog/2015/01/31/evernote-opener-update/">http://ota42y.com/blog/2015/01/31/evernote-opener-update/</a><br/>
便利なのですが、新しいPCに設定する際にとても不便だったので楽に修正できるように機能拡張しました。</p>

<h1>Jenkinsのライブラリよさそう</h1>

<p><a href="https://github.com/yosida95/golang-jenkins">https://github.com/yosida95/golang-jenkins</a><br/>
Webの反応めちゃくちゃ遅いので、よく見る結果とかはチャットに流せないかと思って見ています。<br/>
(こっちの方がいろいろそろってるかも <a href="https://github.com/bndr/gojenkins">https://github.com/bndr/gojenkins</a>)</p>

<h1>Remember The MilkのCLIを使ってみた</h1>

<p><a href="http://blog.rememberthemilk.jp/2012/10/featured-app-rtm-cli/">RTM-CLI</a>なるものがあるらしいので使ってみました。<br/>
Web版は微妙に使いにくいので反応が早いこいつを試してみましたが、微妙でした。<br/>
キャッシュされないために毎回認証して取ってくるので反応が悪く、<br/>
速度を求めた場合の乗り換え先としては良くありませんでした。<br/>
これにキャッシュ機能がつけばおそらく完璧なのですが、現状のコマンドラインツールだと厳しそうですね…</p>

<h1>ライブに参加していた</h1>

<p><a href="http://www.lovelive-anime.jp/sp_5thlive.html">μ&rsquo;s Go→Go! LoveLive! 2015 ～Dream Sensation!</a>に参加してました。<br/>
風邪やインフルエンザの可能性を減らすために、2日前から有給取って家に引きこもっていました。<br/>
1日目はチケットが取れなかったのでLVで、2日目は開場でしかもアリーナAブロックでした。<br/>
前回の映像は何回も見ていましたが、やっぱり映像よりもLVがいいですし、<br/>
LVよりも会場の方が何十倍も凄かったです。<br/>
文才が無いのでこれぐらいにとどめておきますが、次のライブは両日当たるまで応募券を買おうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evernoteのリンクをアプリで開くChrome拡張を更新した]]></title>
    <link href="http://ota42y.com/blog/2015/01/31/evernote-opener-update/"/>
    <updated>2015-01-31T14:39:49+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/31/evernote-opener-update</id>
    <content type="html"><![CDATA[<p><a href="https://chrome.google.com/webstore/detail/evernote-url-opener/pjkgaadffbojkgoocbobikkklpajjbgo">evernote url opener</a>を更新しました。</p>

<p>使うためには、EvernoteのユーザIDとShardを調べる必要がありますが、<br/>
ちょっと面倒だったので、ユーザが自分のノートリンクをペーストするだけで、設定するように変更しました。</p>

<p>Evernoteからコピーできる、<br/>
<code>https://www.evernote.com/shard/USER_SHARD//WORD/USER_ID/NODE_ID/</code><br/>
といった形式のリンクを張ることで、USER_SHARDとUSER_IDを保存します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bundle中に別のbundleを呼ぶと予期しない結果になる対策]]></title>
    <link href="http://ota42y.com/blog/2015/01/28/bundle-in-bundle/"/>
    <updated>2015-01-28T07:46:54+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/28/bundle-in-bundle</id>
    <content type="html"><![CDATA[<p>bundle execでrubyファイルを実行し、別のGemfileのあるディレクトリに移動してbundle系のコマンドを実行すると、<br/>
一回目のbundlerに対してbundleが実行されてしまい、<br/>
別のbundleを呼び出せないという問題が起きました。<br/>
これはbundlerが設定する環境変数が原因でした。</p>

<h1>まとめ</h1>

<ul>
<li>bundle exec中に、別のbundlerを実行するとおかしくなる

<ul>
<li>主にsystemやspawn等を使った場合</li>
<li>最初のbundle execと同じものであれば問題は起きない</li>
</ul>
</li>
<li>bundlerが設定をしている環境変数が問題

<ul>
<li>別のbundlerを呼ぼうとして元のbundlerが呼ばれている</li>
</ul>
</li>
<li>Bundler.with_clean_envで回避可能

<ul>
<li>Bundler.clean_systemでも可</li>
</ul>
</li>
</ul>


<h1>問題</h1>

<p>以下のような構成かつtestフォルダにいる状態で、<br/>
<code>bundle install --path vendor/bundle</code><br/>
<code>bundle exec test.rb</code>を実行すると、<br/>
test2内でbundlerを呼んだ時にエラーになります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├─ test
</span><span class='line'>│  │  Gemfile (gemのhello_world_gemを使用)
</span><span class='line'>│  └─ test.rb
</span><span class='line'>|
</span><span class='line'>└─ test2
</span><span class='line'>   └─ Gemfile (gemのhello-worldを使用)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">system</span> <span class="s1">&#39;hello_world_gem&#39;</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s2">&quot;../test2&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># error</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s1">&#39;bundle install --path vendor/bundle&#39;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s1">&#39;bundle exec hello-world&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>エラー文言</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">oh</span> <span class="n">hai</span> <span class="n">thar</span>
</span><span class='line'><span class="no">Using</span> <span class="n">hello_world_gem</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span>
</span><span class='line'><span class="no">Using</span> <span class="n">bundler</span> <span class="mi">1</span><span class="o">.</span><span class="mi">7</span><span class="o">.</span><span class="mi">3</span>
</span><span class='line'><span class="no">Your</span> <span class="n">bundle</span> <span class="n">is</span> <span class="n">complete!</span>
</span><span class='line'><span class="no">It</span> <span class="n">was</span> <span class="n">installed</span> <span class="n">into</span> <span class="o">.</span><span class="n">/vendor</span><span class="o">/</span><span class="n">bundle</span>
</span><span class='line'><span class="ss">bundler</span><span class="p">:</span> <span class="n">command</span> <span class="ow">not</span> <span class="ss">found</span><span class="p">:</span> <span class="n">hello</span><span class="o">-</span><span class="n">world</span>
</span><span class='line'><span class="no">Install</span> <span class="n">missing</span> <span class="n">gem</span> <span class="n">executables</span> <span class="n">with</span> <span class="sb">`bundle install`</span>
</span></code></pre></td></tr></table></div></figure>


<h1>原因</h1>

<p>bundlerが実行時に、BUNDLE_GEMFILEやRUBYOPTといった環境変数をいじっており、<br/>
そこで指定されているbundlerから実行されていると見なされるため、<br/>
bundle系のコマンドが全て元のbundlerに対して実行されてしまうのが原因です。<br/>
実際、test2に移動後のbundle install時のログが、testフォルダでbundle installした時のものと同じ出力になっています。</p>

<p>この仕組みのおかげで同じbundleの場合はそのまま実行できるため、<br/>
1行目のhello_world_gemの呼び出しにbundle execが不要になっています。<br/>
このように必ずしも害となるものではありませんが、違うbundlerを呼び出せないのは不便です。</p>

<h1>解決策</h1>

<p><a href="https://github.com/bundler/bundler/blob/a400c5ed9eca82598a76f9818a1bf7129515a2a0/lib/bundler.rb#L239">Bundler.with_clean_env</a>を利用することで、この問題を回避できます。<br/>
このメソッドは、実行時の環境変数にBUNDLE_という名前の環境変数を全て削除して渡されたブロックを実行します。<br/>
そのため、これに渡したブロックの中で別のbundlerを呼ぶことで、予期した動作になります。<br/>
また、コマンドが一つだけの場合は<a href="https://github.com/bundler/bundler/blob/a400c5ed9eca82598a76f9818a1bf7129515a2a0/lib/bundler.rb#L251">Bundler.clean_system</a>メソッドも使えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">system</span> <span class="s1">&#39;hello_world_gem&#39;</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s2">&quot;../test2&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Bundler</span><span class="o">.</span><span class="n">with_clean_env</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># ok</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s1">&#39;bundle install --path vendor/bundle&#39;</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s1">&#39;bundle exec hello-world&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>補足</h1>

<p>他にGEM_HOMEという環境変数を設定していますが、<br/>
これはbundler起動時に上書きされるらしく、with_clear_envで消さなくても良さそうです。<br/>
<a href="https://github.com/bundler/bundler/blob/a400c5ed9eca82598a76f9818a1bf7129515a2a0/lib/bundler.rb#L416">https://github.com/bundler/bundler/blob/a400c5ed9eca82598a76f9818a1bf7129515a2a0/lib/bundler.rb#L416</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年4週目まとめ]]></title>
    <link href="http://ota42y.com/blog/2015/01/26/summary/"/>
    <updated>2015-01-26T22:11:46+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/26/summary</id>
    <content type="html"><![CDATA[<p>先週やったことまとめ<br/>
以外とあまりやってない。<br/>
作りたいものは増えていくけど時間は無い。</p>

<h1>tumblrクライアント作ってる</h1>

<p>info APIだけはできた。Posts APIを作りたいけど、ちょっとめんどくさそう。<br/>
複数の型を一つの配列で返して来るので、どうやって同じ配列に入れようか…<br/>
たぶん全部入りのクラスで取り出して、個別のクラスに入れていく形になるかと。</p>

<p><a href="http://play.golang.org/p/tVLoIDVk--">http://play.golang.org/p/tVLoIDVk&ndash;</a>
この技を使えば違う型でも共通の配列に入れられるはず</p>

<h1>情報科学若手の会冬の陣2015に参加した</h1>

<p><a href="http://ota42y.com/blog/2015/01/25/wakate2015w/">参加記録 情報科学若手の会冬の陣2015</a><br/>
発表したい人生だった… _ (:3 」∠)_<br/>
が、ここ半年間はずっと一日に使える時間が1〜2時間程度、かつ仕事は情報科学っぽい事をしてないので、<br/>
発表ネタが全く作れないという…<br/>
というか、特に技術的に成長してない気がするし、このままの生活を続けて大丈夫なのだろうか…</p>

<h1>Remember The Milk使いやすいが使いにくい</h1>

<p>わりといい線行ってるサービスだけど、Webクライアントが使いにくいのでちょっと残念。<br/>
URLをショートカットから開けなかったり、ヘッダー画像が邪魔だったり…<br/>
サブタスクが無いのもそれはそれで使いにくいですね。</p>

<p>ただ、オフラインでスマホで見られますし、繰り返し設定など様々な設定が凄く楽にできる等<br/>
機能的にはいいですし、UIもいいのであともう一声って感じですね…<br/>
コマンドラインから対話的に操作できれば解決できそうな気がします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[参加記録 情報科学若手の会冬の陣2015]]></title>
    <link href="http://ota42y.com/blog/2015/01/25/wakate2015w/"/>
    <updated>2015-01-25T07:51:43+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/25/wakate2015w</id>
    <content type="html"><![CDATA[<p><a href="https://atnd.org/events/61060">情報科学若手の会冬の陣2015 #wakate2015w</a>に参加しました<br/>
<a href="http://togetter.com/li/773792">Togetterまとめ</a><br/>
会場は電源完備＆大きめの机が椅子に着いているという豪華仕様でした</p>

<h1>まとめ</h1>

<ul>
<li><p>黒崎優太 (@kuro_m88)  ICTトラブルシューティングコンテストの紹介</p>

<ul>
<li><a href="http://icttoracon.net/">http://icttoracon.net/</a></li>
<li>ネットワーク版CTFみたいなコンテスト</li>
<li>Ciscoがスポンサーについているので、高価な機材がいっぱい用意されるみたい</li>
<li>大きな規模のネットワークであれこれするのって普通じゃ出来ないし、面白そうです。</li>
</ul>
</li>
<li><p>浅野智之 (@asanon_s)  Webの世界に散らばるデータをつなぐ技術</p>

<ul>
<li>semantic webやPDFの話</li>
<li>人間が読めれば良い形式から、構造化されて機械も読める形式を加えるみたい</li>
<li>なんとなく理解が深まった気がします</li>
<li>完全なsemantic webへの道のりはまだまだ</li>
</ul>
</li>
<li><p>門脇香子  証明プログラミング入門</p>

<ul>
<li><a href="http://www.slideshare.net/ussopyon/ss-43846794">http://www.slideshare.net/ussopyon/ss-43846794</a></li>
<li><a href="https://lepidum.co.jp/blog/2014-06-05/CCS-Injection/">OpenSSLの脆弱性をCoqで見つけた話</a>を聞いてから、証明プログラミング凄そうだけどよくわからない状態だったので、
理解が深まりました。</li>
<li>何を証明すれば良いかを補完してくれるのは便利そうでした</li>
</ul>
</li>
<li><p>佐野岳人  コードを書けば複素数が分かる</p>

<ul>
<li><a href="http://www.slideshare.net/taketo1024/ss-43853048">http://www.slideshare.net/taketo1024/ss-43853048</a></li>
<li>初めて複素数が何なのかを感覚的に理解できた気がする…</li>
<li>デモで関数をインタラクティブに可視化しているのが本当に凄かった</li>
<li>ここから使える

<ul>
<li><a href="https://github.com/taketo1024/SwiftComplex">https://github.com/taketo1024/SwiftComplex</a></li>
</ul>
</li>
</ul>
</li>
<li><p>辻順平 (@tsujimotter)  日曜数学のススメ</p>

<ul>
<li><a href="http://www.slideshare.net/junpeitsuji/2015-43856733">http://www.slideshare.net/junpeitsuji/2015-43856733</a></li>
<li>コンパスと定規で作図可能かどうかを判定するガウスの判定法凄い

<ul>
<li>折り紙だと四次方程式が解けるので、作図できなくても折れる場合があるとか凄い</li>
</ul>
</li>
</ul>
</li>
<li><p>池尻良平  ニュースと類似した歴史を求めるアルゴリズムを考えてみた – 役に立つ歴史教育を目指して</p>

<ul>
<li>現代のニュースと、それに類似する歴史上の出来事を提示するシステムを作っているそうです</li>
<li>過去にどんな解決策をとって、どういう結果になったかを考えるのにとても便利そうです</li>
<li>早く使ってみたいですね</li>
</ul>
</li>
<li><p>後藤紳 モバイルデータを用いた行動予測</p>

<ul>
<li>あんまり書いちゃいけなさそうなので割愛</li>
<li>GPSの行動ログを蓄積して、次に何をしそうか提示するみたいです

<ul>
<li>同じような日々を送っている人には効果的っぽいです</li>
</ul>
</li>
</ul>
</li>
<li><p>宮代理弘 (@3846masa)  Processin.ga – Webで書いてスマホで動かすサイト開発話</p>

<ul>
<li><a href="http://processin.ga/">http://processin.ga/</a></li>
<li><a href="http://3846masa.hatenablog.jp/entry/2015/01/25/011802">http://3846masa.hatenablog.jp/entry/2015/01/25/011802</a></li>
<li>Processingをブラウザ上で書いて動かし、かつスマホでもリアルタイムに動かせるサイトです</li>
<li>無ければ作る、あっても作る</li>
<li>デザインはパクるもの</li>
</ul>
</li>
<li><p>湯村翼 (@yumu19)   野生の研究について</p>

<ul>
<li><a href="http://yumulog.hatenablog.com/entry/2015/01/25/020313">http://yumulog.hatenablog.com/entry/2015/01/25/020313</a></li>
<li>そもそもアーカイブ形式が動画だと、後から調べるのがとても大変になる気がします

<ul>
<li>今は何とかなってるけど、数年、数十年と続いていくと辛いかと</li>
</ul>
</li>
</ul>
</li>
<li><p>宮下芳明  明治大学宮下研究室の活動とABProの紹介</p>

<ul>
<li>Linear vs Circular

<ul>
<li>この研究が凄かった</li>
<li><a href="https://www.youtube.com/watch?v=S1Roi2NOmx8">https://www.youtube.com/watch?v=S1Roi2NOmx8</a></li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>懇親会</h1>

<p>一晩寝たらだいたい忘れるという…(´･_･`)</p>

<ul>
<li><p>courseraで英語勉強</p>

<ul>
<li><a href="https://www.coursera.org/">https://www.coursera.org/</a></li>
<li>ちょうど機械学習とかやってみたかったのでよさそう(o゜▽゜)</li>
</ul>
</li>
<li><p>自動作曲の話</p>

<ul>
<li>歌詞を入れると自動でお音をつけてくれる</li>
<li>日本語の音節？を見て色々やってるらしい？</li>
<li>ミクと組み合わせて、詩を書ければ曲が書けるとか良さそう</li>
</ul>
</li>
</ul>


<h1>その他</h1>

<p>何か発表したい人生だった…<em>(:3 」∠)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RAMディスクでiOSのビルド時間を短くする]]></title>
    <link href="http://ota42y.com/blog/2015/01/23/ram-disk/"/>
    <updated>2015-01-23T07:47:36+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/23/ram-disk</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>RAMディスクを作ってビルドすると早くなる

<ul>
<li>SSD上でビルドすると9分</li>
<li>RAMディスクでビルドすると6分</li>
<li>Androidは未検証だが同じと思われる</li>
</ul>
</li>
<li>Macだととても簡単にRAMディスクが作れる</li>
<li>Jenkins等、ビルドが主目的の場合に有効と思われる</li>
<li>メモリが余っているならやる価値はある</li>
</ul>


<h1>Mac OS XでのRAMディスク作成</h1>

<p>Macではhdidコマンドを使うことで、メモリ領域をディスクとして使用することが出来ます。<br/>
メモリはSSDと比べても遙かに早く、R/Wの激しい処理にうってつけです。</p>

<p>また、rootでなくても作成できるため、非常に便利です</p>

<h2>ディスク作成手順</h2>

<p>2つコマンドを実行するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hdid -nomount ram://4096000
</span><span class='line'><span class="c"># 指定した容量でRAMディスクが作成されます。</span>
</span><span class='line'><span class="c"># /dev/disk2等作成された場所が返ります。</span>
</span><span class='line'><span class="c"># ファイルシステムがないためマウントは失敗します。</span>
</span><span class='line'><span class="c"># そのため、-nomuntをつけています。</span>
</span><span class='line'>
</span><span class='line'>diskutil eraseDisk HFS+ RAM /dev/disk2
</span><span class='line'><span class="c"># 先ほど作成したディスク(/dev/disk2)をHFSでフォーマットします</span>
</span><span class='line'><span class="c"># さらに、RAMという名前でマウントします。</span>
</span><span class='line'><span class="c"># これにより、/Volumes/RAMでアクセスできるようになります。</span>
</span><span class='line'>
</span><span class='line'>hdiutil detach disk2
</span><span class='line'><span class="c"># 作成したディスクをアンマウントして削除します</span>
</span><span class='line'><span class="c"># ディスクは消滅するのでご注意ください</span>
</span><span class='line'><span class="c"># diskutil unmountDisk</span>
</span><span class='line'><span class="c"># diskutil eject</span>
</span><span class='line'><span class="c"># の組み合わせと同じですが、コマンド一つになるため楽です</span>
</span></code></pre></td></tr></table></div></figure>


<h2>速度比較</h2>

<p>Mac Book Air 13-inch Mid 2013のSSDと速度比較しました。<br/>
速度計測には<a href="http://xbench.com/">Xbench</a>を使用しました。</p>

<p>結果は以下の通りになりました。<br/>
<img src="http://ota42y.com/images/posts/2015-01-23-speed.png" alt="2015-01-23-speed.png" /></p>

<p>どれをとってもRAMディスクの方が圧倒的に早い結果になりました。<br/>
ブロックサイズが小さいwriteの場合は2倍程度になっていますが、それ以外は5倍〜10倍以上の差がついています。</p>

<h1>ビルド時間比較</h1>

<p>性能的には以上の通りですが、実際にビルド時間にはどれほど影響があるかを調べてみました。</p>

<p>比較には<a href="https://github.com/cocos2d/cocos2d-x-samples">cocos2d-x-sample</a>を利用しました。<br/>
ビルドには<a href="https://github.com/nomad/shenzhen">shenzhen</a>を利用し、コマンドラインからiOSのクリーンビルドを行いました。</p>

<p>残念ながら証明書が無いためipaを作成することが出来ず、<br/>
かつその場合にshenzhenが何故か終了せず、timeコマンド等で正確な時間計測が出来ませんでした。<br/>
timeコマンドを使い手作業で計ったところ、SSD上では9分13秒、RAMディスク上では6分01秒とうい結果になりました。<br/>
手計測による誤差はせいぜい数秒低度なため、3分以上早くなっているのは確実と言えます。</p>

<h1>その他</h1>

<ul>
<li>R/Wの性能は5倍〜10倍と凄く高速になっている</li>
<li>ビルド時間は30%ぐらい減った

<ul>
<li>ただし、プロジェクトによっては差異があると思われる</li>
<li>CPUやメモリの影響もあるため、R/Wの性能向上がそのまま反映されるわけではない</li>
</ul>
</li>
<li>電源を切ると消えるので使い道は慎重に

<ul>
<li>開発用よりもビルド専用に使った方が安心</li>
<li>Jenkinsのビルドをここで行うのは良い案と思われる

<ul>
<li>ログが残らないので、成果物の保存はよく考える必要あり</li>
</ul>
</li>
</ul>
</li>
<li>当然ながら空きメモリ容量を消費するので、余っていない場合は注意</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Androidでクリップボードの中身を自動で辞書検索]]></title>
    <link href="http://ota42y.com/blog/2015/01/21/android-dict/"/>
    <updated>2015-01-21T07:37:19+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/21/android-dict</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>clip2dicを使うとクリップボード内を自動で辞書検索する</li>
<li>オフラインの別アプリからも検索可能</li>
<li>ColorDictとGolden Dictが連携先として優秀</li>
<li>英辞郎は形式が違うため辛い</li>
<li>Google Driveをビューワーとして使うといい</li>
</ul>


<h1>ポップアップ辞書アプリ</h1>

<p>iOSやMacでは辞書機能がOSに統合されているため、英単語を選択するとそのまま辞書を引くことができます。</p>

<p>Androidで同じぐらい楽に辞書を引けないかと思って調べたところ、<br/>
<a href="https://play.google.com/store/apps/details?id=com.jp.readers.clip2dic.lite&amp;hl=ja">clip2dic</a>というアプリが、クリップボードの中身を自動でネット上の辞書から検索してくれました。</p>

<p>私はタブレットをオフラインで使用していますが、このアプリは別のアプリを呼び出して検索できるため、<br/>
他の辞書アプリを入れる事でオフラインでも辞書が引けるようになります。</p>

<h1>clip2dictから使えるオフライン辞書アプリ</h1>

<h2>ColorDict</h2>

<p><a href="https://play.google.com/store/apps/details?id=com.socialnmobile.colordict">https://play.google.com/store/apps/details?id=com.socialnmobile.colordict</a></p>

<p>無料の辞書ソフトです。<br/>
初期状態では日英、英日辞書は入っていませんが、<br/>
別アプリとして配布されている辞書アプリをインストールすることで、
対応辞書を増やすことができます。
<a href="https://play.google.com/store/apps/details?id=colordict.dictdata.japanese.jmdict">https://play.google.com/store/apps/details?id=colordict.dictdata.japanese.jmdict</a><br/>
(おそらく<a href="https://code.google.com/p/stardict-3/">こちらの辞書</a>を使用しています)<br/>
StartDict形式の辞書ファイルを持っているならば、端末内のdictdata内に置くことで、さらに辞書を追加できます。</p>

<h2>GoldenDict</h2>

<p><a href="https://play.google.com/store/apps/details?id=mobi.goldendict.android&amp;hl=ja">https://play.google.com/store/apps/details?id=mobi.goldendict.android&amp;hl=ja</a><br/>
<a href="https://play.google.com/store/apps/details?id=mobi.goldendict.android.free&amp;hl=ja">Free版</a><br/>
こちらもColorDictと同じく、辞書ファイルが必要になります。<br/>
ただし、こちらはアプリ内から先ほどの辞書データをダウンロードできるため、<br/>
より導入が簡単です（辞書としてはおそらく同じだと思います)。</p>

<p>このアプリには、複数辞書を同時に検索できる利点があるらしいです（無料版は5個まで同時検索）</p>

<p>複数の辞書ファイルを持っている場合は便利ですが、<br/>
私はそんなに辞書ファイルを持っていないので無料で十分でした。</p>

<h1>その他</h1>

<p>手元に英辞郎のだいぶ古い版が手元にありますが、上記二つのアプリでは対応していないpdic形式になります。<br/>
pdicからStartDict形式の変換はとても手間がかかるのと、<br/>
古すぎてネット上にある手順では出来なさそうなので諦めました。</p>

<p>また、Adobe Readerは選択をすると単語ではなく文章を丸ごと選択するため、辞書検索に使えません…<br/>
いくつかPDFビューワーを試しましたが多くは文字選択が出来ず、<br/>
今のところ唯一出来たGoogle Driveをビューワーとして使っています。<br/>
(オフラインでも別アプリからPDFビューワーとして呼び出せる)</p>

<p>辞書は透明な別アプリとして元のアプリの上に表示されるらしく、閉じてPDFビューワーに移動するのが若干遅いです。<br/>
これはおそらくclip2dicの仕様だと思われるため、解決方法は無さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年3週目まとめ]]></title>
    <link href="http://ota42y.com/blog/2015/01/17/summary/"/>
    <updated>2015-01-17T13:38:07+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/17/summary</id>
    <content type="html"><![CDATA[<h1>Jenkins ユーザ・カンファレンス 2015 東京</h1>

<p><a href="http://ota42y.com/blog/2015/01/11/jenkins-conference/">参加しました</a><br/>
Workflow Plugin等を導入したいのですが、<br/>
現在クリティカルパス上の作業をしているために手が回りません…<br/>
運用コストを下げられるので是非入れたいのですが、<br/>
どうしても優先度は下がってしまいますね…</p>

<h1>Tumblrのgolang用ライブラリ</h1>

<p>見当たらなかったので作成中(まだ何も動きません)<br/>
<a href="https://github.com/ota42y/go-tumblr">https://github.com/ota42y/go-tumblr</a></p>

<p>goのテストは特殊なフレームワークとか作らずに、普通にコードとして書くのを推奨しているそうです。<br/>
rspecとかで専用のフレームワークにそって作るのとは大違い。<br/>
書くのは面倒だけど、フレームワークの知識が無くても大丈夫というのは良いかもしれません。</p>

<p>フレームワークの学習コストとそれによって得る効率化と、使わないことによる効率の低下とどっちが得なのでしょうか。
あと外部APIなので秘密情報をどうやってテストの時に設定するかが課題です。<br/>
毎回書いては消すのはとても面倒なので…</p>

<h1>UIと強結合しているテスト</h1>

<p>cocos2d-xを使ってiPhoneアプリを作成していると、ゲームUIでTDDとかするのは実質不可能ではないかなと思います。
これはおそらくUI層の正しさが、状態に強く依存するのが原因です。</p>

<p>ボタンを配置してタッチで特定のメソッドを呼び出すような場合、<br/>
ボタンが画面上に表示されるかは、他のよりZ座標が大きいオブジェクトと被さっていないかをチェックする必要や、<br/>
より優先度の高いタッチオブジェクトが存在しないかといったことをチェックする必要があります。<br/>
さらに、演出中は表示されるけどタッチは出来ないなど、その部分以外の所の状態によって結果を変える必要があります。</p>

<p>つまり、新しいボタンを配置するためには様々な状態のテストを作成し、<br/>
かつほかのオブジェクトに対して新しい状態を追加することになるため、テストの変更がとても大きくなります。<br/>
そのため、UI層でテストをする場合、作成・維持ともにとても大きくなっていくため、<br/>
完全に不可能ではないですがコストか高く、現実的に出来るものではありません。</p>

<p>ただし、UIコンポーネントについて個別にテストするのは有効だと思います。<br/>
例えばボタンクラスであればタッチした時に、コールバックが呼ばれるか、範囲外の時に呼ばれないか等です。<br/>
ただし、UIを作る際に個別にクラスを作ることはそんなに多くなく、<br/>
多くがコンポーネントの配置と、その画面専用ロジックとのつなぎになるため、大きな効果は見込めなさそうです。</p>

<p>なお、ゲームはそもそも共通で使う部分が少なく、画面内の状態がとても多いという前提があります。<br/>
例えば通販サイトではヘッダーやサイドバーは共通で使い、メインの部分とは独立していますし、<br/>
メインの部分も商品データが違うだけでテンプレートは同じといったように、共通で使う部分が多いので、<br/>
そのような部分のテストは有効ではないかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[参加記録 Jenkins ユーザ・カンファレンス 2015 東京]]></title>
    <link href="http://ota42y.com/blog/2015/01/11/jenkins-conference/"/>
    <updated>2015-01-11T18:26:43+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/11/jenkins-conference</id>
    <content type="html"><![CDATA[<p><a href="http://build-shokunin.org/juc2015/">Jenkins ユーザ・カンファレンス 2015 東京</a>に参加しました。<br/>
<a href="http://togetter.com/li/765735">Togetterまとめ</a></p>

<h1>発表まとめ</h1>

<h2>アンケート結果</h2>

<ul>
<li>参加申し込み時のアンケート結果</li>
<li>多くの人のjobの数が1〜数個程度</li>
<li>Jenkins無くても生きていける人が30％ぐらい</li>
<li>思ったよりもみんなJenkinsを使い込んでいない印象</li>
<li>アンケート結果は後日公開</li>
</ul>


<h2>Jenkinsプロジェクトの現状とワークフロー</h2>

<ul>
<li>DotCiが良さそう

<ul>
<li><a href="https://github.com/groupon/DotCi">https://github.com/groupon/DotCi</a></li>
<li>Jenkinsを他のCIサービスみたいにする</li>
<li>Github限定</li>
<li>設定をYAMLファイルで管理出来たりする</li>
</ul>
</li>
<li>Workflow Pluginすごい

<ul>
<li>Build Flow Pluginをいっそう強化した版</li>
<li>ビルドが失敗しても途中から再開とかも出来る</li>
<li>乗り換えよう</li>
<li>ただ、DSLを覚えたりと学習コストが高くなるので秘伝のタレ化の危険が</li>
</ul>
</li>
</ul>


<h2>JenkinsとSeleniumの活用事例：試験自動化のプロジェクトへの導入</h2>

<ul>
<li>アジャイル開発だとイテレーション毎に試験項目は増えていくが、開発後半になるほど試験に割ける時間は減る

<ul>
<li>あるあるすぎる</li>
<li>試験自動化で試験項目の消化にかかるコストを下げる</li>
</ul>
</li>
<li>スクリーンショットを撮って画像比較して変更検知

<ul>
<li>静的な画面なら効果的っぽい</li>
<li>アニメーションする場合は撮るタイミングによりそうなので、目で比較かなぁ…</li>
</ul>
</li>
<li>テストケースの保守大変そう

<ul>
<li>ちょっと変わっただけで使えなくなるし</li>
</ul>
</li>
</ul>


<h2>Jenkinsを使ったコンシューマゲームでのデプロイとテスト</h2>

<ul>
<li><a href="http://www.slideshare.net/swiftnest/jenkins-43394510">http://www.slideshare.net/swiftnest/jenkins-43394510</a></li>
<li>圧縮して6GB、11万ファイルのプロジェクト

<ul>
<li>2プラットフォーム2言語にビルド</li>
<li>これで中規模ぐらいと凄い世界が…

<ul>
<li>FFとかどんだけなんだろう…</li>
</ul>
</li>
</ul>
</li>
<li>フルビルドに14時間かかる

<ul>
<li>リソースの事前処理に時間がかかる

<ul>
<li>リソース内での分岐処理が遅いため、全条件分のリソースを作る</li>
</ul>
</li>
<li>データを実機上でビルドする必要がある

<ul>
<li>携帯機は貧弱なので差分ビルドでも4時間かかったりする</li>
<li>プラットフォームで互換性なし

<ul>
<li>PS3はビッグエンディアン</li>
<li>VITAはリトルエンディアン</li>
</ul>
</li>
</ul>
</li>
<li>ファイルをパックするのでキャッシュが効かない

<ul>
<li>ファイルアクセス回数を減らすため必須</li>
<li>全データを実機でパックするため6時間ぐらい</li>
</ul>
</li>
</ul>
</li>
<li>頑張って並列化して5〜9時間ぐらいまで減らす

<ul>
<li>データの処理を4台で並列化

<ul>
<li>一台4時間ぐらいに短縮</li>
</ul>
</li>
</ul>
</li>
<li>テスト

<ul>
<li>テストフレームワークなど無い</li>
<li>スモークテスト

<ul>
<li>特定ミッションに入れるかどうかをテスト

<ul>
<li>引数で専用のミッションを始められるように

<ul>
<li>一定時間たったら終了させる</li>
<li>正常終了しなかったらエラー</li>
</ul>
</li>
<li>起動からスタート、終了までがちゃんと動くか</li>
<li>リソースに問題ないか</li>
</ul>
</li>
<li>エフェクト再生チェック

<ul>
<li>一定時間内に終わるか</li>
</ul>
</li>
<li>データが変換可能か</li>
</ul>
</li>
<li>モンキーテスト

<ul>
<li>開始からエンディングまでの通しプレイAI

<ul>
<li>良い感じに攻撃する

<ul>
<li>適当にボタン連打</li>
</ul>
</li>
<li>適当に移動</li>
<li>何回もゲームオーバーになったら無敵＆攻撃力１００倍</li>
</ul>
</li>
<li>メニュー操作テスト

<ul>
<li>普通のUIテストっぽい</li>
</ul>
</li>
<li>長時間テスト特有のバグ発見に繋がる

<ul>
<li>リソースの解放漏れ

<ul>
<li>携帯機はスリープできるので普通は電源を切らない</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>問題点

<ul>
<li>作成やメンテナンスにコストがかかる

<ul>
<li>ゆとりがある時期にどれだけ作れるか勝負</li>
</ul>
</li>
<li>チェックに時間かかる

<ul>
<li>一日じゃ終わらない</li>
</ul>
</li>
<li>手動テストの置き換えにはならない

<ul>
<li>テストのパターンが固定化されるため、外れた部分のバグは検知不可</li>
<li>人の手のかかるテストを減らす効果</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>おばかXFDコンテスト</h2>

<ul>
<li>人は慣れる生き物

<ul>
<li>何度も通知してるとそのうち無視するようになる

<ul>
<li>エラーメールを迷惑フォルダに入れたり</li>
<li>パトランプの上に被せたり</li>
</ul>
</li>
<li>XFDによる通知で、慣れに逆らう</li>
</ul>
</li>
</ul>


<h2>LT大会</h2>

<ul>
<li>Jenkinsを使った継続的Webセキュリティテスト

<ul>
<li>継続的にセキュリティテストを実施するVAddyの話

<ul>
<li><a href="http://vaddy.net/ja/">http://vaddy.net/ja/</a></li>
</ul>
</li>
<li>ちゃんと専門家が監修しているという噂がTLに流れた</li>
</ul>
</li>
<li>Jenkinsおじさん、お堅いメガバンクに就職

<ul>
<li>金融系企業でJenkinsが使われているだと(´･_･`)！！</li>
<li>ちゃんと聞きたかったけど、時間が足りなくて終了…</li>
</ul>
</li>
<li>Jenkinsおじさんと楽しい連携ツールたち

<ul>
<li>Deploygate、Slack、Gitlabの連携話
– だいたい似たようなことしてる</li>
</ul>
</li>
<li>ゲーム業界の人がJenkinsさん3Dモデルで遊んでみた

<ul>
<li>Jenkinsの3Dモデルで遊んでる</li>
</ul>
</li>
<li>CI”じゃない方”のJenkins

<ul>
<li><a href="http://www.slideshare.net/MiuraKatsu/ci-43396873">http://www.slideshare.net/MiuraKatsu/ci-43396873</a></li>
<li>CI以外の使い道</li>
<li>cronの置き換え</li>
<li>外部ツールの連携

<ul>
<li>ピタゴラジェンキンス</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>まとめ</h1>

<ul>
<li>Jenkins単体の話はなくって、Jenkinsと○○連携してこう使ってますが多かった

<ul>
<li>Jenkinsを使うのは普通な世界になってる気がする</li>
</ul>
</li>
<li>ちょこっとだけ設定を変えたJobが乱立するのはどこも同じっぽい

<ul>
<li>Workflow Pluginでそのあたりを吸収できそう</li>
</ul>
</li>
<li>会場設備が凄く良い

<ul>
<li>ネット快適、教室は電源とLAN完備</li>
<li>法政大学凄すぎる</li>
</ul>
</li>
<li>Tシャツがフリー配布されてた

<ul>
<li>太っ腹</li>
<li><blockquote class="twitter-tweet" lang="ja"><p>全てご自由にお持ちくださいらしい。 <a href="https://twitter.com/hashtag/juc2015?src=hash">#juc2015</a> <a href="http://t.co/0C4ZcEfHXg"><a href="http://t.co/0C4ZcEfHXg">http://t.co/0C4ZcEfHXg</a></a></p>&mdash; おおた (@ota42y) <a href="https://twitter.com/ota42y/status/554113306349539328">2015, 1月 11</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年2週目まとめ]]></title>
    <link href="http://ota42y.com/blog/2015/01/10/summary/"/>
    <updated>2015-01-10T20:44:25+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/10/summary</id>
    <content type="html"><![CDATA[<p>毎週やったことをまとめることで、その週を振り替えられるのではないかと思ったので、土曜か日曜ぐらいにその週のまとめを書きます。<br/>
主に1記事にするには難しいものや、失敗してダメだったものをまとめていく予定です。</p>

<p>思った以上に面倒なので、来週はしないかもしれません…</p>

<h1>なんでブログに書くのか</h1>

<p>テキストでローカルに持っていても良いんですが、そうするとファイル管理が面倒になります。<br/>
こうやってブログに書いておけば検索エンジンからたどれますし、個々のファイルの管理をしなくて良くなります。</p>

<p>また、<a href="http://ota42y.com/blog/2014/12/31/150-output/">GithubのContributionsを使ってアウトプットを150日続ける</a>でも書いたように、振り返りで1コミット稼げるので、振り返りをしっかりするようになるという狙いもあります。</p>

<h1>node-tumblrのテストが動かせなかった</h1>

<p><a href="https://github.com/meritt/node-tumblr">node-tumblr</a>でリブログする機能が欲しかったので追加しようかと思いましたが、
そもそも今の状態のテストができなくて諦めました。</p>

<p>例えばtwitterであれば、自分のfav一覧を正常に取れるかをテストするためには、
テストするアカウントでfavしておかなければなりません。
同じようなことがnode-tumblrのテストでも起きているのですが、
その準備に必要なものが何なのかがわからないため、テストできませんでした。</p>

<p>テストを書くことも大事ですが、テストを実行するための手順を整えておくのも大事ですね…</p>

<h1>node-ircへのPRが取り込まれた</h1>

<p>7月ぐらいに出した<a href="https://github.com/martynsmith/node-irc">node-irc</a>のPRが取り込まれました。内容としては<a href="http://ota42y.com/blog/2014/08/09/irc/">IRCはCL-LFでメッセージを区切る</a>に書いたように、古いサーバーは別の改行コードを送ってくるため、両方に対応できるようにする修正です。<br/>
<a href="https://github.com/martynsmith/node-irc/pull/280">https://github.com/martynsmith/node-irc/pull/280</a><br/>
ブランチ戦略が変わったらしく、出し直したためコミットは新しくなっています。</p>

<p>PRにたいしてツッコミが来たり、出された反論コードがおかしいので、ちゃんと修正すれば動くよと返したりと大変でした。
英語でのコミュニケーションは言いたいことをどう書けばいいか解らないので大変です…ボギャブラリー不足ですね。</p>

<h1>インターステラーとベイマックスを観た</h1>

<p>ベイマックスは本国ではBig Hero 6というタイトルで公開されていて、
そのタイトル通り、ベイマックスのみが主人公ではなく、彼？を含む6人がアメコミヒーローになるという話だった。
また、映画の舞台が日本の風景をピクサー風に仕上げた街であり、主人公も日本人風の名前や顔立ちだったりと、
随所に日本リスペクトが見られました。</p>

<p>インターステラーは近年には珍しい本気で作られたSF映画で、これSF詳しくない人には辛いんじゃないかな？
と心配になるぐらい、しっかりとSFしています。
私は大好物ですが、興行収入が良いのかどうかは謎ですね。</p>

<p>映像としては専門家の監修の元でしっかりとした映像が作られており、
また、おそらく随所に2001年宇宙の旅のリスペクトっぽい部分があったのが面白かったです。</p>

<p>特に好きなシーンは、物語の中盤で主人公が仲間の感情的な意見をバッサリと切り捨てて合理的な判断をしたのと、
最後の方のシーンですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macのghcは改行コードがCRだと動かない]]></title>
    <link href="http://ota42y.com/blog/2015/01/07/mac-ghc-cr/"/>
    <updated>2015-01-07T07:55:16+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/07/mac-ghc-cr</id>
    <content type="html"><![CDATA[<p>Haskellでどう見ても文法的に間違っていないのに、<br/>
何故かコンパイルエラーになっていましたが、<br/>
改行コードが原因でした。</p>

<p>ちょうど始めたばかりで、実は文法ミスや、<br/>
バージョン違いとの切り分けが大変でしたが、<br/>
結果は残念な結果になりました…</p>

<h1>まとめ</h1>

<ul>
<li>GHCではLF、CRLFは正しく動くがCRはダメ</li>
<li>PDFからサンプルコードをコピペしたらCRになっていた

<ul>
<li>Macのプレビューでいくつか試したが、現状全てCRになる</li>
<li>PDFが原因か、Preview.appがそういう仕様なのかは用検証</li>
</ul>
</li>
</ul>


<h1>調査方法</h1>

<p>以下のファイルを改行コードLFで保存します。</p>

<p>lf.hs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>plus :: Integer -&gt; Integer -&gt; Integer
</span><span class='line'>plus a b = a + b
</span><span class='line'>
</span><span class='line'>main = print (plus 40 2)</span></code></pre></td></tr></table></div></figure>


<p>LFのまま実行します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>file lf.hs
</span><span class='line'># lf.hs: ASCII text
</span><span class='line'>runghc lf.hs
</span><span class='line'># 42</span></code></pre></td></tr></table></div></figure>


<p>CRLFに変換して実行します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nkf -Lw lf.hs &gt; crlf.hs
</span><span class='line'>file crlf.hs
</span><span class='line'># crlf.hs: ASCII text, with CRLF line terminators
</span><span class='line'>runghc crlf.hs
</span><span class='line'>42</span></code></pre></td></tr></table></div></figure>


<p>CRに変換して実行します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nkf -Lm lf.hs &gt; cr.hs
</span><span class='line'>file cr.hs
</span><span class='line'># cr.hs: ASCII text, with CR line terminators
</span><span class='line'>runghc cr.hs
</span><span class='line'># cr.hs:1:62: parse error on input ‘=’</span></code></pre></td></tr></table></div></figure>


<p>失敗しますね(´・_・`)</p>

<h1>何故CRが紛れ込んだか</h1>

<p>最近のmacは改行コードがLFですし、CRが混入するのは中々ありません。</p>

<p>今回は、ちょうどサンプルに使っているPDFからコードをコピペしたところ、<br/>
改行コードがCRになっていたのが原因でした。</p>

<p>いくつかのPDFでやってみましたが、全てCRになっており、<br/>
Preview.appで必ずCRにされるのか、PDF自体がCRなのかは切り分けが必要です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インライン展開についての追加調査]]></title>
    <link href="http://ota42y.com/blog/2015/01/06/c-inline-postscript/"/>
    <updated>2015-01-06T07:37:34+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/06/c-inline-postscript</id>
    <content type="html"><![CDATA[<p>昨日の記事で、インライン展開について調べましたが、<br/>
よくよく考えると片手落ちだったので追加調査しました。</p>

<p><a href="http://ota42y.com/blog/2015/01/05/c-inline/">インライン展開がどう展開されるのかを調べた</a></p>

<h1>調査内容</h1>

<p>昨日はヘッダと実装が書いてあるファイルとでの差は調べましたが、<br/>
同じファイル内でどのようになるかは調べていませんでしたので、<br/>
追加調査しました。</p>

<p>方法は昨日と同じく、-Sオプションをつけて結果を見ます。</p>

<h1>ソースコード</h1>

<p>以下のようなファイルを使います</p>

<p>test.cpp</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;func.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">TestA</span> <span class="n">test</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">getDirect</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">getThrough</span><span class="p">();</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>func.h</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">TestA</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getDirect</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">getThrough</span><span class="p">();</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getPrivate</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>func.cpp</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;func.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getDirect</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getThrough</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">getDirect</span><span class="p">()</span> <span class="o">+</span> <span class="n">getPrivate</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getPrivate</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">73</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>func.cppのgetThrough関数に対して、インライン展開が行われる事が予想されますが、<br/>
getDirect関数は外部からも呼ばれるため、展開しても関数そのものは必要です。<br/>
getPrivate関数は外部から呼ばれないため、インライン展開後に消してしまう可能性があります。</p>

<h1>最適化しない場合</h1>

<p>3つの関数は全て普通にコンパイルされました。</p>

<h1>最適化した場合</h1>

<h2>同じファイル内のインライン展開</h2>

<p>getThrough関数は以下のようになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="nl">__ZN5TestA10getThroughEv</span><span class="p">:</span>               <span class="err">##</span> <span class="err">@</span><span class="n">_ZN5TestA10getThroughEv</span>
</span><span class='line'><span class="n">pushq</span>  <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="n">movq</span>   <span class="o">%</span><span class="n">rsp</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="n">movl</span>   <span class="err">$</span><span class="mi">115</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'><span class="n">popq</span>   <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="n">retq</span>
</span></code></pre></td></tr></table></div></figure>


<p>42+73=115なので、インライン展開と最適化がされているのがわかります。<br/>
そのため、同じファイル内なら、ヘッダに書いていなくても勝手にインライン展開されるみたいです。</p>

<p>よくよく考えると、includeが処理されるのはプリプロセスのタイミングで処理されます。<br/>
そのため、コンパイラは全てのヘッダファイルが展開された状態のテキストしか受け取りません。<br/>
なので、どのファイルに関数が書かれているかは関係ないと思われます。</p>

<h2>インライン展開後の関数</h2>

<p>getDirect関数とgetPrivate関数ですが、どちらも最適化していない場合と同じく、<br/>
関数が出力されていました。</p>

<p>getDirect関数はpublic指定されているため、<br/>
外部から参照される場合のために展開後も関数が残されるのは予想通りです。</p>

<p>getPrivate関数はprivate指定されているため継承先のクラスから呼ばれることはなく、<br/>
かつこのクラスはfriend指定もされていないため、外部から呼び出されることはありません。<br/>
そのため、インライン展開後をして同じクラス内から呼ばれないことが確定した時点で、<br/>
この関数を出力する必要は無さそうなのですが、なぜ消さないのかは不明です。</p>

<h1>まとめ</h1>

<ul>
<li>同じファイル内でもインライン展開は行われる

<ul>
<li>O3ならinline宣言とか要らない</li>
</ul>
</li>
<li>インライン展開しても、展開元の関数は残る

<ul>
<li>ヘッダファイルに書いた関数は展開元が消えたので挙動が違う</li>
<li>publicはリンクされるまで呼ばれるかわからないので消せない

<ul>
<li>privateは呼ばれない事が確定するはずだが何故か消さない</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インライン展開がどう展開されるのかを調べた]]></title>
    <link href="http://ota42y.com/blog/2015/01/05/c-inline/"/>
    <updated>2015-01-05T07:51:43+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/05/c-inline</id>
    <content type="html"><![CDATA[<p>C++コンパイラは、関数呼び出し部分にその関数の内容を展開し、<br/>
関数呼び出しのオーバーヘッドを削減する、インライン展開をします。</p>

<p>インライン展開はコンパイル時にされるため、<br/>
実際に行われたのか、どう行われているかは出力されません。</p>

<p>そのため、コンパイルたコードがどうなってるかを調べ、<br/>
インライン展開がどう展開しているのかを調べました。</p>

<p>なお、アセンブラに関してはほとんど説明しません。<br/>
「callq シンボル名(文字列)」で関数呼び出しを実行する事だけ理解していれば大丈夫です。</p>

<h1>ソースコード</h1>

<p>以下のソースコードを使います</p>

<p>test.cpp</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;stdio.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;func.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">TestA</span> <span class="n">test</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">getNumInCpp</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">getNumInH</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">getNumInline</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">getNumCallCpp</span><span class="p">();</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d %d %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>func.h</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">TestA</span><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">privateFunc</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getNumInCpp</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">getNumInH</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">getNumCallCpp</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">privateFunc</span><span class="p">()</span> <span class="o">+</span> <span class="n">getNumInH</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">getNumInline</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//int getNumNormal();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">inline</span> <span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getNumInline</span><span class="p">(){</span><span class="k">return</span> <span class="mi">321</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// そもそも定義できない</span>
</span><span class='line'><span class="c1">// int TestA::getNumNormal(){return 111;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>func.cpp</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;func.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">privateFunc</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">123</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getNumInCpp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">73</span> <span class="o">+</span> <span class="n">getNumInH</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>内容としては、</p>

<ul>
<li>getNumInCpp()

<ul>
<li>cpp内に関数の中身が書かれている</li>
<li>cpp内のものはインライン展開されないはず</li>
</ul>
</li>
<li>getNumInH()

<ul>
<li>ヘッダファイル内に関数の中身が置かれている</li>
<li>インライン展開される</li>
</ul>
</li>
<li>getNumInline()

<ul>
<li>インライン不可能なprivateメソッドと、cpp内の関数を呼ぶ</li>
</ul>
</li>
<li>getNumCallCpp()

<ul>
<li>明示的にインライン展開指定をしたもの</li>
<li>インライン展開される</li>
</ul>
</li>
</ul>


<p>になります。</p>

<h1>最適化しない場合</h1>

<p>まずは最適化オプションをつけずにコンパイルしました。<br/>
<code>g++ -S test.cpp func.cpp</code></p>

<p>そのため、インライン展開はされません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">subq</span>   <span class="err">$</span><span class="mi">32</span><span class="p">,</span> <span class="o">%</span><span class="n">rsp</span>
</span><span class='line'><span class="n">leaq</span>   <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="n">movl</span>   <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">__ZN5TestA11getNumInCppEv</span> <span class="err">#</span> <span class="p">(</span><span class="err">変数</span><span class="n">a</span><span class="err">の計算</span><span class="p">)</span>
</span><span class='line'><span class="n">leaq</span>   <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">-</span><span class="mi">12</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">__ZN5TestA9getNumInHEv</span> <span class="err">#</span> <span class="p">(</span><span class="err">変数</span><span class="n">b</span><span class="err">の計算</span><span class="p">)</span>
</span><span class='line'><span class="n">leaq</span>   <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">-</span><span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">__ZN5TestA12getNumInlineEv</span> <span class="err">#</span> <span class="p">(</span><span class="err">変数</span><span class="n">c</span><span class="err">の計算</span><span class="p">)</span>
</span><span class='line'><span class="n">leaq</span>   <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">__ZN5TestA13getNumCallCppEv</span> <span class="err">#</span> <span class="p">(</span><span class="err">変数</span><span class="n">d</span><span class="err">の計算</span><span class="p">)</span>
</span><span class='line'><span class="n">leaq</span>   <span class="n">L_</span><span class="p">.</span><span class="n">str</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">-</span><span class="mi">24</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">-</span><span class="mi">12</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">esi</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">-</span><span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">edx</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">-</span><span class="mi">20</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">ecx</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">-</span><span class="mi">24</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">r8d</span>
</span><span class='line'><span class="n">movb</span>   <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="o">%</span><span class="n">al</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">_printf</span>
</span></code></pre></td></tr></table></div></figure>


<p>callqで4種類の関数を全て呼び出しているのがわかります。<br/>
インライン展開はされていないため、func.hやfunc.cppで直接書いている数値はどこにも出てきません。</p>

<h1>最適化した場合</h1>

<p>O3オプションをつけてインライン展開されるようにしました。<br/>
<code>g++ -S -O3 test.cpp func.cpp</code></p>

<p>なお、#で注釈を入れています</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">leaq</span>   <span class="o">-</span><span class="mi">24</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'><span class="n">movq</span>   <span class="o">%</span><span class="n">rbx</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># getNumInCppの呼び出し(変数aの計算)</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">__ZN5TestA11getNumInCppEv</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">r14d</span>
</span><span class='line'><span class="n">movq</span>   <span class="o">%</span><span class="n">rbx</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="cp"># privateFuncの呼び出し(変数dの計算)</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">__ZN5TestA11privateFuncEv</span>
</span><span class='line'><span class="cp"># getNumInHの結果が直接書かれている(変数dの計算)</span>
</span><span class='line'><span class="n">leal</span>   <span class="mi">42</span><span class="p">(</span><span class="o">%</span><span class="n">rax</span><span class="p">),</span> <span class="o">%</span><span class="n">r8d</span>
</span><span class='line'><span class="n">leaq</span>   <span class="n">L_</span><span class="p">.</span><span class="n">str</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="cp"># getNumInHの結果が直接書かれている(変数bの計算)</span>
</span><span class='line'><span class="n">movl</span>   <span class="err">$</span><span class="mi">42</span><span class="p">,</span> <span class="o">%</span><span class="n">edx</span>
</span><span class='line'><span class="cp"># getNumInlineの結果が直接書かれている(変数cの計算)</span>
</span><span class='line'><span class="n">movl</span>   <span class="err">$</span><span class="mi">321</span><span class="p">,</span> <span class="o">%</span><span class="n">ecx</span>
</span><span class='line'><span class="n">xorl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">%</span><span class="n">r14d</span><span class="p">,</span> <span class="o">%</span><span class="n">esi</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># printfの呼び出し</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">_printf</span>
</span></code></pre></td></tr></table></div></figure>


<p>最適化した場合、関数呼び出しの量も内容もかなり変化しています。</p>

<p>一番初めのgetNumInCpp関数はcppに書かれており、インライン展開が出来ないため、<br/>
最適化しない場合と同じく関数呼び出しをしています。</p>

<p>次にprivateFunc関数の呼び出しを行っていますが、<br/>
これはgetNumCallCpp関数が展開され、それ以上展開できないprivateFunc関数と、<br/>
42を返すだけのgetNumInH関数がさらにインライン展開されたものと思われます。<br/>
privateFunc関数はprivateメソッドですが、アセンブラではアクセス指定子は無視されます。</p>

<p>また、321を返すgetNumInline関数もインライン展開されて直接数値が書かれているのがわかります。</p>

<p>なお、ソースコード上で変数bやcに代入している部分は、<br/>
直接値を書いてある状態と同じになるようにインライン展開されるため、<br/>
コンパイラの最適化によって処理順番を入れ替えられ、printfへの呼び出し直前に移動させられています。</p>

<h1>インライン指定しない場合のエラー</h1>

<p>コメントアウトしてあるgetNumNormal関数は、ヘッダファイル内でインライン指定をせずに定義しています。<br/>
このコメントアウトを戻すと、以下のエラーにより失敗します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">duplicate</span> <span class="n">symbol</span> <span class="n">__ZN5TestA12getNumNormalEv</span> <span class="nl">in</span><span class="p">:</span>
</span><span class='line'><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">folders</span><span class="o">/</span><span class="n">md</span><span class="o">/</span><span class="n">b8zf203j65b0qt_t4439fdvm0000gp</span><span class="o">/</span><span class="n">T</span><span class="o">/</span><span class="n">test</span><span class="o">-</span><span class="mf">837e1</span><span class="n">d</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">folders</span><span class="o">/</span><span class="n">md</span><span class="o">/</span><span class="n">b8zf203j65b0qt_t4439fdvm0000gp</span><span class="o">/</span><span class="n">T</span><span class="o">/</span><span class="n">func</span><span class="o">-</span><span class="n">c8b605</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'><span class="nl">ld</span><span class="p">:</span> <span class="mi">1</span> <span class="n">duplicate</span> <span class="n">symbol</span> <span class="k">for</span> <span class="n">architecture</span> <span class="n">x86_64</span>
</span><span class='line'><span class="nl">clang</span><span class="p">:</span> <span class="nl">error</span><span class="p">:</span> <span class="n">linker</span> <span class="n">command</span> <span class="n">failed</span> <span class="n">with</span> <span class="n">exit</span> <span class="n">code</span> <span class="mi">1</span> <span class="p">(</span><span class="n">use</span> <span class="o">-</span><span class="n">v</span> <span class="n">to</span> <span class="n">see</span> <span class="n">invocation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>sファイルの作成には成功するため調べてみたところ、
getNumNormal関数がfunc.sとtest.s両方に定義されていました。</p>

<p>この関数はインライン展開されないため、func.hを読み込むtest.cppとfunc.cpp両方で定義されてしまい、<br/>
duplicate symbolになっています。</p>

<p>インライン展開されるgetNumInline関数は、関数自体はどこにも定義されないため二重定義にはならず、<br/>
問題なく動いているようです。</p>

<h1>まとめ</h1>

<ul>
<li>最適化しないとインライン展開されない</li>
<li>hファイルの中に実装を書くとインライン展開される

<ul>
<li>そもそもインライン展開しないとduplicateになる

<ul>
<li>そのため、ヘッダに書いた関数は全てインライン展開されるはず?</li>
</ul>
</li>
</ul>
</li>
<li>cppファイルに実装を書くとインライン展開されない

<ul>
<li>include対象に入ってないのだからあたりまえ</li>
<li>複数のcppファイルに書かれた内容を繋げるのはリンク時なのでコンパイル後</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UNIXという考え方という本を読んだ]]></title>
    <link href="http://ota42y.com/blog/2015/01/04/unix-boox/"/>
    <updated>2015-01-04T11:22:27+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/04/unix-boox</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/UNIX%E3%81%A8%E3%81%84%E3%81%86%E8%80%83%E3%81%88%E6%96%B9%E2%80%95%E3%81%9D%E3%81%AE%E8%A8%AD%E8%A8%88%E6%80%9D%E6%83%B3%E3%81%A8%E5%93%B2%E5%AD%A6-Mike-Gancarz/dp/4274064069">UNIXという考え方</a>という本を読みました。<br/>
原著は1994年に書かれている本で、
<a href="http://ja.wikipedia.org/wiki/UNIX%E5%93%B2%E5%AD%A6">UNIXの哲学</a>を一つ一つ、その意味と利点について解説しています。</p>

<p>「一つのことを、うまくやれ」や「小さいものは美しい」等、ある程度ハッカー文化に詳しい人ならばどれかは聞いたことがあるぐらい有名な哲学です。</p>

<p>面白いのは、例えば「できるだけ早く試作を作成する」という項目では、設計を完璧にしてから取りかかるのではなく、
プロトタイプを作り、それをユーザに見せてフィードバックをもらい、良い設計にしていくべきと述べられています。<br/>
これはアジャイル開発のイテレーションを回していく手法ととても似ており、開発手法の歴史を感じます。</p>

<p>また、「一つのことを、うまくやれ」は色々やる巨大な関数より、ちゃんと機能毎に分割しろと解釈できますし、「ソフトウェアの挺子（てこ）を有効に活用する」は他のいいプログラムからコードを借りてきたり、gemやnpmで既にあるソフトウェアを利用するといった、コードの再利用性の話だと解釈できます。</p>

<p>原著は1994年に書かれたにもかかわらず、今日でも普通に通用する哲学がちりばめられており、UNIX哲学の現代のプログラミング文化への強い影響と、その普遍性をかんじます。</p>

<p>ただ、本書の中でシェルスクリプトが移植性もいいし簡潔に書けるしと礼賛されていますが、デバッグしにくい上に、コマンドがGNUかBSDかで結果が変わる場合があるので実は移植性がそんなに無いですし、現代ではちょっとどうなのかな…みたいな部分もあります。<br/>
今ですと、スクリプト言語かクロスコンパイルが簡単にできるGo言語が良い選択肢でしょうか。</p>

<p>そういった具体的な部分に関しては時代の変化で合わなくなっている部分もありますが、その哲学自体は普遍的なもので、今読んでも、おそらくは10年後に読んでも得るものが多い本だと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fork関数がどうやってプロセスを分割しているか]]></title>
    <link href="http://ota42y.com/blog/2015/01/03/unix-fork/"/>
    <updated>2015-01-03T20:15:43+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/03/unix-fork</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AEOS%E3%82%B3%E3%83%BC%E3%83%89%E3%83%AA%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0-~UNIX-V6%E3%81%A7%E5%AD%A6%E3%81%B6%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%81%AE%E3%81%97%E3%81%8F%E3%81%BF-Software-Design/dp/4774154644">はじめてのOSコードリーディング ~UNIX V6で学ぶカーネルのしくみ</a><br/>
という本を読んでいます。</p>

<p>この中で、fork関数がどうやって子プロセスを作り、<br/>
親子かを識別して別の値を返しているのかが解説されており、<br/>
とても興味深かったです。</p>

<p>以下にその概要をまとめました。</p>

<h1>fork関数</h1>

<p>Cではfork関数を利用することで、子プロセスを作成することが出来ます。<br/>
コードとしてはこんな感じですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/wait.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">pid_t</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;child!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;parent!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">status</span><span class="p">;</span>
</span><span class='line'>  <span class="n">waitpid</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">status</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;parent end</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>子プロセスは親プロセスのデータをそのままコピーするため、変数などは全て同じ状態になります。<br/>
ですが、fork関数は親プロセスの場合は子プロセスのIDを、子プロセスでは0を返すため、<br/>
ユーザはfork関数の戻り値を見て、自身が親なのか子なのかを区別できるようになっています。</p>

<p>では、fork関数の中ではどのようにして、親プロセスか子プロセスかを判断し、<br/>
別の値を返しているのでしょうか。</p>

<p>これは(UNIX V6では)switch関数の仕様を上手く使った実装により実現されていました。</p>

<h1>fork関数がプロセスの親子を区別する仕組み</h1>

<h2>親による子プロセスの作成</h2>

<p>ライブラリのfork関数(<a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/source/s4/fork.s">source/s4/fork.s</a>)を実行すると、<br/>
システムコールによってカーネルのfork関数(<a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/sys1.c">sys/ken/sys1.c</a>)が実行されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">fork</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">register</span> <span class="k">struct</span> <span class="n">proc</span> <span class="o">*</span><span class="n">p1</span><span class="p">,</span> <span class="o">*</span><span class="n">p2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">p1</span> <span class="o">=</span> <span class="n">u</span><span class="p">.</span><span class="n">u_procp</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">p2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">proc</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="n">p2</span> <span class="o">&lt;</span> <span class="o">&amp;</span><span class="n">proc</span><span class="p">[</span><span class="n">NPROC</span><span class="p">];</span> <span class="n">p2</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">p2</span><span class="o">-&gt;</span><span class="n">p_stat</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">found</span><span class="p">;</span>
</span><span class='line'>  <span class="n">u</span><span class="p">.</span><span class="n">u_error</span> <span class="o">=</span> <span class="n">EAGAIN</span><span class="p">;</span>
</span><span class='line'>  <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">found</span><span class="p">:</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">newproc</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">u_ar0</span><span class="p">[</span><span class="n">R0</span><span class="p">]</span> <span class="o">=</span> <span class="n">p1</span><span class="o">-&gt;</span><span class="n">p_pid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">u_cstime</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">u_cstime</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">u_stime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">u_cutime</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">u_cutime</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">u_utime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">u</span><span class="p">.</span><span class="n">u_ar0</span><span class="p">[</span><span class="n">R0</span><span class="p">]</span> <span class="o">=</span> <span class="n">p2</span><span class="o">-&gt;</span><span class="n">p_pid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">out</span><span class="p">:</span>
</span><span class='line'>  <span class="n">u</span><span class="p">.</span><span class="n">u_ar0</span><span class="p">[</span><span class="n">R7</span><span class="p">]</span> <span class="o">=+</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このカーネルのfork関数内でnewproc関数(<a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/slp.c">sys/ken/slp.c</a>)を呼び出し、子プロセスを作成しています。<br/>
その後、newproc関数は0を返すため、カーネルのfork関数で0で帰ってきた場合に、<br/>
作成した子プロセスのIDをレジスタに乗せ、ライブラリのfork関数で返すようにしています。</p>

<h2>作成された子プロセス側の処理</h2>

<p>子プロセスは作成された後、実行順番が回ってきたタイミングでswitch関数(<a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/slp.c">sys/ken/slp.c</a>)により再開します。<br/>
この関数内では保存されたデータを復元し、最後にsavu関数を実行した関数の呼び出し元に、return 1で戻ります。</p>

<p>カーネルのfork関数で呼び出しているnewproc関数(<a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/slp.c">sys/ken/slp.c</a>)内では、<br/>
savu関数が実行されてから子プロセスがコピーされるため、<br/>
switch関数はnewprocの呼び出し元であるfork関数に1で戻ります。</p>

<p>これにより、カーネルのfork関数内で呼び出しているnewproc関数は、<br/>
親プロセスの場合は0が、子プロセスの場合は1が返るようになり、<br/>
その値を見て自身が親なのか子なのかを判断でき、別々の戻り値を返せるようになっています。</p>

<h1>まとめ</h1>

<ul>
<li>親プロセスはforkで子プロセスを作成してそのまま処理を継続</li>
<li>子プロセスは実行順番が回ってきたタイミングで処理を開始

<ul>
<li>switch関数で復帰した際に、通常とは別の戻り値が返るため親子を区別可能</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
