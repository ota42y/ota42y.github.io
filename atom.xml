<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[おおたの物置]]></title>
  <link href="http://ota42y.github.io/atom.xml" rel="self"/>
  <link href="http://ota42y.github.io/"/>
  <updated>2014-07-21T21:53:01+09:00</updated>
  <id>http://ota42y.github.io/</id>
  <author>
    <name><![CDATA[ota42y]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jenkinsで複雑な処理をするときのjob構成について]]></title>
    <link href="http://ota42y.github.io/blog/2014/07/21/jenkins-architecture/"/>
    <updated>2014-07-21T21:12:36+09:00</updated>
    <id>http://ota42y.github.io/blog/2014/07/21/jenkins-architecture</id>
    <content type="html"><![CDATA[<p>変数やビルド後の通知設定等が違うために、<br/>
ほぼ同じ内容のjobを15個ぐらい使っていたら、<br/>
だんだんと運用が死んできたのでメモ。</p>

<h1>まとめ</h1>

<p>Jenkinsはプラグインの挙動を変えるのが難しいため、<br/>
ほぼ同じだけれど若干違う手順を行う必要がある場合、<br/>
似たようなjobが大量に並び、<br/>
手順の変更時などに全てのjobを変えきるのが辛くなります。</p>

<p>そこで、可能な限りビルド手順はスクリプトにするのと、<br/>
jobを種類別に細かく分け、<br/>
最上位のjobにはどの下流jobを実行するかだけを管理させることで、<br/>
複雑なjobでも変更に強くすることができるようになります。</p>

<h1>前提条件</h1>

<ul>
<li>設定が全部で7種類ぐらいある</li>
<li>1ビルドはCPUをフルパワーで使って30分程度</li>
<li>一部の設定は定期実行やマージ毎でもビルドしたい</li>
<li>設定ごとに用途や使う頻度が違う為、定期実行タイミングは個別に設定したい</li>
<li>ビルド後のデプロイ先や通知先、通知条件がいくつかある</li>
<li>ビルド手順はバージョン/デプロイ先によって変化する</li>
</ul>


<h1>問題点</h1>

<p>大きな問題として、<br/>
Jenkins pulginで提供されている機能を切り替えるのが難しいという問題があります。</p>

<p>たとえば、Jenkinsの拡張メールプラグインでは、<br/>
そのjobの結果によって通知先や通知内容等を変更することができます。<br/>
ですが、その定義自体を切り替えることが難しく、<br/>
この場合は成功時にメールしないけど、<br/>
この場合は成功時にメールするといった切り替えができませんでした。</p>

<p>また、定期的に変更チェックするブランチや、チェックする間隔が設定毎に異なりますが、<br/>
JenkinsのGit プラグインではそのあたりをうまく設定することが難しいようです。</p>

<p>他にもdeploy先によって使うプラグインが微妙に違うなどの問題があり、<br/>
ほぼ同じだけれど若干違うjobを15個並べるといった運用をしていました。</p>

<p>こんな感じに、ほぼ同じだけれど若干違うビルドが並びます。<br/>
<img src="http://ota42y.github.io/images/posts/2014-07-21-jenkins-1.png" alt="こんな感じ" /></p>

<p>結果として、ビルド手順の変更時などに全てのビルドを変更しきることが難しかったり、<br/>
古い手順のバージョンのマイクロアップデートと、<br/>
新しい手順のメジャーアップデートが重なったときに、<br/>
ビルド前にJenkinsの設定を必ず変更する必要がある等、<br/>
運用がかなり辛くなってきました。</p>

<p>これに対する対策を考えましたが、あまり良いのが無い感じですが、<br/>
とりあえずまとまったのでメモをしておきます。</p>

<h1>解決案</h1>

<h2>1.ビルド手順や通知を全てをシェルスクリプトにし、Jenkinsはシェルを叩くだけにする</h2>

<p> Jenkinsのプラグインをほぼ使用せず、全てスクリプトで解決する手法です。<br/>
 ビルド手順や通知がSCMに保存されるため、ビルド手順とバージョンが完全に紐付き、<br/>
 常に正しい手順で実行できるという利点があります。</p>

<p> だだし、Jenkinsプラグインの恩恵を得られないため、<br/>
 今プラグインでやっている処理を全て置き換える必要があります。<br/>
 また、新たな手順の追加が大変と言った問題もあります。</p>

<h2>2.ワークスペース共有を使ってうまくやる</h2>

<p>  チェックアウトとビルドジョブを切り離し、<br/>
  SCMのポーリング&amp;チェックアウトだけを行うjobから、<br/>
  ビルドジョブを下流ビルドとして呼び出す方式です。</p>

<p>  こんな感じですね。<br/>
  <img src="http://ota42y.github.io/images/posts/2014-07-21-jenkins-2.png" alt="ワークスペース共有" /></p>

<p>  ワークスペース共有を使い、<br/>
  下流ビルドは上流のワークスペース上でビルド作業を行うようにすることで、<br/>
  ビルドjobの数を大幅に減らすことができます。</p>

<p>  だだし、下流が実行中は上流ビルドが動かない事を保証しなければなりません。<br/>
  (ビルド途中に次のキューによってワークスペースが書き換えられる可能性がある)
  Parameterize pluginで下流が終わるまで終了を待つ事ができますが、<br/>
  複数のビルドが同時に走った場合にデッドロックに陥る可能性があります。
  - A-Cとビルドするjobと、B-Cとビルドするjobがあり、jenkinsの同時実行が2の場合、<br/>
   2つのビルドを同時に実行するとCが2つともキューに積まれて進まない場合がある</p>

<h2>3.jobを疎結合にして成果物を使ってうまくやる</h2>

<p>  2のデッドロックを回避するために、疎結合にした版になります。<br/>
  この方式ではワークスペースを共有せず、<br/>
  コミットのSHA1を渡してビルドジョブ側でcheckout, buildします。<br/>
  また、Remote APIを利用することで、シェルスクリプトから次に実行するビルドの指定もできます。</p>

<p>  2の利点をそのまま受け継ぎ、ワークスペース共有しないのでブロックしなくなります。<br/>
  ビルド結果などは成果物の保存と、Copy Artifact Pluginを利用して受け渡します。<br/>
  そのため、後続のjobの実行前にワークスペースが変更されても問題なく進められます。</p>

<p>  ただし、ポーリング用とビルド用とで二重にSCMをチェックアウトする必要があるのと、<br/>
  ビルドログが完全に細切れになるため追いにくく、<br/>
  またいつ何が正常に終了したかを把握しにくいという問題があります。</p>

<h2>4.master-slaveにして、masterからslaveのjobを呼び出すようにする</h2>

<p> 3のやりかたを踏まえつつ、個別のjobでは無く下流のjobとして運用する方法です。<br/>
 そのために、2で問題となっていたキューが埋まる問題への解決策を入れました。</p>

<p> 具体的には、ポーリング等を実行する最上流のjobをJenkinsのmasterでのみ実行し、<br/>
 ビルドや通知を下流jobとしてslaveでビルドするようにします。<br/>
 このように設定することで、masterが全て上流jobで埋まったとしても、<br/>
 slaveで下流jobが実行されるため、デッドロックが発生しません。</p>

<p> これにより、上流jobはビルドが完全に終了するまで終了を待つことができ、<br/>
 終了タイミングを把握しやすくなります。</p>

<p> だたし、問題点としてmaster-slave構成にするため、稼働するマシンが増える、<br/>
 jobをmasterとslaveどっちでやるかを考えないといけない、<br/>
 下流jobとして紐付けはされるが、ログはまだ細切れになっているといった問題があります。</p>

<p>とりあえず今のところは、4番が一番いい方法ではないかと考えています。<br/>
そのためしばらくこれで運用し、また問題が起きた場合、<br/>
次なる手を考えるとして、今のところは4番で行く予定です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2進数の引き算で補数を使う]]></title>
    <link href="http://ota42y.github.io/blog/2014/07/18/2jin-shu-falseyin-kisuan-debu-shu-woshi-u/"/>
    <updated>2014-07-18T00:00:00+09:00</updated>
    <id>http://ota42y.github.io/blog/2014/07/18/2jin-shu-falseyin-kisuan-debu-shu-woshi-u</id>
    <content type="html"><![CDATA[<p>2進数の引き算で補数表現を使うと足し算にできることの説明が見あたら無かったのでやってみる</p>

<p>ここでは2の補数表現の求め方がすでに解っている前提で進める、<br/>
(要するに1000-101=010+1=011は相互に変換可能ということ)</p>

<p>結果がプラスになる場合</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x        = 5 - 2 (10進数)
</span><span class='line'>x        = 101 - 010 (2進数に変換)
</span><span class='line'>x + 1000 = 101 - 010 + 1000  (両辺に+1000)
</span><span class='line'>x + 1000 = 101 + (1000 - 010)
</span><span class='line'>x + 1000 = 101 + 110 (2の補数表現)
</span><span class='line'>x + 1000 = 1011
</span><span class='line'>x        = 1011 - 1000
</span><span class='line'>x        = 11
</span><span class='line'>x        = 3 (10進数に変換)</span></code></pre></td></tr></table></div></figure>


<p>結果がマイナスになる場合</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x        = 2 - 5 (10進数)
</span><span class='line'>x        = 010 - 101 (2進数に変換)
</span><span class='line'>x + 1000 = 010 - 101 + 1000  (両辺に+1000)
</span><span class='line'>x + 1000 = 010 + (1000 - 101)
</span><span class='line'>x + 1000 = 010 + 011 (2の補数表現)
</span><span class='line'>x + 1000 = 101
</span><span class='line'>x        = 101 - 1000
</span><span class='line'>x        = - (1000 - 101)
</span><span class='line'>x        = - (11) (2の補数表現)
</span><span class='line'>x        = - (3) (10進数に変換)
</span><span class='line'>x        = - 3</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Kaigiに行ってきた]]></title>
    <link href="http://ota42y.github.io/blog/2014/06/03/github-kaigi/"/>
    <updated>2014-06-03T22:49:12+09:00</updated>
    <id>http://ota42y.github.io/blog/2014/06/03/github-kaigi</id>
    <content type="html"><![CDATA[<h1>スライドまとめ</h1>

<ul>
<li><p><a href="http://hiroki.jp/githubkaigi">GitHub実践入門は活用するためのガイドブック</a></p></li>
<li><p><a href="https://speakerdeck.com/shibayu36/hatenaburogutimufalsekai-fa-hurotogithub">はてなブログチームの開発フローとGitHub</a></p></li>
<li><p><a href="https://speakerdeck.com/a_matsuda/oss-to-github">OSS と GitHub</a></p></li>
<li><p><a href="https://speakerdeck.com/cobyism/how-github-works-github-kaigi-tokyo-2014">How GitHub Works (GitHub Kaigi, Tokyo, 2014)</a></p></li>
<li><p><a href="http://www.slideshare.net/inao/githubkaigi">GitHubで雑誌・書籍を作る</a></p></li>
<li><p><a href="https://www.dropbox.com/s/utaud80bk5egse3/Atom%20%E2%80%93%20GitHub%20Kaigi_jp.pdf">Atom, the Programmable Text Editor</a></p></li>
<li><p><a href="https://speakerdeck.com/yuku/ru-men-shu-nihazai-tutenai-git-and-github-tips">入門書には載ってない Git &amp; GitHub Tips</a></p></li>
</ul>


<p>LTは用事があって聞けませんでした…(´･_･`)</p>

<h1>感想</h1>

<h2>全体的な感想</h2>

<p>githubのハックや事例はもちろんですが、<br/>
どちらかというとgithubを利用してのワークフローとか、<br/>
エンジニアを含む環境がどう変化したか的なお話が多かったです。</p>

<p>一番はじめの、GitHub実践入門や、Gitのティップスに関しては、<br/>
すぐに導入したいような内容ばかりでした。<br/>
特に前者は凄くいい本っぽかったので(載せられてる)、会場で注文しましたw</p>

<p><img src="http://ota42y.github.io/images/posts/2014-06-03-github-kaigi.jpg" alt="届いた" /></p>

<h2>Atomの発表が凄かった</h2>

<p>他にもいろいろ発表がありましたが、特に私にヒットしたのは、Atomのプレゼンでした。</p>

<p>AtomはChromiumベースで、エディタ部分をHTML5/CSSで作っているので、<br/>
Developer Toolsを使ってWebサイトのように、Atomのデザインを変えられます。<br/>
プレゼン中に変更している様子を見せてもらいましたが、<br/>
本当に何でもリアルタイムで変更できて凄く未来を感じました。</p>

<p>また、DOM要素を直接いじることで、APIが提供されていなくても、<br/>
画面上の全ての要素(Macのメニューバーに出てる部分ですら！）を<br/>
自由に変更することが可能で、javascriptをコンソールに書いて、<br/>
新しいメニューがついたのは本当に度肝を抜かれました。</p>

<p>スライドの資料には映像がないため、<br/>
後日映像がアップロードされるのを待つしか無いのが凄く残念ですが、<br/>
とにかく未来を感じるエディタでした。</p>

<p>もの凄くおもしろかったので、第二回開催はまだですかね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webで何かを作る人誰もが読むべき本だった - ハイパフォーマンス ブラウザネットワーキング]]></title>
    <link href="http://ota42y.github.io/blog/2014/05/13/browser-networking/"/>
    <updated>2014-05-13T22:30:54+09:00</updated>
    <id>http://ota42y.github.io/blog/2014/05/13/browser-networking</id>
    <content type="html"><![CDATA[<p>丸一日かけて読んだので書評っぽいのを。</p>

<p>Webで何かしようとする人はどのレイヤの人も必読だと思います。<br/>
インフラはもちろんのこと、アプリを作っている人も知らないでは済まされません。</p>

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116767/ota42y-22/ref=nosim/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51x2sA8N%2BTL._SL160_.jpg" alt="ハイパフォーマンス ブラウザネットワーキング ―ネットワークアプリケーションのためのパフォーマンス最適化" /></a><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116767/ota42y-22/ref=nosim/" target="_blank">ハイパフォーマンス ブラウザネットワーキング ―ネットワークアプリケーションのためのパフォーマンス最適化</a></p>

<h1>概要</h1>

<p>目次としてはこんな感じで、TCP/UDPから無線ネットワークの特性から最新のプロトコルまで、<br/>
今のインターネットに触れる場合に触りそうな部分を、だいたいカバーしてます。<br/>
特にTCPとHTTP、WebRTCについてはとてもしっかりと書かれていました。</p>

<p>また具体的な最適化や、目次に乗っていない関係する技術に関してはかなりばっさり切り落としており、<br/>
取り扱っている内容の割にはすんなり読むことができました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1章　レイテンシ・帯域幅入門
</span><span class='line'>2章　TCPの構成要素
</span><span class='line'>3章　UDPの構成要素
</span><span class='line'>4章　TLS
</span><span class='line'>
</span><span class='line'>II部　ワイヤレスネットワークのパフォーマンス
</span><span class='line'>
</span><span class='line'>5章　ワイヤレスネットワーク入門
</span><span class='line'>6章　WiFi
</span><span class='line'>7章　モバイルネットワーク
</span><span class='line'>8章　モバイルネットワークの最適化
</span><span class='line'>
</span><span class='line'>III部　HTTP
</span><span class='line'>
</span><span class='line'>9章　HTTPの歴史
</span><span class='line'>10章　Webパフォーマンス入門
</span><span class='line'>11章　HTTP 1.x
</span><span class='line'>12章　HTTP 2.0
</span><span class='line'>13章　アプリケーション配信最適化
</span><span class='line'>
</span><span class='line'>IV部　ブラウザAPIとプロトコル
</span><span class='line'>
</span><span class='line'>14章　ブラウザネットワーク入門
</span><span class='line'>15章　XMLHttpRequest
</span><span class='line'>16章　Server-Sent Events
</span><span class='line'>17章　WebSocket
</span><span class='line'>18章　WebRTC</span></code></pre></td></tr></table></div></figure>


<p>本のレベルとしては、3ウェイ・ハンドシェイクの基礎から教えてくれたりと、<br/>
かなり詳細に説明してくれるため、TCPやHTTPの詳しい知識は必要ありません。<br/>
だだし、ネットワークとは何かとかサーバとは何かとかの説明はないので、<br/>
最低限のネットワークの知識は必須です。</p>

<h1>感想</h1>

<p>この本で特にいいと思ったところは、定義通りの何もしていない状態から、<br/>
順序立てて一つ一つ効率良くしていく様子を示している所です。</p>

<p>これはキープアライブからHTTPパイプラインの説明のところが顕著ですが、<br/>
まずはじめに何も考えずに愚直にやって、どれだけ無駄が多いかを説明し、<br/>
次にキープアライブを有効にすることでこれだけ無駄が省ける、<br/>
さらにHTTPパイプラインでこんなに無駄が省ける。</p>

<p>といったように、いきなり仕組みの解説から入るのではなく、<br/>
今までの方法と比較しつつ、新しい仕組みの利点と欠点を説明しており、<br/>
ものすごく理解しやすく書いてあります。</p>

<h1>まとめ</h1>

<p>これ一冊読めば、Webで何かを作る際に実際は何が起こっているのか、<br/>
ということが大体わかるようになるので、<br/>
是非ともwebに関わる人は読んでおくべきだと思います。</p>

<p>また、献本の話を持ちかけてくれたレビュアの@flano_yukiさんに感謝です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atomのプラグイン作の作り方その１]]></title>
    <link href="http://ota42y.github.io/blog/2014/04/08/atom-plugin1/"/>
    <updated>2014-04-08T22:33:14+09:00</updated>
    <id>http://ota42y.github.io/blog/2014/04/08/atom-plugin1</id>
    <content type="html"><![CDATA[<p>Github製のエディタAtomの招待が来ました。<br/>
簡単なプラグインの作り方が公開されていましたので、
自分でも作ってみました。</p>

<p>[Create Your First Package]https://atom.io/docs/latest/your-first-package)</p>

<h1>テンプレート作成</h1>

<p>Atomはプラグインのテンプレートを作る仕組みが入っています。
コマンドパレットから</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Generate Package</span></code></pre></td></tr></table></div></figure>


<p>を選択して実行します。</p>

<p>するとパッケージ名を聞かれます。<br/>
適当に入力すると(ここではデフォルトのmy-package)、
ひな形がエディタで開きます。</p>

<h1>コマンドを作る</h1>

<p>コマンドパレットに表示されて実行可能なコマンドを作ります。</p>

<p>Atomの処理はCoffeeScriptで書きます。<br/>
メイン部分はlib/my-package.coffeeなので、
このファイルを編集します。</p>

<p>基本的に、module.exports =以降を書き換えればいいみたいです。<br/>
この中にはテンプレートを作った段階でいろいろ書いてありますが、<br/>
基本的に全部削除して大丈夫です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module.exports =
</span><span class='line'>  activate: -&gt;
</span><span class='line'>    # コマンドと実行する関数を登録する
</span><span class='line'>    atom.workspaceView.command "my-package:hello", =&gt; @hello()
</span><span class='line'>
</span><span class='line'>  hello: -&gt;
</span><span class='line'>    # 今いるパネルを得る
</span><span class='line'>    editor = atom.workspace.activePaneItem
</span><span class='line'>  # 文字の挿入
</span><span class='line'>    editor.insertText('Hello, World!')</span></code></pre></td></tr></table></div></figure>


<p>package jsonに
&#8220;activationEvents&#8221;が存在するので、<br/>
その値をさっき登録したコマンドを入れた配列
<code>["my-package:hello"]</code>
に変更します。</p>

<blockquote><p> チュートリアルにはこれをしないと、<br/>
 コマンドパレットに出ないと書いてありますが、<br/>
 <code>atom.workspaceView.command "test-pkg:test", =&gt; @test()</code><br/>
 を実行するだけで出てくるので、必ずしも必要ではなさそうです<br/>
 (ただし、書いてあった方が安心できそう)</p></blockquote>

<p>変更を反映するために、コマンドパレットから<br/>
<code>Window:Reload</code>
を実行します。</p>

<p>そうすると、コマンドパレットにmy-package:helloが出てくるので、<br/>
実行すると、今のカーソルの部分にHello, World!が挿入されます。</p>

<h1>キーバインディング</h1>

<p>さっきのコマンドにキーバインドをつけます<br/>
<code>keymaps/my-package.cson</code>
にキーバインドを記述すると使えるようになります。</p>

<p>ここはチュートリアルにあるのをそのまま…</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'.editor':
</span><span class='line'>  'ctrl-alt-a': 'my-package:hello'</span></code></pre></td></tr></table></div></figure>


<p>CSSっぽいやり方でキーバインドを記述できるようです。<br/>
基本的に</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>有効にする条件:
</span><span class='line'> キーバインド : ひも付けるactivationEvents</span></code></pre></td></tr></table></div></figure>


<p>になります。</p>

<p>とりあえずここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsはアクセスをどう処理しているのか(1)]]></title>
    <link href="http://ota42y.github.io/blog/2013/11/10/rails-trace-1/"/>
    <updated>2013-11-10T22:23:00+09:00</updated>
    <id>http://ota42y.github.io/blog/2013/11/10/rails-trace-1</id>
    <content type="html"><![CDATA[<p>ふと、Railsのコントローラーに書いたコードがが実行されるまでに、
何が起きているのか気になったので、全部追ってみようと思います。</p>

<p>まだ全部追い切れてないですが、思った以上に長くなったのでとりあえずメモとして出
してみます。<br/>
一部Rails力やRuby力が足りなくて追い切れない部分がありますが(´･_･`)</p>

<h2>準備</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g controller Trace index
</span><span class='line'>      create  app/controllers/trace_controller.rb
</span><span class='line'>       route  get "trace/index"
</span><span class='line'>      invoke  erb
</span><span class='line'>      create    app/views/trace
</span><span class='line'>      create    app/views/trace/index.html.erb
</span><span class='line'>      invoke  test_unit
</span><span class='line'>      create    test/controllers/trace_controller_test.rb
</span><span class='line'>      invoke  helper
</span><span class='line'>      create    app/helpers/trace_helper.rb
</span><span class='line'>      invoke    test_unit
</span><span class='line'>      create      test/helpers/trace_helper_test.rb
</span><span class='line'>      invoke  assets
</span><span class='line'>      invoke    coffee
</span><span class='line'>      create      app/assets/javascripts/trace.js.coffee
</span><span class='line'>      invoke    scss
</span><span class='line'>      create      app/assets/stylesheets/trace.css.scss</span></code></pre></td></tr></table></div></figure>


<p>というコントローラーを作り、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class TraceController &lt; ApplicationController
</span><span class='line'>  def index
</span><span class='line'>    caller().each{ |line| p line}
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>というtraceを用意し、ここにアクセスしてみました。</p>

<p>出力されたログは以下のようになりました。(見にくかったので、GEMまでのパスはGEM_FILE_PATHとしてます)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Started GET "/trace/index" for 127.0.0.1 at 2013-11-02 20:22:17 +0900
</span><span class='line'>Processing by TraceController#index as HTML
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_controller/metal/implicit_render.rb:4:in `send_action'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/abstract_controller/base.rb:189:in `process_action'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_controller/metal/rendering.rb:10:in `process_action'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/abstract_controller/callbacks.rb:18:in `block in process_action'"
</span><span class='line'>"/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/callbacks.rb:403:in `_run__2108733439165396685__process_action__callbacks'"
</span><span class='line'>"/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/callbacks.rb:80:in `run_callbacks'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/abstract_controller/callbacks.rb:17:in `process_action'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_controller/metal/rescue.rb:29:in `process_action'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_controller/metal/instrumentation.rb:31:in `block in process_action'"
</span><span class='line'>"/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/notifications.rb:159:in `block in instrument'"
</span><span class='line'>"/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/notifications/instrumenter.rb:20:in `instrument'"
</span><span class='line'>"/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/notifications.rb:159:in `instrument'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_controller/metal/instrumentation.rb:30:in `process_action'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_controller/metal/params_wrapper.rb:245:in `process_action'"
</span><span class='line'>"/GEMLIFE_PATH/activerecord-4.0.1/lib/active_record/railties/controller_runtime.rb:18:in `process_action'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/abstract_controller/base.rb:136:in `process'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/abstract_controller/rendering.rb:44:in `process'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_controller/metal.rb:195:in `dispatch'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_controller/metal/rack_delegation.rb:13:in `dispatch'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_controller/metal.rb:231:in `block in action'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/routing/route_set.rb:80:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/routing/route_set.rb:80:in `dispatch'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/routing/route_set.rb:48:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/journey/router.rb:71:in `block in call'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/journey/router.rb:59:in `each'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/journey/router.rb:59:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/routing/route_set.rb:680:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/rack-1.5.2/lib/rack/etag.rb:23:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/rack-1.5.2/lib/rack/conditionalget.rb:25:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/rack-1.5.2/lib/rack/head.rb:11:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/params_parser.rb:27:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/flash.rb:241:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/rack-1.5.2/lib/rack/session/abstract/id.rb:225:in `context'"
</span><span class='line'>"/GEMLIFE_PATH/rack-1.5.2/lib/rack/session/abstract/id.rb:220:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/cookies.rb:486:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/activerecord-4.0.1/lib/active_record/query_cache.rb:36:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/activerecord-4.0.1/lib/active_record/connection_adapters/abstract/connection_pool.rb:626:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/activerecord-4.0.1/lib/active_record/migration.rb:369:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'"
</span><span class='line'>"/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/callbacks.rb:373:in `_run__4335260606468341692__call__callbacks'"
</span><span class='line'>"/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/callbacks.rb:80:in `run_callbacks'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/callbacks.rb:27:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/reloader.rb:64:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/remote_ip.rb:76:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/railties-4.0.1/lib/rails/rack/logger.rb:38:in `call_app'"
</span><span class='line'>"/GEMLIFE_PATH/railties-4.0.1/lib/rails/rack/logger.rb:20:in `block in call'"
</span><span class='line'>"/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/tagged_logging.rb:67:in `block in tagged'"
</span><span class='line'>"/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/tagged_logging.rb:25:in `tagged'"
</span><span class='line'>"/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/tagged_logging.rb:67:in `tagged'"
</span><span class='line'>"/GEMLIFE_PATH/railties-4.0.1/lib/rails/rack/logger.rb:20:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/request_id.rb:21:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/rack-1.5.2/lib/rack/methodoverride.rb:21:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/rack-1.5.2/lib/rack/runtime.rb:17:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/cache/strategy/local_cache.rb:83:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/rack-1.5.2/lib/rack/lock.rb:17:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/static.rb:64:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/rack-1.5.2/lib/rack/sendfile.rb:112:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/railties-4.0.1/lib/rails/engine.rb:511:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/railties-4.0.1/lib/rails/application.rb:97:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/rack-1.5.2/lib/rack/lock.rb:17:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/rack-1.5.2/lib/rack/content_length.rb:14:in `call'"
</span><span class='line'>"/GEMLIFE_PATH/rack-1.5.2/lib/rack/handler/webrick.rb:60:in `service'"
</span><span class='line'>"/RUBY_PATH/webrick/httpserver.rb:138:in `service'"
</span><span class='line'>"/RUBY_PATH/webrick/httpserver.rb:94:in `run'"
</span><span class='line'>"/RUBY_PATH/webrick/server.rb:295:in `block in start_thread'"
</span><span class='line'>  Rendered trace/index.html.erb within layouts/application (0.9ms)
</span><span class='line'>Completed 200 OK in 94ms (Views: 61.8ms | ActiveRecord: 0.0ms)</span></code></pre></td></tr></table></div></figure>


<p>恐ろしい量(´･_･`)<br/>
とりあえず、こんな感じで動いてるんだなーというイメージをつかむ程度の理解度で、<br/>
ゆるふわに読んでいきたいと思います。</p>

<h2>コードをざっと見たところ</h2>

<p>下の階層にenvを渡して[status, headers, body]の三つを受け取り、それを返す関数がほとんど。<br/>
関数によってenvに変更を加えたり、戻り値の三つを加工したりとやってること自体はまちまちです。</p>

<p>ただ、各処理は本当に単一の処理だけをして次に処理を渡しており、<br/>
ifかswitchがせいぜい一つぐらい、全体も20行程度の関数であることが多い印象です。</p>

<h2>Railsのコードを読む</h2>

<p>上のログはスタックの上から順に出力しているはずなので、<br/>
実際の処理は下から上に向かって行われます。</p>

<h3><a href="https://github.com/ruby/ruby/blob/v2_0_0_247/lib/webrick/server.rb#L295">&#8220;/RUBY_PATH/webrick/server.rb:295:in `block in start_thread&#8217;&#8221;</a></h3>

<p>名前の通りThread.startしてるだけ。</p>

<h3><a href="https://github.com/ruby/ruby/blob/v2_0_0_247/lib/webrick/httpserver.rb#L94">&#8220;/RUBY_PATH/webrick/httpserver.rb:94:in `run&#8217;&#8221;</a></h3>

<p>名前の通りひたすらループしている。<br/>
リクエストを受け取って後述のserviceを呼び出し、その後返答を送信する処理を行う。</p>

<p>また、各種エラーが起こった場合もそれをキャッチし、エラーだということを送信している模様。</p>

<h3><a href="https://github.com/ruby/ruby/blob/v2_0_0_247/lib/webrick/httpserver.rb#L138">&#8220;/RUBY_PATH/webrick/httpserver.rb:138:in `service&#8217;&#8221;</a></h3>

<p>実際に処理をするところっぽい。<br/>
search_servletにパスを渡し、どんな返答を返すべきなのかを探して、そこに処理を渡している。</p>

<h3><a href="https://github.com/rack/rack/blob/1.5.2/lib/rack/handler/webrick.rb#L60">&#8220;/GEMLIFE_PATH/rack-1.5.2/lib/rack/handler/webrick.rb:60:in `service&#8217;&#8221;</a></h3>

<p>名前の通りwebrickから直接値を渡され、処理するところ。<br/>
webrickからはreqとresという値を受け取っている。</p>

<p>ハッシュであるreq.meta_varsを元に、必要な値が入ってなければ初期値を入れている。<br/>
以降の処理はほとんどがこのハッシュを受け渡して処理を行っている。</p>

<p>また、処理した後に結果を受け取り、引数のresに入れている。</p>

<h3><a href="https://github.com/rack/rack/blob/1.5.2/lib/rack/content_length.rb#L14">&#8220;/GEMLIFE_PATH/rack-1.5.2/lib/rack/content_length.rb:14:in `call&#8217;&#8221;</a></h3>

<p>次の処理を読んで、帰ってきた結果にBODYが含まれているなら、<br/>
ヘッダーにContent-Lengthを計算して追加している。</p>

<h3><a href="https://github.com/rack/rack/blob/1.5.2/lib/rack/lock.rb#L17">&#8220;/GEMLIFE_PATH/rack-1.5.2/lib/rack/lock.rb:17:in `call&#8217;&#8221;</a></h3>

<p>Mutex使ってロックをかけているだけみたい</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/railties/lib/rails/application.rb#L97">&#8220;/GEMLIFE_PATH/railties-4.0.1/lib/rails/application.rb:97:in `call&#8217;&#8221;</a></h3>

<p>rackから呼び出されるためだけに存在するやつっぽい。<br/>
引数を少しいじってる程度</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/railties/lib/rails/engine.rb#L511">&#8220;/GEMLIFE_PATH/railties-4.0.1/lib/rails/engine.rb:511:in `call&#8217;&#8221;</a></h3>

<p>&#8216;action_dispatch.routes&#8217;というキーで、ActionDispatch::Routing::RouteSetを追加している。<br/>
また、SCRIPT_NAMEが存在する場合には、<br/>
ROUTES_オブジェクトID_SCRIPT_NAMEという名前で、同じ値をコピーして代入している。</p>

<h3><a href="https://github.com/rack/rack/blob/1.5.2/lib/rack/sendfile.rb#L112">&#8220;/GEMLIFE_PATH/rack-1.5.2/lib/rack/sendfile.rb:112:in `call&#8217;&#8221;</a></h3>

<p>より下の階層に処理をさせた後ファイル送信の場合にヘッダーの書き換えを行っている。</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/actionpack/lib/action_dispatch/middleware/static.rb#L64">&#8220;/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/static.rb:64:in `call&#8217;&#8221;</a></h3>

<p>REQUEST_METHODがGETかHEADの時に、ルートからのパスを調べ、<br/>
ファイルとして存在している場合には否かをチェックして、<br/>
ある場合にはRack::Fileのcallを呼んでその結果を返している。<br/>
たぶんRailsに処理させず、ファイルを読んで返してるだけかと。<br/>
無い場合は特に何もせず下の階層を呼んでいる。</p>

<h3><a href="https://github.com/rack/rack/blob/1.5.2/lib/rack/lock.rb#L17">&#8220;/GEMLIFE_PATH/rack-1.5.2/lib/rack/lock.rb:17:in `call&#8217;&#8221;</a></h3>

<p>mutexを使ってロックをかけているだけっぽい。<br/>
また、下の階層を呼んで得られたbodyに対して、BodyProxyに処理させた結果と入れ替えている。</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/activesupport/lib/active_support/cache/strategy/local_cache.rb#L83">&#8220;/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/cache/strategy/local_cache.rb:83:in `call&#8217;&#8221;</a></h3>

<p>LocalCacheRegistryにLocalStoreオブジェクトを初期化してセットしてる。<br/>
コメントによると、簡単なメモリキャッシュに使うらしい。</p>

<h3><a href="https://github.com/rack/rack/blob/1.5.2/lib/rack/runtime.rb#L17">&#8220;/GEMLIFE_PATH/rack-1.5.2/lib/rack/runtime.rb:17:in `call&#8217;&#8221;</a></h3>

<p>X-Runtimeヘッダに、ここから下の処理にかかった時間をセットしている。</p>

<h3><a href="https://github.com/rack/rack/blob/1.5.2/lib/rack/methodoverride.rb#L21">&#8220;/GEMLIFE_PATH/rack-1.5.2/lib/rack/methodoverride.rb:21:in `call&#8217;&#8221;</a></h3>

<p>POSTメソッドだった場合に、METHOD_OVERRIDE_PARAM_KEYやHTTP_METHOD_OVERRIDE_HEADERを見て、<br/>
登録されているメソッド名GET HEAD PUT POST DELETE OPTIONS PATCHだったらそれと入れ替えている。<br/>
おそらく、PUTとかを実装していないブラウザで、POSTに特別な種類のデータを入れてPUTとして扱うための対応。</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/actionpack/lib/action_dispatch/middleware/request_id.rb#L21">&#8220;/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/request_id.rb:21:in `call&#8217;&#8221;</a></h3>

<p>あるならばHTTP_X_REQUEST_IDの値か、無いならばSecureRandom.uuidの結果を、<br/>
action_dispatch.request_idとして設定している。<br/>
たぶんリクエストを一意に識別したいんだと思う。<br/>
また、ヘッダのX-Request-Idにもその価を入れている。</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/railties/lib/rails/rack/logger.rb#L20">&#8220;/GEMLIFE_PATH/railties-4.0.1/lib/rails/rack/logger.rb:20:in `call&#8217;&#8221;</a></h3>

<p>事前に設定されたタグごとに処理をしているみたい。</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/activesupport/lib/active_support/tagged_logging.rb#L67">&#8220;/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/tagged_logging.rb:67:in `tagged&#8217;&#8221;</a></h3>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/activesupport/lib/active_support/tagged_logging.rb#L25">&#8220;/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/tagged_logging.rb:25:in `tagged&#8217;&#8221;</a></h3>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/activesupport/lib/active_support/tagged_logging.rb#L67">&#8220;/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/tagged_logging.rb:67:in `block in tagged&#8217;&#8221;</a></h3>

<p>この辺ちょっと何やってるかわからない(´･_･`)<br/>
なんか引数で与えられたタグに処理してるっぽいけど、Ruby力が低くて読み取れない (´・ω・｀)</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/railties/lib/rails/rack/logger.rb#L20">&#8220;/GEMLIFE_PATH/railties-4.0.1/lib/rails/rack/logger.rb:20:in `block in call&#8217;&#8221;</a></h3>

<p>４つ上のところと同じ箇所。<br/>
上で用意したloggerにブロックで次の処理を呼ぶように指定しているため、<br/>
ブロックを渡す相手の初期化→ブロック内の実行と、二回同じ箇所にくる。</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/railties/lib/rails/rack/logger.rb#L38">&#8220;/GEMLIFE_PATH/railties-4.0.1/lib/rails/rack/logger.rb:38:in `call_app&#8217;&#8221;</a></h3>

<p>Debugの場合はログ出力にスペースを二つ挟んでいる。<br/>
その後、ActiveSupport::Nortificationsを使い、&#8217;request.action_dispatch&#8217;という名前で、requestを通知している。<br/>
ここでリクエスト直後に処理を挟むようなライブラリを呼び出しているとか？</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/actionpack/lib/action_dispatch/middleware/show_exceptions.rb#L30">&#8220;/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/show_exceptions.rb:30:in `call&#8217;&#8221;</a></h3>

<p>基本何もしないけど、ここより下の階層から例外が投げられた場合に、<br/>
例外用のレスポンスを作成して返している。</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb#L17">&#8220;/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call&#8217;&#8221;</a></h3>

<p>ヘッダにX-Cascadeがpassと設定されている場合、もしくは任意の他のエラーが起きた場合に、<br/>
エラーレスポンスを作成している。</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/actionpack/lib/action_dispatch/middleware/remote_ip.rb#L76">&#8220;/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/remote_ip.rb:76:in `call&#8217;&#8221;</a></h3>

<p>action_dispatch.remote_ipにアクセスしてきたIPアドレスを保存している。<br/>
保存はGetIpクラスで行われており、calculate_ipメソッドを実行することで、<br/>
アクセスしてきたIPアドレスを計算している。<br/>
そのため、IPアドレスが必要ない場合は計算が行われない。<br/>
どうやら、GetIpクラスの中でかなり巨大な正規表現を用いてIPアドレスを計算しているらしく、<br/>
そこの処理が重いため、必要が無ければ計算しないand計算したらメモするようにしているみたい。<br/>
(この正規表現を使っているみたい<a href="https://gist.github.com/gazay/1289635">https://gist.github.com/gazay/1289635</a>)</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/actionpack/lib/action_dispatch/middleware/reloader.rb#L64">&#8220;/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/reloader.rb:64:in `call&#8217;&#8221;</a></h3>

<p>コールバックとして設定されたprepareとcleanupを処理の最初と最後に呼んでいる。</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/actionpack/lib/action_dispatch/middleware/callbacks.rb#L27">&#8220;/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/callbacks.rb:27:in `call&#8217;&#8221;</a></h3>

<p>コールバックとして登録された関数に、より下の処理を実行するようにブロックで渡し、<br/>
ブロック内で例外が出た場合にその例外を返す。
何でわざわざこんな回りくどい例外の拾い方をしてるのかな？<br/>
一応、ブロック内で例外が発生したとしても、コールバック関数はそのまま処理が実行され、<br/>
その後再び同じ例外をなげる事になるんだけれどこれが目的？</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/activesupport/lib/active_support/callbacks.rb#L80">&#8220;/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/callbacks.rb:80:in `run_callbacks&#8217;&#8221;</a></h3>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/activesupport/lib/active_support/callbacks.rb#L373">&#8220;/GEMLIFE_PATH/activesupport-4.0.1/lib/active_support/callbacks.rb:373:in `_run<strong>4335260606468341692</strong>call__callbacks&#8217;&#8221;</a></h3>

<p>与えられたシンボル(イベント名？)からコールバック先を見つけ、それに対して引数のブロックを渡している？<br/>
なんかEVALしてクラスを作ってたりしてて、ちょっと意味不明なことやってる(´･_･`)</p>

<h3><a href="https://github.com/rails/rails/blob/v4.0.1/actionpack/lib/action_dispatch/middleware/callbacks.rb#L29">&#8220;/GEMLIFE_PATH/actionpack-4.0.1/lib/action_dispatch/middleware/callbacks.rb:29:in `block in call&#8217;&#8221;</a></h3>

<p>三つ上の位置から渡されたブロック内部。<br/>
下の処理を呼んでるだけ。</p>

<h2>続く</h2>

<p>ここまではRails以前のいろんな処理が多かったですが、<br/>
ここから先はActiveRecordが現れ始め、いかにもRails本体の動きっぽい感じがします。<br/>
が、長くなりすぎたのでいったん切ります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordpressからOctopressへ]]></title>
    <link href="http://ota42y.github.io/blog/2013/09/25/octopress/"/>
    <updated>2013-09-25T07:49:00+09:00</updated>
    <id>http://ota42y.github.io/blog/2013/09/25/octopress</id>
    <content type="html"><![CDATA[<p>前までブログシステムにはWordpressを使っていたんですが、<br/>
個人でやるには無駄に高性能すぎて、ほとんどの機能を使っていませんでした。</p>

<p>そこで、ちょっと話題になってる(らしい)<a href="http://octopress.org/">Octopress</a>を導入してみました。</p>

<h1>Octopressって何？</h1>

<p><a href="http://jekyllrb.com/">jekyll</a>を使って、<br/>
github pages上で簡単にブログを作れるシステムらしいです。</p>

<p>テキストファイルにmarkdown形式で書いてそれをコンパイル、ローカル上で確認することができ、<br/>
githubのへデプロイすることでweb上に公開できるシステムになります。</p>

<p>そのため、gitを使ってブログのデプロイやバックアップを作れるという、<br/>
まさにプログラマー向けなブログシステムです。<br/>
公式サイトにも、A blogging framework for hackersって書いてありますしね。</p>

<p>インストールの仕方は<a href="http://qiita.com/ota42y/items/dcb32930d1153aa9f452">こっち</a></p>

<h1>運用方法</h1>

<p>デプロイする<a href="https://github.com/ota42y/ota42y.github.io">githubのリポジトリ</a>には、このブログのファイルが全部入ってます。<br/>
ですが、実際にはこれはoctopressの_deployフォルダの中身だけで、<br/>
このブログファイルをコンパイルするOctopressや、markdownで書かれた生原稿などは含まれていません。</p>

<p>そこで、公開用のリポジトリとは別に、<br/>
Octopressや原稿そのものもbutbucketのプライベートリポジトリで管理しています。<br/>
こうすると、まだ書きかけの記事とかもgitで管理できるのでとても便利になります。</p>

<p>今のところ、これでいけそうな感じなのでしばらくこれを使ってみようと思います。</p>
]]></content>
  </entry>
  
</feed>
