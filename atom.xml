<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[おおたの物置]]></title>
  <link href="http://ota42y.com/atom.xml" rel="self"/>
  <link href="http://ota42y.com/"/>
  <updated>2015-01-26T22:16:59+09:00</updated>
  <id>http://ota42y.com/</id>
  <author>
    <name><![CDATA[ota42y]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2015年4週目まとめ]]></title>
    <link href="http://ota42y.com/blog/2015/01/26/summary/"/>
    <updated>2015-01-26T22:11:46+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/26/summary</id>
    <content type="html"><![CDATA[<p>先週やったことまとめ<br/>
以外とあまりやってない。<br/>
作りたいものは増えていくけど時間は無い。</p>

<h1>tumblrクライアント作ってる</h1>

<p>info APIだけはできた。Posts APIを作りたいけど、ちょっとめんどくさそう。<br/>
複数の型を一つの配列で返して来るので、どうやって同じ配列に入れようか…<br/>
たぶん全部入りのクラスで取り出して、個別のクラスに入れていく形になるかと。</p>

<p><a href="http://play.golang.org/p/tVLoIDVk--">http://play.golang.org/p/tVLoIDVk&ndash;</a>
この技を使えば違う型でも共通の配列に入れられるはず</p>

<h1>情報科学若手の会冬の陣2015に参加した</h1>

<p><a href="http://ota42y.com/blog/2015/01/25/wakate2015w/">参加記録 情報科学若手の会冬の陣2015</a><br/>
発表したい人生だった… _ (:3 」∠)_<br/>
が、ここ半年間はずっと一日に使える時間が1〜2時間程度、かつ仕事は情報科学っぽい事をしてないので、<br/>
発表ネタが全く作れないという…<br/>
というか、特に技術的に成長してない気がするし、このままの生活を続けて大丈夫なのだろうか…</p>

<h1>Remember The Milk使いやすいが使いにくい</h1>

<p>わりといい線行ってるサービスだけど、Webクライアントが使いにくいのでちょっと残念。<br/>
URLをショートカットから開けなかったり、ヘッダー画像が邪魔だったり…<br/>
サブタスクが無いのもそれはそれで使いにくいですね。</p>

<p>ただ、オフラインでスマホで見られますし、繰り返し設定など様々な設定が凄く楽にできる等<br/>
機能的にはいいですし、UIもいいのであともう一声って感じですね…<br/>
コマンドラインから対話的に操作できれば解決できそうな気がします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[参加記録 情報科学若手の会冬の陣2015]]></title>
    <link href="http://ota42y.com/blog/2015/01/25/wakate2015w/"/>
    <updated>2015-01-25T07:51:43+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/25/wakate2015w</id>
    <content type="html"><![CDATA[<p><a href="https://atnd.org/events/61060">情報科学若手の会冬の陣2015 #wakate2015w</a>に参加しました<br/>
<a href="http://togetter.com/li/773792">Togetterまとめ</a><br/>
会場は電源完備＆大きめの机が椅子に着いているという豪華仕様でした</p>

<h1>まとめ</h1>

<ul>
<li><p>黒崎優太 (@kuro_m88)  ICTトラブルシューティングコンテストの紹介</p>

<ul>
<li><a href="http://icttoracon.net/">http://icttoracon.net/</a></li>
<li>ネットワーク版CTFみたいなコンテスト</li>
<li>Ciscoがスポンサーについているので、高価な機材がいっぱい用意されるみたい</li>
<li>大きな規模のネットワークであれこれするのって普通じゃ出来ないし、面白そうです。</li>
</ul>
</li>
<li><p>浅野智之 (@asanon_s)  Webの世界に散らばるデータをつなぐ技術</p>

<ul>
<li>semantic webやPDFの話</li>
<li>人間が読めれば良い形式から、構造化されて機械も読める形式を加えるみたい</li>
<li>なんとなく理解が深まった気がします</li>
<li>完全なsemantic webへの道のりはまだまだ</li>
</ul>
</li>
<li><p>門脇香子  証明プログラミング入門</p>

<ul>
<li><a href="http://www.slideshare.net/ussopyon/ss-43846794">http://www.slideshare.net/ussopyon/ss-43846794</a></li>
<li><a href="https://lepidum.co.jp/blog/2014-06-05/CCS-Injection/">OpenSSLの脆弱性をCoqで見つけた話</a>を聞いてから、証明プログラミング凄そうだけどよくわからない状態だったので、
理解が深まりました。</li>
<li>何を証明すれば良いかを補完してくれるのは便利そうでした</li>
</ul>
</li>
<li><p>佐野岳人  コードを書けば複素数が分かる</p>

<ul>
<li><a href="http://www.slideshare.net/taketo1024/ss-43853048">http://www.slideshare.net/taketo1024/ss-43853048</a></li>
<li>初めて複素数が何なのかを感覚的に理解できた気がする…</li>
<li>デモで関数をインタラクティブに可視化しているのが本当に凄かった</li>
<li>ここから使える

<ul>
<li><a href="https://github.com/taketo1024/SwiftComplex">https://github.com/taketo1024/SwiftComplex</a></li>
</ul>
</li>
</ul>
</li>
<li><p>辻順平 (@tsujimotter)  日曜数学のススメ</p>

<ul>
<li><a href="http://www.slideshare.net/junpeitsuji/2015-43856733">http://www.slideshare.net/junpeitsuji/2015-43856733</a></li>
<li>コンパスと定規で作図可能かどうかを判定するガウスの判定法凄い

<ul>
<li>折り紙だと四次方程式が解けるので、作図できなくても折れる場合があるとか凄い</li>
</ul>
</li>
</ul>
</li>
<li><p>池尻良平  ニュースと類似した歴史を求めるアルゴリズムを考えてみた – 役に立つ歴史教育を目指して</p>

<ul>
<li>現代のニュースと、それに類似する歴史上の出来事を提示するシステムを作っているそうです</li>
<li>過去にどんな解決策をとって、どういう結果になったかを考えるのにとても便利そうです</li>
<li>早く使ってみたいですね</li>
</ul>
</li>
<li><p>後藤紳 モバイルデータを用いた行動予測</p>

<ul>
<li>あんまり書いちゃいけなさそうなので割愛</li>
<li>GPSの行動ログを蓄積して、次に何をしそうか提示するみたいです

<ul>
<li>同じような日々を送っている人には効果的っぽいです</li>
</ul>
</li>
</ul>
</li>
<li><p>宮代理弘 (@3846masa)  Processin.ga – Webで書いてスマホで動かすサイト開発話</p>

<ul>
<li><a href="http://processin.ga/">http://processin.ga/</a></li>
<li><a href="http://3846masa.hatenablog.jp/entry/2015/01/25/011802">http://3846masa.hatenablog.jp/entry/2015/01/25/011802</a></li>
<li>Processingをブラウザ上で書いて動かし、かつスマホでもリアルタイムに動かせるサイトです</li>
<li>無ければ作る、あっても作る</li>
<li>デザインはパクるもの</li>
</ul>
</li>
<li><p>湯村翼 (@yumu19)   野生の研究について</p>

<ul>
<li><a href="http://yumulog.hatenablog.com/entry/2015/01/25/020313">http://yumulog.hatenablog.com/entry/2015/01/25/020313</a></li>
<li>そもそもアーカイブ形式が動画だと、後から調べるのがとても大変になる気がします

<ul>
<li>今は何とかなってるけど、数年、数十年と続いていくと辛いかと</li>
</ul>
</li>
</ul>
</li>
<li><p>宮下芳明  明治大学宮下研究室の活動とABProの紹介</p>

<ul>
<li>Linear vs Circular

<ul>
<li>この研究が凄かった</li>
<li><a href="https://www.youtube.com/watch?v=S1Roi2NOmx8">https://www.youtube.com/watch?v=S1Roi2NOmx8</a></li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>懇親会</h1>

<p>一晩寝たらだいたい忘れるという…(´･_･`)</p>

<ul>
<li><p>courseraで英語勉強</p>

<ul>
<li><a href="https://www.coursera.org/">https://www.coursera.org/</a></li>
<li>ちょうど機械学習とかやってみたかったのでよさそう(o゜▽゜)</li>
</ul>
</li>
<li><p>自動作曲の話</p>

<ul>
<li>歌詞を入れると自動でお音をつけてくれる</li>
<li>日本語の音節？を見て色々やってるらしい？</li>
<li>ミクと組み合わせて、詩を書ければ曲が書けるとか良さそう</li>
</ul>
</li>
</ul>


<h1>その他</h1>

<p>何か発表したい人生だった…<em>(:3 」∠)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RAMディスクでiOSのビルド時間を短くする]]></title>
    <link href="http://ota42y.com/blog/2015/01/23/ram-disk/"/>
    <updated>2015-01-23T07:47:36+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/23/ram-disk</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>RAMディスクを作ってビルドすると早くなる

<ul>
<li>SSD上でビルドすると9分</li>
<li>RAMディスクでビルドすると6分</li>
<li>Androidは未検証だが同じと思われる</li>
</ul>
</li>
<li>Macだととても簡単にRAMディスクが作れる</li>
<li>Jenkins等、ビルドが主目的の場合に有効と思われる</li>
<li>メモリが余っているならやる価値はある</li>
</ul>


<h1>Mac OS XでのRAMディスク作成</h1>

<p>Macではhdidコマンドを使うことで、メモリ領域をディスクとして使用することが出来ます。<br/>
メモリはSSDと比べても遙かに早く、R/Wの激しい処理にうってつけです。</p>

<p>また、rootでなくても作成できるため、非常に便利です</p>

<h2>ディスク作成手順</h2>

<p>2つコマンドを実行するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hdid -nomount ram://4096000
</span><span class='line'><span class="c"># 指定した容量でRAMディスクが作成されます。</span>
</span><span class='line'><span class="c"># /dev/disk2等作成された場所が返ります。</span>
</span><span class='line'><span class="c"># ファイルシステムがないためマウントは失敗します。</span>
</span><span class='line'><span class="c"># そのため、-nomuntをつけています。</span>
</span><span class='line'>
</span><span class='line'>diskutil eraseDisk HFS+ RAM /dev/disk2
</span><span class='line'><span class="c"># 先ほど作成したディスク(/dev/disk2)をHFSでフォーマットします</span>
</span><span class='line'><span class="c"># さらに、RAMという名前でマウントします。</span>
</span><span class='line'><span class="c"># これにより、/Volumes/RAMでアクセスできるようになります。</span>
</span><span class='line'>
</span><span class='line'>hdiutil detach disk2
</span><span class='line'><span class="c"># 作成したディスクをアンマウントして削除します</span>
</span><span class='line'><span class="c"># ディスクは消滅するのでご注意ください</span>
</span><span class='line'><span class="c"># diskutil unmountDisk</span>
</span><span class='line'><span class="c"># diskutil eject</span>
</span><span class='line'><span class="c"># の組み合わせと同じですが、コマンド一つになるため楽です</span>
</span></code></pre></td></tr></table></div></figure>


<h2>速度比較</h2>

<p>Mac Book Air 13-inch Mid 2013のSSDと速度比較しました。<br/>
速度計測には<a href="http://xbench.com/">Xbench</a>を使用しました。</p>

<p>結果は以下の通りになりました。<br/>
<img src="http://ota42y.com/images/posts/2015-01-23-speed.png" alt="2015-01-23-speed.png" /></p>

<p>どれをとってもRAMディスクの方が圧倒的に早い結果になりました。<br/>
ブロックサイズが小さいwriteの場合は2倍程度になっていますが、それ以外は5倍〜10倍以上の差がついています。</p>

<h1>ビルド時間比較</h1>

<p>性能的には以上の通りですが、実際にビルド時間にはどれほど影響があるかを調べてみました。</p>

<p>比較には<a href="https://github.com/cocos2d/cocos2d-x-samples">cocos2d-x-sample</a>を利用しました。<br/>
ビルドには<a href="https://github.com/nomad/shenzhen">shenzhen</a>を利用し、コマンドラインからiOSのクリーンビルドを行いました。</p>

<p>残念ながら証明書が無いためipaを作成することが出来ず、<br/>
かつその場合にshenzhenが何故か終了せず、timeコマンド等で正確な時間計測が出来ませんでした。<br/>
timeコマンドを使い手作業で計ったところ、SSD上では9分13秒、RAMディスク上では6分01秒とうい結果になりました。<br/>
手計測による誤差はせいぜい数秒低度なため、3分以上早くなっているのは確実と言えます。</p>

<h1>その他</h1>

<ul>
<li>R/Wの性能は5倍〜10倍と凄く高速になっている</li>
<li>ビルド時間は30%ぐらい減った

<ul>
<li>ただし、プロジェクトによっては差異があると思われる</li>
<li>CPUやメモリの影響もあるため、R/Wの性能向上がそのまま反映されるわけではない</li>
</ul>
</li>
<li>電源を切ると消えるので使い道は慎重に

<ul>
<li>開発用よりもビルド専用に使った方が安心</li>
<li>Jenkinsのビルドをここで行うのは良い案と思われる

<ul>
<li>ログが残らないので、成果物の保存はよく考える必要あり</li>
</ul>
</li>
</ul>
</li>
<li>当然ながら空きメモリ容量を消費するので、余っていない場合は注意</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Androidでクリップボードの中身を自動で辞書検索]]></title>
    <link href="http://ota42y.com/blog/2015/01/21/android-dict/"/>
    <updated>2015-01-21T07:37:19+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/21/android-dict</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>clip2dicを使うとクリップボード内を自動で辞書検索する</li>
<li>オフラインの別アプリからも検索可能</li>
<li>ColorDictとGolden Dictが連携先として優秀</li>
<li>英辞郎は形式が違うため辛い</li>
<li>Google Driveをビューワーとして使うといい</li>
</ul>


<h1>ポップアップ辞書アプリ</h1>

<p>iOSやMacでは辞書機能がOSに統合されているため、英単語を選択するとそのまま辞書を引くことができます。</p>

<p>Androidで同じぐらい楽に辞書を引けないかと思って調べたところ、<br/>
<a href="https://play.google.com/store/apps/details?id=com.jp.readers.clip2dic.lite&amp;hl=ja">clip2dic</a>というアプリが、クリップボードの中身を自動でネット上の辞書から検索してくれました。</p>

<p>私はタブレットをオフラインで使用していますが、このアプリは別のアプリを呼び出して検索できるため、<br/>
他の辞書アプリを入れる事でオフラインでも辞書が引けるようになります。</p>

<h1>clip2dictから使えるオフライン辞書アプリ</h1>

<h2>ColorDict</h2>

<p><a href="https://play.google.com/store/apps/details?id=com.socialnmobile.colordict">https://play.google.com/store/apps/details?id=com.socialnmobile.colordict</a></p>

<p>無料の辞書ソフトです。<br/>
初期状態では日英、英日辞書は入っていませんが、<br/>
別アプリとして配布されている辞書アプリをインストールすることで、
対応辞書を増やすことができます。
<a href="https://play.google.com/store/apps/details?id=colordict.dictdata.japanese.jmdict">https://play.google.com/store/apps/details?id=colordict.dictdata.japanese.jmdict</a><br/>
(おそらく<a href="https://code.google.com/p/stardict-3/">こちらの辞書</a>を使用しています)<br/>
StartDict形式の辞書ファイルを持っているならば、端末内のdictdata内に置くことで、さらに辞書を追加できます。</p>

<h2>GoldenDict</h2>

<p><a href="https://play.google.com/store/apps/details?id=mobi.goldendict.android&amp;hl=ja">https://play.google.com/store/apps/details?id=mobi.goldendict.android&amp;hl=ja</a><br/>
<a href="https://play.google.com/store/apps/details?id=mobi.goldendict.android.free&amp;hl=ja">Free版</a><br/>
こちらもColorDictと同じく、辞書ファイルが必要になります。<br/>
ただし、こちらはアプリ内から先ほどの辞書データをダウンロードできるため、<br/>
より導入が簡単です（辞書としてはおそらく同じだと思います)。</p>

<p>このアプリには、複数辞書を同時に検索できる利点があるらしいです（無料版は5個まで同時検索）</p>

<p>複数の辞書ファイルを持っている場合は便利ですが、<br/>
私はそんなに辞書ファイルを持っていないので無料で十分でした。</p>

<h1>その他</h1>

<p>手元に英辞郎のだいぶ古い版が手元にありますが、上記二つのアプリでは対応していないpdic形式になります。<br/>
pdicからStartDict形式の変換はとても手間がかかるのと、<br/>
古すぎてネット上にある手順では出来なさそうなので諦めました。</p>

<p>また、Adobe Readerは選択をすると単語ではなく文章を丸ごと選択するため、辞書検索に使えません…<br/>
いくつかPDFビューワーを試しましたが多くは文字選択が出来ず、<br/>
今のところ唯一出来たGoogle Driveをビューワーとして使っています。<br/>
(オフラインでも別アプリからPDFビューワーとして呼び出せる)</p>

<p>辞書は透明な別アプリとして元のアプリの上に表示されるらしく、閉じてPDFビューワーに移動するのが若干遅いです。<br/>
これはおそらくclip2dicの仕様だと思われるため、解決方法は無さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年3週目まとめ]]></title>
    <link href="http://ota42y.com/blog/2015/01/17/summary/"/>
    <updated>2015-01-17T13:38:07+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/17/summary</id>
    <content type="html"><![CDATA[<h1>Jenkins ユーザ・カンファレンス 2015 東京</h1>

<p><a href="http://ota42y.com/blog/2015/01/11/jenkins-conference/">参加しました</a><br/>
Workflow Plugin等を導入したいのですが、<br/>
現在クリティカルパス上の作業をしているために手が回りません…<br/>
運用コストを下げられるので是非入れたいのですが、<br/>
どうしても優先度は下がってしまいますね…</p>

<h1>Tumblrのgolang用ライブラリ</h1>

<p>見当たらなかったので作成中(まだ何も動きません)<br/>
<a href="https://github.com/ota42y/go-tumblr">https://github.com/ota42y/go-tumblr</a></p>

<p>goのテストは特殊なフレームワークとか作らずに、普通にコードとして書くのを推奨しているそうです。<br/>
rspecとかで専用のフレームワークにそって作るのとは大違い。<br/>
書くのは面倒だけど、フレームワークの知識が無くても大丈夫というのは良いかもしれません。</p>

<p>フレームワークの学習コストとそれによって得る効率化と、使わないことによる効率の低下とどっちが得なのでしょうか。
あと外部APIなので秘密情報をどうやってテストの時に設定するかが課題です。<br/>
毎回書いては消すのはとても面倒なので…</p>

<h1>UIと強結合しているテスト</h1>

<p>cocos2d-xを使ってiPhoneアプリを作成していると、ゲームUIでTDDとかするのは実質不可能ではないかなと思います。
これはおそらくUI層の正しさが、状態に強く依存するのが原因です。</p>

<p>ボタンを配置してタッチで特定のメソッドを呼び出すような場合、<br/>
ボタンが画面上に表示されるかは、他のよりZ座標が大きいオブジェクトと被さっていないかをチェックする必要や、<br/>
より優先度の高いタッチオブジェクトが存在しないかといったことをチェックする必要があります。<br/>
さらに、演出中は表示されるけどタッチは出来ないなど、その部分以外の所の状態によって結果を変える必要があります。</p>

<p>つまり、新しいボタンを配置するためには様々な状態のテストを作成し、<br/>
かつほかのオブジェクトに対して新しい状態を追加することになるため、テストの変更がとても大きくなります。<br/>
そのため、UI層でテストをする場合、作成・維持ともにとても大きくなっていくため、<br/>
完全に不可能ではないですがコストか高く、現実的に出来るものではありません。</p>

<p>ただし、UIコンポーネントについて個別にテストするのは有効だと思います。<br/>
例えばボタンクラスであればタッチした時に、コールバックが呼ばれるか、範囲外の時に呼ばれないか等です。<br/>
ただし、UIを作る際に個別にクラスを作ることはそんなに多くなく、<br/>
多くがコンポーネントの配置と、その画面専用ロジックとのつなぎになるため、大きな効果は見込めなさそうです。</p>

<p>なお、ゲームはそもそも共通で使う部分が少なく、画面内の状態がとても多いという前提があります。<br/>
例えば通販サイトではヘッダーやサイドバーは共通で使い、メインの部分とは独立していますし、<br/>
メインの部分も商品データが違うだけでテンプレートは同じといったように、共通で使う部分が多いので、<br/>
そのような部分のテストは有効ではないかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[参加記録 Jenkins ユーザ・カンファレンス 2015 東京]]></title>
    <link href="http://ota42y.com/blog/2015/01/11/jenkins-conference/"/>
    <updated>2015-01-11T18:26:43+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/11/jenkins-conference</id>
    <content type="html"><![CDATA[<p><a href="http://build-shokunin.org/juc2015/">Jenkins ユーザ・カンファレンス 2015 東京</a>に参加しました。<br/>
<a href="http://togetter.com/li/765735">Togetterまとめ</a></p>

<h1>発表まとめ</h1>

<h2>アンケート結果</h2>

<ul>
<li>参加申し込み時のアンケート結果</li>
<li>多くの人のjobの数が1〜数個程度</li>
<li>Jenkins無くても生きていける人が30％ぐらい</li>
<li>思ったよりもみんなJenkinsを使い込んでいない印象</li>
<li>アンケート結果は後日公開</li>
</ul>


<h2>Jenkinsプロジェクトの現状とワークフロー</h2>

<ul>
<li>DotCiが良さそう

<ul>
<li><a href="https://github.com/groupon/DotCi">https://github.com/groupon/DotCi</a></li>
<li>Jenkinsを他のCIサービスみたいにする</li>
<li>Github限定</li>
<li>設定をYAMLファイルで管理出来たりする</li>
</ul>
</li>
<li>Workflow Pluginすごい

<ul>
<li>Build Flow Pluginをいっそう強化した版</li>
<li>ビルドが失敗しても途中から再開とかも出来る</li>
<li>乗り換えよう</li>
<li>ただ、DSLを覚えたりと学習コストが高くなるので秘伝のタレ化の危険が</li>
</ul>
</li>
</ul>


<h2>JenkinsとSeleniumの活用事例：試験自動化のプロジェクトへの導入</h2>

<ul>
<li>アジャイル開発だとイテレーション毎に試験項目は増えていくが、開発後半になるほど試験に割ける時間は減る

<ul>
<li>あるあるすぎる</li>
<li>試験自動化で試験項目の消化にかかるコストを下げる</li>
</ul>
</li>
<li>スクリーンショットを撮って画像比較して変更検知

<ul>
<li>静的な画面なら効果的っぽい</li>
<li>アニメーションする場合は撮るタイミングによりそうなので、目で比較かなぁ…</li>
</ul>
</li>
<li>テストケースの保守大変そう

<ul>
<li>ちょっと変わっただけで使えなくなるし</li>
</ul>
</li>
</ul>


<h2>Jenkinsを使ったコンシューマゲームでのデプロイとテスト</h2>

<ul>
<li><a href="http://www.slideshare.net/swiftnest/jenkins-43394510">http://www.slideshare.net/swiftnest/jenkins-43394510</a></li>
<li>圧縮して6GB、11万ファイルのプロジェクト

<ul>
<li>2プラットフォーム2言語にビルド</li>
<li>これで中規模ぐらいと凄い世界が…

<ul>
<li>FFとかどんだけなんだろう…</li>
</ul>
</li>
</ul>
</li>
<li>フルビルドに14時間かかる

<ul>
<li>リソースの事前処理に時間がかかる

<ul>
<li>リソース内での分岐処理が遅いため、全条件分のリソースを作る</li>
</ul>
</li>
<li>データを実機上でビルドする必要がある

<ul>
<li>携帯機は貧弱なので差分ビルドでも4時間かかったりする</li>
<li>プラットフォームで互換性なし

<ul>
<li>PS3はビッグエンディアン</li>
<li>VITAはリトルエンディアン</li>
</ul>
</li>
</ul>
</li>
<li>ファイルをパックするのでキャッシュが効かない

<ul>
<li>ファイルアクセス回数を減らすため必須</li>
<li>全データを実機でパックするため6時間ぐらい</li>
</ul>
</li>
</ul>
</li>
<li>頑張って並列化して5〜9時間ぐらいまで減らす

<ul>
<li>データの処理を4台で並列化

<ul>
<li>一台4時間ぐらいに短縮</li>
</ul>
</li>
</ul>
</li>
<li>テスト

<ul>
<li>テストフレームワークなど無い</li>
<li>スモークテスト

<ul>
<li>特定ミッションに入れるかどうかをテスト

<ul>
<li>引数で専用のミッションを始められるように

<ul>
<li>一定時間たったら終了させる</li>
<li>正常終了しなかったらエラー</li>
</ul>
</li>
<li>起動からスタート、終了までがちゃんと動くか</li>
<li>リソースに問題ないか</li>
</ul>
</li>
<li>エフェクト再生チェック

<ul>
<li>一定時間内に終わるか</li>
</ul>
</li>
<li>データが変換可能か</li>
</ul>
</li>
<li>モンキーテスト

<ul>
<li>開始からエンディングまでの通しプレイAI

<ul>
<li>良い感じに攻撃する

<ul>
<li>適当にボタン連打</li>
</ul>
</li>
<li>適当に移動</li>
<li>何回もゲームオーバーになったら無敵＆攻撃力１００倍</li>
</ul>
</li>
<li>メニュー操作テスト

<ul>
<li>普通のUIテストっぽい</li>
</ul>
</li>
<li>長時間テスト特有のバグ発見に繋がる

<ul>
<li>リソースの解放漏れ

<ul>
<li>携帯機はスリープできるので普通は電源を切らない</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>問題点

<ul>
<li>作成やメンテナンスにコストがかかる

<ul>
<li>ゆとりがある時期にどれだけ作れるか勝負</li>
</ul>
</li>
<li>チェックに時間かかる

<ul>
<li>一日じゃ終わらない</li>
</ul>
</li>
<li>手動テストの置き換えにはならない

<ul>
<li>テストのパターンが固定化されるため、外れた部分のバグは検知不可</li>
<li>人の手のかかるテストを減らす効果</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>おばかXFDコンテスト</h2>

<ul>
<li>人は慣れる生き物

<ul>
<li>何度も通知してるとそのうち無視するようになる

<ul>
<li>エラーメールを迷惑フォルダに入れたり</li>
<li>パトランプの上に被せたり</li>
</ul>
</li>
<li>XFDによる通知で、慣れに逆らう</li>
</ul>
</li>
</ul>


<h2>LT大会</h2>

<ul>
<li>Jenkinsを使った継続的Webセキュリティテスト

<ul>
<li>継続的にセキュリティテストを実施するVAddyの話

<ul>
<li><a href="http://vaddy.net/ja/">http://vaddy.net/ja/</a></li>
</ul>
</li>
<li>ちゃんと専門家が監修しているという噂がTLに流れた</li>
</ul>
</li>
<li>Jenkinsおじさん、お堅いメガバンクに就職

<ul>
<li>金融系企業でJenkinsが使われているだと(´･_･`)！！</li>
<li>ちゃんと聞きたかったけど、時間が足りなくて終了…</li>
</ul>
</li>
<li>Jenkinsおじさんと楽しい連携ツールたち

<ul>
<li>Deploygate、Slack、Gitlabの連携話
– だいたい似たようなことしてる</li>
</ul>
</li>
<li>ゲーム業界の人がJenkinsさん3Dモデルで遊んでみた

<ul>
<li>Jenkinsの3Dモデルで遊んでる</li>
</ul>
</li>
<li>CI”じゃない方”のJenkins

<ul>
<li><a href="http://www.slideshare.net/MiuraKatsu/ci-43396873">http://www.slideshare.net/MiuraKatsu/ci-43396873</a></li>
<li>CI以外の使い道</li>
<li>cronの置き換え</li>
<li>外部ツールの連携

<ul>
<li>ピタゴラジェンキンス</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>まとめ</h1>

<ul>
<li>Jenkins単体の話はなくって、Jenkinsと○○連携してこう使ってますが多かった

<ul>
<li>Jenkinsを使うのは普通な世界になってる気がする</li>
</ul>
</li>
<li>ちょこっとだけ設定を変えたJobが乱立するのはどこも同じっぽい

<ul>
<li>Workflow Pluginでそのあたりを吸収できそう</li>
</ul>
</li>
<li>会場設備が凄く良い

<ul>
<li>ネット快適、教室は電源とLAN完備</li>
<li>法政大学凄すぎる</li>
</ul>
</li>
<li>Tシャツがフリー配布されてた

<ul>
<li>太っ腹</li>
<li><blockquote class="twitter-tweet" lang="ja"><p>全てご自由にお持ちくださいらしい。 <a href="https://twitter.com/hashtag/juc2015?src=hash">#juc2015</a> <a href="http://t.co/0C4ZcEfHXg"><a href="http://t.co/0C4ZcEfHXg">http://t.co/0C4ZcEfHXg</a></a></p>&mdash; おおた (@ota42y) <a href="https://twitter.com/ota42y/status/554113306349539328">2015, 1月 11</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年2週目まとめ]]></title>
    <link href="http://ota42y.com/blog/2015/01/10/summary/"/>
    <updated>2015-01-10T20:44:25+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/10/summary</id>
    <content type="html"><![CDATA[<p>毎週やったことをまとめることで、その週を振り替えられるのではないかと思ったので、土曜か日曜ぐらいにその週のまとめを書きます。<br/>
主に1記事にするには難しいものや、失敗してダメだったものをまとめていく予定です。</p>

<p>思った以上に面倒なので、来週はしないかもしれません…</p>

<h1>なんでブログに書くのか</h1>

<p>テキストでローカルに持っていても良いんですが、そうするとファイル管理が面倒になります。<br/>
こうやってブログに書いておけば検索エンジンからたどれますし、個々のファイルの管理をしなくて良くなります。</p>

<p>また、<a href="http://ota42y.com/blog/2014/12/31/150-output/">GithubのContributionsを使ってアウトプットを150日続ける</a>でも書いたように、振り返りで1コミット稼げるので、振り返りをしっかりするようになるという狙いもあります。</p>

<h1>node-tumblrのテストが動かせなかった</h1>

<p><a href="https://github.com/meritt/node-tumblr">node-tumblr</a>でリブログする機能が欲しかったので追加しようかと思いましたが、
そもそも今の状態のテストができなくて諦めました。</p>

<p>例えばtwitterであれば、自分のfav一覧を正常に取れるかをテストするためには、
テストするアカウントでfavしておかなければなりません。
同じようなことがnode-tumblrのテストでも起きているのですが、
その準備に必要なものが何なのかがわからないため、テストできませんでした。</p>

<p>テストを書くことも大事ですが、テストを実行するための手順を整えておくのも大事ですね…</p>

<h1>node-ircへのPRが取り込まれた</h1>

<p>7月ぐらいに出した<a href="https://github.com/martynsmith/node-irc">node-irc</a>のPRが取り込まれました。内容としては<a href="http://ota42y.com/blog/2014/08/09/irc/">IRCはCL-LFでメッセージを区切る</a>に書いたように、古いサーバーは別の改行コードを送ってくるため、両方に対応できるようにする修正です。<br/>
<a href="https://github.com/martynsmith/node-irc/pull/280">https://github.com/martynsmith/node-irc/pull/280</a><br/>
ブランチ戦略が変わったらしく、出し直したためコミットは新しくなっています。</p>

<p>PRにたいしてツッコミが来たり、出された反論コードがおかしいので、ちゃんと修正すれば動くよと返したりと大変でした。
英語でのコミュニケーションは言いたいことをどう書けばいいか解らないので大変です…ボギャブラリー不足ですね。</p>

<h1>インターステラーとベイマックスを観た</h1>

<p>ベイマックスは本国ではBig Hero 6というタイトルで公開されていて、
そのタイトル通り、ベイマックスのみが主人公ではなく、彼？を含む6人がアメコミヒーローになるという話だった。
また、映画の舞台が日本の風景をピクサー風に仕上げた街であり、主人公も日本人風の名前や顔立ちだったりと、
随所に日本リスペクトが見られました。</p>

<p>インターステラーは近年には珍しい本気で作られたSF映画で、これSF詳しくない人には辛いんじゃないかな？
と心配になるぐらい、しっかりとSFしています。
私は大好物ですが、興行収入が良いのかどうかは謎ですね。</p>

<p>映像としては専門家の監修の元でしっかりとした映像が作られており、
また、おそらく随所に2001年宇宙の旅のリスペクトっぽい部分があったのが面白かったです。</p>

<p>特に好きなシーンは、物語の中盤で主人公が仲間の感情的な意見をバッサリと切り捨てて合理的な判断をしたのと、
最後の方のシーンですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macのghcは改行コードがCRだと動かない]]></title>
    <link href="http://ota42y.com/blog/2015/01/07/mac-ghc-cr/"/>
    <updated>2015-01-07T07:55:16+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/07/mac-ghc-cr</id>
    <content type="html"><![CDATA[<p>Haskellでどう見ても文法的に間違っていないのに、<br/>
何故かコンパイルエラーになっていましたが、<br/>
改行コードが原因でした。</p>

<p>ちょうど始めたばかりで、実は文法ミスや、<br/>
バージョン違いとの切り分けが大変でしたが、<br/>
結果は残念な結果になりました…</p>

<h1>まとめ</h1>

<ul>
<li>GHCではLF、CRLFは正しく動くがCRはダメ</li>
<li>PDFからサンプルコードをコピペしたらCRになっていた

<ul>
<li>Macのプレビューでいくつか試したが、現状全てCRになる</li>
<li>PDFが原因か、Preview.appがそういう仕様なのかは用検証</li>
</ul>
</li>
</ul>


<h1>調査方法</h1>

<p>以下のファイルを改行コードLFで保存します。</p>

<p>lf.hs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>plus :: Integer -&gt; Integer -&gt; Integer
</span><span class='line'>plus a b = a + b
</span><span class='line'>
</span><span class='line'>main = print (plus 40 2)</span></code></pre></td></tr></table></div></figure>


<p>LFのまま実行します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>file lf.hs
</span><span class='line'># lf.hs: ASCII text
</span><span class='line'>runghc lf.hs
</span><span class='line'># 42</span></code></pre></td></tr></table></div></figure>


<p>CRLFに変換して実行します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nkf -Lw lf.hs &gt; crlf.hs
</span><span class='line'>file crlf.hs
</span><span class='line'># crlf.hs: ASCII text, with CRLF line terminators
</span><span class='line'>runghc crlf.hs
</span><span class='line'>42</span></code></pre></td></tr></table></div></figure>


<p>CRに変換して実行します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nkf -Lm lf.hs &gt; cr.hs
</span><span class='line'>file cr.hs
</span><span class='line'># cr.hs: ASCII text, with CR line terminators
</span><span class='line'>runghc cr.hs
</span><span class='line'># cr.hs:1:62: parse error on input ‘=’</span></code></pre></td></tr></table></div></figure>


<p>失敗しますね(´・_・`)</p>

<h1>何故CRが紛れ込んだか</h1>

<p>最近のmacは改行コードがLFですし、CRが混入するのは中々ありません。</p>

<p>今回は、ちょうどサンプルに使っているPDFからコードをコピペしたところ、<br/>
改行コードがCRになっていたのが原因でした。</p>

<p>いくつかのPDFでやってみましたが、全てCRになっており、<br/>
Preview.appで必ずCRにされるのか、PDF自体がCRなのかは切り分けが必要です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インライン展開についての追加調査]]></title>
    <link href="http://ota42y.com/blog/2015/01/06/c-inline-postscript/"/>
    <updated>2015-01-06T07:37:34+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/06/c-inline-postscript</id>
    <content type="html"><![CDATA[<p>昨日の記事で、インライン展開について調べましたが、<br/>
よくよく考えると片手落ちだったので追加調査しました。</p>

<p><a href="http://ota42y.com/blog/2015/01/05/c-inline/">インライン展開がどう展開されるのかを調べた</a></p>

<h1>調査内容</h1>

<p>昨日はヘッダと実装が書いてあるファイルとでの差は調べましたが、<br/>
同じファイル内でどのようになるかは調べていませんでしたので、<br/>
追加調査しました。</p>

<p>方法は昨日と同じく、-Sオプションをつけて結果を見ます。</p>

<h1>ソースコード</h1>

<p>以下のようなファイルを使います</p>

<p>test.cpp</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;func.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">TestA</span> <span class="n">test</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">getDirect</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">getThrough</span><span class="p">();</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>func.h</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">TestA</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getDirect</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">getThrough</span><span class="p">();</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getPrivate</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>func.cpp</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;func.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getDirect</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getThrough</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">getDirect</span><span class="p">()</span> <span class="o">+</span> <span class="n">getPrivate</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getPrivate</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">73</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>func.cppのgetThrough関数に対して、インライン展開が行われる事が予想されますが、<br/>
getDirect関数は外部からも呼ばれるため、展開しても関数そのものは必要です。<br/>
getPrivate関数は外部から呼ばれないため、インライン展開後に消してしまう可能性があります。</p>

<h1>最適化しない場合</h1>

<p>3つの関数は全て普通にコンパイルされました。</p>

<h1>最適化した場合</h1>

<h2>同じファイル内のインライン展開</h2>

<p>getThrough関数は以下のようになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="nl">__ZN5TestA10getThroughEv</span><span class="p">:</span>               <span class="err">##</span> <span class="err">@</span><span class="n">_ZN5TestA10getThroughEv</span>
</span><span class='line'><span class="n">pushq</span>  <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="n">movq</span>   <span class="o">%</span><span class="n">rsp</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="n">movl</span>   <span class="err">$</span><span class="mi">115</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'><span class="n">popq</span>   <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'><span class="n">retq</span>
</span></code></pre></td></tr></table></div></figure>


<p>42+73=115なので、インライン展開と最適化がされているのがわかります。<br/>
そのため、同じファイル内なら、ヘッダに書いていなくても勝手にインライン展開されるみたいです。</p>

<p>よくよく考えると、includeが処理されるのはプリプロセスのタイミングで処理されます。<br/>
そのため、コンパイラは全てのヘッダファイルが展開された状態のテキストしか受け取りません。<br/>
なので、どのファイルに関数が書かれているかは関係ないと思われます。</p>

<h2>インライン展開後の関数</h2>

<p>getDirect関数とgetPrivate関数ですが、どちらも最適化していない場合と同じく、<br/>
関数が出力されていました。</p>

<p>getDirect関数はpublic指定されているため、<br/>
外部から参照される場合のために展開後も関数が残されるのは予想通りです。</p>

<p>getPrivate関数はprivate指定されているため継承先のクラスから呼ばれることはなく、<br/>
かつこのクラスはfriend指定もされていないため、外部から呼び出されることはありません。<br/>
そのため、インライン展開後をして同じクラス内から呼ばれないことが確定した時点で、<br/>
この関数を出力する必要は無さそうなのですが、なぜ消さないのかは不明です。</p>

<h1>まとめ</h1>

<ul>
<li>同じファイル内でもインライン展開は行われる

<ul>
<li>O3ならinline宣言とか要らない</li>
</ul>
</li>
<li>インライン展開しても、展開元の関数は残る

<ul>
<li>ヘッダファイルに書いた関数は展開元が消えたので挙動が違う</li>
<li>publicはリンクされるまで呼ばれるかわからないので消せない

<ul>
<li>privateは呼ばれない事が確定するはずだが何故か消さない</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インライン展開がどう展開されるのかを調べた]]></title>
    <link href="http://ota42y.com/blog/2015/01/05/c-inline/"/>
    <updated>2015-01-05T07:51:43+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/05/c-inline</id>
    <content type="html"><![CDATA[<p>C++コンパイラは、関数呼び出し部分にその関数の内容を展開し、<br/>
関数呼び出しのオーバーヘッドを削減する、インライン展開をします。</p>

<p>インライン展開はコンパイル時にされるため、<br/>
実際に行われたのか、どう行われているかは出力されません。</p>

<p>そのため、コンパイルたコードがどうなってるかを調べ、<br/>
インライン展開がどう展開しているのかを調べました。</p>

<p>なお、アセンブラに関してはほとんど説明しません。<br/>
「callq シンボル名(文字列)」で関数呼び出しを実行する事だけ理解していれば大丈夫です。</p>

<h1>ソースコード</h1>

<p>以下のソースコードを使います</p>

<p>test.cpp</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;stdio.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;func.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">TestA</span> <span class="n">test</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">getNumInCpp</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">getNumInH</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">getNumInline</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">getNumCallCpp</span><span class="p">();</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d %d %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>func.h</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">TestA</span><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">privateFunc</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getNumInCpp</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">getNumInH</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">getNumCallCpp</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">privateFunc</span><span class="p">()</span> <span class="o">+</span> <span class="n">getNumInH</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">getNumInline</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//int getNumNormal();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">inline</span> <span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getNumInline</span><span class="p">(){</span><span class="k">return</span> <span class="mi">321</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// そもそも定義できない</span>
</span><span class='line'><span class="c1">// int TestA::getNumNormal(){return 111;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>func.cpp</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;func.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">privateFunc</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">123</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">TestA</span><span class="o">::</span><span class="n">getNumInCpp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">73</span> <span class="o">+</span> <span class="n">getNumInH</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>内容としては、</p>

<ul>
<li>getNumInCpp()

<ul>
<li>cpp内に関数の中身が書かれている</li>
<li>cpp内のものはインライン展開されないはず</li>
</ul>
</li>
<li>getNumInH()

<ul>
<li>ヘッダファイル内に関数の中身が置かれている</li>
<li>インライン展開される</li>
</ul>
</li>
<li>getNumInline()

<ul>
<li>インライン不可能なprivateメソッドと、cpp内の関数を呼ぶ</li>
</ul>
</li>
<li>getNumCallCpp()

<ul>
<li>明示的にインライン展開指定をしたもの</li>
<li>インライン展開される</li>
</ul>
</li>
</ul>


<p>になります。</p>

<h1>最適化しない場合</h1>

<p>まずは最適化オプションをつけずにコンパイルしました。<br/>
<code>g++ -S test.cpp func.cpp</code></p>

<p>そのため、インライン展開はされません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">subq</span>   <span class="err">$</span><span class="mi">32</span><span class="p">,</span> <span class="o">%</span><span class="n">rsp</span>
</span><span class='line'><span class="n">leaq</span>   <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="n">movl</span>   <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">__ZN5TestA11getNumInCppEv</span> <span class="err">#</span> <span class="p">(</span><span class="err">変数</span><span class="n">a</span><span class="err">の計算</span><span class="p">)</span>
</span><span class='line'><span class="n">leaq</span>   <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">-</span><span class="mi">12</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">__ZN5TestA9getNumInHEv</span> <span class="err">#</span> <span class="p">(</span><span class="err">変数</span><span class="n">b</span><span class="err">の計算</span><span class="p">)</span>
</span><span class='line'><span class="n">leaq</span>   <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">-</span><span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">__ZN5TestA12getNumInlineEv</span> <span class="err">#</span> <span class="p">(</span><span class="err">変数</span><span class="n">c</span><span class="err">の計算</span><span class="p">)</span>
</span><span class='line'><span class="n">leaq</span>   <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">__ZN5TestA13getNumCallCppEv</span> <span class="err">#</span> <span class="p">(</span><span class="err">変数</span><span class="n">d</span><span class="err">の計算</span><span class="p">)</span>
</span><span class='line'><span class="n">leaq</span>   <span class="n">L_</span><span class="p">.</span><span class="n">str</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">-</span><span class="mi">24</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">-</span><span class="mi">12</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">esi</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">-</span><span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">edx</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">-</span><span class="mi">20</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">ecx</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">-</span><span class="mi">24</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">r8d</span>
</span><span class='line'><span class="n">movb</span>   <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="o">%</span><span class="n">al</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">_printf</span>
</span></code></pre></td></tr></table></div></figure>


<p>callqで4種類の関数を全て呼び出しているのがわかります。<br/>
インライン展開はされていないため、func.hやfunc.cppで直接書いている数値はどこにも出てきません。</p>

<h1>最適化した場合</h1>

<p>O3オプションをつけてインライン展開されるようにしました。<br/>
<code>g++ -S -O3 test.cpp func.cpp</code></p>

<p>なお、#で注釈を入れています</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">leaq</span>   <span class="o">-</span><span class="mi">24</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'><span class="n">movq</span>   <span class="o">%</span><span class="n">rbx</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># getNumInCppの呼び出し(変数aの計算)</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">__ZN5TestA11getNumInCppEv</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">r14d</span>
</span><span class='line'><span class="n">movq</span>   <span class="o">%</span><span class="n">rbx</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="cp"># privateFuncの呼び出し(変数dの計算)</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">__ZN5TestA11privateFuncEv</span>
</span><span class='line'><span class="cp"># getNumInHの結果が直接書かれている(変数dの計算)</span>
</span><span class='line'><span class="n">leal</span>   <span class="mi">42</span><span class="p">(</span><span class="o">%</span><span class="n">rax</span><span class="p">),</span> <span class="o">%</span><span class="n">r8d</span>
</span><span class='line'><span class="n">leaq</span>   <span class="n">L_</span><span class="p">.</span><span class="n">str</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'><span class="cp"># getNumInHの結果が直接書かれている(変数bの計算)</span>
</span><span class='line'><span class="n">movl</span>   <span class="err">$</span><span class="mi">42</span><span class="p">,</span> <span class="o">%</span><span class="n">edx</span>
</span><span class='line'><span class="cp"># getNumInlineの結果が直接書かれている(変数cの計算)</span>
</span><span class='line'><span class="n">movl</span>   <span class="err">$</span><span class="mi">321</span><span class="p">,</span> <span class="o">%</span><span class="n">ecx</span>
</span><span class='line'><span class="n">xorl</span>   <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'><span class="n">movl</span>   <span class="o">%</span><span class="n">r14d</span><span class="p">,</span> <span class="o">%</span><span class="n">esi</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># printfの呼び出し</span>
</span><span class='line'><span class="n">callq</span>  <span class="n">_printf</span>
</span></code></pre></td></tr></table></div></figure>


<p>最適化した場合、関数呼び出しの量も内容もかなり変化しています。</p>

<p>一番初めのgetNumInCpp関数はcppに書かれており、インライン展開が出来ないため、<br/>
最適化しない場合と同じく関数呼び出しをしています。</p>

<p>次にprivateFunc関数の呼び出しを行っていますが、<br/>
これはgetNumCallCpp関数が展開され、それ以上展開できないprivateFunc関数と、<br/>
42を返すだけのgetNumInH関数がさらにインライン展開されたものと思われます。<br/>
privateFunc関数はprivateメソッドですが、アセンブラではアクセス指定子は無視されます。</p>

<p>また、321を返すgetNumInline関数もインライン展開されて直接数値が書かれているのがわかります。</p>

<p>なお、ソースコード上で変数bやcに代入している部分は、<br/>
直接値を書いてある状態と同じになるようにインライン展開されるため、<br/>
コンパイラの最適化によって処理順番を入れ替えられ、printfへの呼び出し直前に移動させられています。</p>

<h1>インライン指定しない場合のエラー</h1>

<p>コメントアウトしてあるgetNumNormal関数は、ヘッダファイル内でインライン指定をせずに定義しています。<br/>
このコメントアウトを戻すと、以下のエラーにより失敗します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">duplicate</span> <span class="n">symbol</span> <span class="n">__ZN5TestA12getNumNormalEv</span> <span class="nl">in</span><span class="p">:</span>
</span><span class='line'><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">folders</span><span class="o">/</span><span class="n">md</span><span class="o">/</span><span class="n">b8zf203j65b0qt_t4439fdvm0000gp</span><span class="o">/</span><span class="n">T</span><span class="o">/</span><span class="n">test</span><span class="o">-</span><span class="mf">837e1</span><span class="n">d</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">folders</span><span class="o">/</span><span class="n">md</span><span class="o">/</span><span class="n">b8zf203j65b0qt_t4439fdvm0000gp</span><span class="o">/</span><span class="n">T</span><span class="o">/</span><span class="n">func</span><span class="o">-</span><span class="n">c8b605</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'><span class="nl">ld</span><span class="p">:</span> <span class="mi">1</span> <span class="n">duplicate</span> <span class="n">symbol</span> <span class="k">for</span> <span class="n">architecture</span> <span class="n">x86_64</span>
</span><span class='line'><span class="nl">clang</span><span class="p">:</span> <span class="nl">error</span><span class="p">:</span> <span class="n">linker</span> <span class="n">command</span> <span class="n">failed</span> <span class="n">with</span> <span class="n">exit</span> <span class="n">code</span> <span class="mi">1</span> <span class="p">(</span><span class="n">use</span> <span class="o">-</span><span class="n">v</span> <span class="n">to</span> <span class="n">see</span> <span class="n">invocation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>sファイルの作成には成功するため調べてみたところ、
getNumNormal関数がfunc.sとtest.s両方に定義されていました。</p>

<p>この関数はインライン展開されないため、func.hを読み込むtest.cppとfunc.cpp両方で定義されてしまい、<br/>
duplicate symbolになっています。</p>

<p>インライン展開されるgetNumInline関数は、関数自体はどこにも定義されないため二重定義にはならず、<br/>
問題なく動いているようです。</p>

<h1>まとめ</h1>

<ul>
<li>最適化しないとインライン展開されない</li>
<li>hファイルの中に実装を書くとインライン展開される

<ul>
<li>そもそもインライン展開しないとduplicateになる

<ul>
<li>そのため、ヘッダに書いた関数は全てインライン展開されるはず?</li>
</ul>
</li>
</ul>
</li>
<li>cppファイルに実装を書くとインライン展開されない

<ul>
<li>include対象に入ってないのだからあたりまえ</li>
<li>複数のcppファイルに書かれた内容を繋げるのはリンク時なのでコンパイル後</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UNIXという考え方という本を読んだ]]></title>
    <link href="http://ota42y.com/blog/2015/01/04/unix-boox/"/>
    <updated>2015-01-04T11:22:27+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/04/unix-boox</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/UNIX%E3%81%A8%E3%81%84%E3%81%86%E8%80%83%E3%81%88%E6%96%B9%E2%80%95%E3%81%9D%E3%81%AE%E8%A8%AD%E8%A8%88%E6%80%9D%E6%83%B3%E3%81%A8%E5%93%B2%E5%AD%A6-Mike-Gancarz/dp/4274064069">UNIXという考え方</a>という本を読みました。<br/>
原著は1994年に書かれている本で、
<a href="http://ja.wikipedia.org/wiki/UNIX%E5%93%B2%E5%AD%A6">UNIXの哲学</a>を一つ一つ、その意味と利点について解説しています。</p>

<p>「一つのことを、うまくやれ」や「小さいものは美しい」等、ある程度ハッカー文化に詳しい人ならばどれかは聞いたことがあるぐらい有名な哲学です。</p>

<p>面白いのは、例えば「できるだけ早く試作を作成する」という項目では、設計を完璧にしてから取りかかるのではなく、
プロトタイプを作り、それをユーザに見せてフィードバックをもらい、良い設計にしていくべきと述べられています。<br/>
これはアジャイル開発のイテレーションを回していく手法ととても似ており、開発手法の歴史を感じます。</p>

<p>また、「一つのことを、うまくやれ」は色々やる巨大な関数より、ちゃんと機能毎に分割しろと解釈できますし、「ソフトウェアの挺子（てこ）を有効に活用する」は他のいいプログラムからコードを借りてきたり、gemやnpmで既にあるソフトウェアを利用するといった、コードの再利用性の話だと解釈できます。</p>

<p>原著は1994年に書かれたにもかかわらず、今日でも普通に通用する哲学がちりばめられており、UNIX哲学の現代のプログラミング文化への強い影響と、その普遍性をかんじます。</p>

<p>ただ、本書の中でシェルスクリプトが移植性もいいし簡潔に書けるしと礼賛されていますが、デバッグしにくい上に、コマンドがGNUかBSDかで結果が変わる場合があるので実は移植性がそんなに無いですし、現代ではちょっとどうなのかな…みたいな部分もあります。<br/>
今ですと、スクリプト言語かクロスコンパイルが簡単にできるGo言語が良い選択肢でしょうか。</p>

<p>そういった具体的な部分に関しては時代の変化で合わなくなっている部分もありますが、その哲学自体は普遍的なもので、今読んでも、おそらくは10年後に読んでも得るものが多い本だと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fork関数がどうやってプロセスを分割しているか]]></title>
    <link href="http://ota42y.com/blog/2015/01/03/unix-fork/"/>
    <updated>2015-01-03T20:15:43+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/03/unix-fork</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AEOS%E3%82%B3%E3%83%BC%E3%83%89%E3%83%AA%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0-~UNIX-V6%E3%81%A7%E5%AD%A6%E3%81%B6%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%81%AE%E3%81%97%E3%81%8F%E3%81%BF-Software-Design/dp/4774154644">はじめてのOSコードリーディング ~UNIX V6で学ぶカーネルのしくみ</a><br/>
という本を読んでいます。</p>

<p>この中で、fork関数がどうやって子プロセスを作り、<br/>
親子かを識別して別の値を返しているのかが解説されており、<br/>
とても興味深かったです。</p>

<p>以下にその概要をまとめました。</p>

<h1>fork関数</h1>

<p>Cではfork関数を利用することで、子プロセスを作成することが出来ます。<br/>
コードとしてはこんな感じですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/wait.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">pid_t</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;child!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;parent!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">status</span><span class="p">;</span>
</span><span class='line'>  <span class="n">waitpid</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">status</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;parent end</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>子プロセスは親プロセスのデータをそのままコピーするため、変数などは全て同じ状態になります。<br/>
ですが、fork関数は親プロセスの場合は子プロセスのIDを、子プロセスでは0を返すため、<br/>
ユーザはfork関数の戻り値を見て、自身が親なのか子なのかを区別できるようになっています。</p>

<p>では、fork関数の中ではどのようにして、親プロセスか子プロセスかを判断し、<br/>
別の値を返しているのでしょうか。</p>

<p>これは(UNIX V6では)switch関数の仕様を上手く使った実装により実現されていました。</p>

<h1>fork関数がプロセスの親子を区別する仕組み</h1>

<h2>親による子プロセスの作成</h2>

<p>ライブラリのfork関数(<a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/source/s4/fork.s">source/s4/fork.s</a>)を実行すると、<br/>
システムコールによってカーネルのfork関数(<a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/sys1.c">sys/ken/sys1.c</a>)が実行されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">fork</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">register</span> <span class="k">struct</span> <span class="n">proc</span> <span class="o">*</span><span class="n">p1</span><span class="p">,</span> <span class="o">*</span><span class="n">p2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">p1</span> <span class="o">=</span> <span class="n">u</span><span class="p">.</span><span class="n">u_procp</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">p2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">proc</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="n">p2</span> <span class="o">&lt;</span> <span class="o">&amp;</span><span class="n">proc</span><span class="p">[</span><span class="n">NPROC</span><span class="p">];</span> <span class="n">p2</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">p2</span><span class="o">-&gt;</span><span class="n">p_stat</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">found</span><span class="p">;</span>
</span><span class='line'>  <span class="n">u</span><span class="p">.</span><span class="n">u_error</span> <span class="o">=</span> <span class="n">EAGAIN</span><span class="p">;</span>
</span><span class='line'>  <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">found</span><span class="p">:</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">newproc</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">u_ar0</span><span class="p">[</span><span class="n">R0</span><span class="p">]</span> <span class="o">=</span> <span class="n">p1</span><span class="o">-&gt;</span><span class="n">p_pid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">u_cstime</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">u_cstime</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">u_stime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">u_cutime</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">u_cutime</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u</span><span class="p">.</span><span class="n">u_utime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">u</span><span class="p">.</span><span class="n">u_ar0</span><span class="p">[</span><span class="n">R0</span><span class="p">]</span> <span class="o">=</span> <span class="n">p2</span><span class="o">-&gt;</span><span class="n">p_pid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">out</span><span class="p">:</span>
</span><span class='line'>  <span class="n">u</span><span class="p">.</span><span class="n">u_ar0</span><span class="p">[</span><span class="n">R7</span><span class="p">]</span> <span class="o">=+</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このカーネルのfork関数内でnewproc関数(<a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/slp.c">sys/ken/slp.c</a>)を呼び出し、子プロセスを作成しています。<br/>
その後、newproc関数は0を返すため、カーネルのfork関数で0で帰ってきた場合に、<br/>
作成した子プロセスのIDをレジスタに乗せ、ライブラリのfork関数で返すようにしています。</p>

<h2>作成された子プロセス側の処理</h2>

<p>子プロセスは作成された後、実行順番が回ってきたタイミングでswitch関数(<a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/slp.c">sys/ken/slp.c</a>)により再開します。<br/>
この関数内では保存されたデータを復元し、最後にsavu関数を実行した関数の呼び出し元に、return 1で戻ります。</p>

<p>カーネルのfork関数で呼び出しているnewproc関数(<a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6/usr/sys/ken/slp.c">sys/ken/slp.c</a>)内では、<br/>
savu関数が実行されてから子プロセスがコピーされるため、<br/>
switch関数はnewprocの呼び出し元であるfork関数に1で戻ります。</p>

<p>これにより、カーネルのfork関数内で呼び出しているnewproc関数は、<br/>
親プロセスの場合は0が、子プロセスの場合は1が返るようになり、<br/>
その値を見て自身が親なのか子なのかを判断でき、別々の戻り値を返せるようになっています。</p>

<h1>まとめ</h1>

<ul>
<li>親プロセスはforkで子プロセスを作成してそのまま処理を継続</li>
<li>子プロセスは実行順番が回ってきたタイミングで処理を開始

<ul>
<li>switch関数で復帰した際に、通常とは別の戻り値が返るため親子を区別可能</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大晦日ハッカソン2014&正月ハッカソン2015に参加した]]></title>
    <link href="http://ota42y.com/blog/2015/01/01/1231-hackathon/"/>
    <updated>2015-01-01T13:01:08+09:00</updated>
    <id>http://ota42y.com/blog/2015/01/01/1231-hackathon</id>
    <content type="html"><![CDATA[<p>2014/12/31にオンラインで行われた、<br/>
<a href="https://atnd.org/events/59470">大晦日ハッカソン2014</a>に参加しました。</p>

<p>Evernoteのリンクをアプリで直接開くChrome拡張を作りました。<br/>
<a href="https://chrome.google.com/webstore/detail/evernote-app-opener/pjkgaadffbojkgoocbobikkklpajjbgo">evernote app opener - Chrome ウェブストア</a></p>

<p>(なお、細かい修正やこの記事の執筆等を、<br/>
<a href="https://atnd.org/events/60889">正月ハッカソン2015</a>でやりました)</p>

<h1>どんなChrome拡張か</h1>

<p>現在、Evernoteのノート固有のリンクを取得すると、<br/>
<code>https://www.evernote.com/shard/文字列/文字列/ユーザID/ノートID/</code><br/>
といった、httpsのリンクが使われます。</p>

<p>このリンクを開くと、EvernoteのWebアプリ上でノートを開くことが出来ますが、<br/>
Evernoteはログインが最長で一週間しか保てず、また二段階認証をしている場合は、<br/>
頻繁に面倒なログインを求められます。</p>

<p>ですが多くの場合、開こうとしているノートはオフラインのEvernoteアプリでも開くことが出来ます。<br/>
そのため、Webではなくアプリで開く事が出来れば、わざわざログインせずともノートを開くことが出来ます。</p>

<p>そのため、上記のようなWebアプリでノートを開くようなリンクを、<br/>
オフラインのEvernoteアプリ上で同じノートを開くChrome拡張を作りました。</p>

<h1>使い方</h1>

<p>事前に、適当なノートのノートリンクを取得し、自分のユーザIDとshard名を取得する必要があります。<br/>
Chrome拡張のオプションページにあるように、ノートを右クリックし、ノートリンクを取得し、<br/>
そのURLに含まれているユーザIDとshard名をオプションページで設定してください。</p>

<p>その状態で、Evernoteのノートリンクを開くと、ログイン/非ログインに関わらず、<br/>
Evernoteアプリが立ち上がり、そのノートを開いてくれます。</p>

<p>これで、いちいちWebでログインすることなく、ノートリンクで指定したノートを表示することが出来ます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GithubのContributionsを使ってアウトプットを150日続ける]]></title>
    <link href="http://ota42y.com/blog/2014/12/31/150-output/"/>
    <updated>2014-12-31T12:00:16+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/31/150-output</id>
    <content type="html"><![CDATA[<p><img src="http://ota42y.com/images/posts/2014-12-31-150-output.png" height="200" alt="github" /></p>

<p>というわけで、GithubのContributionsを利用して、<br/>
毎日何かしらのアウトプットを150日続けるということをやりました。</p>

<h1>何故こんな事をしたのか</h1>

<p>私はまじめ系クズな上に意志薄弱なので、やった方がいいようなことでも、<br/>
いろんな理由をつけてやらないのがいつものことでした。</p>

<p>特にインプットに重きを置く性質のため、いろいろなことを調べたりしますが、<br/>
アウトプットは何かしらの理由をつけて避けてしまう傾向があります。<br/>
実際、このブログにしたのは2013年9月ですが、そこから半年で1エントリのみ、<br/>
その後の3ヶ月も月に1回程度とほとんど書いてないに等しいです。</p>

<p>別にそのままでも問題は無かったのですが、せっかく色々インプットしているのに、<br/>
定着させないのはもったいないと思い、継続的にアウトプットする方法を模索しました。</p>

<h1>継続的なアウトプットをどう実現するか</h1>

<p>毎日継続的アウトプットを頑張る！と奮起しても、それが継続しないのが今回の問題です。<br/>
そのため、頑張る/頑張らないといった意思に関係なく続けられる、<br/>
もしくは歯磨きをせずに寝ようとした時のように、<br/>
継続してアウトプットしないと落ち着かないといった状態を目指します。</p>

<p>幸いにも、私の性格には続けたことを辞めるのを凄くもったいなく感じるというものがありました。<br/>
大学時代には、一日一冊づつ本を読んでいて、たまたま数十日続けたところで辞めるのがもったいなくなり、<br/>
結局1000日ぐらい毎日本を読み続ける、みたいな事をするぐらいには、<br/>
ある程度続いたものを途中で辞めるのを嫌う性格です。</p>

<p>この性質を利用し、最初のアウトプットを頑張って続けている状態から、<br/>
低いコストで継続してアウトプットを続けられれば、以降はそれを途中でやめるのがもったいなくなり、<br/>
継続的なアウトプットが出来るのではないか？と考えました。</p>

<p>おそらくは数日かけてじっくり練ったアウトプットよりかは質が落ちますが、<br/>
ほとんど出ない質のいいアウトプットより、継続的に低い質のアウトプットをした方が、<br/>
私にとっては良い影響になると考えました。</p>

<h1>ルール設定</h1>

<p>数日程度なら意思の力で何とかなるため、それを低コストで継続的に行いやすく、<br/>
かつ続けるうちに辞めるのが勿体ないようなルール設定を作ります。</p>

<h2>1. アウトプットは外部に公開</h2>

<p>自分だけにしか見えないところにアウトプットすると、<br/>
結局なんだかんだでやらない未来が容易に想像できるため、必ず外部公開します。<br/>
今回みたいに定期的に続けてますエントリを書くことで、万が一検証されたら嘘がばれる…という力が働き、<br/>
サボったのをごまかすことがなくなると考えました。<br/>
(検証されるかは重要ではなく、検証される可能性があるだけでサボり抑止には十分)</p>

<h2>2. １日１コミット以上Githubにpush</h2>

<p>毎日続けた事を記録するのはとてもとても面倒です。<br/>
ですが、Githubなら最初の画像のように、コミットがあった場合にそれを可視化して表示してくれます。<br/>
そのため、アウトプットをコミットすることでGithubにpushするだけで良くなり、<br/>
前述の外部公開するという条件も同時に満たせるためかなり敷居が下がります。<br/>
特に、プログラミング関係の作業がそのまま記録できたり、ブログをOctopressにしているため、<br/>
新しいエントリを書くのもコミットになっているという所も大きいです。</p>

<h2>3. コミットを溜めるのは可</h2>

<p>風邪を引いたり、仕事が忙しいときなどはどうしても何も出来ない場合があります。<br/>
そんな場合に、事前にブログの記事やコミット等を溜めておき、当日は公開するだけというのもありとしました。<br/>
今回の最大の目的は継続的なアウトプットであり、<br/>
毎日アウトプットするのは私の性格を利用して継続的アウトプットを成し遂げるための手段に過ぎません。</p>

<p>そのため、継続的なアウトプットが実現するならば、事前にそれを溜めておくのは良しとしました。<br/>
特にこの方法は途中で辞めるのがもったいないと感じるという所を利用して、継続的アウトプットを実現しているため、<br/>
一度でもそれが崩れると挽回は不可能であるためです。</p>

<p>また、私はゲームでもHPやアイテム、リソースを十分すぎるほどため込むのが好きな正確なため、<br/>
何日分の溜めがあると可視化されると、十分な量の溜めを確保しようと動くだろうという予想もしていました。<br/>
gitだと別の日のコミットも、git rebase &ndash;ignore-dateでそのときのコミットに書き換えられるため、<br/>
溜めを作りやすい状態でもあります。</p>

<h2>4. 意味のあるコミットだけカウント</h2>

<p>Githubだとpull-requestをマージするだけで1コミットが作られるため、ボタンを押すだけで1日分稼げてしまいます。<br/>
ですが、これは当初の継続的なアウトプットには繋がらないため、<br/>
最低限意味のあるコミットを行うのをルールとしました。</p>

<p>ただし、今回の目的は定期的なアウトプットであるため、アウトプットの質自体は考慮せず、<br/>
どんなに小さくてもバグ修正や、関数単位では出来ているものは1コミットとして考えるようにしました。<br/>
無意味なコミットは禁止するが、あまり価値のないコミットでも許可するといった具合です。</p>

<h1>150日続けた結果</h1>

<h2>利点</h2>

<p>誰かが「何かをやめる最良の方法は、別の何かを始めることだ」と言っていましたが、まさにそれを感じでいます。<br/>
一日の時間は限られているため、この継続的にアウトプットすることより優先度が低いものは後回しになり、<br/>
惰性で続けていただけの事は自然と後回し、辞めていきました。<br/>
どうしても続けたいような事の場合、その作業にかかる時間を削ろうと、<br/>
作業の補助をするプログラムを作ったりするようにもなりました。</p>

<p>また、溜めはあればあるほど安心できるため、暇なときはすぐに何かまとめられるネタが無いか、<br/>
新しいパッケージにするようなことが無いかを考えるようになり、いろいろな技術などに手を出すようになりました。<br/>
特に、何となく理解しているが検証していないことに対して検証するようになり、<br/>
正確な知識を作れている…きがします。</p>

<h2>問題点</h2>

<h3>外に出せない作業をやらなくなる</h3>

<p>部屋の片付けや不要なものの整理、サイトのクローリングなど、公開出来ない作業をしにくくなります。<br/>
前者に関しては生活に支障がでるとさすがにやらざるを得ないため問題がありませんが、<br/>
後者は毎日やってるのを自動化したら楽になるが、公開できないので手をつけ辛いといった問題があります。</p>

<p>これに関しては溜めを作ることである程度時間のコントロールが可能になり、<br/>
「自動化すれば日々の作業量が減って毎日楽になるし、溜めを数日分使ってでもやる」<br/>
という事が出来るようになったため、だいぶ解決しました。</p>

<h3>細かく終わる作業ばかり選ぶようになる</h3>

<p>数日かけてやる作業や、まとめにくい作業（コードリーディングとか）が出来なくなってしまいます。<br/>
これは、時間をかけてもせいぜい1コミット程度にしかならず、<br/>
細かい作業でコミット量を増やした方が溜をたくさん作れるため、<br/>
このルール下ではそちらの方が合理的な選択になってしまうのが原因です。</p>

<p>実際、アドベントカレンダーで書いたラブライブ関連の記事は2ヶ月ぐらい少しずつ作っていましたが、<br/>
最終的には3日分のコミットにしかなっていません。<br/>
作業を選べばおそらく同じ時間で10倍ぐらいのコミットが稼げてしまうため、費用対効果がかなり薄いです。</p>

<p>今回の目的は定期的にアウトプットすることであり、たくさんの小粒のコミットを生み出すこと自体は問題ありません。<br/>
ですが、同じ状態を維持できるなら、アウトプットの質は上げたほうが望ましいです。<br/>
一応溜めがあれば、それを消費して数日かかる長い作業も出来ますが、<br/>
費用対効果が悪いために手を出しにくいという問題は解決していません。<br/>
ここについては今後、ブログに途中作業を書くのは良しとするなどのルールを加えて解決していこうかと思います。</p>

<h1>まとめ</h1>

<p>世の中にはこんな面倒な決め事をしなくても、価値のある行動を延々と続けられる凄い人もいますが、<br/>
私みたいなまじめ系クズ＋意志薄弱でも、その性格を分析して適切なルールを敷いて行動することで、<br/>
少なくとも三日坊主にならずに物事を続けられるぐらいには持って行くことが出来ます。</p>

<p>このルールは、継続している状態を辞めてしまうのは勿体ないという、<br/>
私の性格や思考に完全に合うように作っているため、他の人の場合は全く違うルールが必要です。</p>

<p>そのため、はてなブックマークのブックマーク数が増えることや、テキストファイルのバイト数が増えること、<br/>
自分の友人の反応など、そういったことがいいと感じる人は、<br/>
それを継続のベースにしたルールを作る必要があります。</p>

<p>ルールの作成は大変ですが、その人にあったルールを作ることで、<br/>
同じように何かを継続したり、もっと凄いことも出来るようになる…と思います。</p>

<p>ただ、私の感覚として、できる限り頑張るといった意思の力に頼る事は避けた方がいいと思います。<br/>
やる気は容易に無くなるため、やる気が無い状態でもいかに継続するかについては、<br/>
ルールに上手く含めておいた方がいいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASUS MeMO Pad 7 ME572CでLink2SDを動かす]]></title>
    <link href="http://ota42y.com/blog/2014/12/30/link2sd/"/>
    <updated>2014-12-30T10:24:27+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/30/link2sd</id>
    <content type="html"><![CDATA[<p>ME572CにはSDカードが挿せるため、<br/>
本体の容量が足りなくなっても気軽に容量を追加できます。</p>

<p>ですが、対応しているアプリしかSDカードにデータが保存できず、<br/>
対応しているアプリでも機種によっては、<br/>
上手くSDカードに入らない場合があります。</p>

<p>実際、私が使っているアプリですとEvernote、KindleがSDへのデータ保存が出来ず、<br/>
ニコニコ電子書籍アプリがGalaxy S5だとSDに保存できますが、ME572Cだと書籍データをSDに保存できません。</p>

<p>このような場合、Link2SDというアプリを利用することで、強制的にSDカードにデータを保存する事が出来ます。<br/>
ただし、Root化必須かつデータ部分をSDに移動するには有料アドオンが必要です。</p>

<p>なお、このアプリは通常の管理画面から無効化できないアプリを無効化する機能も有しています。</p>

<h1>Link2SD</h1>

<p><a href="https://play.google.com/store/apps/details?id=com.buak.Link2SD&amp;hl=ja">Link2SD</a>は、ほぼ全てのアプリをSDカードから読み込めるようにするアプリです。<br/>
おそらくは、アプリが参照するフォルダをシンボリックリンクを利用してSDカードの中に向けており、<br/>
アプリからの内蔵ストレージへのアクセスを、SDカードに飛ばしているのだと思われます。</p>

<h1>SDカードの準備</h1>

<p>このアプリを使うためにはSDカードに二つのパーティションを切る必要があります。</p>

<p>このうち1つめが普通のSDカード領域として認識され、<br/>
2つめのパーティションがLink2SDによってアプリが書き込まれる領域になります。<br/>
なお、2つめのパーティションがfat16もしくはfat32の場合、アプリのデータをSDカードに移動できません。</p>

<p>なお、Windowsユーザの場合、OSが一つのパーティションしか扱えないため、<br/>
<a href="http://www.partitionwizard.com/download.html">Mini Tool</a>のような専用ソフトでパーティションを作る必要があります。<br/>
このとき、どちらのパーティションもPrimaryに設定しておく必要があります。</p>

<p>パーティションのフォーマットは、端末によって上手くいく組み合わせとそうでない組み合わせがあるようです。<br/>
ネット上にはext2/ext2でいけるという情報が見られますが、ME572CではLink2SDが上手く認識しませんでした。<br/>
fat32/ext2もダメで、ext3/ext3だと第一パーティションは認識せず第二パーティションのみ認識、<br/>
NTFS/ext3だと両方上手く認識したためこれを利用します。</p>

<h1>アプリをSDカードに移す</h1>

<p>Link2SDでシンボリックリンクを作成することで、アプリとデータをSDカードに移動できます。<br/>
ただし、データをSDカードに移動する場合は<a href="https://play.google.com/store/apps/details?id=com.buak.link2sdplus&amp;hl=ja">有料アドオン</a>が必要です。</p>

<p>Link2SD上でアプリをクリックし、リンクを作成をすることでデータをSDカードに移動できます。<br/>
<img src="http://ota42y.com/images/posts/2014-12-30-link2sd.png" alt="Link2SD" /></p>

<p>EvernoteやKindleではこのデータ部分が大きくなっていくため、実質必須になります。<br/>
ただし、画像の通り若干本体側にデータが残るため、完全に移動できるわけではありません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASUS MeMO Pad 7 ME572CをRoot化した]]></title>
    <link href="http://ota42y.com/blog/2014/12/28/memopad-root/"/>
    <updated>2014-12-28T12:50:49+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/28/memopad-root</id>
    <content type="html"><![CDATA[<p>ASUS MeMO Pad 7 ME572Cを買いました。</p>

<p><a href="http://www.asus.com/jp/Tablets/ASUS_MeMO_Pad_7_ME572CL/">タブレット - ASUS MeMO Pad 7 (ME572CL) - ASUS</a></p>

<p>Nexus 9とかと迷いましたが、</p>

<ul>
<li>コストパフォーマンスがいい

<ul>
<li>安くてそこそこ高性能</li>
</ul>
</li>
<li>SDカードが使える

<ul>
<li>気軽に容量増強出来る</li>
</ul>
</li>
</ul>


<p>といった点から、これに決めました。</p>

<p>ですが実際に届いて起動してみたところ、<br/>
余計なアプリ(Flipboard、Yahoo、謎のタスクアプリ等)が入っていました。</p>

<p>特に「やることリスト」(<a href="https://play.google.com/store/apps/details?id=com.asus.task&amp;hl=ja">ASUS Do It Later</a>)というアプリは、<br/>
定期的にGoogleアカウントにアクセスしようとする上に無効化もできず、かなり邪魔なアプリになっています。</p>

<p>そのため、Rootを取って無効化することにしました。</p>

<h1>Root化手順</h1>

<p>RootZenFoneというアプリが、1.4.6.6r以降でME572Cに対応したため、これを使います。<br/>
(2014/12/28の最新版は1.4.6.8r)</p>

<p>手順としては以下の通りになります。</p>

<ul>
<li>RootZenFoneをインストール</li>
<li>Wifiと3Gを機内モードにして切る</li>
<li>RootZenFoneを起動</li>
<li>通信切れ＆危ないよ警告が出てくるので、通信が切れている事を確認して画面下のOKボタンを押す</li>
<li>変化がなくなるまで待つ

<ul>
<li>色々ポップアップが出たりする</li>
</ul>
</li>
<li>もう一度RootZenFoneを起動し、rebootしろと出ているのを確認して再起動

<ul>
<li>この時点でRoot化出来ています</li>
</ul>
</li>
<li>AsusLiveDemoというアカウントが追加されているため削除</li>
<li>RootZenFonを消す</li>
<li>通信を有効か</li>
<li>SuperSuが自動でインストールされているので、最新版に更新</li>
<li>SuperSuを起動し、データ更新後に再起動を促されるので再起動</li>
</ul>


<p>Root化ってこんなに簡単だっけ？とういぐらい簡単にできてしまいます。<br/>
あとは適当な無効化アプリで対象のアプリを無効化orアンインストールすればおしまいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pixivのタグから読み解くラブライブイラスト投稿者分析]]></title>
    <link href="http://ota42y.com/blog/2014/12/27/lovelive-age/"/>
    <updated>2014-12-27T12:11:29+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/27/lovelive-age</id>
    <content type="html"><![CDATA[<p><a href="http://ota42y.com/blog/2014/12/26/lovelive-cp/">昨日</a>、<a href="http://ota42y.com/blog/2014/12/25/lovelive/">一昨日</a>とラブライブイラストについて見ていきましたが、<br/>
最後にイラストを投稿している投稿者さんについて見ていきます。</p>

<h1>投稿者の性別傾向</h1>

<h2>集計方法</h2>

<p>キャラのイラストと、ラブライブ関連イラストを投稿した人全員に対して、性別と年齢を調べてまとめました。<br/>
なお、各データはユーザページで公開されているものを利用したため、<br/>
全体に情報を公開している人のみの集計になります。</p>

<h2>各キャラ毎の性別傾向</h2>

<p>各キャラ毎に、男性と女生徒でどれくらいの割合で投稿しているかを集計しました。<br/>
なお、キャラ毎に投稿数ユーザ数がそもそも違うため、<br/>
そのキャラに投稿した人のうち性別が判別できるユーザがどれくらいの割合なのかを集計しています。</p>

<p><img src="http://ota42y.com/images/posts/2014-12-27-lovelive_chara_user.png" height="100" alt="キャラ毎の性別傾向" /></p>

<p>ラブライブタグ全体では女性投稿者の方が多い結果になりました。</p>

<p>キャラ毎では、男性投稿者が多いキャラが５人に、女性投稿者が多いキャラ人気が４人と、<br/>
μ&#8217;sメンバーの中でも男女のユーザ数が半分に別れています。</p>

<p>特に男性からの投稿が多いのは高坂穂乃果、園田海未の二名です。<br/>
女性からの投稿が特に多いのは、南ことり、矢澤にこの二名になります。<br/>
また、星空凛は男女共にほぼ同数の投稿人数になります。</p>

<p>なお、昨日の記事でも紹介した、閲覧数の多いカップリングである、<br/>
「にこまき」「のぞえり」「ことうみ」「りんぱな」ですが、<br/>
カップリングの片方ずつで男性投稿者と女性投稿者の投稿数が割れています。<br/>
男性女性、それぞれから支持を得るキャラ同士のカップリングだから人気だったりするのでしょうか？</p>

<h2>カップリング毎の性別傾向</h2>

<p>前回の記事で集計した総閲覧数1,000,000以上のカップリングに対して、<br/>
性別ごとに投稿者の割合を集計しました。</p>

<p><img src="http://ota42y.com/images/posts/2014-12-27-lovelive_cp_user.png" height="100" alt="カップリング毎の性別傾向" /></p>

<p>人気のカップリングでは女性投稿者が多いことがわかります。<br/>
また、キャラごとの傾向では片方が6割を超えることはありませんでしたが、<br/>
カップリングごとでは6割超えが多く見られ、かなり偏りがあります。</p>

<p>なお、キャラ別に比べて有効なユーザ数が少ないため、<br/>
必ずしも正確な調査ではない部分にご注意ください。</p>

<h1>ラブライブ投稿者の年齢層</h1>

<h2>集計方法</h2>

<p>ラブライブのイラストを投稿した全ユーザから、年齢を公開しているユーザを集計しました。<br/>
各キャラ毎に年齢別にユーザ数を出していましたが、<br/>
ほぼ全キャラ同じ傾向になったため、ラブライブイラスト全体で出すことにします。</p>

<h2>集計結果</h2>

<p>有効なデータ数は男性3665、女性2771、性別不明765の7201件でした。<br/>
なお、10才から5才区切りで集計しています。</p>

<p><img src="http://ota42y.com/images/posts/2014-12-27-lovelive_user_age.png" alt="ラブライブイラストの年齢傾向" /></p>

<p>20〜25才未満が最も投稿している結果になりました。</p>

<p>そこから+-5才が二番目に多いすが、25才以上は男性がほとんどなのに対し、<br/>
20才未満は女性が多くを占めています。<br/>
そのため、20代男性と、15〜25才の女性投稿者が多いようです。</p>

<h1>まとめ</h1>

<ul>
<li>ラブライブイラスト全体では女性投稿者の方が多い

<ul>
<li>キャラ毎では、男性の投稿者に人気、女性の投稿者に人気がわかれている</li>
<li>人気の4カップリングは、男性人気+女性人気の組み合わせキャラだった</li>
</ul>
</li>
<li>カップリングイラスト投稿者は女性投稿者の方が多い

<ul>
<li>投稿者の男女別人気も、キャラのそれよりも偏りが大きい</li>
</ul>
</li>
<li>投稿者は男女で若干世代が違う

<ul>
<li>女性は15〜25才、男性は20〜30才</li>
</ul>
</li>
<li>最も投稿が多いユーザは一人で250件以上投稿していた

<ul>
<li>そのほぼ半分に西木野真姫タグがついており、同キャラの最多投稿ユーザ</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pixivのタグから読み解くラブライブカップリング傾向(2014年11月現在)]]></title>
    <link href="http://ota42y.com/blog/2014/12/26/lovelive-cp/"/>
    <updated>2014-12-26T07:41:49+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/26/lovelive-cp</id>
    <content type="html"><![CDATA[<p><a href="http://ota42y.com/blog/2014/12/25/lovelive/">昨日</a>はラブライブタグ全体と、各キャラについて見ていきましたが、<br/>
今日はカップリングについて見ていきます。</p>

<p>なお、既に調べられていたので、半分ぐらいはその内容のアップデートになります。<br/>
<a href="http://iwiwi.hatenadiary.jp/entry/2014/06/28/003736">pixiv のタグ情報を用いた「ラブライブ！ School idol project」のカップリングネットワークの構築</a></p>

<h1>収集方法</h1>

<p>pixivのタグから、各カップリングタグ（「にこまき」、「のぞえり」等）とラブライブタグがついているものを収集し、
そのイラストの閲覧数の和を集計しました。</p>

<p>条件にラブライブタグを含めないと、高坂雪穂と星空凛の「ゆきりん」タグで別のゆきりんが引っかかる等、<br/>
ラブライブとは関係のないものも含まれてしまうため、このような条件にしています。</p>

<p>また、「まきりんぱな」や「ことほのうみ」といった３人を含むタグについては、<br/>
「まきりん」と「りんぱな」として集計することはせず、結果から除外しています。</p>

<p>なお、元となったエントリの詳しい収集方法がわからないため、<br/>
単純な数値比較は出来ませんのでご注意ください。</p>

<h1>順番を加味しない場合</h1>

<p>「にこまき」と「まきにこ」を同一視する場合です。</p>

<h2>収集結果</h2>

<p>(クリックで大きく見られます)</p>

<p><a href="http://ota42y.com/images/posts/2014-12-26-lovelive_cp.png"><img src="http://ota42y.com/images/posts/2014-12-26-lovelive_cp.png" height="200" alt="順番を加味しない" /></a></p>

<p>にこまきの人気は相変わらず圧倒的です
時点がのぞえりなのも前回から変わりません。<br/>
ですが、３番目のことうみが、前回よりも他を大きく引き離してきています。</p>

<p>また、つばほのがマイナーカップリングを凌ぐほどの人気になっていたり、<br/>
ゆきありが地味に伸びていたりと、メインキャラ以外の部分にも多少変化があります。</p>

<h2>グラフ</h2>

<h3>1,000,000以上のみの場合</h3>

<p>元記事に習い、1,000,000未満の辺がﾐﾄﾒﾗﾚﾅｲ場合、組み合わせはこのようなグラフになります。</p>

<p><img src="http://ota42y.com/images/posts/2014-12-26-lovelive_1000000.png" alt="1000000" /></p>

<p>前回は生徒会グループと、広義の一年生グループとに別れていましたが、<br/>
ほのまきとのぞにこの人気が上がったことにより、全てが繋がりました。</p>

<p>また、高坂穂乃果は4種類のカップリングがあり、最もカップリングの種類が多いキャラになっています。</p>

<h3>100,000以上のみの場合</h3>

<p>100,000未満の辺がﾐﾄﾒﾗﾚﾅｲ場合は以下のようなグラフになります。</p>

<p><img src="http://ota42y.com/images/posts/2014-12-26-lovelive_100000.png" alt="100000" /></p>

<p>西木野真姫、絢瀬絵里、高坂穂乃果に線が集中し、りんぱなにはそれほど線がありません。<br/>
また、高坂雪穂と絢瀬亜里沙はどちらも実の姉とは繋がっていないのがわかります。</p>

<p>最もカップリングが多いのは、μ&#8217;sメンバー全員と繋がっている西木野真姫と、<br/>
8人＋綺羅ツバサと繋がっている高坂穂乃果になります。</p>

<h1>順番を加味する場合</h1>

<p>「にこまき」と「まきにこ」を別物として数えます。</p>

<h2>集計結果</h2>

<p>行＋列のカップリングスコアになります。<br/>
(クリックで大きく見られます)</p>

<p><a href="http://ota42y.com/images/posts/2014-12-26-lovelive_cp.png"><img src="http://ota42y.com/images/posts/2014-12-26-lovelive_cp_dict.png" height="200" alt="順番を加味する" /></a></p>

<p>複数のイラストを含んだ投稿などで、「のぞえり」と「えりのぞ」が両方つけられるような場合があり、<br/>
前述の順番を加味しない場合と、順番を加味した場合の和は異なっています。</p>

<p>基本的には「のぞにこ」と「ほのまき」が増えた以外は前の結果とほぼ変わりませんでした。</p>

<p>なお、前回の結果と比べて「まきりん」が減少していますが、<br/>
不審に思って調べたところ、「まきりん」タグ自体の登録数は少なく、<br/>
そもそも前回の結果のような大きい値になることは考えにくいです。</p>

<p>一方で、タグを完全一致ではなく部分一致にし、「まきりん」の集計に「まきりんぱな」も入れると、<br/>
似たような大きな値になるため、おそらくはこれが原因だと思われます。</p>

<h2>グラフ</h2>

<p>1,000,000未満の辺がﾐﾄﾒﾗﾚﾅｲ場合、グラフは以下のようになります。</p>

<p><img src="http://ota42y.com/images/posts/2014-12-26-lovelive_1000000_dict.png" alt="1000000" /></p>

<p>南ことり、星空凛は常に先に来ているのに対し、西木野真姫、園田海未は誰が相手でも常に後に来ています。</p>

<p>また、「のぞえり」と「えりのぞ」だけがお互いに辺を作っています。<br/>
一番人気の「にこまき」の方向がほぼ固定なのと比較すると、かなり特徴的です。</p>

<p>なお、これ以下の閾値やR-18作品の結果などは前回と大きな変化が見られなかったため、省略します。</p>

<h1>カップリングイラスト投稿数推移</h1>

<p>カップリングは全部で72通りあるため、投稿数1,000,000以上のカップリングのアニメ化後の推移をまとめました。<br/>
なお、月ごとの投稿数で調べたところあまりにも乱高下が激しく、わかりづらいグラフだったため、<br/>
月ごとの累計投稿数で集計を行いました。</p>

<h2>投稿数1,000,000以上のカップリングの推移</h2>

<p><img src="http://ota42y.com/images/posts/2014-12-26-cp_all.png" alt="投稿数1,000,000以上のカップリングの推移" /></p>

<p>一期放映直後から、にこまきの投稿数が圧倒的であることがわかります。<br/>
また、量が多いのでわかりにくいですが、<br/>
二期第２話「優勝をめざして」の直後あたりに投稿数が一気に伸びていました。</p>

<p>のぞえりは二期になってから一気に伸びています。<br/>
詳しく調べたところ、アニメ放映直後からしばらくの間はりんぱなやほのえりとほぼ同じ程度の投稿数でしたが、<br/>
二月のライブ以降投稿数が増加していき、<br/>
５月末の第８話「私の望み」から東條希の誕生日(6/9)周辺で一気に増加しました。</p>

<h2>上位２組以外のカップリング推移</h2>

<p>にこまき、のぞえりが多すぎるため、この二つを取り除いたグラフも用意しました。</p>

<p><img src="http://ota42y.com/images/posts/2014-12-26-cp_without.png" alt="にこまきとのぞえり以外のカップリングの推移" /></p>

<p>りんぱな、ほのえりは一期の頃から投稿数が多かったでしたが、<br/>
りんぱなが二期も同じぐらい押されて、増加ペースを伸ばしたのに対し、<br/>
ほのえりは二期ではそれほど押されていなかったためか、増加ペースは変わっていません。</p>

<p>対してことうみ、えりうみは二期が始まってから増加ペースが伸びていきました。<br/>
特にことうみは５月頭のコミティアから５月中頃の僕らのラブライブ４にかけて、一気に投稿数が増加していました。</p>

<p>また、上記の総閲覧数ではりんぱなよりことうみの方が多いのですが、<br/>
イラストの投稿数自体はりんぱなの方が量が多いです。<br/>
詳しく調べたところ、最も閲覧数の多いイラストもりんぱなの方が１万ぐらい多いのですが、<br/>
中央値等はことうみのほうが２倍ぐらい大きくなっていました。<br/>
あまりデータ分析方法は知らないため、この逆転現象の原因を探るのは難しそうです…</p>

<h1>まとめ</h1>

<ul>
<li>にこまきの人気凄い

<ul>
<li>のぞえり、ことうみ、りんぱなの人気が続く</li>
<li>(・8・)ﾎﾉｶﾁｬﾝ…</li>
</ul>
</li>
<li>ただし、投稿数1,000,000以上のカップリングに一番出てくるのは高坂穂乃果

<ul>
<li>⊂(・8・)⊃＜ﾎﾉｶﾁｬｧｧｧﾝ!</li>
<li>ほのこと、ほのうみ、ほのまき、ほのえりの４つ</li>
<li>時点は西木野真姫と園田海未、綾瀬絵里

<ul>
<li>にこまき、ほのまき、りんまき</li>
<li>ことうみ、えりうみ、ほのうみ</li>
<li>のぞえり、ほのえり、えりうみ</li>
</ul>
</li>
</ul>
</li>
<li>キャラ個別と同じく、アニメでフォーカスが当たると投稿数が伸びる</li>
<li>投稿数が多い≠閲覧数が多い

<ul>
<li>ものすごい人気の作品があるわけではない</li>
<li>絵師さん人気よりも非絵師さん人気があるとか？</li>
</ul>
</li>
</ul>


<h1>次回予告</h1>

<p>次回はラブライブイラストを描いている投稿者の分析をしようと思います。<br/>
<a href="http://ota42y.com/blog/2014/12/27/lovelive-age/">pixivのタグから読み解くラブライブイラスト投稿者分析</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pixivのタグから読み解くラブライブイラストの歩み]]></title>
    <link href="http://ota42y.com/blog/2014/12/25/lovelive/"/>
    <updated>2014-12-25T07:00:00+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/25/lovelive</id>
    <content type="html"><![CDATA[<p>⊂(・8・)⊃＜776O776J7722776B772s772n772n772n776dIQ==</p>

<p>さて、<a href="http://www.adventar.org/calendars/398">ラブライブ！ Advent Calendar 2014</a>最終日は、<br/>
pixiv上のラブライブのイラストについて見ていこうと思います。</p>

<p>内容としては以下になります。</p>

<ul>
<li>pixiv上のラブライブイラストの推移(本記事)</li>
<li><a href="http://ota42y.com/blog/2014/12/26/lovelive-cp/">pixivのタグから読み解くラブライブカップリング傾向</a></li>
<li><a href="http://ota42y.com/blog/2014/12/27/lovelive-age/">pixivのタグから読み解くラブライブイラスト投稿者分析</a></li>
</ul>


<p>なお、一つの記事にするには長すぎたため、<br/>
3記事に分割しています。</p>

<p>今日はpixiv上のラブライブイラストの推移について書いていきます。</p>

<h1>集計方法</h1>

<p>各キャラ毎のイラストに関しては、そのキャラの本名、<br/>
もしくは別名+ラブライブタグがついたイラストを集計しています。<br/>
(ことりちゃんや凛ちゃん、のんたん等、ラブライブ以外の同名タグを含めないため)</p>

<p>ラブライブ！タグとしては、ラブライブ！およびLoveLive!といった作品名のタグのついたイラストと、<br/>
各登場人物のイラストを重複排除して集計しました。<br/>
（ラブライブ！タグのついてないキャラのイラストもあるため）</p>

<p>集計期間は、ラブライブイラストが初めて投稿された2010年8月〜2014年11月になります。</p>

<h1>年間イラスト数の推移</h1>

<p><img src="http://ota42y.com/images/posts/2014-12-25-lovelive_01.png" alt="年間イラスト数推移" /></p>

<p>一期放送の2013年に投稿数が増えた後、二期放送の2014年でさらに4倍近くイラスト数が伸びています。</p>

<p>ご覧の通り、アニメ化以前と以後とでは、投稿数が100倍ぐらい差があるため、<br/>
ここから先はアニメ化以前とアニメ化以後、およびキャラ毎の3種類に分けて見ていきます。</p>

<h1>アニメ化以前の月刊イラスト投稿数</h1>

<p><img src="http://ota42y.com/images/posts/2014-12-25-lovelive_02.png" alt="アニメ化以前の月刊イラスト投稿数" /></p>

<p>各シングル発売のたびにイラストが増加しています。</p>

<p>1stシングル発売後は一度投稿数が落ち込みましたが、<br/>
2ndシングル「Snow halation」が発売してからは安定した投稿数を確保しています。<br/>
その後も、3rd、4thと着実に投稿数が伸びています。</p>

<p>4thシングル&amp;1stライブ&amp;アニメ化発表の時の盛り上がりが凄いですが、<br/>
同時に3月まで5thシングルの総選挙があったため、3月の投票数も伸びています。</p>

<p>なお、この月の誕生日の園田海未を除くと、<br/>
南ことり、矢澤にこ、西木野真姫の3人が他のキャラと比べて増加していましたが、<br/>
総選挙の上位三人になっており、データ数が少ないので偶然かもしれませんが、ちゃんと対応が取れていました。</p>

<p>ちなみに、5thシングル前の7月にも山が見られますが、調べたところにこの聖誕祭効果でした。</p>

<h1>アニメ化以降の月刊イラスト投稿数</h1>

<p><img src="http://ota42y.com/images/posts/2014-12-25-lovelive_03.png" alt="アニメ化以降の月刊イラスト投稿数" /></p>

<p>アニメ化以前は月間投稿数が100を超えることはありませんでしたが、<br/>
アニメ化以降一気に投稿数が伸び、放送終了後以降は月刊投稿数が1000を切ることがないぐらいにまで成長しました。</p>

<p>投稿数の増加は夏コミまで続きますが、夏コミ(C84)が終わった後はいったん沈静化します。<br/>
ですが、12月の冬コミ(C85)と3rdのDVD/BD発売から再び火がつき、<br/>
2月のライブにかけて再びイラスト数が増加していきます。</p>

<p>特に、ライブ直後の二週間だけで投稿数が2000を超すなど、二期を直前にして盛り上がりは最高潮に達しています。</p>

<p>二期が放映されてからは一期以上のペースで伸びていき、<br/>
一期と同じく夏コミ(C86)まで増加して一度沈静化しました。</p>

<p>今月は冬コミ(C87)が控えているため、おそらくそれによってまた増加すると思われます。</p>

<h1>学年ごとの集計</h1>

<p>一週間筒キャラ毎にまとめたのを用意したので、もう少し細かく見ていくことにします。</p>

<p>なお、各キャラ共に誕生日とその次の日にかけて、聖誕祭イラストとして投稿数が増加します。<br/>
そのため、キャラの誕生日と次の日を別の週として集計すると、実態と集計結果がずれてしまいます。</p>

<p>幸いなことに、投稿数が増えた2013年〜2014年の間で水曜日が誕生日のキャラはいないため、<br/>
木曜〜水曜の一週間で集計し、誕生日と次の日が分割されることを回避しています。</p>

<h2>1年生</h2>

<p><img src="http://ota42y.com/images/posts/2014-12-25-lovelive_04.png" alt="まきりんぱな" /></p>

<p>これは全てのキャラに言えることですが、各キャラの誕生日ごとにスパイクが発生し、<br/>
イラスト数が増加しているのがわかります。<br/>
また、こちらも各キャラ共通ですが、4thライブ直後にもイラスト数が増加しています。</p>

<p>キャラとしては、アニメ化前からちょくちょく人気でしたが、やはり西木野真姫の投稿数は安定しています。<br/>
また、2013年はイラスト数が少なかったため、矢澤にこの聖誕祭でにこまきカップリングとして、<br/>
投稿数が伸びていました。
なお、2014年はイラスト数が増えたため、相対的に影響が小さくなっています。</p>

<p>2014年の西木野真姫の誕生日に隠れていますが、<br/>
二期の第５話「新しい私」直後から、星空凛の投稿数が上がっています。</p>

<p>小泉花陽はアニメ二期後の誕生日が来月のため、そちらのデータに期待です。</p>

<h2>2年生</h2>

<p><img src="http://ota42y.com/images/posts/2014-12-25-lovelive_05.png" alt="ことほのうみ" /></p>

<p>アニメ化以前から人気だった南ことりの投稿数は多いですが、<br/>
二期以前は他の二人も同じぐらいの投稿数があり、それほど差がついてはいませんでした。</p>

<p>なお、2014年の南ことりの誕生祭は、今のところ全キャラ中トップの投稿数になります。</p>

<p>高坂穂乃果聖誕祭の陰に隠れていますが、海の日に園田海未のイラスト投稿数が増加しています。<br/>
彼女も小泉花陽と同じく、アニメ二期後の誕生日がまだですので（３月）そちらのデータに期待です。</p>

<h2>3年生</h2>

<p><img src="http://ota42y.com/images/posts/2014-12-25-lovelive_06.png" alt="にこのぞえり" /></p>

<p>やはりアニメ化前からの人気キャラの矢澤にこの投稿数は凄いです。<br/>
ですが元から人気があったため、二期第４話の「宇宙ナンバーワンアイドル」の影響はそんなに見られませんでした。</p>

<p>一方で東條希は二期第８話「私の望み」とその直後の誕生祭で一気に投稿数が上がっています。<br/>
絢瀬絵里はお当番回が一期８話だったこともあり、二期以降で目立った変化はありませんでした。</p>

<h2>A-RAISEとゆきあり</h2>

<p><img src="http://ota42y.com/images/posts/2014-12-25-lovelive_07.png" alt="つばあんえれゆきあり" /></p>

<p>メインキャラではないため、やはりイラストの数が全然違います。</p>

<p>高坂雪穂や絢瀬亜里沙は一期後もぽつぽつと投稿が見られました。</p>

<p>A-RISEもほぼ同じ状況でしたが、やはり二期第３話で「ユメノトビラ」ライブをしてから、<br/>
一気に投稿数が上昇しています。<br/>
その後の最終予選でももう一度盛り上がりを見せ、以降は少しずつ投稿が行われています。</p>

<p>なお、２０１４年９月頃にまた投稿数が上がっていますが、<br/>
同人誌即売会の僕らのラブライブ５（聖地の秋葉原UTXで開催）の影響でした。<br/>
データ数がそれほど多くないため、同人イベントによる増加が大きく出ているようです。<br/>
（一応、矢澤にこや西木野真姫のグラフにも若干影響が出ています）</p>

<p>なお、神モブであるヒフミトリオに関しては、同名キャラが引っかかりノイズも多く、<br/>
有効なデータ数が少なすぎるため集計していません。<br/>
せめてフルネームがあればいいのですが…</p>

<h1>まとめ</h1>

<ul>
<li>アニメ化以後の投稿数の上がり方は凄い

<ul>
<li>一期でも増えたが、二期になってさらに増えている</li>
</ul>
</li>
<li>何かしらのイベントがあると投稿数が伸びる

<ul>
<li>ライブ、コミケ等</li>
<li>特に聖誕祭の効果はすさまじい

<ul>
<li>どのキャラも、二期の聖誕祭は一期に比べて四倍以上増えてる</li>
</ul>
</li>
<li>4thライブの影響は大きかった

<ul>
<li>4thライブ後でどのキャラも投稿数が上がり、そのまま二期に入っている。</li>
<li>アニメ化前の盛り上げ方としてかなり効果がある結果になっている（イラスト投稿数的には）</li>
</ul>
</li>
</ul>
</li>
<li>キャラのトレンドは大きく分けて三つ

<ul>
<li>前から人気の真姫、ことり、にこ</li>
<li>二期で大きく伸びた凛、希</li>
<li>大きな変化がない花陽、穂乃果、海未、絵里</li>
</ul>
</li>
<li>実感として特別不人気のキャラはいないと思っていたが、実際いなかった</li>
</ul>


<p>なお、今月末には冬コミが、1/31〜2/1にはライブがあるので、どう変化するかが楽しみです。</p>

<h1>次回予告</h1>

<p>明日はカップリングについて現状と、その推移を調べていきます。<br/>
<a href="http://ota42y.com/blog/2014/12/26/lovelive-cp/">pixivのタグから読み解くラブライブカップリング傾向(2014年11月現在)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphvizを使うと、グラフ描画がとても楽になる]]></title>
    <link href="http://ota42y.com/blog/2014/12/22/graphviz/"/>
    <updated>2014-12-22T07:42:27+09:00</updated>
    <id>http://ota42y.com/blog/2014/12/22/graphviz</id>
    <content type="html"><![CDATA[<p>こんな感じの画像を作る際に</p>

<p><img src="http://ota42y.com/images/posts/2014-12-22-grahviz.png" alt="グラフ" /></p>

<p>これまではパワポの図形機能とかペイントで頑張って作っていましたが、<br/>
Graphvizを使うと自動で出力できます。</p>

<h2>Graphvizとは</h2>

<p>AT&amp;Tが作ったグラフ描画のツールパッケージです。<br/>
<a href="http://ja.wikipedia.org/wiki/Graphviz">http://ja.wikipedia.org/wiki/Graphviz</a></p>

<p>DOT言語というグラフ記述言語で記述されたグラフを、画像ファイル等に変換することができます。</p>

<p>グラフのレイアウト等はGraphviz内のアルゴリズムによって自動で配置されますが、<br/>
SVGで出力できるため、他のソフトで調整ができます。</p>

<h1>使い方</h1>

<h2>インストール</h2>

<p>brew gts graphviz</p>

<h2>dotファイルの作成</h2>

<p>最初に見せたグラフは以下のように作ります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>digraph G {
</span><span class='line'>  Hono[image="th_hono.png", label="", shape=plaintext];
</span><span class='line'>  Koto[image="th_koto.png", label="", shape=plaintext];
</span><span class='line'>  Umi[image="th_umi.png", label="", shape=plaintext];
</span><span class='line'>  Maki[image="th_maki.png", label="", shape=plaintext];
</span><span class='line'>  Rin[image="th_rin.png", label="", shape=plaintext];
</span><span class='line'>  Pana[image="th_pana.png", label="", shape=plaintext];
</span><span class='line'>  Nico[image="th_nico.png", label="", shape=plaintext];
</span><span class='line'>  Nozo[image="th_nozo.png", label="", shape=plaintext];
</span><span class='line'>  Eli[image="th_eli.png", label="", shape=plaintext];
</span><span class='line'>  Yuki[label="雪穂"];
</span><span class='line'>
</span><span class='line'>  Nico -&gt; Maki;
</span><span class='line'>  Koto -&gt; Umi;
</span><span class='line'>  Rin -&gt; Pana;
</span><span class='line'>  Rin -&gt; Maki;
</span><span class='line'>  Nozo -&gt; Eli;
</span><span class='line'>  Nozo -&gt; Nico;
</span><span class='line'>  Koto -&gt; Hono[dir = none];
</span><span class='line'>  Hono -&gt; Umi;
</span><span class='line'>  Hono -&gt; Nico;
</span><span class='line'>  Hono -&gt; Maki;
</span><span class='line'>  Hono -&gt; Yuki;
</span><span class='line'>  Hono -&gt; Eli;
</span><span class='line'>  Hono -&gt; Rin;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>初めにレイアウトに使うアルゴリズムを書きます。<br/>
次に画像だけ、文字だけといったノードを定義し、その関係を記述します。</p>

<h2>出力</h2>

<p>上記のファイルをcp.dotという名前で保存し、以下のコマンドを実行するとSVGファイルに出力されます。<br/>
<code>dot -Tsvg cp.dot -o cp.svg</code></p>

<p>SVG以外にもgifやpngへの出力が可能です。<br/>
<code>dot -Tpng cp.dot -o cp.png</code></p>

<h1>レイアウト詳細</h1>

<p>配置アルゴリズム等はこちらの記事が参考になると思います。<br/>
<a href="http://melborne.github.io/2013/04/02/graphviz-layouts/">Graphvizレイアウトサンプル</a></p>
]]></content>
  </entry>
  
</feed>
