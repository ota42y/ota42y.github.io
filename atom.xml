<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[おおたの物置]]></title>
  <link href="http://ota42y.com/atom.xml" rel="self"/>
  <link href="http://ota42y.com/"/>
  <updated>2014-09-12T07:44:45+09:00</updated>
  <id>http://ota42y.com/</id>
  <author>
    <name><![CDATA[ota42y]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux起動時に特定のシェルスクリプトを実行する]]></title>
    <link href="http://ota42y.com/blog/2014/09/12/init-d/"/>
    <updated>2014-09-12T07:40:38+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/12/init-d</id>
    <content type="html"><![CDATA[<p>hubotを自動で実行してほしいなーと思ったので、<br/>
OSの起動時にスクリプトを自動実行する方法を調べました。</p>

<p>まず、<code>/etc/init.d/</code>
に実行可能なスクリプトを置きます。</p>

<p>次に、スクリプトの二行目に、起動設定を書きます。<br/>
<code># chkconfig: 345 99 01</code></p>

<p>一つ目がランレベル、二つ目が起動順番、三つ目が終了順番になります。<br/>
起動・終了は小さい数値から行われるため、<br/>
前述の例ですと一番最後に起動し、一番最初に終了します。</p>

<p>ランレベルについては
<a href="http://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%B3%E3%83%AC%E3%83%99%E3%83%AB">Wikipediaの記事</a>
を参考にしてください</p>

<p>最後に、<code>chkconfig --add (init.dに置いたスクリプト名)</code>を実行して登録を行います。</p>

<p>これで、起動時にスクリプトが実行されます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[strncpyははまりやすい]]></title>
    <link href="http://ota42y.com/blog/2014/09/11/strncpy-bug/"/>
    <updated>2014-09-11T07:45:25+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/11/strncpy-bug</id>
    <content type="html"><![CDATA[<p>strncpyは結構はまりどころがあります。</p>

<p>たとえば以下のコードは正しく動作しません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">c</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">strncpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">c</span><span class="p">));</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>strncpyはコピー先、コピー元、コピー長を引数で取ります。<br/>
この際、strlen等でコピー元の文字長ぴったりを指定すると、<br/>
終端文字がコピー先にコピーされません。</p>

<p>そのため、事前に終端文字を設定しておかないと、<br/>
未初期化の部分まで文字列扱いになります。</p>

<p>以下のコードでその様子をうかがえます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;z&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">str</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;z&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">str</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;z&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">str</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;z&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">str</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;z&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">c</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">strncpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">c</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">length %lu</span><span class="se">\n</span><span class="s">original length %lu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">),</span> <span class="n">strlen</span><span class="p">(</span><span class="n">c</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">strcat</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">&quot;.txt&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">length %lu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>testz
</span><span class='line'>length 5
</span><span class='line'>original length 4
</span><span class='line'>testz.txt
</span><span class='line'>length 9
</span></code></pre></td></tr></table></div></figure>


<p>testという文字列をコピーし、.txtという文字列を追加して、<br/>
test.txt作る予定が、間に他の値が入っています。</p>

<p>strcatは第一引数の文字列の終わりに第二引数をつなげます。<br/>
そのため、コピー時に終端文字を設定していなかったため、<br/>
意図しない文字が間に挟まっています。<br/>
特にバッファの初期化を忘れていた場合、終端文字がいつ現れるか確定しないため、<br/>
注意が必要です。</p>

<p>この挙動は文字列の間に置換する場合には重宝しますが、<br/>
文字列結合などをする場合は気をつける必要があります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go runしても分割したファイルが認識されない]]></title>
    <link href="http://ota42y.com/blog/2014/09/10/golang-file-split/"/>
    <updated>2014-09-10T07:48:24+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/10/golang-file-split</id>
    <content type="html"><![CDATA[<blockquote><p>Go言語では、ひとつのパッケージのソースファイルを一度にまとめてコンパイルするので、特別な決め事や宣言をすることなく、とあるファイルから別ファイル内の定数、変数、型、関数を参照することができます。</p></blockquote>

<p><a href="http://golang.jp/tag/go%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9">Goコードの書き方</a></p>

<p>とのことなので、試しに以下のようにmainパッケージを分割してコンパイルしたところ、上手くいきませんでした(´･_･`)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// main.go</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;main file&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">OutputDiv</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// div.go</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">OutputDiv</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;div file&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>go runの結果、分割したファイルにある関数を見つけられないエラーになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go run main.go
</span><span class='line'><span class="c"># command-line-arguments</span>
</span><span class='line'>./main.go:9: undefined: OutputDiv
</span></code></pre></td></tr></table></div></figure>


<p>どうやら、go runした場合は引数のファイルのみがコンパイル対象になるため、<br/>
go run *.goか、必要なファイルを全てオプションとして渡す必要があるようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go run main.go div.go
</span><span class='line'>main file
</span><span class='line'>div file
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golangでcronを使う]]></title>
    <link href="http://ota42y.com/blog/2014/09/09/golang-cron/"/>
    <updated>2014-09-09T07:32:37+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/09/golang-cron</id>
    <content type="html"><![CDATA[<p>cronというライブラリがあるので、それを使うととても簡単です。
なお、終了すると当然ながら実行しないので、
time.Sleep等で処理を止めておく必要があります。</p>

<script src="https://gist.github.com/ota42y/d8c0d2426bb5dc0cf9e9.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パスワードの文字として避けた方がいい文字]]></title>
    <link href="http://ota42y.com/blog/2014/09/08/password-word/"/>
    <updated>2014-09-08T07:44:40+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/08/password-word</id>
    <content type="html"><![CDATA[<p>ニンテンドー3DSのプリペイドカード入力画面を見て、<br/>
見間違えやすい文字は使わないようにしてるんだーと気づいたので、<br/>
他にもそういうのが無いかまとめました。</p>

<p>もちろんaやtに代表されるように、フォントによって形は全然違うため、<br/>
全ての状況に対して当てはまるとは限りませんが、<br/>
目安程度としては使えると思います。</p>

<p>横一列が間違える可能性の高い文字集合です。</p>

<table>
<thead>
<tr>
<th></th>
<th align="center"></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">0</td>
<td>o</td>
<td>O</td>
<td>Q</td>
<td>D</td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">1</td>
<td>7</td>
<td>i</td>
<td>I</td>
<td>l</td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">2</td>
<td>z</td>
<td>Z</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">5</td>
<td>s</td>
<td>S</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">6</td>
<td>b</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">8</td>
<td>B</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">9</td>
<td>q</td>
<td>g</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">a</td>
<td>d</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">c</td>
<td>C</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">k</td>
<td>K</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">u</td>
<td>U</td>
<td>v</td>
<td>V</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">w</td>
<td>W</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">x</td>
<td>X</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="center">z</td>
<td>Z</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>


<p>まとめると、</p>

<p>数字だけを扱う場合は<br/>
<code>2 3 4 5 6 8 9 0</code></p>

<p>小文字大文字を区別する場合は<br/>
<code>3 4 e f h j m n p r y A E F G H J L M N P R Y</code></p>

<p>小文字大文字を区別しない場合は<br/>
<code>3 4 c e f h j k m n p r t w x w x y z</code></p>

<p>となります。<br/>
思ったより少ないですね…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitで現在のブランチ名をクリップボードにコピーする]]></title>
    <link href="http://ota42y.com/blog/2014/09/07/git-copy-current-branch/"/>
    <updated>2014-09-07T09:19:58+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/07/git-copy-current-branch</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># copy current branch</span>
</span><span class='line'><span class="nv">ccb</span> <span class="o">=</span> <span class="s2">&quot;!f() { echo `git symbolic-ref --short HEAD` | tr -d &#39;\n&#39; ``| pbcopy; pbpaste ; echo &#39;&#39;;}; f&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jenkinsでブランチ○○をビルドしたいような場合に、<br/>
jenkinsに渡すために現在のブランチを調べるのが面倒だったので、<br/>
簡単にコピペできるようにしました。</p>

<p>なお、Mac限定です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CEDEC2014 9月3日まとめ]]></title>
    <link href="http://ota42y.com/blog/2014/09/06/cedec2014-09-03/"/>
    <updated>2014-09-06T10:20:41+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/06/cedec2014-09-03</id>
    <content type="html"><![CDATA[<p>この日だけ参加したのでまとめ</p>

<h1>ウェアラブルコンピューティングの動向とウェアラブルゲームへの展開</h1>

<ul>
<li><p>ウェアラブルの特徴</p>

<ul>
<li>コンピュータを服のように着る

<ul>
<li>常時ON</li>
<li>生活密着</li>
<li>ハンズフリー</li>
</ul>
</li>
<li>Occlusは基本的にウェアラブルではない</li>
</ul>
</li>
<li><p>ウェアラブルは実は難しい</p>

<ul>
<li>装着して利用してみないと解らないことがたくさん</li>
<li>ウェアラブルは一日中身につける（≠持ち歩く）

<ul>
<li>モバイル機器とはまた別のノウハウが必要なのか。</li>
</ul>
</li>
</ul>
</li>
<li><p>汎用vs専用</p>

<ul>
<li>汎用

<ul>
<li>SmartWatch</li>
<li>高性能高機能</li>
<li>まだ実用性低い</li>
</ul>
</li>
<li>専用

<ul>
<li>アクションカメラとか　</li>
</ul>
</li>
<li>デジカメ、音楽プレーヤー等と同じく、少しづつ汎用の性能が上がっていく</li>
</ul>
</li>
<li><p>ウェアラブルゲームではリアルの遊びが重要</p>

<ul>
<li>ちょっとした時間に暇つぶし</li>
<li>ジョギングなど、別のことをしながら</li>
<li>ファッション</li>
<li>コンピュータはバーチャル空間に伸びたので、それとは違う道</li>
</ul>
</li>
</ul>


<h1>「楽しさ」の設計と評価～我々はどこで失敗し，どこへ向かうのか</h1>

<ul>
<li><p>楽しさの評価</p>

<ul>
<li>完成するよりも前に、それが面白いものなのか、どうすれば面白くなるのか？</li>
<li>経験則やコンテンツに左右されない、一般的な評価手法を探すのが目的らしい</li>
</ul>
</li>
<li><p>心理学的手法</p>

<ul>
<li>アンケートとか</li>
<li>かなりあやふや

<ul>
<li>過去にやったゲームとか</li>
<li>調整しました！と言われると、変わって無くても変わったと感じる</li>
</ul>
</li>
</ul>
</li>
<li><p>３つ以上のパラメータを同時に調整するのは困難</p>

<ul>
<li>職人はベターは出せるがベストとは限らない</li>
<li>パラメータか困難なものはよりわからない</li>
<li>調整可能な項目をクリアして、調整困難な協会に時間をかけるのがベター

<ul>
<li>調整可能

<ul>
<li>ロード時間のストレス</li>
<li>ボタン反応の応答時間等</li>
</ul>
</li>
</ul>
</li>
<li>調整困難

<ul>
<li>ユーザに書ける適切なストレスとか</li>
</ul>
</li>
</ul>
</li>
<li><p>人間らしいAIの自動獲得</p>

<ul>
<li>見ていて機械的な不自然さを感じない</li>
<li>相手に合わせて強さを調整できるAI

<ul>
<li>人間の生物学的制約、人為的ミス・エラーの導入</li>
<li>揺らぎ、遅れ、使える、技術・知識の不足、錯誤・失念</li>
</ul>
</li>
</ul>
</li>
<li><p>人間らしさの評価</p>

<ul>
<li>主観的実験（チューリングテスト）</li>
<li>実験のインストラクションが異なると違ってくる</li>
<li>マリオの動きの人間らしさ

<ul>
<li>初心者にちょっとしたテクニックを教えると初心者に見えなくなる

<ul>
<li>人間らしさの評価が変化してしまう</li>
</ul>
</li>
</ul>
</li>
<li>実際はAIでも、AIと伝えるか人間と伝えるかで反応が全然違う</li>
</ul>
</li>
<li><p>演奏家は時間進行に伴って視聴者の心理をコントロールする</p>

<ul>
<li>場面場面での常道のコントロール

<ul>
<li>ゲームっぽい</li>
<li>単調増加する音楽はつまらない

<ul>
<li>下がったり上がったりしつつ全体として上がっていく</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>音楽評価の難しさ</p>

<ul>
<li>一般性vs趣向に関する個人性</li>
<li>蓼食う虫も好き好き</li>
</ul>
</li>
<li><p>脳センサについて</p>

<ul>
<li>脳をはかっただけじゃ何もわかれない

<ul>
<li>しっかりと差が解る実験をしたからわかる</li>
</ul>
</li>
<li>相関関係が解っても因果関係が解らない

<ul>
<li>ここが活性化したけど、それってゲームが面白いから？</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>「サーバとの通信が切れました」の無いゲームのために、インターネットと出来る事。</h1>

<p>口外禁止</p>

<h1>「ゲーム実況」時代のゲームプロモーション　niconicoの事例から</h1>

<p>口外禁止との会場アナウンスとOKのアナウンス両方流れてよくわからない。<br/>
よって何も書かない。</p>

<h1>Cocos2d-x ver.3.xで進む2Dのリッチゲーム開発</h1>

<p>Cocos2d-xは大体知ってるので省略</p>

<ul>
<li><p>CRI ADX2</p>

<ul>
<li>サウンド周りのシステム</li>
<li>フェードとかかなり頑張ってる</li>
<li>端末ごとの差異とかどれくらい吸収するんだろう？</li>
</ul>
</li>
<li><p>CRI Sofdec2</p>

<ul>
<li>映像をα合成できてて凄い</li>
<li>どれだけ軽いかが気になる</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS7でAndroid SDKとNDKを使う]]></title>
    <link href="http://ota42y.com/blog/2014/09/04/centos7-android-build/"/>
    <updated>2014-09-04T07:46:28+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/04/centos7-android-build</id>
    <content type="html"><![CDATA[<h1>環境設定</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum install  java-1.7.0-openjdk-devel  java-1.7.0-openjdk ant zip
</span><span class='line'>sudo yum install ld-linux.so.2 libstdc++.i686 zlib.i686
</span></code></pre></td></tr></table></div></figure>


<p>他にもいくつかあった気がしますが、<br/>
後はエラーとして出たコマンドをインストールするだけなので都度入れてください</p>

<h1>Android SDKとNDKのダウンロード</h1>

<p><a href="http://developer.android.com/sdk/index.html">http://developer.android.com/sdk/index.html</a><br/>
<a href="https://developer.android.com/tools/sdk/ndk/index.html">https://developer.android.com/tools/sdk/ndk/index.html</a><br/>
からそれぞれ対応する物を取ってきて好きなフォルダに解凍します。<br/>
その後、sdkとndkのディレクトリ、及びsdkのplatform-toolsディレクトリをPATHに追加します。</p>

<h1>SDK Platformのインストール</h1>

<p>Eclipseが使えないためSDK Managerは使えませんが、<br/>
代わりにコマンドラインからインストールすることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>android update sdk -u -a -t tools,platform-tools
</span><span class='line'>android update sdk -u -a -t android-19
</span><span class='line'>android update sdk -u -a -t extra-google-google_play_services
</span></code></pre></td></tr></table></div></figure>


<p>後は通常のコマンドラインからビルドする方法でビルド可能です。</p>

<h1>注意点</h1>

<p>なお、MacやWindowsだとファイル名はcase insensitiveですが、<br/>
CentOSだと普通はcase sensitiveなので注意です。<br/>
特にCのincludeは大文字小文字を区別せずに動くため、<br/>
case sensitiveな環境に持って行った場合に特に死にやすいです…(´・_・`)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mgoのConsistencyについて]]></title>
    <link href="http://ota42y.com/blog/2014/09/03/mgo-consistency/"/>
    <updated>2014-09-03T07:12:45+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/03/mgo-consistency</id>
    <content type="html"><![CDATA[<p>mgoのサンプルにあった<br/>
<code>session.SetMode(mgo.Monotonic, true)</code><br/>
の意味がよくわからないので調べてみました。</p>

<p>結論から書きますと、これは複数DBを利用した際の、<br/>
データの一貫性をどの程度保証するかの設定です。</p>

<h1>一貫性制御</h1>

<p>mgoには複数のDB間での一貫性を制御する３種類のモードがあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">const</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">Eventual</span>  <span class="nx">mode</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nx">Monotonic</span> <span class="nx">mode</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nx">Strong</span>    <span class="nx">mode</span> <span class="p">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>SetModeにこれを渡すことで、モードを切り替えられます。</p>

<p>それぞれの内容は以下の通りです。<br/>
おそらく一貫性がちゃんとしていくに従って、複雑化&amp;遅くなっていきます。</p>

<h2>Eventual Consistency</h2>

<p>最終的に辻褄が合えばいいよね設定です。<br/>
データに変更が無く十分な時間が過ぎると、最終的に全ての更新が反映されます。</p>

<p>更新済みのノードと、そうでないノードが混在する可能性があるため、<br/>
どのノードから読み込むのかが固定されない場合、<br/>
新しい値を読み込んだ後に、別のノードから古い値を読み込んでしまう…<br/>
といったことが起きる可能性があるはずです。</p>

<p>同じノードから読み取る場合は、後述するMonotonic Consistencyと同じになると思います。</p>

<h2>Monotonic Consistency</h2>

<p>あるプロセスが値を参照したら、以降はその値かそれより新しい値が読み込まれるという設定です。<br/>
おそらく、値を参照したタイミングで最新かどうかは保証されないが、<br/>
少なくとも古い値が読み込まれることはない、という状態だと思われます。</p>

<h2>Strong Consistency</h2>

<p>常に必ず最新の値が読み込めるという状態です。<br/>
一見すると良さそうですが、最新の値が読めるようになるまで読み込めないため、<br/>
注意が必要です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golangでmongodbを使う]]></title>
    <link href="http://ota42y.com/blog/2014/09/02/go-mongodb/"/>
    <updated>2014-09-02T07:40:29+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/02/go-mongodb</id>
    <content type="html"><![CDATA[<p>mgoというライブラリが便利そうです。<br/>
<a href="http://labix.org/mgo">http://labix.org/mgo</a></p>

<p>以下はtwitterからツイートを取ってきて、<br/>
未登録のツイートをmongodbに保存するスクリプトです。</p>

<p>今のところ、検索結果が存在するかどうかを調べる方法が解らなかったので、<br/>
件数を数えてその結果をチェックしています。</p>

<script src="https://gist.github.com/ota42y/7e493449beec0fe73f62.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDBでインデックスとexplainを使う]]></title>
    <link href="http://ota42y.com/blog/2014/09/01/mongodb-explain/"/>
    <updated>2014-09-01T08:01:51+09:00</updated>
    <id>http://ota42y.com/blog/2014/09/01/mongodb-explain</id>
    <content type="html"><![CDATA[<h1>事前データ準備</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> for (var i=0; i&lt;100; i++) { db.test_object.save({name: "test1", num: i}) }
</span><span class='line'> for (var i=0; i&lt;100; i++) { db.test_object.save({name: "test2", num: i*1000}) }
</span><span class='line'> for (var i=0; i&lt;100; i++) { db.test_object.save({name: "test3", num: i*10000}) }</span></code></pre></td></tr></table></div></figure>


<p>stringは3種類100個ずつ、numはuniqueなオブジェクトを作成します。</p>

<h1>インデックス作成</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.test_object.ensureIndex({"name": 1})</span></code></pre></td></tr></table></div></figure>


<p>で、test_objectコレクションのnameに対してインデックスを作成できます。</p>

<p>また、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.test_object.getIndexes()</span></code></pre></td></tr></table></div></figure>


<p>でインデックスを確認出来ます。</p>

<p>なお、MongoDBのばあい、インデックスに使用したキーが存在しない場合もあります。
そのような場合は、キーを持っていないものはNULLとして扱われます。</p>

<h1>explain</h1>

<p>検索したときにindexが使われているかはexplainで確認出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.test_object.find({"name": "test1", "num": 10}).explain()
</span><span class='line'>{
</span><span class='line'>        "cursor" : "BtreeCursor name_1",
</span><span class='line'>        "isMultiKey" : false,
</span><span class='line'>        "n" : 1,
</span><span class='line'>        "nscannedObjects" : 100,
</span><span class='line'>        "nscanned" : 100,
</span><span class='line'>        "nscannedObjectsAllPlans" : 100,
</span><span class='line'>        "nscannedAllPlans" : 100,
</span><span class='line'>        "scanAndOrder" : false,
</span><span class='line'>        "indexOnly" : false,
</span><span class='line'>        "nYields" : 0,
</span><span class='line'>        "nChunkSkips" : 0,
</span><span class='line'>        "millis" : 0,
</span><span class='line'>        "indexBounds" : {
</span><span class='line'>                "string" : [
</span><span class='line'>                        [
</span><span class='line'>                                "test1",
</span><span class='line'>                                "test1"
</span><span class='line'>                        ]
</span><span class='line'>                ]
</span><span class='line'>        },
</span><span class='line'>        "server" : "ota42y:27017",
</span><span class='line'>        "filterSet" : false
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>cursorが BasicCursorではなく、<br/>
getIndexesで表示されたインデックス名が表示されていれば大丈夫です。</p>

<p>nscannedはキーを使って絞り込みをしたオブジェクトの数です。<br/>
この場合は事前の設定通り、100個の&#8221;test1&#8221;をキーに持つオブジェクトが引っかかっています。<br/>
その後numキーによって検索が行われ、<br/>
&#8220;n&#8221;の個数分(1件)表示されます。</p>

<p>できる限りn=nscannedに近くなるようにインデックスを貼ったり、<br/>
検索クエリを工夫するといいと思います。</p>

<p>詳しくはこちら<br/>
http://docs.mongodb.org/manual/reference/method/cursor.explain/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golangでtwitter APIを使う]]></title>
    <link href="http://ota42y.com/blog/2014/08/31/go-anaconda/"/>
    <updated>2014-08-31T10:55:48+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/31/go-anaconda</id>
    <content type="html"><![CDATA[<p>anacondaが良さそう(ただしストリーミングAPI非対応)</p>

<p><code>go get github.com/ChimeraCoder/anaconda</code></p>

<script src="https://gist.github.com/ota42y/258616adf5087d2d2186.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sending authentication information]]></title>
    <link href="http://ota42y.com/blog/2014/08/30/sending-authentication-information/"/>
    <updated>2014-08-30T10:07:58+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/30/sending-authentication-information</id>
    <content type="html"><![CDATA[<p>Mac OS X 10.8+MySQL5.6の環境でmysqlコマンドでログインしようとすると、<br/>
<code>'sending authentication information', system error: 32".</code><br/>
といったエラーが出て、mysqlへのログインすら不可能になってしまいました。</p>

<p>どうやら、MySQL5.6から<br/>
<code>innodb_file_per_table</code>のデフォルト値が変わったのが原因みたいです。</p>

<p>my.cnfに<br/>
<code>innodb_file_per_table = OFF</code><br/>
を書くことでで解決します。<br/>
<a href="http://bugs.mysql.com/bug.php?id=71960">参考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[受け取ったPOSTデータをチャットに送信するHubotスクリプトを作った]]></title>
    <link href="http://ota42y.com/blog/2014/08/29/hubot-post-server/"/>
    <updated>2014-08-29T07:42:48+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/29/hubot-post-server</id>
    <content type="html"><![CDATA[<p>実はHubotはWebサーバを立ち上げており、チャットからの入力以外にも、<br/>
Webサーバへのアクセスに対して反応することができます。<br/>
例: <a href="https://github.com/github/hubot/blob/master/src/scripts/httpd.coffee">scripts/httpd.coffee</a></p>

<p>今回はその機能を利用し、<br/>
/hubot/send_messageにPOSTされたデータをチャットに流すスクリプトを作りました。</p>

<p>Hubot以外のアプリからこのURLを叩くことで、hubotの接続しているチャットに対して簡単にデータを送信できます。</p>

<script src="https://gist.github.com/ota42y/5b4342b36ba845d40197.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コマンドラインからiOSアプリをビルドする]]></title>
    <link href="http://ota42y.com/blog/2014/08/28/ios-build/"/>
    <updated>2014-08-28T07:42:55+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/28/ios-build</id>
    <content type="html"><![CDATA[<p>JenkinsのXCode Pluginが便利なのですが、中で何をやっているか気になったので調べたところ、<br/>
普通にコマンドラインからビルドを実行していただけなので、
使っているコマンドをまとめました。</p>

<p>なお、以下のサンプルプロジェクトを使って確認しました。<br/>
<a href="https://developer.apple.com/library/ios/samplecode/CustomHTTPProtocol/Introduction/Intro.html#//apple_ref/doc/uid/DTS40013653">CustomHTTPProtocol</a></p>

<h1>/usr/bin/agvtool</h1>

<h2>バージョンを設定する</h2>

<p><code>/usr/bin/agvtool new-version -all (VERSION_NUMBER)</code><br/>
xcodeのプロジェクト設定の、build部分(CFBundleVersion)を変更できます。</p>

<h2>バージョンを確認する</h2>

<p><code>/usr/bin/agvtool mvers -terse</code>
アプリのバージョン番号を確認出来ます。<br/>
プロジェクト設定のVersionの部分ですね。<br/>
(mversはmarketing-versionの略です)</p>

<h1>使える証明書を確認する</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/bin/security find-identity -p codesigning -v
</span><span class='line'>  1<span class="o">)</span> ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="o">(</span>識別子<span class="o">)</span> <span class="s2">&quot;iPhone Developer: ota42y (XXXXXXXX識別子)&quot;</span>
</span><span class='line'>     1 valid identities found
</span></code></pre></td></tr></table></div></figure>


<p>このコンピュータで使えるcodesigningの一覧が取れます。</p>

<h1>/usr/bin/xcodebuild</h1>

<h2>使えるSDKを確認する</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/bin/xcodebuild -showsdks
</span><span class='line'>OS X SDKs:
</span><span class='line'>        OS X 10.8                       -sdk macosx10.8
</span><span class='line'>        OS X 10.9                       -sdk macosx10.9
</span><span class='line'>
</span><span class='line'>iOS SDKs:
</span><span class='line'>        iOS 7.1                         -sdk iphoneos7.1
</span><span class='line'>
</span><span class='line'>iOS Simulator SDKs:
</span><span class='line'>        Simulator - iOS 6.1             -sdk iphonesimulator6.1
</span><span class='line'>        Simulator - iOS 7.1             -sdk iphonesimulator7.1
</span></code></pre></td></tr></table></div></figure>


<p>使えるSDK一覧が表示されます。</p>

<h2>ビルド設定を表示する</h2>

<p><code>/usr/bin/xcodebuild -list</code></p>

<p>プロジェクトで使えるビルド設定一覧と
デフォルトで何が有効になっているかを表示できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Information about project <span class="s2">&quot;CustomHTTPProtocol&quot;</span>:
</span><span class='line'>    Targets:
</span><span class='line'>        CustomHTTPProtocol
</span><span class='line'>
</span><span class='line'>    Build Configurations:
</span><span class='line'>        Debug
</span><span class='line'>        Release
</span><span class='line'>
</span><span class='line'>    If no build configuration is specified and -scheme is not passed <span class="k">then</span> <span class="s2">&quot;Release&quot;</span> is used.
</span><span class='line'>
</span><span class='line'>    Schemes:
</span><span class='line'>        CustomHTTPProtocol
</span></code></pre></td></tr></table></div></figure>


<h2>ビルドする</h2>

<p><code>/usr/bin/xcodebuild -target CustomHTTPProtocol -configuration Debug build CONFIGURATION_BUILD_DIR=./app</code><br/>
でビルドを実行できます。<br/>
target、configurationを指定し、appディレクトリにappファイルとdSYMファイルを作成します。</p>

<h1>appを署名してipaファイルにする</h1>

<p><code>/usr/bin/xcrun -sdk iphoneos PackageApplication -v (appファイルへのフルパス) -o (保存するipaファイルのフルパス)</code><br/>
何故か相対パスだとうまくいきませんでした</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブラウザからArduinoを制御する]]></title>
    <link href="http://ota42y.com/blog/2014/08/27/arduino-browser/"/>
    <updated>2014-08-27T07:52:09+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/27/arduino-browser</id>
    <content type="html"><![CDATA[<p>Webブラウザから、接続されているArduinoの値を取りたいのですが、<br/>
当然ながらブラウザ本体やJavascriptにはそんな機能はありません。</p>

<p>そこで、Arduinoの制御をやるWebサーバをローカルに立てて、<br/>
そこに向けて通信すれば、ブラウザからもArduinoの制御ができるのでは？<br/>
と考えたところ、既にそのようなものがありました。</p>

<p>試した結果をまとめます。</p>

<h1>noduino</h1>

<p><a href="http://semu.github.io/noduino/">http://semu.github.io/noduino/</a><br/>
Node.jsでArduinoを制御できます。
<a href="https://github.com/ecto/duino">duino</a>というNode.jsからArduinoに接続するライブラリを利用し、<br/>
Webサーバとして扱えるようにしているものみたいです。</p>

<p>かなりいろいろな事ができ、使いやすいように作られていますが、<br/>
ブラウザから制御するのはかなり苦労します。
ですが、Node.jsで実行する前提ならば、<br/>
簡単でいろいろなことができるため最適だと思います。</p>

<h1>Serialport-server</h1>

<p><a href="http://shokai.github.io/serialport-server/">http://shokai.github.io/serialport-server/</a><br/>
RubyからArduinoにアクセスし、その結果を返すサーバです。<br/>
noduinoに比べるとできることは少ないですが、<br/>
サンプルがちゃんと動き、Webブラウザから簡単に値がとれそうです。</p>

<br />


<p>というわけで、ブラウザからArduinoを制御する場合は、<br/>
Serialport-serverが良さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavascriptでオプションのパースをするOptparse-js]]></title>
    <link href="http://ota42y.com/blog/2014/08/26/optparse/"/>
    <updated>2014-08-26T07:49:10+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/26/optparse</id>
    <content type="html"><![CDATA[<p><code>find /tmp -name core -type f -print</code>
のように、渡されたオプションを解析するのはよく行うことのため、<br/>
各言語でそれをやってくれるライブラリが作られています。</p>

<p>javascriptでそれにあたるのがOptparse-jsですが、<br/>
使い方がちょっと独特です。</p>

<h1>インストール</h1>

<p><a href="https://github.com/jfd/optparse-js">https://github.com/jfd/optparse-js</a>からどうぞ。<br/>
npmにも登録されているので、node.jsからも簡単に使えます。</p>

<h1>使い方</h1>

<h2>オプション指定</h2>

<p>どのようなオプションを宇受け取るかは配列で定義します。<br/>
なお、短縮形も同時に定義できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">[</span><span class="s2">&quot;-n&quot;</span><span class="p">,</span> <span class="s2">&quot;--name FILENAME&quot;</span><span class="p">,</span> <span class="s2">&quot;filename&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="s2">&quot;-t&quot;</span><span class="p">,</span> <span class="s2">&quot;--type TYPE&quot;</span><span class="p">,</span> <span class="s2">&quot;type&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>この場合、filenameを受け取る-nもしくは&#8211;nameと、<br/>
typeを受け取る-tもしくは&#8211;typeを定義しています。</p>

<p>この配列をOptionParserに渡してパーサー用オブジェクトを受け取ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">optparse</span><span class="p">.</span><span class="nx">OptionParser</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>オプション処理</h2>

<p>オプションを受け取ったときの処理は、パーサーオブジェクトに関数を渡して登録します。<br/>
第一引数にオプション名、第二引数にそのオプションがあったときの処理を渡します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">parser</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">opt</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">parameter</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">filename</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>パース実行</h2>

<p>パーサーオブジェクトのparseメソッドでパースを実行できます。
ただし、スペースを自分で区切ってはくれないため、<br/>
先に配列に分けておく必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">parser</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">command_str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>(勝手にオプション足したり、区切り文字を自由に設定できる、こうしていると思われます)</p>

<h1>サンプルコード</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">optparse</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;optparse&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">command_str</span> <span class="o">=</span> <span class="s2">&quot;-name core -type f&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">[</span><span class="s2">&quot;-n&quot;</span><span class="p">,</span> <span class="s2">&quot;--name FILENAME&quot;</span><span class="p">,</span> <span class="s2">&quot;filename&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="s2">&quot;-t&quot;</span><span class="p">,</span> <span class="s2">&quot;--type TYPE&quot;</span><span class="p">,</span> <span class="s2">&quot;type&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">optparse</span><span class="p">.</span><span class="nx">OptionParser</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">parameter</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">parser</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">opt</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">parameter</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">filename</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">parser</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;type&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">opt</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">parameter</span><span class="p">[</span><span class="s2">&quot;type&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">parser</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">command_str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">parameter</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スマホアプリ開発でgit-new-workdirがとても便利だった]]></title>
    <link href="http://ota42y.com/blog/2014/08/25/git-new-workdir/"/>
    <updated>2014-08-25T07:42:04+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/25/git-new-workdir</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>ビルドに時間がかかる環境下では、ビルドのキャッシュが重要</li>
<li>ブランチを切り替えると、ブランチ間の差分だけキャッシュが聞かなくなる</li>
<li>別ブランチでちょっとした修正を行おうとすると、移動と戻りとで二回ビルドし直しが起きる</li>
<li>リポジトリを複数cloneすると、管理が面倒</li>
<li>git-new-workdirなら、.gitを共用しつつ、別々のフォルダで作業できる</li>
<li>そのため、ビルドのキャッシュを最大限活用できる</li>
<li>スマホアプリじゃなくても便利</li>
</ul>


<h1>ビルドのキャッシュ</h1>

<p>Objective-cやJava、C++でスマホアプリを作成する場合、<br/>
どの言語もコンパイルが必要になります。<br/>
このコンパイルにかかる時間は、アプリの規模が大きくなるにつれて長くなっていきます。</p>

<p>ただし、多くの場合はキャッシュ機能が有効になっており、<br/>
変更したファイルのみがコンパイルされるため、<br/>
フルビルドをしなければ気にならないはずです。</p>

<h1>gitのチェックアウトによるファイル変更問題</h1>

<p>gitの場合、ブランチを切り替えると関連するファイルに対して全部変更が走ります。<br/>
これにより、ブランチ間の差分が全てビルド対象になってしまいます。</p>

<p>当然と言えば当然ですが、例えばちょっとした変更を別ブランチで行い多場合、<br/>
別ブランチに切り替えて一回、作業後戻ってきて一回と、二回ビルドが必要になります。<br/>
ブランチ間の差次第ですが、5分で終わる作業のために30分のフルビルド2回…<br/>
なんてこともあり、時間が勿体ないです。</p>

<p>かといって、リポジトリを二つ別々のフォルダにcloneすると、<br/>
別々にリポジトリ更新したり、容量圧迫、間違えてコミットしたときにcherry-pickできない等々<br/>
いろいろと問題が起きます。</p>

<p>こういった場合、git-new-workdirを使うことで、
だいぶ楽に解決することができます。</p>

<h1>git-new-workdirとは</h1>

<p>これは同じ.gitを使って、複数のディレクトリにリポジトリをcloneできる機能になります。<br/>
これにより、二つの別々のフォルダにそれぞれgit cloneしたのと同じ状態を維持しつつ、<br/>
片方で作成したコミットや、ローカルブランチ、git stashなどをもう片方で参照することができます。</p>

<p>また、gitのワーキングディレクトリやステージングエリアは共用されないため、<br/>
コミットしていない変更が別のディレクトリに影響をあたることはありません。　</p>

<h2>インストール</h2>

<p><code>git/contrib/workdir/git-new-workdir</code>に入っていたので、<br/>
<code>export PATH=/usr/local/share/git-core/contrib/workdir/:$PATH</code>
でパスを通しました。</p>

<h2>使い方</h2>

<p><code>git-new-workdir repository_folder new_workdir branch_name(オプション)</code>です。<br/>
後述するように、gitのcloneは行わず、元のディレクトリへのシンボリックリンクを張るだけなので、<br/>
ほぼcheckout時間しかかかりません。</p>

<p>新しくできたworkdirは、普通にgit cloneしたときと同じように扱えます。</p>

<h1>注意点</h1>

<p>同じブランチを同時に変更すると、予期せぬ結果になるので注意が必要です。<br/>
なお、片方からもう片方が何をチェックアウトしているかはわからないため、<br/>
main/subといった使い方や、develop/releaseといった風に分けたり、<br/>
必要な時だけ作るといった方が事故らないと思います。</p>

<p>また、新しいディレクトリの.gitには、HEADとindex、logの3つのみが新たに作られ、<br/>
残りは全て元の.gitの該当ディレクトリへのシンボリックリンクになっています。<br/>
そのため、高速に新しいworkdirを作れますが、<br/>
元のリポジトリを消すとworkdirの方もおかしくなると思われます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[selenium-webdriverでRuby からブラウザを操作する]]></title>
    <link href="http://ota42y.com/blog/2014/08/24/selenium/"/>
    <updated>2014-08-24T18:53:52+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/24/selenium</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>selenium-webdriverでプログラムからブラウザを制御できる</li>
<li>ページのロードをまったり、ページ内のJSを実行したりできる。</li>
<li>rubyのgemがあり、簡単に導入できる</li>
<li>Firefoxならgemを入れるだけで動かせる</li>
</ul>


<h1>Rubyのスクレイピング方法</h1>

<p>Rubyでスクレイピングする方法としては、
NokogiriやMechanizeが存在します。</p>

<p>どちらもHTMLを解析してページの要素にアクセスします。<br/>
ですが、実際のWebブラウザのエンジンとは違うため、若干の差異があったり、<br/>
Javascriptで動的に変化するページなどにちゃんと対応するのはとても大変です。</p>

<p>そこで、Webブラウザを直接操作してスクレイピングするライブラリの一つが、<br/>
selenium-webdriverになります。</p>

<h1>selenium-webdriverのインストール</h1>

<p>Rubyではselenium-webdrierのgemをインストールするだけで完了です。</p>

<p>なお、Google Chromeだとgem以外にもう一つインストールするものがありますが、<br/>
今回は説明が面倒なので省略し、Firefoxで動かします。</p>

<h1>使い方</h1>

<p><code>Selenium::WebDriver.for :firefox</code>
で、firefoxのウインドウに対応するWebDriverオブジェクトが取得できます。<br/>
このWebDriverに対して、移動先のURLやDOM要素の取得などを行えます。</p>

<p>また、細かい設定などの変更のために、Profileというものが用意されています。<br/>
これに対して様々な設定をし、WebDriver作成時に設定することで、<br/>
ブラウザの挙動を変更出来ます。</p>

<p>以下は、pdfを開いたときに特定のフォルダに保存する設定がされた状態で、<br/>
Googleでpdfを検索し、先頭の一つをdownフォルダにダウンロードするコードになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;selenium-webdriver&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">profile</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">::</span><span class="ss">Firefox</span><span class="p">:</span><span class="ss">:Profile</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">profile</span><span class="o">[</span><span class="s1">&#39;browser.download.dir&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">))</span><span class="si">}</span><span class="s2">/down&quot;</span>
</span><span class='line'><span class="n">profile</span><span class="o">[</span><span class="s1">&#39;browser.download.folderList&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">profile</span><span class="o">[</span><span class="s1">&#39;browser.download.useDownloadDir&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">profile</span><span class="o">[</span><span class="s1">&#39;browser.helperApps.neverAsk.saveToDisk&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;application/pdf&quot;</span>
</span><span class='line'><span class="n">profile</span><span class="o">[</span><span class="s1">&#39;pdfjs.disabled&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:firefox</span><span class="p">,</span> <span class="ss">:profile</span> <span class="o">=&gt;</span> <span class="n">profile</span>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">navigate</span><span class="o">.</span><span class="n">to</span> <span class="s2">&quot;https://www.google.com/search?as_q=&amp;as_epq=&amp;as_oq=&amp;as_eq=&amp;as_nlo=&amp;as_nhi=&amp;lr=&amp;cr=&amp;as_qdr=all&amp;as_sitesearch=&amp;as_occt=any&amp;safe=images&amp;as_filetype=pdf&amp;as_rights=&amp;gws_rd=ssl&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">links</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:class</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="ss">:tag_name</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">links</span>
</span><span class='line'>  <span class="n">links</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">element</span><span class="o">.</span><span class="n">displayed?</span>
</span><span class='line'>      <span class="n">element</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>      <span class="nb">exit</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mocha+chai+sinsonでテストを書く為に必要な最低限の知識]]></title>
    <link href="http://ota42y.com/blog/2014/08/22/mocha-test/"/>
    <updated>2014-08-22T07:52:16+09:00</updated>
    <id>http://ota42y.com/blog/2014/08/22/mocha-test</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<ul>
<li>Mochaではrspecっぽい感じにテストが書ける</li>
<li>ただし、done()を呼ぶ必要がある等、細かい部分に差異がある</li>
<li>sinonにはいろいろ便利機能がある</li>
</ul>


<h1>Mochaの使い方</h1>

<p>coffeescriptを前提にしています。</p>

<h2>テストの書き方</h2>

<p>Mochaのテストは以下のように、itにテスト内容を書いた関数を渡し、<br/>
そのitを呼び出す関数をdescribeに渡すしようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&quot;test root&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">it</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="nf">(done) -&gt;</span>
</span><span class='line'>        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span> <span class="nx">getUserName</span><span class="p">,</span> <span class="s">&quot;user&quot;</span>
</span><span class='line'>        <span class="nx">done</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただし、it関数では必ずdone()を呼び出す必要があります。<br/>
これを呼ばない場合は終了を待ち続け、<br/>
一定時間後にタイムアウトしてテストが失敗した扱いになります。</p>

<h2>beforeの使い方</h2>

<p> rspecのbeforeにあたるものは、beforeEachになります。<br/>
 なお、変数を他のブロックに渡したい場合、<br/>
 以下のようにdescribeの中に変数名を書いておいて、<br/>
 beforeEachのなかで設定する必要があるみたいです。<br/>
<a href="http://stackoverflow.com/questions/20584233/mocha-pass-variable-to-the-next-test">参考</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">room_name = </span><span class="kc">undefined</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">(done) -&gt;</span>
</span><span class='line'>    <span class="nv">room_name = </span><span class="s">&quot;test_room&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">done</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span> <span class="s">&quot;functions&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">it</span> <span class="s">&quot;executeNoteShow&quot;</span><span class="p">,</span> <span class="nf">(done) -&gt;</span>
</span><span class='line'>        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span> <span class="nx">getRoomName</span><span class="p">(</span><span class="nx">room_name</span><span class="p">),</span> <span class="nx">room_name</span>
</span><span class='line'>        <span class="nx">done</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>pendingテストの作り方</h2>

<p>テストの用意はしたけど、とりあえずpendingにしておきたい場合は二通りの方法があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">describe</span> <span class="s">&quot;functions&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">it</span> <span class="s">&quot;pending test&quot;</span> <span class="o">//</span> <span class="err">関数を渡さない場合</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="o">//</span> <span class="nx">it</span><span class="p">.</span><span class="nx">skip</span><span class="err">の場合、引数を渡しても実行されずにスキップする</span>
</span><span class='line'>      <span class="nx">it</span><span class="p">.</span><span class="nx">skip</span> <span class="s">&quot;pending test 2&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>          <span class="nx">done</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>外部ファイル読み込み</h2>

<p>test.coffeeで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Test</span>
</span><span class='line'>  <span class="err">なんかいろいろ</span>
</span><span class='line'><span class="nv">module.exports.Test = </span><span class="nx">Test</span>
</span></code></pre></td></tr></table></div></figure>


<p>と、クラスを宣言し、module.exportsに代入します。
その後、使いたいファイル側で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">Test = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;../src/test.coffee&#39;</span><span class="p">).</span><span class="nx">Test</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書くと、以降Testでそのクラスが呼び出せます。</p>

<h1>chaiの使い方</h1>

<h2>assertを使う</h2>

<p>前述のテストではassertを使っていますが、Mochaにはassertは入っていないため、<br/>
別ライブラリのchaiを読み込む必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">global.assert = </span><span class="nx">require</span><span class="p">(</span><span class="s">&quot;chai&quot;</span><span class="p">).</span><span class="nx">assert</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、 assert.equalや assert.notEqualが使えます。</p>

<h1>sinonの使い方</h1>

<h2>mockやstubを使う</h2>

<p>Mochaにはmockやstubの為の物は含まれていないので、<br/>
今度はsinonを読み込む必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">global.sinon = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;simon&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使い方は以下の通りです</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="o">//</span> <span class="nx">robot</span><span class="p">.</span><span class="nx">brain</span><span class="err">が</span><span class="nx">stub</span><span class="err">になる</span>
</span><span class='line'><span class="nv">robot = </span><span class="k">new</span> <span class="nb">Object</span><span class="p">()</span>
</span><span class='line'><span class="nv">robot.brain = </span><span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="nx">hubot_note</span><span class="p">.</span><span class="nx">executeNoteShow</span><span class="err">を置き換え、</span>
</span><span class='line'><span class="o">//</span> <span class="nx">hubot_note</span><span class="p">.</span><span class="nx">executeMessage</span><span class="err">実行時に、</span>
</span><span class='line'><span class="o">//</span> <span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="err">の引数で一回だけ実行されたかをチェックする</span>
</span><span class='line'>
</span><span class='line'><span class="nv">spy = </span><span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(</span><span class="nx">hubot_note</span><span class="p">,</span> <span class="s">&quot;executeNoteShow&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">spy</span><span class="p">.</span><span class="nx">withArgs</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">)</span>
</span><span class='line'><span class="nv">response = </span><span class="nx">hubot_note</span><span class="p">.</span><span class="nx">executeMessage</span><span class="p">(</span><span class="nx">room_name</span><span class="p">,</span> <span class="s">&quot;hubot note show&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">ok</span> <span class="nx">spy</span><span class="p">.</span><span class="nx">withArgs</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">).</span><span class="nx">calledOnce</span>
</span></code></pre></td></tr></table></div></figure>


<h2>時間変更の仕方</h2>

<p><code>new Date()</code>などによって日付がちゃんと設定されたかどうかを確認したい場合、<br/>
グローバルなDate()部分を置き換える必要があります。</p>

<p>…というのはよくあることなので、sinon側で既に用意されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="vi">@clock = </span><span class="nx">sinon</span><span class="p">.</span><span class="nx">useFakeTimers</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;setTimeout&quot;</span><span class="p">,</span> <span class="s">&quot;clearTimeout&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;setInterval&quot;</span><span class="p">,</span> <span class="s">&quot;clearInterval&quot;</span><span class="p">,</span> <span class="s">&quot;Date&quot;</span><span class="p">)</span><span class="o">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、以降のDateコマンドは第一引数で指定した0(1970年1月1日0時0分0秒)を必ず返すようになるため、<br/>
この時間かどうかをチェックすれば大丈夫です。<br/>
また、以下のように戻り値のオブジェクトのtickメソッドにより、<br/>
指定したミリ秒だけ時間を進めることもできます。<br/>
<code>@clock.tick(3600000)</code></p>

<h2>sinonのその他の機能</h2>

<p>sinonに関しては他にもいろいろ有用なものがあります。<br/>
ちょっと古いですが、以下のmixiさんのブログ記事は参考になると思います。</p>

<p><a href="http://alpha.mixi.co.jp/2011/10798/">http://alpha.mixi.co.jp/2011/10798/</a></p>
]]></content>
  </entry>
  
</feed>
