<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on おおたの物置</title>
    <link>http://ota42y.com/blog/</link>
    <description>Recent content in Blogs on おおたの物置</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 19 Apr 2015 11:03:24 +0900</lastBuildDate>
    <atom:link href="http://ota42y.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>参加記録 第四回　ゲームサーバ勉強会</title>
      <link>http://ota42y.com/blog/2015/04/19/game-server-4/</link>
      <pubDate>Sun, 19 Apr 2015 11:03:24 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/19/game-server-4/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://peatix.com/event/81553&#34;&gt;第四回　ゲームサーバ勉強会&lt;/a&gt;に参加しました。&lt;br /&gt;
サーバにはあんまり詳しくないですが、そういう人向けの勉強会なので助かりました。&lt;br /&gt;
特に名前は聞いたことがあるけど使ったことないorちょっと触ったぐらいの物の理解がある程度深まりました。&lt;/p&gt;

&lt;h1 id=&#34;idc-frontierさんの話:2a29e4ac88d71dc8c704f4abe8db92f2&#34;&gt;IDC Frontierさんの話&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IDCクラウドの話&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.idcf.jp/cloud/&#34;&gt;http://www.idcf.jp/cloud/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;最小プランが500円からとのこと…安い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ゲームでも採用事例あり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gihyo.jp/admin/column/01/vm/2014/nanohain02&#34;&gt;http://gihyo.jp/admin/column/01/vm/2014/nanohain02&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ascii.jp/elem/000/000/952/952870/&#34;&gt;http://ascii.jp/elem/000/000/952/952870/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ゲームサーバの作り方:2a29e4ac88d71dc8c704f4abe8db92f2&#34;&gt;ゲームサーバの作り方&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/honyax/ss-47136625&#34;&gt;http://www.slideshare.net/honyax/ss-47136625&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;簡単なチャットサーバの作り方&lt;/li&gt;
&lt;li&gt;ゲームサーバも基本的なメッセージやりとり部分はチャットサーバみたいな物。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;fluentdとembulkの話:2a29e4ac88d71dc8c704f4abe8db92f2&#34;&gt;fluentdとembulkの話&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/repeatedly/fluentd-and-embulk-game-server-4&#34;&gt;http://www.slideshare.net/repeatedly/fluentd-and-embulk-game-server-4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;外部からはjsonで入力するが、内部はMessagePackらしい&lt;/li&gt;
&lt;li&gt;tg-agentはfluentdにRubyインタプリタやプラグインをまとめてセットアップしやすくしたもの&lt;/li&gt;
&lt;li&gt;とりあえずfluentdに送って、そこから適切な場所に割り振る使い方みたい&lt;/li&gt;
&lt;li&gt;組み込み環境向け

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fluent/fluent-bit&#34;&gt;https://github.com/fluent/fluent-bit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Windows環境で動くやつ

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fluent/fluentd-forwarder&#34;&gt;https://github.com/fluent/fluentd-forwarder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;名前の通り、ログをfluentdに転送するものっぽい？&lt;/li&gt;
&lt;li&gt;これ本体で分類とかはせず、転送先のfluentdで転送する用途？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;embulk

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/embulk/embulk&#34;&gt;https://github.com/embulk/embulk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ファイルから一気にデータを入れる用&lt;/li&gt;
&lt;li&gt;失敗時に必要なファイルだけ再処理できる&lt;/li&gt;
&lt;li&gt;データから形式を推測する機能もある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;fluentd-ui

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fluent/fluentd-ui&#34;&gt;https://github.com/fluent/fluentd-ui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fluentdのWebUI&lt;/li&gt;
&lt;li&gt;データ処理のための正規表現をテストできる機能がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;データ欠損

&lt;ul&gt;
&lt;li&gt;ストリーム処理はデータ欠損が出てしまうもの&lt;/li&gt;
&lt;li&gt;欠損が許されないものに使うのは危険

&lt;ul&gt;
&lt;li&gt;課金ログとか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;欠損率0%の人もいるらしい

&lt;ul&gt;
&lt;li&gt;構成による？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;通信失敗とかはfluentdが検知するのでそれで欠損はしない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;負荷がたかいいんだから-仮:2a29e4ac88d71dc8c704f4abe8db92f2&#34;&gt;負荷がたかいいんだから～♪（仮）&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ゲームの負荷対策と負荷試験の話&lt;/li&gt;
&lt;li&gt;memcached

&lt;ul&gt;
&lt;li&gt;全部メモリに乗ってるKVS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;レプリケーション遅延

&lt;ul&gt;
&lt;li&gt;(たぶん)masterへの変更がslaveに変更される前に読み込んでデータがおかしくなった&lt;/li&gt;
&lt;li&gt;水平分割して対処

&lt;ul&gt;
&lt;li&gt;特定のIDは特定のDBに書き込むようにする&lt;/li&gt;
&lt;li&gt;1台あたりのリクエスト数を減らす？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;NoSQL

&lt;ul&gt;
&lt;li&gt;Cassandra

&lt;ul&gt;
&lt;li&gt;リング型ノードになるため単一障害点がなくなるらしい&lt;/li&gt;
&lt;li&gt;DHT？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;トランザクション処理は基本弱い

&lt;ul&gt;
&lt;li&gt;そういうところはMySQLで&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;負荷試験

&lt;ul&gt;
&lt;li&gt;リリース前に想定人数をちゃんと裁けるかのテスト

&lt;ul&gt;
&lt;li&gt;リリースしてから落ちにくい&lt;/li&gt;
&lt;li&gt;チューニングしやすい

&lt;ul&gt;
&lt;li&gt;テーブル構造の変更とかしやすい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JMeter

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jmeter.apache.org/&#34;&gt;http://jmeter.apache.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;サーバに負荷をかけるツール&lt;/li&gt;
&lt;li&gt;アクセスをプロクシして、テストケースを作る機能があるらしい&lt;/li&gt;
&lt;li&gt;プログラムで負荷をかけると、プログラムが悪いのかサーバが悪いのかわからない&lt;/li&gt;
&lt;li&gt;プログラムがロックして遅かったりとか&lt;/li&gt;
&lt;li&gt;Socket.IOは対応していない

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/maciejzaleski/JMeter-WebSocketSampler&#34;&gt;https://github.com/maciejzaleski/JMeter-WebSocketSampler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;これを使うと動かせる&lt;/li&gt;
&lt;li&gt;プロトコルが若干違うのでその辺が大変らしい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>golangのパッケージ管理</title>
      <link>http://ota42y.com/blog/2015/04/18/go-package-management/</link>
      <pubDate>Sat, 18 Apr 2015 10:55:37 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/18/go-package-management/</guid>
      <description>

&lt;p&gt;goでは標準でいろいろなツールが揃っていますが、&lt;br /&gt;
npmやbundlerのようなパッケージの依存管理をするツールはありません。&lt;/p&gt;

&lt;p&gt;これは、goでは公開されている物は後方互換性を守り、&lt;br /&gt;
それを崩す場合は違うインポートパスにするべきだという思想によるものらしいです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Packages intended for public use should try to maintain backwards compatibility as they evolve. The Go 1 compatibility &amp;gt;guidelines are a good reference here: don&amp;rsquo;t remove exported names, encourage tagged composite literals, and so on. If different &amp;gt;functionality is required, add a new name instead of changing an old one. If a complete break is required, create a new package &amp;gt;with a new import path.
&lt;a href=&#34;http://golang.org/doc/faq#get_version&#34;&gt;http://golang.org/doc/faq#get_version&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;そうはいっても、これに従うかどうかはパッケージの開発者の裁量によるため、&lt;br /&gt;
自分が管理していないパッケージを利用する場合はどうしても管理が必要になります。&lt;/p&gt;

&lt;p&gt;調べたところ、同じような問題に直面している人は多いらしく、いくつかツールがありました。&lt;br /&gt;
&lt;a href=&#34;https://github.com/golang/go/wiki/PackageManagementTools&#34;&gt;PackageManagementTools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一応、go公式でもパッケージ管理ソフトを作るという噂を聞きましたが、1.5には入る気配がないので、&lt;br /&gt;
とりあえずはこれらの中のどれかを使う必要があります。&lt;/p&gt;

&lt;p&gt;そこで、この中で特にスターが多かったgodep、gom、goopについて調べました。&lt;/p&gt;

&lt;h1 id=&#34;パッケージ管理ツール:067ebe2002f9cc45ac92e9a88185b56c&#34;&gt;パッケージ管理ツール&lt;/h1&gt;

&lt;p&gt;この3つに共通する物として、importしている物をリストアップし、ファイルに書き出す機能があるようです。&lt;br /&gt;
また、gomとgoopはほぼ同じ機能を提供し、管理用のファイルの形式が違うようです。&lt;/p&gt;

&lt;h2 id=&#34;godep:067ebe2002f9cc45ac92e9a88185b56c&#34;&gt;godep&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tools/godep&#34;&gt;https://github.com/tools/godep&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちらはかなりgoの思想に沿った作りをしているツールになります。&lt;/p&gt;

&lt;p&gt;このツールはパッケージのインポート情報を保存しますが、バージョンまでは保存しません。&lt;br /&gt;
そのため、依存しているパッケージを入れる際は、go getにより最新版をとってきます。&lt;/p&gt;

&lt;p&gt;go getでとれないようなリポジトリ用に、プロジェクト内にワークスペースを作ってソースごと保存し、&lt;br /&gt;
GOPATHでそこを見るようにしてコマンド実行することもできます。&lt;/p&gt;

&lt;p&gt;つまり、常に最新のmasterを使うか、自分の手元で管理するかの二択です。&lt;br /&gt;
基本的に全部管理下に置いてある前提の作りっぽいです。&lt;/p&gt;

&lt;h2 id=&#34;gom-goop:067ebe2002f9cc45ac92e9a88185b56c&#34;&gt;gom/goop&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mattn/gom&#34;&gt;https://github.com/mattn/gom&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/nitrous-io/goop&#34;&gt;https://github.com/nitrous-io/goop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;gomとgoopはほぼnpmのような使い勝手になるパッケージ管理ツールです。&lt;br /&gt;
すなわち、使っているパッケージのバージョンまでも保存します。&lt;/p&gt;

&lt;p&gt;依存するパッケージはローカルにフォルダを作ってそこに保存され、&lt;br /&gt;
GOPATHにローカルフォルダを含めた状態で実行します。&lt;/p&gt;

&lt;p&gt;gomはRakefileのような書式、goopは普通のテキストにちょっと書式が加わったようなものになります。&lt;/p&gt;

&lt;h1 id=&#34;gomが良さそう:067ebe2002f9cc45ac92e9a88185b56c&#34;&gt;gomが良さそう&lt;/h1&gt;

&lt;p&gt;godepはそういう環境やメンテナンスフローから作る必要があり、気軽に導入は難しそうです。&lt;br /&gt;
そのため、npmやbundlerに似ているgomやgoopを使った方が楽そうです。&lt;/p&gt;

&lt;p&gt;また、gomはRakefileっぽい書式のため、独自？のgoopよりかは使い勝手がよさそうなので、&lt;br /&gt;
とりあえずはgomでやろうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>参加記録 GolangNotHttpNight（Gunosy.go#12）</title>
      <link>http://ota42y.com/blog/2015/04/14/golang-no-http-night/</link>
      <pubDate>Tue, 14 Apr 2015 22:39:40 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/14/golang-no-http-night/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://gunosygo.connpass.com/event/13139/&#34;&gt;GolangNotHttpNight（Gunosy.go#12）&lt;/a&gt;&lt;br /&gt;
に参加しました。&lt;/p&gt;

&lt;p&gt;ほぼ周りにgolangを使っている人がほとんどおらず、&lt;br /&gt;
情報がほぼ入ってこない環境にいるため、&lt;br /&gt;
ためになる話ばかりで、とても有意義な時間でした。&lt;/p&gt;

&lt;h1 id=&#34;gomaについて:0be486f42159ef3319b68e5a2e9ad272&#34;&gt;gomaについて&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kyokomi/gomanituite&#34;&gt;https://speakerdeck.com/kyokomi/gomanituite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kyokomi/goma&#34;&gt;https://github.com/kyokomi/goma&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://doma.seasar.org/tutorial/&#34;&gt;Doma&lt;/a&gt;インスパイア&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DBのテーブルから対応する構造体とCRUD用の関数を作ってくれるみたい&lt;/li&gt;
&lt;li&gt;DBへのアクセスは書き出されたSQLファイルを使う

&lt;ul&gt;
&lt;li&gt;SQLはgo-bindataでバイナリに入れ込む&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;いくつかライブラリを利用するが、作成されるコードには含まれないらしい

&lt;ul&gt;
&lt;li&gt;テーブル情報を取得するために&lt;a href=&#34;https://github.com/go-xorm/xorm&#34;&gt;xorm&lt;/a&gt;を利用&lt;/li&gt;
&lt;li&gt;SQLファイル書き出しのために&lt;a href=&#34;https://github.com/benbjohnson/ego&#34;&gt;ego&lt;/a&gt;を利用&lt;/li&gt;
&lt;li&gt;CLI用に&lt;a href=&#34;https://github.com/codegangsta/cli&#34;&gt;cli&lt;/a&gt;を利用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;golintを使おう:0be486f42159ef3319b68e5a2e9ad272&#34;&gt;golintを使おう&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;いろいろ細かい所までチェックしてくれるgolintの話&lt;/li&gt;
&lt;li&gt;pre-commitで実行するといい&lt;/li&gt;
&lt;li&gt;よくわかってなかったのでちゃんと使おう&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;go-timeout-もしくはunixツールをgolangで書く話:0be486f42159ef3319b68e5a2e9ad272&#34;&gt;go-timeout、もしくはUnixツールをgolangで書く話&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://songmu.github.io/slides/gunosygo-12/#0&#34;&gt;http://songmu.github.io/slides/gunosygo-12/#0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;mackerel-agentはgo製

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mackerelio/mackerel-agent&#34;&gt;https://github.com/mackerelio/mackerel-agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;サーバ監視用の情報をmackarelに送る

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mackerel.io/&#34;&gt;https://mackerel.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;pluginで拡張できる

&lt;ul&gt;
&lt;li&gt;外部コマンドとして呼んでるだけ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;pluginが無限ループしたりするとブロックしてしまう

&lt;ul&gt;
&lt;li&gt;一定時間後にKILLするようにした

&lt;ul&gt;
&lt;li&gt;timeoutコマンドのようなものをgoで実装&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;golang-raspiで趣味的iot入門的な話:0be486f42159ef3319b68e5a2e9ad272&#34;&gt;Golang+Raspiで趣味的IoT入門的な話&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/ymatsuwitter/golang-plus-raspidequ-wei-de-iotru-men-de-nahua&#34;&gt;https://speakerdeck.com/ymatsuwitter/golang-plus-raspidequ-wei-de-iotru-men-de-nahua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Raspberry PiでIoT

&lt;ul&gt;
&lt;li&gt;armなのでgoでクロスコンパイル可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Gobot

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gobot.io/&#34;&gt;http://gobot.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;いろんなデバイスをかなり抽象化された形で利用できる&lt;/li&gt;
&lt;li&gt;ロボットにパーツをつけていくメタファ&lt;/li&gt;
&lt;li&gt;対応していないと使えないけど、対応しているととても便利っぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;embed

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kidoman/embd&#34;&gt;https://github.com/kidoman/embd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;低レベルなライブラリ&lt;/li&gt;
&lt;li&gt;GPIOを直接触れるみたい&lt;/li&gt;
&lt;li&gt;Arduinoプログラミングに近い印象&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;プログラムよりもデータシートとの格闘が大変…&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;goでのステート管理の仕方:0be486f42159ef3319b68e5a2e9ad272&#34;&gt;Goでのステート管理の仕方&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/ssuser939b6b/state-managementingo20150413&#34;&gt;http://www.slideshare.net/ssuser939b6b/state-managementingo20150413&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GoでFSMを実装

&lt;ul&gt;
&lt;li&gt;いくつか書き方がある&lt;/li&gt;
&lt;li&gt;末尾最適化しない影響でうまくいかなかったり

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2015/02/23/165341&#34;&gt;http://ymotongpoo.hatenablog.com/entry/2015/02/23/165341&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;goと設定ファイル:0be486f42159ef3319b68e5a2e9ad272&#34;&gt;Goと設定ファイル&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/cubicdaiya/gototoml&#34;&gt;https://speakerdeck.com/cubicdaiya/gototoml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TOMLの話&lt;/li&gt;
&lt;li&gt;advanced-ini&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;https://github.com/BurntSushi/toml&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;goのTOML実装&lt;/li&gt;
&lt;li&gt;構造体に直接変換したり、その逆も出来る&lt;/li&gt;
&lt;li&gt;ライセンスが下品

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/WTFPL&#34;&gt;http://ja.wikipedia.org/wiki/WTFPL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;goでゲームを作る:0be486f42159ef3319b68e5a2e9ad272&#34;&gt;Goでゲームを作る&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://go-talks.appspot.com/github.com/guregu/slides/engi/engi.slide#1&#34;&gt;http://go-talks.appspot.com/github.com/guregu/slides/engi/engi.slide#1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ajhager/engi&#34;&gt;https://github.com/ajhager/engi&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;goのゲームライブラリ&lt;/li&gt;
&lt;li&gt;描画とゲームループは提供してるみたい&lt;/li&gt;
&lt;li&gt;音は出せないけど、別のを使うらしい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;夏コミで頒布予定&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;dbじゃないoracleの話:0be486f42159ef3319b68e5a2e9ad272&#34;&gt;DBじゃないoracleの話&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/damemekam/dboracle-gunosygo12&#34;&gt;http://www.slideshare.net/damemekam/dboracle-gunosygo12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ソースコード解析をしてくれるツール、oracle

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/tools/oracle&#34;&gt;https://godoc.org/golang.org/x/tools/oracle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IDE並の機能があるみたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;いろんなエディタに対応可能

&lt;ul&gt;
&lt;li&gt;atom用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/go-oracle&#34;&gt;https://atom.io/packages/go-oracle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;こういうツールが整っている環境すばらしい

&lt;ul&gt;
&lt;li&gt;go fmtとかも凄くいいと思う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;gocon2015-summer:0be486f42159ef3319b68e5a2e9ad272&#34;&gt;GoCon2015 Summer&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/takuyaueda967/goconsummer&#34;&gt;http://www.slideshare.net/takuyaueda967/goconsummer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;とりあえず日程が出た&lt;/li&gt;
&lt;li&gt;会場探し中らしい&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;その他:0be486f42159ef3319b68e5a2e9ad272&#34;&gt;その他&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;GojiなるWebフレームワークが良いらしい

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zenazn/goji&#34;&gt;https://github.com/zenazn/goji&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>参加記録 第6回ニコニコ学会β　データ研究会</title>
      <link>http://ota42y.com/blog/2015/04/12/niconico_data_6/</link>
      <pubDate>Sun, 12 Apr 2015 21:03:35 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/12/niconico_data_6/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://niconicodatasig6.peatix.com/&#34;&gt;第6回ニコニコ学会β　データ研究会&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;h1 id=&#34;基調講演:77062b116e53641aa03fb4a662d518a8&#34;&gt;基調講演&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;日立のH

&lt;ul&gt;
&lt;li&gt;スペシャリストのデータに基づいた施策より、超詳細なデータから計算した施策の方が有効

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://web-tan.forum.impressrd.jp/e/2015/03/06/19423&#34;&gt;http://web-tan.forum.impressrd.jp/e/2015/03/06/19423&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人間では見つけられない要因を特定できる

&lt;ul&gt;
&lt;li&gt;スキルより休憩中の雑談の盛り上がりが重要だったり&lt;/li&gt;
&lt;li&gt;膨大なデータの因果関係を調べ上げるのは人間には無理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ウェアラブルハピネスメーター

&lt;ul&gt;
&lt;li&gt;人は動き続けているほど止まらなくなる

&lt;ul&gt;
&lt;li&gt;T時間動き続けると、止まる確率が1/T&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;実際のデータと1/Tとの乖離が高くなると、集団の幸福度が低下する

&lt;ul&gt;
&lt;li&gt;1/Tに近いほど集団が幸福度が高くなる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;幸福度と業務の生産性は直結する

&lt;ul&gt;
&lt;li&gt;1/Tを上げることが生産性を上げることになる&lt;/li&gt;
&lt;li&gt;生産性や幸福度に関連するデータを短いスパンで計測することができる

&lt;ul&gt;
&lt;li&gt;日々のKPIとして利用できそうなところが革新的っぽい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pc.watch.impress.co.jp/docs/news/20150209_687505.html&#34;&gt;日立、集団の幸福感を測定する技術を開発 - PC Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E8%A6%8B%E3%81%88%E3%81%96%E3%82%8B%E6%89%8B-%E3%82%A6%E3%82%A8%E3%82%A2%E3%83%A9%E3%83%96%E3%83%AB%E3%82%BB%E3%83%B3%E3%82%B5%E3%81%8C%E6%98%8E%E3%81%8B%E3%81%99%E4%BA%BA%E9%96%93%E3%83%BB%E7%B5%84%E7%B9%94%E3%83%BB%E7%A4%BE%E4%BC%9A%E3%81%AE%E6%B3%95%E5%89%87-%E7%9F%A2%E9%87%8E%E5%92%8C%E7%94%B7/dp/4794220685/&#34;&gt;データの見えざる手: ウエアラブルセンサが明かす人間・組織・社会の法則&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;後で買う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;人狼知能:77062b116e53641aa03fb4a662d518a8&#34;&gt;人狼知能&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;脱初心者！経験は人狼力を向上させるのか？～データから見るベテランの実力～

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/toritorix/ss-46899953&#34;&gt;http://www.slideshare.net/toritorix/ss-46899953&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;人狼BBSの分析&lt;/li&gt;
&lt;li&gt;陣営ごとの平均プレイ回数が多い方が勝率が高い

&lt;ul&gt;
&lt;li&gt;運ゲーじゃなかった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;経験によるスキル向上

&lt;ul&gt;
&lt;li&gt;占い師

&lt;ul&gt;
&lt;li&gt;的中率は変化なし&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;狩人

&lt;ul&gt;
&lt;li&gt;上級者ほど護衛成功しやすい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人狼への投票率

&lt;ul&gt;
&lt;li&gt;ちょっとだけ高い&lt;/li&gt;
&lt;li&gt;上級者が複数人の陣営はわりと高くなる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;個人の経験より集団の経験の方が強い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人狼知能プロジェクト

&lt;ul&gt;
&lt;li&gt;人狼BBSのデータセットとか公開するらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aiwolf.org/&#34;&gt;http://www.aiwolf.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;能力者はどれくらい勝利に貢献するのか？の話

&lt;ul&gt;
&lt;li&gt;同じ人数で特定の能力者がいる/いない場合の勝率を計算

&lt;ul&gt;
&lt;li&gt;その能力者による勝利への貢献度合いが相対的にわかる&lt;/li&gt;
&lt;li&gt;ロジスティック回帰分析で解析&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結果

&lt;ul&gt;
&lt;li&gt;占い師&amp;gt;人狼&amp;gt;狩人&amp;gt;共有者&amp;gt;狂人&amp;gt;霊能者&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;村人

&lt;ul&gt;
&lt;li&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;結果。占い師最強。村人はゴミ &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%8B%E3%82%B3%E3%83%8B%E3%82%B3%E5%AD%A6%E4%BC%9A?src=hash&#34;&gt;#ニコニコ学会&lt;/a&gt; &lt;a href=&#34;http://t.co/gmVrLtS3Qb&#34;&gt;pic.twitter.com/gmVrLtS3Qb&lt;/a&gt;&lt;/p&gt;&amp;mdash; myrmecoleon (@myrmecoleon) &lt;a href=&#34;https://twitter.com/myrmecoleon/status/587138559770935298&#34;&gt;2015, 4月 12&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;占い師は人狼より強い&lt;/li&gt;
&lt;li&gt;霊能力者は使えない&lt;/li&gt;
&lt;li&gt;村人はゴミ（いないよりマシ）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結果から状況に応じた行動指針

&lt;ul&gt;
&lt;li&gt;複数COした場合、占い師2人の時以外は総吊り

&lt;ul&gt;
&lt;li&gt;占い師三人＝真占い、人狼、狂人（または人狼）&lt;/li&gt;
&lt;li&gt;占い師＜人狼＋狂人（または人狼）なので、全員吊った方がよい&lt;/li&gt;
&lt;li&gt;霊能力者の場合も同じく&lt;/li&gt;
&lt;li&gt;占い師＞人狼なので、占い師2人の場合は手を出さないのが吉&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人狼側で占い2人COの場合

&lt;ul&gt;
&lt;li&gt;相手を襲撃するのが良い&lt;/li&gt;
&lt;li&gt;占い師＞人狼なので、道連れにした方が得&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;狂人は占い師を騙るべき

&lt;ul&gt;
&lt;li&gt;霊能力者はダメ、村人は論外&lt;/li&gt;
&lt;li&gt;狩人も占い師を騙るべき&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;役職なしの人狼の勝率計算

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://arxiv.org/abs/1009.1031&#34;&gt;http://arxiv.org/abs/1009.1031&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;この結果が対面戦でも有効なのか気になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人狼でわかるコミュ力の正体

&lt;ul&gt;
&lt;li&gt;人狼はコミュニケーションの中で相手の嘘を見抜くのと、相手を説得するのを両方やるゲーム&lt;/li&gt;
&lt;li&gt;人狼での必要な行動を論理的に記述できる言語を作ったらしい

&lt;ul&gt;
&lt;li&gt;AI人狼と対戦できる

&lt;ul&gt;
&lt;li&gt;つよい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;初音ミクに人狼をやらせてみた

&lt;ul&gt;
&lt;li&gt;AI人狼

&lt;ul&gt;
&lt;li&gt;一瞬で決着がついておもしろくない&lt;/li&gt;
&lt;li&gt;対面だとおもしろいのに&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人狼をミクがプレイするようにした

&lt;ul&gt;
&lt;li&gt;モーション等もつけられるようになってる&lt;/li&gt;
&lt;li&gt;動画は限定公開中らしい…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;lt:77062b116e53641aa03fb4a662d518a8&#34;&gt;LT&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;初心者向け「凛ちゃん」

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/__john_smith__/rin-chan-46900896&#34;&gt;http://www.slideshare.net/__john_smith__/rin-chan-46900896&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;イ゛エ゛ロ゛ー゛タ゛ヨ゛ォ゛ォ゛ォ゛&lt;/li&gt;
&lt;li&gt;2chのスレで同名キャラの誰について話しているかを分類する

&lt;ul&gt;
&lt;li&gt;SVMで解析

&lt;ul&gt;
&lt;li&gt;68%の正解率&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DeepLearning

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://h2o.ai/&#34;&gt;http://h2o.ai/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;62%の正解率…&lt;/li&gt;
&lt;li&gt;まだ収束してないのでもっと上がるかもとのこと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「さくら」で分析したらもっとやばそう…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;E2D3の話

&lt;ul&gt;
&lt;li&gt;Excel上でD3.jsが動く

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://e2d3.org/?lang=ja&#34;&gt;http://e2d3.org/?lang=ja&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;便利そう(o゜▽゜)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;商業ボーイズラブの集計〜男性向けエロマンガを添えて〜

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/file/d/0B2uGN8G1iUFiOFh0czVabGFzVXM&#34;&gt;https://docs.google.com/file/d/0B2uGN8G1iUFiOFh0czVabGFzVXM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;男性向けよりも肉体的な関係より、精神的な関係を好むらしい

&lt;ul&gt;
&lt;li&gt;これは百合マンガと比較した場合もBLに特徴的なのか気になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ありらいおん deviantARTを調べてみた

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.deviantart.com/&#34;&gt;http://www.deviantart.com/&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;北米のすごいpixiv&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;規模的にはpixivの倍ぐらいらしい&lt;/li&gt;
&lt;li&gt;300万人で3億投稿&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>golangのラインエディタはlinerが便利</title>
      <link>http://ota42y.com/blog/2015/04/11/go-liner/</link>
      <pubDate>Sat, 11 Apr 2015 14:05:04 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/11/go-liner/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/peterh/liner&#34;&gt;peterh/liner&lt;/a&gt;&lt;br /&gt;
golangでCLIを作る際に活用できるラインエディタです。&lt;/p&gt;

&lt;h1 id=&#34;使い方:2af15ccd9bc45fb3ffe2661631874425&#34;&gt;使い方&lt;/h1&gt;

&lt;p&gt;liner.NewLinerで作成し、Prompt関数で入力を待機します。&lt;br /&gt;
入力があると関数が入力を返してくるため、それによって処理を分岐します。&lt;/p&gt;

&lt;p&gt;なお、Ctrl+cの場合は普通に入力になりますが、Ctrl+dの場合はEOFとしてエラーを返してくるため、&lt;br /&gt;
エラー時に終了するようにしておくことでCtrl+dで終了できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;github.com/peterh/liner&amp;quot;
)

func main() {
	line := liner.NewLiner()
	defer line.Close()

	for {
		l, err := line.Prompt(&amp;quot;Input: &amp;quot;)
		if err != nil {
			fmt.Println(&amp;quot;error: &amp;quot;, err)
		} else {
			fmt.Println(&amp;quot;get: &amp;quot;, l)

			if l == &amp;quot;exit&amp;quot; {
				break
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;入力履歴を使う:2af15ccd9bc45fb3ffe2661631874425&#34;&gt;入力履歴を使う&lt;/h1&gt;

&lt;p&gt;AppendHistory関数に文字列を渡すことで、上下キーで入力履歴をたどれます。&lt;br /&gt;
&lt;a href=&#34;http://godoc.org/github.com/peterh/liner#State.AppendHistory&#34;&gt;State.AppendHistory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;また、WriteHistory関数でファイルへの書き込みを、ReadHistory関数でファイルからの読み込みを行えます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;github.com/peterh/liner&amp;quot;
	&amp;quot;os&amp;quot;
)

func main() {
	line := liner.NewLiner()
	defer line.Close()

	f, err := os.Open(&amp;quot;inputs.log&amp;quot;)
	if err == nil {
		n, _ := line.ReadHistory(f)
		fmt.Println(&amp;quot;load&amp;quot;, n, &amp;quot;history&amp;quot;)
		f.Close()
	}

	for {
		l, err := line.Prompt(&amp;quot;Input: &amp;quot;)
		if err != nil {
			fmt.Println(&amp;quot;error: &amp;quot;, err)
		} else {
			fmt.Println(&amp;quot;get: &amp;quot;, l)
			line.AppendHistory(l)

			if l == &amp;quot;exit&amp;quot; {
				break
			}
		}
	}

	f, err = os.Create(&amp;quot;inputs.log&amp;quot;)
	if err == nil {
		fmt.Println(&amp;quot;write history&amp;quot;)

		line.WriteHistory(f)
		f.Close()
	} else {
		fmt.Println(&amp;quot;write history error: &amp;quot;, err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;タブ補完を使う:2af15ccd9bc45fb3ffe2661631874425&#34;&gt;タブ補完を使う&lt;/h1&gt;

&lt;p&gt;SetCompleter関数に補完用の関数を登録することで、タブ補完も使えます。&lt;br /&gt;
&lt;a href=&#34;http://godoc.org/github.com/peterh/liner#State.SetCompleter&#34;&gt;State.SetCompleter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;引数として、現在入力中のstringを受け取り、tab候補をstringの配列で返す関数を渡します。&lt;br /&gt;
入力中の文字が配列のはじめの要素で置き換えられ、以降tabを押すごとに次の要素と置き換えられます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;github.com/peterh/liner&amp;quot;
	&amp;quot;strings&amp;quot;
)

func main() {
	inputs := make([]string, 0)

	line := liner.NewLiner()
	defer line.Close()

	line.SetCompleter(func(line string) (c []string) {
		for _, n := range inputs {
			if strings.HasPrefix(n, strings.ToLower(line)) {
				c = append(c, n)
			}
		}
		return
	})

	for {
		l, err := line.Prompt(&amp;quot;Input: &amp;quot;)
		if err != nil {
			fmt.Println(&amp;quot;error: &amp;quot;, err)
		} else {
			fmt.Println(&amp;quot;get: &amp;quot;, l)
			inputs = append(inputs, l)

			if l == &amp;quot;exit&amp;quot; {
				break
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;まとめ:2af15ccd9bc45fb3ffe2661631874425&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ラインエディタに必要な物は大体揃っている

&lt;ul&gt;
&lt;li&gt;入力中の左右移動&lt;/li&gt;
&lt;li&gt;履歴&lt;/li&gt;
&lt;li&gt;補完&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;日本語入力はちょっとおかしい

&lt;ul&gt;
&lt;li&gt;日本語を入れて左右移動すると表示がおかしい&lt;/li&gt;
&lt;li&gt;ターミナルの問題の可能性も&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>golangでIOへのテストを行う</title>
      <link>http://ota42y.com/blog/2015/04/01/go-io-test/</link>
      <pubDate>Wed, 01 Apr 2015 07:06:38 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/01/go-io-test/</guid>
      <description>

&lt;h1 id=&#34;まとめ:45434d41f1f2e75f0b6bd5a92c14794f&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;fmt.Print等にちゃんと出力されるかテストしたい

&lt;ul&gt;
&lt;li&gt;結論としては直接は無理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;io.Writerを利用するように変えることで簡単にテスト可能

&lt;ul&gt;
&lt;li&gt;渡されたio.Writerに書き込むようにする&lt;/li&gt;
&lt;li&gt;通常はos.Stdout、テストの時はbytes.Bufferを渡す&lt;/li&gt;
&lt;li&gt;どちらもio.Writerを実装している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;標準出力への書き込みをテストしたい:45434d41f1f2e75f0b6bd5a92c14794f&#34;&gt;標準出力への書き込みをテストしたい&lt;/h1&gt;

&lt;p&gt;fmt.Print等で文字列を出力する場合、予期したものが出力されるかをテストしたい場合があります。&lt;br /&gt;
ですが、fmt.Printはそのまま出力まで行ってしまうらしく、こちら側で制御することは難しそうです。&lt;/p&gt;

&lt;p&gt;このような場合、fmt.Printを使うのではなく、明示的に標準出力へ書き込むようにし、&lt;br /&gt;
テストの時は書き込み先を切り替えることで簡単にテストができるようになります。&lt;/p&gt;

&lt;h2 id=&#34;fmt-fprintで出力先を指定する:45434d41f1f2e75f0b6bd5a92c14794f&#34;&gt;fmt.Fprintで出力先を指定する&lt;/h2&gt;

&lt;p&gt;golangでは任意の書き込み先に対して書き込むfmt.Fprint関数が用意されています。&lt;br /&gt;
この関数は、io.Writerに対してフォーマット指定した文字列を書き込めます。&lt;br /&gt;
&lt;a href=&#34;https://golang.org/pkg/fmt/#Fprint&#34;&gt;https://golang.org/pkg/fmt/#Fprint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;io.Writerは&lt;code&gt;Write(p []byte) (n int, err error)&lt;/code&gt;関数だけを持ったインターフェースです。&lt;br /&gt;
そのため、これを実装していればfmt.Fprintの書き込み先として使えます。&lt;br /&gt;
&lt;a href=&#34;http://golang.org/pkg/io/#Writer&#34;&gt;http://golang.org/pkg/io/#Writer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;golangでは、io.Writerを実装した標準出力をos.Stdoutとして提供しています。&lt;br /&gt;
そのため、os.Stdoutにfmt.Fprintで書き込むことにより、&lt;br /&gt;
出力先を変更可能な状態で標準出力に出力できます。&lt;/p&gt;

&lt;h2 id=&#34;メモリ上に出力する:45434d41f1f2e75f0b6bd5a92c14794f&#34;&gt;メモリ上に出力する&lt;/h2&gt;

&lt;p&gt;golangでは、byets.Bufferもio.Writerを実装しており、こちらは書き込まれた文字列をメモリ上に保持してくれます。&lt;br /&gt;
そして、String()関数により、書き込まれた文字列をstringとして取得できます。&lt;br /&gt;
&lt;a href=&#34;http://golang.org/pkg/bytes/#Buffer&#34;&gt;http://golang.org/pkg/bytes/#Buffer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これを利用し、普段はos.Stdoutに書き込むようにし、テストの時に書き込み先をbyets.Bufferに変更することで、&lt;br /&gt;
標準出力に出力されたかどうかをテストすることができるようになります。&lt;/p&gt;

&lt;h1 id=&#34;サンプルコード:45434d41f1f2e75f0b6bd5a92c14794f&#34;&gt;サンプルコード&lt;/h1&gt;

&lt;p&gt;print.go&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;io&amp;quot;
    &amp;quot;os&amp;quot;
)

func testPrint(w io.Writer) {
    fmt.Fprint(w, &amp;quot;write test\n&amp;quot;)
}

func main() {
    testPrint(os.Stdout)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;print_test.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main
import (
    &amp;quot;bytes&amp;quot;
    &amp;quot;testing&amp;quot;
)

func TestPrint(t *testing.T) {
    buf := &amp;amp;bytes.Buffer{}
    testPrint(buf)
    outputString := buf.String()
    
    correctString := &amp;quot;write test\n&amp;quot;
    if correctString != outputString {
        t.Errorf(&amp;quot;output string shud be %s but %s&amp;quot;, correctString, outputString)
        t.FailNow()
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GoのポインタはC&#43;&#43;ポインタとは違う</title>
      <link>http://ota42y.com/blog/2015/03/28/go_interface/</link>
      <pubDate>Sat, 28 Mar 2015 21:26:40 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/03/28/go_interface/</guid>
      <description>

&lt;p&gt;C++みたいなノリでGoのインターフェースとポインタを使ったところ、はまったのでメモ。&lt;/p&gt;

&lt;h1 id=&#34;goでインターフェースを実装したクラスのポインタを扱う:50fdd019e9a71df208e16a3cc56d13ed&#34;&gt;Goでインターフェースを実装したクラスのポインタを扱う&lt;/h1&gt;

&lt;p&gt;Goで以下のように、インターフェースを実装したクラスを受けたい場合があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Node interface{
  ToString() string
}

func Output(l Node) {
  fmt.Println(l.ToString())
}

type NodeTest struct{
}

func (n NodeTest) ToString() string{
  return &amp;quot;test&amp;quot;
}

func main(){
  n := NodeTest{}
  Output(n)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;関数呼び出しのたびにオブジェクトがコピーされるのは無駄なので、
インターフェースのポインタを渡すように変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Output(l *Node) {
  fmt.Println((*l).ToString())
}

func (n *NodeTest) ToString() string{
  return &amp;quot;test&amp;quot;
}

func main(){
  n := &amp;amp;NodeTest{}
  Output(n)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合、インターフェースのポインタは、インターフェースを実装したstructのポインタとは違うため、
関数の引数として渡すことができず、コンパイルが通りません。&lt;/p&gt;

&lt;p&gt;そのため、インターフェースを使う場合はオブジェクトをコピーせざるを得ないように思えますが、
ちゃんとこのような場合も解決方法は存在します。&lt;/p&gt;

&lt;h1 id=&#34;ポインタにインターフェースを実装する:50fdd019e9a71df208e16a3cc56d13ed&#34;&gt;ポインタにインターフェースを実装する&lt;/h1&gt;

&lt;p&gt;上記の2番目のコードでは、NodeTest型のポインタに対してインターフェースを実装しています。&lt;br /&gt;
そのため、以下のようにOutput関数の引数をNode型を受けるようにしておくのが正解になります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Output(l Node) {
  fmt.Println(l.ToString())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これにより、Output関数にNodeインタフェースを実装したNodeTestのポインタがコピーして渡され、&lt;br /&gt;
NodeTestオブジェクト自体はコピーされずに渡されます。&lt;/p&gt;

&lt;p&gt;ここがC++とはだいぶ違う考え方が必要なので戸惑いました。&lt;br /&gt;
C++では構造体にメソッドを実装し、ポインタからその構造体のメソッドを呼び出します。&lt;br /&gt;
そのため、あくまでポインタの指しているオブジェクトのメソッド呼び出しであり、&lt;br /&gt;
クラスのポインタそのものにメソッドが定義されている訳ではありません。&lt;/p&gt;

&lt;p&gt;ですがGoのインターフェースを使った場合、前述の通り上手く動きません。&lt;br /&gt;
そのため、型のポインタにメソッドを定義し、それをインターフェースとして扱う必要があります。&lt;/p&gt;

&lt;p&gt;C++ではポインタに対して別名をつけることはできますが、メソッドの実装はできませんでした。&lt;br /&gt;
ですがGoではポインタやint型といったほぼすべての型に対してメソッドを実装できます。&lt;/p&gt;

&lt;p&gt;たとえば、以下のようにint型に対しても好きなメソッドを定義できます。&lt;br /&gt;
(一応名前は変える必要があります)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main
import (
    &amp;quot;fmt&amp;quot;
)

type MyInt int

func (i *MyInt) Out() {
     fmt.Println(*i)
}

func main() {
     var i MyInt = 1
     (&amp;amp;i).Out()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あらゆる型に関数をつけられるというのが、C++に染まった頭からだと理解できなくて手間取りました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windowsにgxuiをインストールする</title>
      <link>http://ota42y.com/blog/2015/03/22/gxui-install/</link>
      <pubDate>Sun, 22 Mar 2015 10:27:54 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/03/22/gxui-install/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/google/gxui&#34;&gt;gxui&lt;/a&gt;は、GoogleによるGo製のクロスプラットフォームなGUIライブラリです。&lt;br /&gt;
WindowsへのインストールはGoの環境を整えるところでだいぶ大変だったので、手順を書いておきます。&lt;br /&gt;
なお、一部の依存ライブラリが64bitに対応していないため、すべて32bit版を使います。&lt;/p&gt;

&lt;h1 id=&#34;go言語の環境構築:e3f779623d1fe78142ffab511be6be70&#34;&gt;Go言語の環境構築&lt;/h1&gt;

&lt;p&gt;Go本体に加えて、依存ライブラリのためにgcc,hg,gitが必要になります。&lt;br /&gt;
元々SouceTreeがgitとhgを内部に持って、しかもコンソールまで提供していたのでそれを使っていましたが、&lt;br /&gt;
mingwのgccを認識してくれないため、コマンドライン版をインストールし直しました。&lt;/p&gt;

&lt;h2 id=&#34;vcsのインストール:e3f779623d1fe78142ffab511be6be70&#34;&gt;VCSのインストール&lt;/h2&gt;

&lt;p&gt;git(&lt;a href=&#34;http://git-scm.com/&#34;&gt;http://git-scm.com/&lt;/a&gt;)とmercurial(&lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;http://mercurial.selenic.com/&lt;/a&gt;)をインストールします。&lt;br /&gt;
gitの場合、git bash onlyではなく、コマンドラインからも使えるようにしてください&lt;/p&gt;

&lt;h2 id=&#34;mingwのインストール:e3f779623d1fe78142ffab511be6be70&#34;&gt;mingwのインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://sourceforge.net/projects/mingw/&#34;&gt;http://sourceforge.net/projects/mingw/&lt;/a&gt;からmingwを入れ、&lt;br /&gt;
mingw32-baseとmingw32-gcc-g++にチェックを入れて、メニューのInstallationからApply Changesを選択します。&lt;/p&gt;

&lt;p&gt;なお、Goの64bitとmingwの64bitを使ったところ、glfwのインストール時にサポートしてないよって言われました。&lt;br /&gt;
これは両方とも32bitに揃えることで回避できました。&lt;/p&gt;

&lt;p&gt;コマンドラインからgccが使えるようになっていれば大丈夫です。&lt;/p&gt;

&lt;h1 id=&#34;gxuiのインストール:e3f779623d1fe78142ffab511be6be70&#34;&gt;gxuiのインストール&lt;/h1&gt;

&lt;p&gt;gxuiと4つの依存するパッケージをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get http://github.com/google/gxui
go get http://code.google.com/p/freetype-go/freetype/raster
go get http://code.google.com/p/freetype-go/freetype/truetype
go get http://github.com/go-gl/gl/v3.2-core/gl
go get http://github.com/go-gl/glfw/v3.1/glfw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでインストールはおしまいです。
gxui内のsample/下にあるサンプルを動かして確認をしてください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OctopressからHugoに乗り換えた</title>
      <link>http://ota42y.com/blog/2015/03/16/octopress_to_hugo/</link>
      <pubDate>Mon, 16 Mar 2015 07:40:11 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/03/16/octopress_to_hugo/</guid>
      <description>

&lt;p&gt;このサイトは元々静的サイト作成ツールのOctopressを使い、Github Pages上に構築していましたが、&lt;br /&gt;
サイト作成ツールの部分をGolangで作られたHugoに置き換えました。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Octopress

&lt;ul&gt;
&lt;li&gt;Ruby制の静的サイト作成ツール&lt;/li&gt;
&lt;li&gt;大量の記事を扱うと遅くなっていく

&lt;ul&gt;
&lt;li&gt;100記事で新しい記事のHTML出力まで10秒ぐらいかかる&lt;/li&gt;
&lt;li&gt;見た目を確認したいときなどにとても不便&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hugo

&lt;ul&gt;
&lt;li&gt;Golang制の静的サイト作成ツール&lt;/li&gt;
&lt;li&gt;利点&lt;/li&gt;
&lt;li&gt;早い

&lt;ul&gt;
&lt;li&gt;100記事で200msぐらい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;環境構築いらず

&lt;ul&gt;
&lt;li&gt;公式がバイナリ配布&lt;/li&gt;
&lt;li&gt;手を加えないならそのまま使える&lt;/li&gt;
&lt;li&gt;Win-Mac両方使う人にはとても楽&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;欠点

&lt;ul&gt;
&lt;li&gt;テーマが少ない

&lt;ul&gt;
&lt;li&gt;このサイトも自作&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ota42y/orange42&#34;&gt;https://github.com/ota42y/orange42&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;手を加えにくい

&lt;ul&gt;
&lt;li&gt;手を加えると環境構築いらずの利点が失われる&lt;/li&gt;
&lt;li&gt;クロスコンパイルは楽なのでそれほどでもない？

&lt;ul&gt;
&lt;li&gt;手を加える必要が無いのでそのとき考える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;octopressの問題点:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;Octopressの問題点&lt;/h1&gt;

&lt;p&gt;HTMLのレンダリングが遅いです。&lt;/p&gt;

&lt;p&gt;Octopressにはローカルにサーバを立てて、実際に表示される画面をブラウザで表示する機能があります。&lt;br /&gt;
この機能はファイルを監視しており、変更があるたびに再読込をしてくれるので、&lt;br /&gt;
表示されるHTMLをみながらmarkdownを編集でき、とても役に立っていました。&lt;/p&gt;

&lt;p&gt;現在このブログは100記事ぐらいありますが、その状態だと1記事のHTMLを作るのに10秒ぐらいかかってしまいます。&lt;br /&gt;
ちょっとした修正ごとに10秒待つのはなかなかにつらく、&lt;br /&gt;
かつ記事が増えて行くにしたがって速度がより遅くなっていくことが予想できました。&lt;br /&gt;
そのときちょうどGolangで作られたHugoのことを知り、速度もとても速いとのことなので乗り換えを検討しました&lt;/p&gt;

&lt;p&gt;乗り換え方はこちらのサイトを参考にさせていただきました。&lt;br /&gt;
&lt;a href=&#34;http://deeeet.com/writing/2014/12/25/hugo/&#34;&gt;OctopressからHugoへ移行した&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;hugoの利点:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;Hugoの利点&lt;/h1&gt;

&lt;h2 id=&#34;htmlのレンダリングが早い:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;HTMLのレンダリングが早い&lt;/h2&gt;

&lt;p&gt;Octopressだと10秒ぐらいかかっていた状態をそのまま移行しましたが、&lt;br /&gt;
ファイルを更新してからHTMLに変換されるまでの時間が400msにまで短縮され、&lt;br /&gt;
ほとんど待ち時間が感じられないレベルになりました。&lt;br /&gt;
特にチューニングとかを考えずにこの速度なので、とても助かります。&lt;/p&gt;

&lt;h2 id=&#34;環境構築いらず:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;環境構築いらず&lt;/h2&gt;

&lt;p&gt;Hugo本体に手を入れないのであれば、様々な環境用の実行ファイルが配布されているため、&lt;br /&gt;
環境構築でがんばる必要がありません。&lt;br /&gt;
私はWindowsとMacの両方を使っていますが、WindowsでのRubyはつらいものがあるので、&lt;br /&gt;
Windows向けのバイナリをダウンロードするだけですむのは大変便利です。&lt;/p&gt;

&lt;h1 id=&#34;hugoの問題点:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;Hugoの問題点&lt;/h1&gt;

&lt;h2 id=&#34;テーマがない:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;テーマがない&lt;/h2&gt;

&lt;p&gt;テーマの数が圧倒的に少なく、思った通りのサイトを作るためには自分で作らないと行けません。&lt;br /&gt;
実際このサイトも自分でテーマを作りました。&lt;br /&gt;
&lt;a href=&#34;https://github.com/ota42y/orange42&#34;&gt;https://github.com/ota42y/orange42&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;手を入れにくい:fdc6cdc059d5bbb297f2d7b38c26691e&#34;&gt;手を入れにくい&lt;/h2&gt;

&lt;p&gt;公式サイトのバイナリだけで運用を考える場合、新しい機能を追加することがとても難しいです。&lt;br /&gt;
Octopressの場合は比較的簡単に機能追加ができたため、拡張したくなった場合に手がかかりそうです。&lt;br /&gt;
これは環境構築の手間とのトレードオフなので仕方ないことなのですが…&lt;/p&gt;

&lt;p&gt;最も、Hugoには十分な機能が備わっているため、今のところ問題にはなっていません。&lt;br /&gt;
一応Golangならクロスコンパイルは簡単なため、一カ所で開発してそれを使い回せるようになるはずです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JenkinsをHTTP経由で叩く</title>
      <link>http://ota42y.com/blog/2015/02/27/jenkins-remote-api/</link>
      <pubDate>Fri, 27 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2015/02/27/jenkins-remote-api/</guid>
      <description>

&lt;h1 id=&#34;まとめ:af624862a939b6a21fcbc09ac950f3c4&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;JenkinsはWebベースのUI

&lt;ul&gt;
&lt;li&gt;操作の敷居が低い&lt;/li&gt;
&lt;li&gt;使い込むと使いづらくなる&lt;/li&gt;
&lt;li&gt;反応速度&lt;/li&gt;
&lt;li&gt;複数のビルド実行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Remote access API

&lt;ul&gt;
&lt;li&gt;HTTP経由でJobを実行できる&lt;/li&gt;
&lt;li&gt;ページ表示を待たなくていいため高速&lt;/li&gt;
&lt;li&gt;プログラムから実行可能&lt;/li&gt;
&lt;li&gt;ただし、Jenkinsの仕様上、実行したビルドのビルド番号は解らない&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;jenkinsのjob実行は大変:af624862a939b6a21fcbc09ac950f3c4&#34;&gt;JenkinsのJob実行は大変&lt;/h1&gt;

&lt;p&gt;JenkinsはWebブラウザを使ってGUIで操作するため、&lt;br /&gt;
操作の敷居が低く、簡単に扱えるようになっています。&lt;/p&gt;

&lt;p&gt;ですが、ブラウザやJenkins本体の状態によってはとても遅くなってしまい、&lt;br /&gt;
ページを切り替えるのに3，4秒待つといった状態まで遅くなると、&lt;br /&gt;
ビルドをするのがとても辛くなります。&lt;/p&gt;

&lt;p&gt;また、パラメータの組み合わせの分だけビルドしようとすると、&lt;br /&gt;
さらに辛くなってしまいます。&lt;/p&gt;

&lt;p&gt;このような場合に、Jenkinsに用意されているRemote access APIを使うことで、&lt;br /&gt;
Jenkinsをプログラムから制御でき、反応の遅さに悩まされたり、&lt;br /&gt;
パラメータの数だけクリックをする必要性から逃れられます。&lt;/p&gt;

&lt;h1 id=&#34;remote-access-api:af624862a939b6a21fcbc09ac950f3c4&#34;&gt;Remote access API&lt;/h1&gt;

&lt;p&gt;詳しくはこちら&lt;br /&gt;
&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API&#34;&gt;https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Build&#34;&gt;https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Build&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;要するに、パラメータが無い場合は&lt;br /&gt;
&lt;code&gt;http://HOST/job/JOB_NAME/build&lt;/code&gt;
に、ある場合は&lt;br /&gt;
&lt;code&gt;http://HOST/job/JOB_NAME/buildWithParameters&lt;/code&gt;
にPOSTで投げるとビルドできます。&lt;/p&gt;

&lt;p&gt;パラメータの投げ方はフォームデータとしてでもいいですし、&lt;br /&gt;
&lt;code&gt;http://HOST/job/JOB_NAME/buildWithParameters?PARAMETER=Value&lt;/code&gt;
のように、URLに直接入れても大丈夫のようです。&lt;/p&gt;

&lt;h1 id=&#34;サンプルスクリプト:af624862a939b6a21fcbc09ac950f3c4&#34;&gt;サンプルスクリプト&lt;/h1&gt;

&lt;p&gt;3*3=9種類のビルドを一気に実行するスクリプトです&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;open-uri&#39;
require &#39;net/http&#39;

platforms = [&amp;quot;ios&amp;quot;,  &amp;quot;android&amp;quot;, &amp;quot;windows&amp;quot;]
settings =  [&amp;quot;debug&amp;quot;,&amp;quot;release&amp;quot;, &amp;quot;store&amp;quot;]

platforms.product(settings).each do |platform, setting|
  params = {:PLATFORM =&amp;gt; platform, :SETTING =&amp;gt; setting}
  p params

  url = URI.parse(&#39;http://HOST/job/JOB_NAME/buildWithParameters&#39;)
  req = Net::HTTP::Post.new(url.path)
  req.basic_auth &#39;NAME&#39;, &#39;PASSWORD&#39;
  req.set_form_data(params)
  res = Net::HTTP.new(url.host, url.port).start {|http| http.request(req) }
  case res
  when Net::HTTPSuccess, Net::HTTPRedirection
    p &amp;quot;OK&amp;quot;
  else
    res.value
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;問題点:af624862a939b6a21fcbc09ac950f3c4&#34;&gt;問題点&lt;/h1&gt;

&lt;p&gt;Jenkinsの仕様上、キューを入れた段階でビルド番号が確定しません。&lt;br /&gt;
そのため、実行したビルドが何番のビルドとして登録されたかをレスポンスから知ることは出来ません。ss&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins Workflow Pluginでリポジトリ内のスクリプトを読み込む時の注意点</title>
      <link>http://ota42y.com/blog/2015/02/11/jenkins-workflow/</link>
      <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2015/02/11/jenkins-workflow/</guid>
      <description>

&lt;h1 id=&#34;まとめ:0ccb30a040a233a026556ed14d67937d&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ブランチをパラメーターにするとスクリプトを読めない

&lt;ul&gt;
&lt;li&gt;中身ではなく変数名のブランチを探しに行く&lt;/li&gt;
&lt;li&gt;多分バグ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ファイルから読み込むるスクリプトを書けば解決

&lt;ul&gt;
&lt;li&gt;公式のflow.groovyを参考に&lt;/li&gt;
&lt;li&gt;変数を使おうとすると面倒&lt;/li&gt;
&lt;li&gt;java.io.Serializableを実装する必要あり&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;gitリポジトリ内のスクリプトを指定できない:0ccb30a040a233a026556ed14d67937d&#34;&gt;gitリポジトリ内のスクリプトを指定できない&lt;/h1&gt;

&lt;p&gt;(以下に用意されているdocker上のJenkinsで確認しました)&lt;br /&gt;
&lt;a href=&#34;https://github.com/jenkinsci/workflow-plugin/blob/master/demo/README.md&#34;&gt;https://github.com/jenkinsci/workflow-plugin/blob/master/demo/README.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Workflow Pluginでは、リポジトリ内のgroovyスクリプトを読み込んで実行する機能があります。&lt;br /&gt;
この機能を使うことで、リポジトリの内容とそれに対応するビルド手順を同時にバージョン管理出来るため、&lt;br /&gt;
ビルド手順の変更がとてもやりやすくなります。&lt;/p&gt;

&lt;p&gt;ですが残念ながら、パラメータで指定したブランチをチェックアウトして読み込むと、以下のエラーになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; git config remote.origin.url /var/lib/jenkins/workflow-plugin-pipeline-demo # timeout=10
Fetching upstream changes from /var/lib/jenkins/workflow-plugin-pipeline-demo
&amp;gt; git --version # timeout=10
&amp;gt; git -c core.askpass=true fetch --tags --progress /var/lib/jenkins/workflow-plugin-pipeline-demo
+refs/heads/*:refs/remotes/origin/*
&amp;gt; git rev-parse origin/$BRANCH_NAME^{commit} # timeout=10
&amp;gt; git rev-parse $BRANCH_NAME^{commit} # timeout=10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パラメータの内容ではなく、パラメータの名前そのものを探しに行っており、おそらくバグと思われます。&lt;br /&gt;
通常のJobでGit Pluginを使うと問題なくパラメータ指定が出来るため、Workflowのバグと思われます。&lt;/p&gt;

&lt;p&gt;このバグは、Jenkinsでは事前に設定した特定ブランチしかビルドしない場合は問題ありません。&lt;br /&gt;
ですが、様々なブランチで実行する可能性がある場合、JenkinsのJob設定にスクリプトを書かなければならず、&lt;br /&gt;
ビルド手順自体の管理が大変になります。&lt;/p&gt;

&lt;p&gt;このような場合、スクリプトをロードして実行するスクリプトをJobに設定することで、&lt;br /&gt;
指定したブランチからスクリプトを読み込んで実行できます。&lt;/p&gt;

&lt;h1 id=&#34;スクリプトをロードして実行するスクリプト:0ccb30a040a233a026556ed14d67937d&#34;&gt;スクリプトをロードして実行するスクリプト&lt;/h1&gt;

&lt;p&gt;(公式のdockerにも&lt;a href=&#34;https://github.com/jenkinsci/workflow-plugin-pipeline-demo/blob/master/flow.groovy&#34;&gt;スクリプト&lt;/a&gt;がありますが、より簡単化したもので説明します)&lt;/p&gt;

&lt;p&gt;以下のようなスクリプトをリポジトリのルートに起きます&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// build.groovy
def build(){
  node(&amp;quot;slave&amp;quot;) {
    git url: ‘RIPOSITORY_URL&#39;, branch: “$BRANCH_NAME&amp;quot;
    sh “rake build&amp;quot;
  }
}
return this
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jobには以下のスクリプトを書きます&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def flow
node(&amp;quot;master&amp;quot;) {
    git url: ‘RIPOSITORY_URL&#39;, branch: “$BRANCH_NAME&amp;quot;
    flow = load &#39;flow.groovy&#39;
}
flow.build()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;loadは指定したパスのgroovyスクリプトを読み込み、returnしたオブジェクトを返します。&lt;br /&gt;
そのため、これでリポジトリ内のファイルをロードして実行することが出来ます。&lt;br /&gt;
また、buildメソッドをnodeの外側で実行することで、ビルド中はmasterのキューを開けておくことが出来ます。&lt;/p&gt;

&lt;h1 id=&#34;ロード時に変数を保存したい場合:0ccb30a040a233a026556ed14d67937d&#34;&gt;ロード時に変数を保存したい場合&lt;/h1&gt;

&lt;p&gt;上記の方式の場合、masterにcloneしてその後にslave上に再度cloneしてビルドを始めています。&lt;br /&gt;
slaveの選択を凝らない場合は問題ないですが、リリースビルド専用マシンがあったり、&lt;br /&gt;
特定のミドルウェアを使うビルドの場合など、slaveの選択をパラメータによって切り替えたい場合があります。&lt;/p&gt;

&lt;p&gt;パラメータだけで決定できる場合は問題ありませんが、リポジトリ内のファイルを読み込む必要がある場合、&lt;br /&gt;
上記のスクリプトの場合でいうところの、node(&amp;ldquo;master&amp;rdquo;)内で処理しなければなりません。&lt;br /&gt;
当然Job側にそれを書くとメンテが大変になるため、flow.groovy内に書く必要があります。&lt;/p&gt;

&lt;p&gt;このような場合、groovyスクリプトの戻り値で独自クラスを返すことで解決できます。&lt;/p&gt;

&lt;h1 id=&#34;load関数の戻り値で独自クラスを返す:0ccb30a040a233a026556ed14d67937d&#34;&gt;load関数の戻り値で独自クラスを返す&lt;/h1&gt;

&lt;p&gt;Jenkinsから以下のようなgroovyスクリプトを読み込むことで、slaveの選択も柔軟にできるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def buildSlave(slaveName){
  slave(slaveName){
    sh &amp;quot;echo ’slave&#39;&amp;quot;
  }
}

class FlowStruct implements java.io.Serializable{
  def slaveName
  def flow
  public void build(){
    flow.buildSlave(slaveName)
  }
}

f = new FlowStruct()
f.slaveName = readFile(“settings/config_${SETTING}&amp;quot;).trim()
f.flow = this

return f;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;load関数では通常の文はすべて実行されるため、FlowStruct()以降が実行されてから関数が終了します。&lt;br /&gt;
また、戻り値は固定ではないため、上記のように独自のクラスを作成して返すことができます。&lt;br /&gt;
この際、戻り値はjava.io.Serializableを実装している必要がありますのでご注意ください。&lt;/p&gt;

&lt;p&gt;これで、複雑な設定をしていたとしても、すべてリポジトリ内のスクリプトで処理することが出来ます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins Workflow Pluginで複数slaveを扱うのが楽になる</title>
      <link>http://ota42y.com/blog/2015/02/10/workflow-plugin/</link>
      <pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2015/02/10/workflow-plugin/</guid>
      <description>

&lt;h1 id=&#34;まとめ:ccf6631e819df9368a47b40de1b4ff36&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Jenkinsはjob単位でしかノードに割り振れない

&lt;ul&gt;
&lt;li&gt;複数ノードで分散ビルドするには設定を駆使する必要がある&lt;/li&gt;
&lt;li&gt;結果としてjobの数が増えて管理コストが増大する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Workflow Pluginで大幅に改善する

&lt;ul&gt;
&lt;li&gt;スクリプトからノードを指定してコマンドを実行できる&lt;/li&gt;
&lt;li&gt;複数のjobを組み合わせていたのが一つのスクリプトですむ&lt;/li&gt;
&lt;li&gt;スクリプトをVCSに入れればビルド設定のバージョン管理も可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;複数ノードをコントロールするのは難しい:ccf6631e819df9368a47b40de1b4ff36&#34;&gt;複数ノードをコントロールするのは難しい&lt;/h1&gt;

&lt;p&gt;Jenkinsを一つのノードで運用している場合はそれほど問題になりませんが、&lt;br /&gt;
複数のノードで、jobの一部の部分だけを別のノードで実行するなど、&lt;br /&gt;
ある程度複雑な分散をやろうとすると、Jenkins本体の機能では不足してきます。&lt;/p&gt;

&lt;p&gt;このような問題に対して、これまではBuild Flow Pluginを使う事で解決が可能でしたが、&lt;br /&gt;
Workflow Pluginを使う事で、さらに簡単に解決することが出来ます。&lt;/p&gt;

&lt;h1 id=&#34;build-flow-pluginの問題点:ccf6631e819df9368a47b40de1b4ff36&#34;&gt;Build Flow Pluginの問題点&lt;/h1&gt;

&lt;p&gt;Build Flow Pluginは基本的に複数の下流ビルドを管理するために作られているため、&lt;br /&gt;
処理を分けようとするとjobの数が増加していきます。&lt;/p&gt;

&lt;p&gt;例えばネイティブアプリのビルドのようなCPUパワーを使う処理と、パワーを使わないアップロード処理がある場合、&lt;br /&gt;
一つのノードで全てやるよりも、非力なサーバを確保してアップロード処理をそちらで実行した方が、&lt;br /&gt;
ビルド用のノードはビルドに専念でき、無駄なくjobを実行できます。&lt;br /&gt;
(また、masterとビルドを同じノードでやるとJenkins本体の処理が遅くなるため、分割する利点は他にもあります)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2015/2015-02-10-master-slave.jpg&#34; alt=&#34;分割イメージ&#34; /&gt;
&lt;br /&gt;
(上段のup#4はup#3の間違いです…)&lt;/p&gt;

&lt;p&gt;ビルドが数十分、数時間かかるような巨大な処理の場合、&lt;br /&gt;
処理を分散することで稼げる時間はかなりのものになります。&lt;/p&gt;

&lt;p&gt;従来では分割する作業を別のjobにし、かつBuild Flow Plugin用のjobを作る必要があります。&lt;br /&gt;
さらに、ファイルの受け渡しもできないため、成果物として保存して、&lt;br /&gt;
次のjobは前のjobの特定のビルド番号の成果物を取り出す…といった風になります。&lt;/p&gt;

&lt;p&gt;jobの数が増えると管理も大変ですし、使う方もどれを使えば良いのか解らなくなります。&lt;br /&gt;
ここで、Workflow Pluginを使うことで大きく改善することが出来ます。&lt;/p&gt;

&lt;h1 id=&#34;workflow-pluginを使ったビルド:ccf6631e819df9368a47b40de1b4ff36&#34;&gt;Workflow Pluginを使ったビルド&lt;/h1&gt;

&lt;p&gt;Workflow Pluginでは、slaveを選択してコマンドを実行、&lt;br /&gt;
特定のファイルを別のslaveにコピーして処理を実行ということががスクリプトで書けます。&lt;/p&gt;

&lt;p&gt;例えば以下のように書くことで、masterでファイルを生成してslaveで実行、&lt;br /&gt;
その後結果をmasterにコピーしてアップロードみたいな事が出来ます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;node(&amp;quot;master&amp;quot;){
  sh &amp;quot;rake config&amp;quot;
  archive &amp;quot;config.yml&amp;quot;
}

node(&amp;quot;slave&amp;quot;){
  unarchive mapping: [&#39;config.yml&#39; : &#39;./&#39;]
  sh &amp;quot;rake build&amp;quot;
  archive &amp;quot;result.zip&amp;quot;
}

node(&amp;quot;master&amp;quot;){
  unarchive mapping: [&#39;result.zip&#39; : &#39;.&#39;]
  sh &amp;quot;rake upload&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、複数平行してのビルド等も出来るため、Jenkinsで複数ノードを使って分散ビルドをしたい場合に、&lt;br /&gt;
一つのスクリプトで全てをコントロールできるため、とても重宝します。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go言語で一次の最小二乗法を実装した</title>
      <link>http://ota42y.com/blog/2015/02/03/leastsquaresmethod/</link>
      <pubDate>Tue, 03 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2015/02/03/leastsquaresmethod/</guid>
      <description>&lt;p&gt;こんな感じです。&lt;br /&gt;
暗黙的にキャストしてくれないので若干面倒です。&lt;br /&gt;
&lt;script src=&#34;https://gist.github.com/ota42y/db4ff0298d9c945cd261.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Evernoteのリンクをアプリで開くChrome拡張を更新した</title>
      <link>http://ota42y.com/blog/2015/01/31/evernote-opener-update/</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2015/01/31/evernote-opener-update/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/evernote-url-opener/pjkgaadffbojkgoocbobikkklpajjbgo&#34;&gt;evernote url opener&lt;/a&gt;を更新しました。&lt;/p&gt;

&lt;p&gt;使うためには、EvernoteのユーザIDとShardを調べる必要がありますが、&lt;br /&gt;
ちょっと面倒だったので、ユーザが自分のノートリンクをペーストするだけで、設定するように変更しました。&lt;/p&gt;

&lt;p&gt;Evernoteからコピーできる、&lt;br /&gt;
&lt;code&gt;https://www.evernote.com/shard/USER_SHARD//WORD/USER_ID/NODE_ID/&lt;/code&gt;&lt;br /&gt;
といった形式のリンクを張ることで、USER_SHARDとUSER_IDを保存します。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>bundle中に別のbundleを呼ぶと予期しない結果になる対策</title>
      <link>http://ota42y.com/blog/2015/01/28/bundle-in-bundle/</link>
      <pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2015/01/28/bundle-in-bundle/</guid>
      <description>

&lt;p&gt;bundle execでrubyファイルを実行し、別のGemfileのあるディレクトリに移動してbundle系のコマンドを実行すると、&lt;br /&gt;
一回目のbundlerに対してbundleが実行されてしまい、&lt;br /&gt;
別のbundleを呼び出せないという問題が起きました。&lt;br /&gt;
これはbundlerが設定する環境変数が原因でした。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:bfa2b8729b2aee25617387a8cd02f953&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;bundle exec中に、別のbundlerを実行するとおかしくなる

&lt;ul&gt;
&lt;li&gt;主にsystemやspawn等を使った場合&lt;/li&gt;
&lt;li&gt;最初のbundle execと同じものであれば問題は起きない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;bundlerが設定をしている環境変数が問題

&lt;ul&gt;
&lt;li&gt;別のbundlerを呼ぼうとして元のbundlerが呼ばれている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bundler.with_clean_envで回避可能

&lt;ul&gt;
&lt;li&gt;Bundler.clean_systemでも可&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;問題:bfa2b8729b2aee25617387a8cd02f953&#34;&gt;問題&lt;/h1&gt;

&lt;p&gt;以下のような構成かつtestフォルダにいる状態で、&lt;br /&gt;
&lt;code&gt;bundle install --path vendor/bundle&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;bundle exec test.rb&lt;/code&gt;を実行すると、&lt;br /&gt;
test2内でbundlerを呼んだ時にエラーになります&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├─ test
│  │  Gemfile (gemのhello_world_gemを使用)
│  └─ test.rb
|
└─ test2
   └─ Gemfile (gemのhello-worldを使用)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;system &#39;hello_world_gem&#39;
Dir.chdir(&amp;quot;../test2&amp;quot;) do
  # error
  system &#39;bundle install --path vendor/bundle&#39;
  system &#39;bundle exec hello-world&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラー文言&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;oh hai thar
Using hello_world_gem 0.0.3
Using bundler 1.7.3
Your bundle is complete!
It was installed into ./vendor/bundle
bundler: command not found: hello-world
Install missing gem executables with `bundle install`
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;原因:bfa2b8729b2aee25617387a8cd02f953&#34;&gt;原因&lt;/h1&gt;

&lt;p&gt;bundlerが実行時に、BUNDLE_GEMFILEやRUBYOPTといった環境変数をいじっており、&lt;br /&gt;
そこで指定されているbundlerから実行されていると見なされるため、&lt;br /&gt;
bundle系のコマンドが全て元のbundlerに対して実行されてしまうのが原因です。&lt;br /&gt;
実際、test2に移動後のbundle install時のログが、testフォルダでbundle installした時のものと同じ出力になっています。&lt;/p&gt;

&lt;p&gt;この仕組みのおかげで同じbundleの場合はそのまま実行できるため、&lt;br /&gt;
1行目のhello_world_gemの呼び出しにbundle execが不要になっています。&lt;br /&gt;
このように必ずしも害となるものではありませんが、違うbundlerを呼び出せないのは不便です。&lt;/p&gt;

&lt;h1 id=&#34;解決策:bfa2b8729b2aee25617387a8cd02f953&#34;&gt;解決策&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/bundler/bundler/blob/a400c5ed9eca82598a76f9818a1bf7129515a2a0/lib/bundler.rb#L239&#34;&gt;Bundler.with_clean_env&lt;/a&gt;を利用することで、この問題を回避できます。&lt;br /&gt;
このメソッドは、実行時の環境変数にBUNDLE_という名前の環境変数を全て削除して渡されたブロックを実行します。&lt;br /&gt;
そのため、これに渡したブロックの中で別のbundlerを呼ぶことで、予期した動作になります。&lt;br /&gt;
また、コマンドが一つだけの場合は&lt;a href=&#34;https://github.com/bundler/bundler/blob/a400c5ed9eca82598a76f9818a1bf7129515a2a0/lib/bundler.rb#L251&#34;&gt;Bundler.clean_system&lt;/a&gt;メソッドも使えます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;system &#39;hello_world_gem&#39;
Dir.chdir(&amp;quot;../test2&amp;quot;) do
  Bundler.with_clean_env do
    # ok
    system &#39;bundle install --path vendor/bundle&#39;
    system &#39;bundle exec hello-world&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;補足:bfa2b8729b2aee25617387a8cd02f953&#34;&gt;補足&lt;/h1&gt;

&lt;p&gt;他にGEM_HOMEという環境変数を設定していますが、&lt;br /&gt;
これはbundler起動時に上書きされるらしく、with_clear_envで消さなくても良さそうです。&lt;br /&gt;
&lt;a href=&#34;https://github.com/bundler/bundler/blob/a400c5ed9eca82598a76f9818a1bf7129515a2a0/lib/bundler.rb#L416&#34;&gt;https://github.com/bundler/bundler/blob/a400c5ed9eca82598a76f9818a1bf7129515a2a0/lib/bundler.rb#L416&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>