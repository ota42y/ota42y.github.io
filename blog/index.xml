<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on おおたの物置</title>
    <link>http://ota42y.com/blog/</link>
    <description>Recent content in Blogs on おおたの物置</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 11 Oct 2015 22:39:33 +0900</lastBuildDate>
    <atom:link href="http://ota42y.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>IBM BluemixのAlchemyAPIで超簡単に画像認識する</title>
      <link>http://ota42y.com/blog/2015/10/11/alchemyapi/</link>
      <pubDate>Sun, 11 Oct 2015 22:39:33 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/10/11/alchemyapi/</guid>
      <description>

&lt;h1 id=&#34;まとめ:ab936406d233aece22e2039cdf3abfc2&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;AlchemyAPIに画像をアップロードすると識別結果を返してくれる&lt;/li&gt;
&lt;li&gt;無料で使える&lt;/li&gt;
&lt;li&gt;ライブラリも豊富&lt;/li&gt;
&lt;li&gt;画像認識がAPIで呼び出せる世界の可能性凄い

&lt;ul&gt;
&lt;li&gt;画像認識ライブラリすら必要ない世界…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;alchemyapiで画像認識が凄い簡単にできる:ab936406d233aece22e2039cdf3abfc2&#34;&gt;AlchemyAPIで画像認識が凄い簡単にできる&lt;/h1&gt;

&lt;p&gt;先日のABPro2015でこんな&lt;a href=&#34;http://ota42y.com/blog/2015/10/10/abpro2015/&#34;&gt;発表をしました&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/39s0Ljtiud4tKP&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/ota42y/ss-53771391&#34; title=&#34;身近なサイバー攻撃から身を守る&#34; target=&#34;_blank&#34;&gt;身近なサイバー攻撃から身を守る&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/ota42y&#34; target=&#34;_blank&#34;&gt;ota42y&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;ここで画像の判定にAlchemyAPIを利用しています。&lt;br /&gt;
Twitterの画像URLをAPIに投げるだけでかなり精度のいい識別結果を返してくれるため、とても便利です。&lt;/p&gt;

&lt;h1 id=&#34;alchemyapiとは:ab936406d233aece22e2039cdf3abfc2&#34;&gt;AlchemyAPIとは？&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.alchemyapi.com/&#34;&gt;http://www.alchemyapi.com/&lt;/a&gt;&lt;br /&gt;
IBMが買収した機械学習によるデータ分析会社です。&lt;br /&gt;
画像認識や自然言語処理に強い会社だったらしく、その一部を&lt;a href=&#34;https://console.ng.bluemix.net/home/&#34;&gt;IBM Bluemix&lt;/a&gt;で提供しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://console.ng.bluemix.net/home/&#34;&gt;IBM Bluemix&lt;/a&gt;は最小構成なら無料で使え、&lt;br /&gt;
(おそらく)AlchemyAPIの使用権はアカウントを持っていれば1日1000件まで無料らしいので、&lt;br /&gt;
回数は限られますが無料で画像認識ができます。&lt;/p&gt;

&lt;p&gt;どうやらIBM Bluemixは単なるクラウドサービスではなく、&lt;br /&gt;
音声認識や機械翻訳、データ処理等複雑な処理をサービスとして簡単にセットアップできるようになっているらしく、&lt;br /&gt;
その中の1つにAlchemyAPIが含まれているようです。&lt;br /&gt;
なお、IBMが用意した画像認識サービスもあるらしく、そちらの方はBetaですが制限はないようです。&lt;/p&gt;

&lt;h1 id=&#34;使い方:ab936406d233aece22e2039cdf3abfc2&#34;&gt;使い方&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://console.ng.bluemix.net/home/&#34;&gt;IBM Bluemix&lt;/a&gt;のアカウントを作り、適当なアプリケーションを1つ作成します(仮想マシンを一個作る感じ)。&lt;br /&gt;
その後、サービスからAlchemyAPIを選んで作ったアプリケーションに登録するだけです。&lt;/p&gt;

&lt;p&gt;登録が終わると作ったアプリケーションの環境変数としてapikeyが設定されるので、&lt;br /&gt;
それを利用して画像のURLやデータをAPIに投げれば認識結果が帰ってきます。&lt;/p&gt;

&lt;h1 id=&#34;ライブラリ:ab936406d233aece22e2039cdf3abfc2&#34;&gt;ライブラリ&lt;/h1&gt;

&lt;p&gt;公式がいくつかの言語のライブラリを提供しています。&lt;br /&gt;
&lt;a href=&#34;https://github.com/AlchemyAPI&#34;&gt;https://github.com/AlchemyAPI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;golangによる画像認識APIは無かったため、ライブラリを作りました。&lt;br /&gt;
使いたい方はどうぞ。&lt;br /&gt;
&lt;a href=&#34;https://github.com/ota42y/go-alchemyapi&#34;&gt;https://github.com/ota42y/go-alchemyapi&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;サンプルコード:ab936406d233aece22e2039cdf3abfc2&#34;&gt;サンプルコード&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;os&amp;quot;
	&amp;quot;fmt&amp;quot;
	
	alchemyapi &amp;quot;github.com/ota42y/go-alchemyapi&amp;quot;
)

func main() {
	token := os.Getenv(&amp;quot;ALCHEMYAPI_TOKEN&amp;quot;)
	if token == &amp;quot;&amp;quot; {
		fmt.Println(&amp;quot;skip this test because no token&amp;quot;)
		return
	}

	client := alchemyapi.New(token)
	res, err := client.URLGetRankedImageKeywords(&amp;quot;https://pbs.twimg.com/media/CQ7ENtOUwAAZyNF.jpg&amp;quot;, false, false)
	if err == nil {
		for _, keyword := range res.ImageKeywords {
			fmt.Println(keyword.Text, keyword.Score)
		}
	} else {
		fmt.Println(err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% go run test.go
food 0.832018
sushi 0.5
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;感想:ab936406d233aece22e2039cdf3abfc2&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;件数は限定的とはいえ、投げるだけで画像認識できるとか相当凄いです。&lt;br /&gt;
しかも食べ物かそうじゃないかだけでなく、寿司かどうかまで判定しているので、学習精度もかなり良いです。&lt;br /&gt;
ここ1年ぐらいでディープラーニングによる画像識別が流行り、便利なライブラリがたくさん出た印象ですが、&lt;br /&gt;
もう自前でやらずにAPIとして使うのが当たり前になってしまいそうです。&lt;/p&gt;

&lt;p&gt;また、Bluemixについては初めて知りましたが、単にサーバを提供するだけでなく、&lt;br /&gt;
こういった高度なサービスを提供するのは上手いなぁ…と思いました。&lt;br /&gt;
使う側はセットアップや教師データの収集を考えずに使えてしまうので、&lt;br /&gt;
画像認識を使う敷居がぐっと下がるのではないかと思います。&lt;br /&gt;
(制限を超えたときの料金が書いてないのでお値段がどれくらいかはわかりませんが…)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ABPro2015で発表してきた</title>
      <link>http://ota42y.com/blog/2015/10/10/abpro2015/</link>
      <pubDate>Sat, 10 Oct 2015 23:58:16 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/10/10/abpro2015/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://togetter.com/li/884899&#34;&gt;togetterまとめ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/39s0Ljtiud4tKP&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/ota42y/ss-53771391&#34; title=&#34;身近なサイバー攻撃から身を守る&#34; target=&#34;_blank&#34;&gt;身近なサイバー攻撃から身を守る&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/ota42y&#34; target=&#34;_blank&#34;&gt;ota42y&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;ディープラーニングによる画像認識でTL上の飯テロ画像を判定しています。&lt;br /&gt;
事前に発表タイミングをお昼直前にお願いしており、&lt;br /&gt;
その通りにしていただけたため大好評だったと思います。&lt;/p&gt;

&lt;p&gt;なお、画像認識自体は&lt;a href=&#34;http://www.alchemyapi.com/&#34;&gt;AlchemyAPI&lt;/a&gt;に投げているだけです.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第48回情報科学若手の会2015に参加してきた</title>
      <link>http://ota42y.com/blog/2015/09/22/wakate2015/</link>
      <pubDate>Tue, 22 Sep 2015 00:45:03 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/09/22/wakate2015/</guid>
      <description>

&lt;p&gt;2015年9月19日(土)〜21日(月)に静岡県伊東市の山喜旅館で開催された、&lt;br /&gt;
第48回情報科学若手の会2015に参加してきました。&lt;br /&gt;
四回目の参加で、ショートで発表を行いました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://togetter.com/li/875554&#34;&gt;第48回情報科学若手の会まとめ #wakate2015&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;1日目:052cb3961210afac04dd94f202db818b&#34;&gt;1日目&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;はじめてでもわかる!IoTの過去・現在・未来 (特にホームネットワーク)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/TsubasaYumura/iot-52973276&#34;&gt;http://www.slideshare.net/TsubasaYumura/iot-52973276&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TRON電脳住宅

&lt;ul&gt;
&lt;li&gt;1988年にIoTに言及していた&lt;a href=&#34;http://www.amazon.co.jp/%E9%9B%BB%E8%84%B3%E7%A4%BE%E4%BC%9A%E8%AB%96%E2%80%95TRON%E3%81%AE%E4%BA%88%E8%A8%80-%E5%9D%82%E6%9D%91-%E5%81%A5/dp/4870310473&#34;&gt;電脳社会論&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;BLEとか今使われている技術の特徴とか&lt;/li&gt;
&lt;li&gt;最新研究とかも(IllumiRoomとかSquamaとか)&lt;/li&gt;
&lt;li&gt;IoTは最近いろんな製品が出てきてますし、有名なのだとIFTTTや国内だとmyThingsみたいに、インターネット側も実世界の機器との連動ができるサービスが出てきていて、数年でアーリーマジョリティぐらいまでは到達しそうかなーって気がします。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;IoTで進化するミツバチとの交流&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/decobisu/iotdejin-hua-surumitubatitofalsejiao-liu&#34;&gt;https://speakerdeck.com/decobisu/iotdejin-hua-surumitubatitofalsejiao-liu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;知られざるミツバチの実態

&lt;ul&gt;
&lt;li&gt;ミツバチは刺激しない限り刺さない&lt;/li&gt;
&lt;li&gt;ハチミツがとれるぐらい蜜を集めるのはミツバチだけ&lt;/li&gt;
&lt;li&gt;養蜂は意外とブームらしい(観測範囲は狭い)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;巣箱の温度をセンサとRasPiで調べてMackerelに飛ばしてSlackに通知&lt;/li&gt;
&lt;li&gt;めっちゃ簡単に作れそうな構成だけど、凄く役立ちそうでテンション上がる&lt;/li&gt;
&lt;li&gt;動物とのインタラクション研究とかわりとあるので、ミツバチとのインタラクションも普通に研究になりそう…&lt;/li&gt;
&lt;li&gt;TLで言及されていたハチミツを集めやすい巣箱が凄い

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.indiegogo.com/projects/flow-hive-honey-on-tap-directly-from-your-beehive#/story&#34;&gt;https://www.indiegogo.com/projects/flow-hive-honey-on-tap-directly-from-your-beehive#/story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/kyoro353/status/645125093425676288&#34;&gt;https://twitter.com/kyoro353/status/645125093425676288&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ハンドルを回すと六角形が崩れて一直線上になるので、ハチミツが下に流れていく機構&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;プログラムを書くってどういうこと？を哲学的に考える話&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;話は凄い上手いし言ってることも解るのに理解が追いつかない…(´･_･`)&lt;/li&gt;
&lt;li&gt;プログラムは人が計算機で計算をしているor計算のさせ方を教示しているという仮定の下では、プログラムを書く行為はプログラムが表現できる世界への対応付けを行っている…という話だった気がします。&lt;br /&gt;
理解が追いついていないのでスライドがほしい…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;群ロボット&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;複数のロボットを使って1つのタスクを実行する

&lt;ul&gt;
&lt;li&gt;ベイマックスのマイクロロボットみたいなもの？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;複数のロボットを強調させるために動物の動きを模したアルゴリズムを使っているらしい

&lt;ul&gt;
&lt;li&gt;実際の動物とは全く関係ないアルゴリズムとかあるのだろうか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;既存の探索を行うアルゴリズムは通信回数や移動で性能が良くない

&lt;ul&gt;
&lt;li&gt;それを改善するアルゴリズムを作った&lt;/li&gt;
&lt;li&gt;ただしコストが安い代わりに探索時間はかかる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;質疑応答で無線通信ならブロードキャストできるので、既存アルゴリズムも通信コストは安いのでは？という質問

&lt;ul&gt;
&lt;li&gt;無線ってブロードキャストできるんだ…(よく知らない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Alloyで学ぶ形式手法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/marin72_com/alloydexue-buxing-shi-shou-fa&#34;&gt;https://speakerdeck.com/marin72_com/alloydexue-buxing-shi-shou-fa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式手法言語

&lt;ul&gt;
&lt;li&gt;設計時に使うらしい&lt;/li&gt;
&lt;li&gt;仕様バグを調べるみたい？&lt;/li&gt;
&lt;li&gt;AlloyはLL形式手法言語みたいなもの&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;仕様を定義して、ちょっとの記述をするだけで反例があるかを返してくれる

&lt;ul&gt;
&lt;li&gt;自動でテスト条件を検証してくれるみたい？&lt;/li&gt;
&lt;li&gt;めっっっっっっちゃ便利っぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スライド中のサンプルコード&lt;br /&gt;
&lt;a href=&#34;https://gist.github.com/marin72-com/688d47f1e91b3e510c28&#34;&gt;https://gist.github.com/marin72-com/688d47f1e91b3e510c28&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;交流イベント&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マシュマロチャレンジだった&lt;/li&gt;
&lt;li&gt;当初の予定が失敗したのでパスタ1本分の高さに(´･_･`)&lt;/li&gt;
&lt;li&gt;事前にクイズをして、チートアイテム（巨大パスタとか）を配布する改変ルール

&lt;ul&gt;
&lt;li&gt;試行錯誤よりチートアイテムを持っているかで勝負が決まる。富めるものはより富める世界だったww&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2日目:052cb3961210afac04dd94f202db818b&#34;&gt;2日目&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;若手特別講演「ぼくらのプログラミングから、みんなのプログラミングへ」&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://junkato.jp/publications/wakate2015-kato-slides.pdf&#34;&gt;http://junkato.jp/publications/wakate2015-kato-slides.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;これらの論文読んだことがある…ぞ…(((;ﾟДﾟ)))

&lt;ul&gt;
&lt;li&gt;Picodeを発表したWISSに参加してたので、DejaVuとかもそこで知った気がする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;後半は&lt;a href=&#34;http://textalive.jp/&#34;&gt;http://textalive.jp/&lt;/a&gt;の話

&lt;ul&gt;
&lt;li&gt;めっちゃ凄いサービス&lt;/li&gt;
&lt;li&gt;動画編集の仕方を知らなくても、キネティックタイポグラフィできるってのが凄い&lt;/li&gt;
&lt;li&gt;プログラマが機能拡張できたり、非プログラマでも改変可能にしていたり&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Moive as Code凄い

&lt;ul&gt;
&lt;li&gt;文字を指定された位置に表示して動かしているだけ&lt;/li&gt;
&lt;li&gt;FPS変更も動画サイズ変更もパラメータを変えれば対応可能&lt;/li&gt;
&lt;li&gt;将来的にPCの性能が上がったら、パラメータを変えれば全て高画質化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HCI分野の紹介と最新研究&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;こっちに大体書いた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/09/20/wakate2015-hci/&#34;&gt;http://ota42y.com/blog/2015/09/20/wakate2015-hci/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ワンスイッチ Wii コントローラーの製作 〜福祉機器における Arduino 活用〜&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ゲームのコントロールをスイッチ1つでできるように改変する話

&lt;ul&gt;
&lt;li&gt;Wiiのコントローラーハック&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;体をほとんど動かせない人でもゲームができる&lt;/li&gt;
&lt;li&gt;ターンベースは何でもいけそう&lt;/li&gt;
&lt;li&gt;やっぱり制限時間がある系は難しいらしい

&lt;ul&gt;
&lt;li&gt;制限時間を調整できれば解決しそうだけど、コントローラーからの入力部分に手を入れ、ゲームからは通常の入力と完全に同じに見えるようにするアプローチなので、違う話っぽいなぁ…&lt;/li&gt;
&lt;li&gt;シミュレーター上で動くゲームなら、シミュレーターの速度を下げるという荒技が…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;筋電は訓練によって制御出来るようになるという知見(´･_･`)！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;趣味でも使えるクラウド！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;slackで会話、Google Docsで情報共有とか&lt;/li&gt;
&lt;li&gt;物量でICFPCの問題を解く

&lt;ul&gt;
&lt;li&gt;リソース自由に使っていいらしい&lt;/li&gt;
&lt;li&gt;Amazonのスポットインスタンスで安くCPUパワーを確保&lt;/li&gt;
&lt;li&gt;100CPU 1TBが150円とか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AWS Lambda

&lt;ul&gt;
&lt;li&gt;最近出た奴&lt;/li&gt;
&lt;li&gt;CPUのミリ秒単位で課金される&lt;/li&gt;
&lt;li&gt;一瞬で計算を終わらせたいときに役立つっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Internetの仕組み 〜 ISPの作り方&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/chibiegg/the-internet-falseshi-zu-mi-ispfalsezuo-rifang&#34;&gt;https://speakerdeck.com/chibiegg/the-internet-falseshi-zu-mi-ispfalsezuo-rifang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ISPは作れる！！！

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bgp.ne.jp/&#34;&gt;https://www.bgp.ne.jp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IPアドレスがあれば&lt;/li&gt;
&lt;li&gt;複数のASと繋ぐ場合、AS番号が必要&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ルーティングの話(BGPやOSPF)

&lt;ul&gt;
&lt;li&gt;トランジットを避け、ピアに流すように工夫する&lt;/li&gt;
&lt;li&gt;手動で経路設定は人間には無理なのでそういうプロトコルを使う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;インフラ屋の間では「2497です」みたいな自己紹介がされるらしい…

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nic.ad.jp/ja/ip/as-numbers.txt&#34;&gt;https://www.nic.ad.jp/ja/ip/as-numbers.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;招待講演「IT×宇宙で何をしよう!?」&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JAXAのITへの取り組みのお話&lt;/li&gt;
&lt;li&gt;前半は社内のITシステムの話

&lt;ul&gt;
&lt;li&gt;大体独自開発のシステムっぽい&lt;/li&gt;
&lt;li&gt;失敗のリスクが尋常じゃないから、既存のに合わせて失敗するより開発コストをかけてでも使い手に全力で最適化した方が良いのだろうか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;後半は情報公開の話&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;準天頂衛星システム（QZSS）みちびきデータ公開サイト[QZ-vision]&lt;br /&gt;
&lt;a href=&#34;http://qz-vision.jaxa.jp/&#34;&gt;http://qz-vision.jaxa.jp/&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JAXA | JAXAの歩き方 公開データのウェブサイトカタログ&lt;br /&gt;
公開しているデータのまとめ&lt;br /&gt;
&lt;a href=&#34;http://www.jaxa.jp/projects/db/tebiki_j.html&#34;&gt;http://www.jaxa.jp/projects/db/tebiki_j.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JAXA OPEN API&lt;br /&gt;
データが凄い扱いやすいように整備されてる&lt;br /&gt;
夢が広がる…(´･_･`)！&lt;br /&gt;
&lt;a href=&#34;http://www.satnavi.jaxa.jp/jaxa_api_competition/index.html&#34;&gt;http://www.satnavi.jaxa.jp/jaxa_api_competition/index.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;提供したデータが想定していない使われ方をする場合もある&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;海面温度のデータが漁業に活用されたり&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use Open Data with SPARQL&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/denari01/use-open-data-with-sparql&#34;&gt;http://www.slideshare.net/denari01/use-open-data-with-sparql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SPARQL、書くのめっちゃつらそう…&lt;/li&gt;
&lt;li&gt;実際にブラウザ上で書いて動かせるサービス

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sparql.odp.jig.jp/&#34;&gt;http://sparql.odp.jig.jp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;OpenDataについては情報科学若手の会冬の陣2015での発表がわかりやすかったけど、資料は公開されていないっぽい…(´･_･`)

&lt;ul&gt;
&lt;li&gt;ナイトセッションで再演されていた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Denkinovelをどうして作り続けているのか&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ノベルゲームスクリプトを書いてブラウザ上で実行できるっぽい

&lt;ul&gt;
&lt;li&gt;文章以外はいろんな素材がすでに用意済みで、自由に使える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;開発に関する話

&lt;ul&gt;
&lt;li&gt;個人開発ではチーム開発のセオリーは無視した方がいい&lt;br /&gt;
意味の無いオーバーヘッドになるので&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;機能追加時にコンセプトがぶれていないのが凄い

&lt;ul&gt;
&lt;li&gt;立ち絵機能はわざと入れていない&lt;/li&gt;
&lt;li&gt;絵が描けない人のために作ったので、入れると絵が描ける人との差がついてしまうので&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;何を学べばいいか解らないので、作って学ぶという姿勢は共感できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;リッチラボの開発に 集中するための開発環境&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DevOpsはうちもやりたいなー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;LT&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数が多いので気になったのだけ&lt;/li&gt;
&lt;li&gt;筆跡の特徴学習とニューラルネットワーク

&lt;ul&gt;
&lt;li&gt;教師データ凄い少ないのにそこそこの結果&lt;/li&gt;
&lt;li&gt;凄いいい手法なのか偶然なのか…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ビジコン金ある

&lt;ul&gt;
&lt;li&gt;コンセプトを実現する最低限の実装と、いいコンセプトが大事とのこと&lt;/li&gt;
&lt;li&gt;完璧な実装&amp;lt;&amp;lt;&amp;lt;&amp;lt;コンセプトを伝える最低限度のプロトタイプ&lt;br /&gt;
動かなくても動いているように見えればいい&lt;/li&gt;
&lt;li&gt;コンセプトを煮詰める時間を含めると時給下がるのでは…？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;こわくないBLE

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/izumin5210/Bletia&#34;&gt;https://github.com/izumin5210/Bletia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;キーボードを浮かそう

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/decobisu/status/645550061926133761&#34;&gt;https://twitter.com/decobisu/status/645550061926133761&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kinesis使ってるからこの解法出来ないのです…(´・_・`)&lt;/li&gt;
&lt;li&gt;が、マウス遠いのは人類共通の悩み…&lt;/li&gt;
&lt;li&gt;操作時間を計測するKLMモデルにも、機器の切り替えにかかる時間が含まれていてわりと無視できない…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ローリングシャッター芸人の人の発表

&lt;ul&gt;
&lt;li&gt;デジタルネイチャー研究室の人&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/keyword/%A5%ED%A1%BC%A5%EA%A5%F3%A5%B0%A5%B7%A5%E3%A5%C3%A5%BF%A1%BC%B8%BD%BE%DD&#34;&gt;ローリングシャッター現象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CMOSは一度にまとめてではなく順番に素子上の映像を記録していく&lt;/li&gt;
&lt;li&gt;被写体の動きが速いと、記録中に映像が変わって変になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The Relationship between Laughter and Health

&lt;ul&gt;
&lt;li&gt;笑うと健康にいいってのが示されてる&lt;/li&gt;
&lt;li&gt;よく聞くのでジンクスだと思っていたけど、ちゃんと証明されてるっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;3日目:052cb3961210afac04dd94f202db818b&#34;&gt;3日目&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Twitter のデータ処理テクノロジーとTwitterでの仕事について&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;バッチ処理とリアルタイム処理の使い分けが凄い

&lt;ul&gt;
&lt;li&gt;正確だけど時間がかかるバッチ処理と、早いけど誤差の出るリアルタイム処理との組み合わせ&lt;/li&gt;
&lt;li&gt;前回のバッチ処理からの差分だけリアルタイム処理で計算し、それを合算&lt;/li&gt;
&lt;li&gt;早くて正確に結果を返せる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;モノイドを利用して正しい結果になると証明されているっぽい&lt;/li&gt;
&lt;li&gt;やっぱりREPLはデモにも使えて便利っぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ICTトラブルシューティングコンテストのご紹介&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;他のコンテストに比べて運用上実際に起きる問題をベースとした感じのコンテストっぽい？&lt;/li&gt;
&lt;li&gt;スライドで紹介された例題を見る限り、プログラムというよりかはミドルウェア知識的な感じ&lt;/li&gt;
&lt;li&gt;あとは問題の原因を突き止める手順とか&lt;/li&gt;
&lt;li&gt;運営メンバーが学生で、スポンサー11社いるの凄い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ルータで斬り込め！おうちIoT&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenWrt凄い&lt;/li&gt;
&lt;li&gt;「ルータはIoTのハブになる」というのはわりと的を射ている気がする

&lt;ul&gt;
&lt;li&gt;OnHubの登場はもちろんですが、ルータはその役割上、多くの場合外部ネットと内部ネット両方にアクセス出来る位置にいるため、内部ネットに繋がるIoT機器の情報を外部のクラウドに投げるみたいな事をするには、かなり理想的な位置にいそう。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;その他全体の話:052cb3961210afac04dd94f202db818b&#34;&gt;その他全体の話&lt;/h1&gt;

&lt;h2 id=&#34;ネット環境:052cb3961210afac04dd94f202db818b&#34;&gt;ネット環境&lt;/h2&gt;

&lt;p&gt;去年に比べてさらに山喜旅館の無線APが増強されたらしく、いっそう快適になりました。&lt;br /&gt;
ただ、APの同時接続数に引っかかって、たまに接続が切れる事があったようです。&lt;br /&gt;
二台以上にすれば解決しそうですが、若手の会の接続台数は異常なので、普通に使うにはほぼ問題ないと思われます。&lt;/p&gt;

&lt;h2 id=&#34;picala:052cb3961210afac04dd94f202db818b&#34;&gt;PICALA&lt;/h2&gt;

&lt;p&gt;会場では「PICALA: 照明色による聴講者の感情共有システム」が動いていました。&lt;br /&gt;
発表中に色に言及できるほど余裕はなかったですが、ウケているかウケていないかはわかるのでわりとよかったです。&lt;/p&gt;

&lt;p&gt;笑いを狙ったスライドに対しては笑い声で反応がわかりますが、「凄い」「へぇ」といったアクションが薄い反応をしそうなスライドでも、聞いている人がどう思っているかがわかるので、これ凄いでしょ！！みたいなスライドで、みんな凄い！って思ってくれていると発表中にわかるのでよかったです。また、光でちょっとだけ提示するので、発表に割り込まれないのもいいです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;明日の &lt;a href=&#34;https://twitter.com/hashtag/wakate2015?src=hash&#34;&gt;#wakate2015&lt;/a&gt; の僕の発表時間中に「PICALA: 照明色による聴講者の感情共有システム」を運用予定です。詳細は発表開始前に説明します。お楽しみに！（発表者の方で、自分の発表時間に使いたい方がいたら声かけて下さい〜) &lt;a href=&#34;http://t.co/ldVnGhAA2N&#34;&gt;pic.twitter.com/ldVnGhAA2N&lt;/a&gt;&lt;/p&gt;&amp;mdash; 湯村 翼＠10/3おうちハックナイト (@yumu19) &lt;a href=&#34;https://twitter.com/yumu19/status/644863368537309184&#34;&gt;2015, 9月 18&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;togetter超便利:052cb3961210afac04dd94f202db818b&#34;&gt;togetter超便利&lt;/h2&gt;

&lt;p&gt;夜中に過去の年のまとめを読んだりして盛り上がったので、&lt;br /&gt;
毎年まとめてくれる人には超感謝してます…&lt;/p&gt;

&lt;p&gt;また、ブログを書くときも思い出すベースやメモし忘れた部分の補足、&lt;br /&gt;
話していい/ダメとかをtogetterから判別出来るのでとても重宝しています。&lt;/p&gt;

&lt;p&gt;というのをあらためて思いました&lt;/p&gt;

&lt;h2 id=&#34;いつまで若手か:052cb3961210afac04dd94f202db818b&#34;&gt;いつまで若手か&lt;/h2&gt;

&lt;p&gt;若手の会の日程について行けるうちは若手だと思います！！！&lt;br /&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;若手の会めっちゃ疲れた…&lt;em&gt;(:3 」∠)&lt;/em&gt; ふと、上の世代が自然とフェードアウトしていくのは、この日程に体力がついていかないからなんじゃないかって思ったww &lt;a href=&#34;https://twitter.com/hashtag/wakate2015?src=hash&#34;&gt;#wakate2015&lt;/a&gt;&lt;/p&gt;&amp;mdash; おおた (@ota42y) &lt;a href=&#34;https://twitter.com/ota42y/status/645938601587511296&#34;&gt;2015, 9月 21&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;帰り:052cb3961210afac04dd94f202db818b&#34;&gt;帰り&lt;/h1&gt;

&lt;p&gt;熱海から二駅の三島にある柿田川に寄りました。&lt;br /&gt;
日本三大清流の1つで、水がめっちゃ綺麗な川でした。&lt;br /&gt;
&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E6%9F%BF%E7%94%B0%E5%B7%9D&#34;&gt;https://ja.wikipedia.org/wiki/%E6%9F%BF%E7%94%B0%E5%B7%9D&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;元々去年行こうと思っていましたが、桜屋のうなぎに思った以上に並んだので断念してました…&lt;br /&gt;
あのうまいうなぎはこの水で一度泳がせているからなのかーと勝手に感心しました。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/blog/2014/09/15/wakate2014/#その後:5448e46160544c3c78693ad97d653b2a&#34;&gt;http://ota42y.com/blog/2014/09/15/wakate2014/#その後:5448e46160544c3c78693ad97d653b2a&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただ、この川目当てで行くには短すぎるので(日本一短い一級河川)、&lt;br /&gt;
うなぎと組み合わせるとか他の用事のついでに足を運ぶのがいいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第48回情報科学若手の会2015で発表してきた</title>
      <link>http://ota42y.com/blog/2015/09/20/wakate2015-hci/</link>
      <pubDate>Sun, 20 Sep 2015 17:10:23 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/09/20/wakate2015-hci/</guid>
      <description>

&lt;p&gt;というわけで発表しました。&lt;br /&gt;
発表資料はこちら。&lt;/p&gt;

&lt;p&gt;実際は動画で紹介していますが、めっちゃ重くなったのでそれは外した軽量版になります。&lt;br /&gt;
代わりにリンクをスライドに書いてあるので、そちらで見てください。&lt;br /&gt;
また、実際は使わなかった非表示スライドも表示していますが、ちゃんと作っていないのでご注意ください。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/EQpP7WPDYLZM30&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/ota42y/hci-52978848&#34; title=&#34;HCI分野の紹介と最新研究&#34; target=&#34;_blank&#34;&gt;HCI分野の紹介と最新研究&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/ota42y&#34; target=&#34;_blank&#34;&gt;ota42y&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;発表内容について:960011acd5e7afc5edcb122b8bab3124&#34;&gt;発表内容について&lt;/h1&gt;

&lt;p&gt;4回目ぐらいの参加ですが、ほぼ毎年CHIの締め切りと重なったり、&lt;br /&gt;
UISTの数週間前みたいな時期なのであまりこの分野からの参加者が少なく、&lt;br /&gt;
需要がありそうとういうのを去年から考えていました。(&lt;a href=&#34;http://ota42y.com/blog/2014/09/15/wakate2014/#まとめ:5448e46160544c3c78693ad97d653b2a&#34;&gt;去年のエントリ&lt;/a&gt;)&lt;br /&gt;
何故か今年に限って似た分野の研究が多かったですがw&lt;/p&gt;

&lt;p&gt;新しいインタフェース系は結構話題になりますが、改善とか調査系とかはあまりHCI分野の人以外からは話題にされないので、&lt;br /&gt;
意図的に新しいインタフェース系は抑えてそれ以外のやつを入れています。(非表示にたくさんあるけど)&lt;br /&gt;
実際、その辺についてはあまり聞かないのでためになったという声を頂いたので、&lt;br /&gt;
いい案配だったとおもいます。&lt;/p&gt;

&lt;h1 id=&#34;反省点:960011acd5e7afc5edcb122b8bab3124&#34;&gt;反省点&lt;/h1&gt;

&lt;p&gt;質疑応答で盛り上がるだろう場所は予測できていたので、&lt;br /&gt;
そこに関しての補足スライドを用意するべきでした…&lt;/p&gt;

&lt;p&gt;事前に作ったスライドを、前日にダメダメに見えたので作り直してしまったので、&lt;br /&gt;
結果としては良くなったけどもう少し早くに完成させて修正したかったです。&lt;br /&gt;
ただ、調査を1ヶ月ぐらい前から始められたので、その点に関してはわりとよかった。&lt;/p&gt;

&lt;h1 id=&#34;追加情報:960011acd5e7afc5edcb122b8bab3124&#34;&gt;追加情報&lt;/h1&gt;

&lt;p&gt;今回のはほぼ英語論文から取ってきましたが、日本語での発表を捜すなら&lt;a href=&#34;www.interaction-ipsj.org/&#34;&gt;インタラクション&lt;/a&gt;がオススメです。&lt;/p&gt;

&lt;p&gt;また、質疑応答時やTwitterで追加情報を流していただきました。感謝です。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;HCI分野でも（調査系と比べて）とくに新技術の発表が多いトップカンファレンスACM UISTは、来年アジア初開催、「日本で」開催ですよ！みんなで行こー &lt;a href=&#34;https://twitter.com/hashtag/wakate2015?src=hash&#34;&gt;#wakate2015&lt;/a&gt; / 今年は &lt;a href=&#34;http://t.co/GY2XiamnkI&#34;&gt;http://t.co/GY2XiamnkI&lt;/a&gt;&lt;/p&gt;&amp;mdash; arc@dmz (@arcatdmz) &lt;a href=&#34;https://twitter.com/arcatdmz/status/645410232546410496&#34;&gt;2015, 9月 20&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;HCI系のトップカンファレンスACM CHIの自主勉強会が毎年東京と北海道で開催され、過去の資料が公開されているので、HCIに興味持った方はまずこの資料見てみるといいと思います！ &lt;a href=&#34;http://t.co/WTIFCbO04m&#34;&gt;http://t.co/WTIFCbO04m&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/wakate2015?src=hash&#34;&gt;#wakate2015&lt;/a&gt;&lt;/p&gt;&amp;mdash; 湯村 翼＠10/3おうちハックナイト (@yumu19) &lt;a href=&#34;https://twitter.com/yumu19/status/645412250988077060&#34;&gt;2015, 9月 20&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;調査系（エスノグラフィー）なども多くユーザビリティを仕事にしてる方も参考になりそうなトップカンファACM CHIは、今年アジア初開催、韓国でした。 &lt;a href=&#34;http://t.co/7iFp4VFQPG&#34;&gt;http://t.co/7iFp4VFQPG&lt;/a&gt; ←6月の勉強会 &lt;a href=&#34;https://twitter.com/hashtag/wakate2015?src=hash&#34;&gt;#wakate2015&lt;/a&gt; &lt;a href=&#34;https://t.co/VsVFP9y5Ov&#34;&gt;https://t.co/VsVFP9y5Ov&lt;/a&gt;&lt;/p&gt;&amp;mdash; arc@dmz (@arcatdmz) &lt;a href=&#34;https://twitter.com/arcatdmz/status/645411168899600388&#34;&gt;2015, 9月 20&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/wakate2015?src=hash&#34;&gt;#wakate2015&lt;/a&gt; HRI &lt;a href=&#34;http://t.co/uvweEJIpNy&#34;&gt;http://t.co/uvweEJIpNy&lt;/a&gt; , HAI &lt;a href=&#34;http://t.co/SU4DV1xPF3&#34;&gt;http://t.co/SU4DV1xPF3&lt;/a&gt; という国際会議を紹介しました。HRIは心理学系の人たちが多いです。HAIは実装系もバランスよくいる印象。&lt;/p&gt;&amp;mdash; arc@dmz (@arcatdmz) &lt;a href=&#34;https://twitter.com/arcatdmz/status/645412878262996993&#34;&gt;2015, 9月 20&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>freeコマンドに新しく追加されたavailableについて</title>
      <link>http://ota42y.com/blog/2015/09/09/free-command/</link>
      <pubDate>Wed, 09 Sep 2015 21:53:07 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/09/09/free-command/</guid>
      <description>

&lt;h1 id=&#34;freeコマンドに追加されたavailable:dbabf7c03815177c3b438c3f806470ee&#34;&gt;freeコマンドに追加されたavailable&lt;/h1&gt;

&lt;p&gt;3.14および2.6.27から、freeコマンドの書式が変わり、&lt;br /&gt;
&lt;code&gt;-/+ buffers/cache&lt;/code&gt;が消えてavailableという項目が増えました。&lt;/p&gt;

&lt;p&gt;availableは&lt;code&gt;/proc/meminfo&lt;/code&gt;の中にあるMemAvailablの値を参照しています。&lt;br /&gt;
この値は、新しいアプリがスワップせずに使える容量はどれくらいか。といった値を示しているようです&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;available
Estimation of how much memory  is  available  for  starting  new
applications,  without swapping. Unlike the data provided by the
cache or free fields, this field takes into account  page  cache
and also that not all reclaimable memory slabs will be reclaimed
due to items being in use (MemAvailable in /proc/meminfo, avail‐
able on kernels 3.14, emulated on kernels 2.6.27+, otherwise the
same as free)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コード:dbabf7c03815177c3b438c3f806470ee&#34;&gt;コード&lt;/h2&gt;

&lt;p&gt;/proc/meminfoは以下のコードによって作成されるようです。&lt;br /&gt;
&lt;a href=&#34;https://github.com/torvalds/linux/blob/master/fs/proc/meminfo.c&#34;&gt;https://github.com/torvalds/linux/blob/master/fs/proc/meminfo.c&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;available = i.freeram - wmark_low;

pagecache = pages[LRU_ACTIVE_FILE] + pages[LRU_INACTIVE_FILE];
pagecache -= min(pagecache / 2, wmark_low);
available += pagecache;

available += global_page_state(NR_SLAB_RECLAIMABLE) -
			 min(global_page_state(NR_SLAB_RECLAIMABLE) / 2, wmark_low);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コード内容:dbabf7c03815177c3b438c3f806470ee&#34;&gt;コード内容&lt;/h2&gt;

&lt;p&gt;ざっと見たところ、sysinfoのfreeramの値から、ページキャッシュやslabキャッシュの中の再利用可能な分を足した値が、MemAvailableとして計算されるようです。&lt;/p&gt;

&lt;p&gt;実際の空き容量＋直ぐに解放可能な容量＝利用可能なメモリ容量といった感じのようです。&lt;br /&gt;
そのため、ほぼこの値を見てメモリの空き容量を判断してよさそうです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CEDEC2015のCoverityクイズをどう直すか</title>
      <link>http://ota42y.com/blog/2015/08/29/cedec2015-coverity/</link>
      <pubDate>Sat, 29 Aug 2015 17:35:03 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/08/29/cedec2015-coverity/</guid>
      <description>

&lt;p&gt;CEDEC2015では、&lt;a href=&#34;http://www.coverity.com/html_ja/&#34;&gt;Coverity社&lt;/a&gt;のブースでバグのあるコードが掲示されていました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;バグが入ったC++コードらしい。&lt;a href=&#34;https://twitter.com/hashtag/CEDEC2015?src=hash&#34;&gt;#CEDEC2015&lt;/a&gt; &lt;a href=&#34;http://t.co/ca9vb0emVT&#34;&gt;pic.twitter.com/ca9vb0emVT&lt;/a&gt;&lt;/p&gt;&amp;mdash; alwei (@aizen76) &lt;a href=&#34;https://twitter.com/aizen76/status/636434428563054593&#34;&gt;2015, 8月 26&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;バグがあるかどうかはCoverityが検出してくれるとして、じゃあどう解決すれば良いのか？を考えました。&lt;/p&gt;

&lt;p&gt;コードを見る限り、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;配列の添え字と同じ値を入れたい&lt;/li&gt;
&lt;li&gt;処理は2つのクラスで共通化したい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という要求があると考えます。&lt;br /&gt;
(zに値を入れないが元コードもそうなのでよしとする)&lt;/p&gt;

&lt;p&gt;また、簡単化のために与えられるデータは全て正しいと仮定します。&lt;br /&gt;
(実際は適切な箇所でエラーチェックが必要)&lt;/p&gt;

&lt;h1 id=&#34;テンプレートでキャストを回避する:1c95fc0dbbac16d51d7792d35e4a1fd2&#34;&gt;テンプレートでキャストを回避する&lt;/h1&gt;

&lt;p&gt;今回のバグは暗黙的キャストが行われ、かつキャストした状態でアドレス計算をするのが問題のため、&lt;br /&gt;
キャストされないように、テンプレートを使って両方のクラス用の関数を用意する事で回避する方法です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;stdio.h&amp;gt;

class base_class {
public:
  base_class() { x = 0; y = 0; }

public:
  int x ;
  int y;
};

class derived_class : public base_class {
public:
  derived_class() { z = 0; }

public:
  int z;
};

template &amp;lt;typename T&amp;gt;
void calc_class_members(T b, int array_size)
{
  for(int i = 0; i &amp;lt; array_size; i++)
  {
    b[i].x = i;
    b[i].y = i;
  }
}

int update_class_members(
  derived_class * class_array,
  int num_array )
{
  if( class_array == NULL)
    return -1;

  calc_class_members(class_array, num_array);

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;アドレス計算を先にする:1c95fc0dbbac16d51d7792d35e4a1fd2&#34;&gt;アドレス計算を先にする&lt;/h1&gt;

&lt;p&gt;型が違う状態でアドレス計算しているのが問題なので、アドレス計算部分を外に出してしまう方法です。&lt;br /&gt;
関数ではなくクラスにメソッドとして持たせるとより良さそうです。&lt;/p&gt;

&lt;p&gt;ただしこの場合、他の誰かが元コードのような処理を書くことを防げません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void calc_class_member(base_class *b, int i)
{
  b-&amp;gt;x = i;
  b-&amp;gt;y = i;
}

int update_class_members(
  derived_class *class_array,
  int num_array )
{
  if( class_array == NULL)
    return -1;

  for(int i = 0; i &amp;lt; num_array; i++){
	calc_class_member(&amp;amp;class_array[i], i);
  }

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;設計から変える:1c95fc0dbbac16d51d7792d35e4a1fd2&#34;&gt;設計から変える&lt;/h1&gt;

&lt;p&gt;意図的にバグを入れているコードに対して、全体を書き換えるのはナンセンスな気がしますが、&lt;br /&gt;
たぶんこういうことをする前提なら最も良い書き方はこうではないかと。&lt;/p&gt;

&lt;p&gt;おおよそ上の通りですが、vectorの場合は中身の型が違うvectorにキャストされないため、&lt;br /&gt;
型が違う状態でアドレス計算が行われることはありません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;vector&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

class base_class {
public:
  base_class() { x = 0; y = 0; }

  void calc_class_member(int i)
  {
    x = i;
    y = i;
  }

public:
  int x ;
  int y;
};

class derived_class : public base_class {
public:
  derived_class() { z = 0; }

public:
  int z;
};


void update_class_members(std::vector&amp;lt;derived_class&amp;gt; &amp;amp;a)
{
  size_t size = a.size();
  for(size_t i = 0; i &amp;lt; size; ++i)
  {
    a.at(i).calc_class_member(static_cast&amp;lt;int&amp;gt;(i));
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>構造体のサイズはsizeofをちゃんと使うべき</title>
      <link>http://ota42y.com/blog/2015/08/20/c-struct/</link>
      <pubDate>Thu, 20 Aug 2015 07:43:49 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/08/20/c-struct/</guid>
      <description>

&lt;p&gt;以下のコードはApple LLVM version 6.1.0 (clang-602.0.53)で8と12を出力します。&lt;br /&gt;
ですが、intは4byte、boolは1byteなのでStは5byte、StStは6byteしか使わないため、サイズが増えてしまっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;stdio.h&amp;quot;

struct St{
	int a;
	bool flag;
	};

struct StSt{
	S s;
	bool f;
};

int main(void) {
	printf(&amp;quot;%lu\n&amp;quot;, sizeof(St));
	printf(&amp;quot;%lu\n&amp;quot;, sizeof(StSt));
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;原因:d474409fc3d5a09281bbe4edf50306a1&#34;&gt;原因&lt;/h1&gt;

&lt;p&gt;Cでは構造体の後ろにパディングを追加できるようになっています。&lt;br /&gt;
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf&#34;&gt;6.7.2.1 Structure and union specifiers&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;13 Within a structure object, the non-bit-field members and the units in which bit-fields
reside have addresses that increase in the order in which they are declared. A pointer to a
structure object, suitably converted, points to its initial member (or if that member is a
bit-field, then to the unit in which it resides), and vice versa. There may be unnamed
padding within a structure object, but not at its beginning.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そのため、sizeofがパディングを含めた値を返し、変数の合計とは違った値を返してきます。&lt;br /&gt;
このように、Cの構造体の大きさはではメンバの合計とは違うため、ちゃんとsizeofを使って計算しないと大変な事になります。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d474409fc3d5a09281bbe4edf50306a1:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d474409fc3d5a09281bbe4edf50306a1:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考資料:d474409fc3d5a09281bbe4edf50306a1&#34;&gt;参考資料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg14/www/standards.html&#34;&gt;ISO/IEC JTC1/SC22/WG14 - C: Approved standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf&#34;&gt;WG14 N1256&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:d474409fc3d5a09281bbe4edf50306a1:1&#34;&gt;&lt;a href=&#34;https://www.jpcert.or.jp/sc-rules/c-exp03-c.html&#34;&gt;EXP03-C. 構造体のサイズが構造体のメンバのサイズの和に等しいと決めてかからない&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d474409fc3d5a09281bbe4edf50306a1:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hugoのブログテーマを作った</title>
      <link>http://ota42y.com/blog/2015/07/29/blog_theme/</link>
      <pubDate>Wed, 29 Jul 2015 23:25:20 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/07/29/blog_theme/</guid>
      <description>&lt;p&gt;ブログテーマ更新を更新しました。&lt;br /&gt;
今回は、Bootstrapを元にした&lt;a href=&#34;http://honokak.osaka/&#34;&gt;Honoka&lt;/a&gt;を利用して作りました。&lt;/p&gt;

&lt;p&gt;リポジトリはこちら&lt;br /&gt;
&lt;a href=&#34;https://github.com/ota42y/honokichi&#34;&gt;https://github.com/ota42y/honokichi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bootstrapの作りにあったHTMLを出力するようにテンプレートを作ると、&lt;br /&gt;
ほぼそれっぽいデザインになったためとても楽でした。&lt;br /&gt;
一応、ブログでよく使う見出し間の間隔や、記事一覧画面でのマージンをちょっと変更しています。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dinoでrubyからArduinoを扱う</title>
      <link>http://ota42y.com/blog/2015/07/05/dino/</link>
      <pubDate>Sun, 05 Jul 2015 14:15:20 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/07/05/dino/</guid>
      <description>

&lt;h1 id=&#34;まとめ:97955e611a2d8858fe77d22ec1869f8a&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;PCからArduinoを制御するのは面倒

&lt;ul&gt;
&lt;li&gt;作業量が多い&lt;/li&gt;
&lt;li&gt;電子工作&lt;/li&gt;
&lt;li&gt;Arduinoプログラミング&lt;/li&gt;
&lt;li&gt;PCからArduinoを制御するプログラミング&lt;/li&gt;
&lt;li&gt;Arduinoプログラミングは専用言語&lt;/li&gt;
&lt;li&gt;学習コストがある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;dinoならrubyだけで全て完結できる

&lt;ul&gt;
&lt;li&gt;rubyからArduinoの全機能を制御するプログラムが付随&lt;/li&gt;
&lt;li&gt;rubyのオブジェクト操作でArduinoを制御出来る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;pcからarduinoを制御するのは面倒:97955e611a2d8858fe77d22ec1869f8a&#34;&gt;PCからArduinoを制御するのは面倒&lt;/h1&gt;

&lt;p&gt;Arduinoのおかげで、電子部品をプログラムから制御する際の敷居は大幅に下がりました。&lt;br /&gt;
ですが、Arduinoを制御するためにC/C++をベースとした専用の言語を覚える必要があります。&lt;/p&gt;

&lt;p&gt;PCとからArduinoを制御する場合、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;電子工作をしてArduinoと部品をつなげる&lt;/li&gt;
&lt;li&gt;Arduinoを制御したり、PCに情報を送るプログラムを書く&lt;/li&gt;
&lt;li&gt;PC側でArduinoからの情報を受け取って制御するプログラムを書く&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の3種類の別々の作業が必要になります。&lt;/p&gt;

&lt;p&gt;Arduino抜きでやるよりかは簡単になりましたが、これもまだまだ面倒です。&lt;br /&gt;
ここで、rubyのdinoというgemを使うと、Arduino本体のプログラミングを省略し、&lt;br /&gt;
rubyプログラムを書くだけでArduinoの制御が全てできるようになります。&lt;/p&gt;

&lt;p&gt;これにより、PC側のプログラムを書くだけでArduinoを制御出来ます。&lt;/p&gt;

&lt;h1 id=&#34;dino:97955e611a2d8858fe77d22ec1869f8a&#34;&gt;dino&lt;/h1&gt;

&lt;p&gt;Arduinoをrubyから扱うライブラリです。&lt;br /&gt;
&lt;a href=&#34;https://github.com/austinbv/dino&#34;&gt;https://github.com/austinbv/dino&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arduinoの全機能を外部から制御可能にするプログラムが付随しており、&lt;br /&gt;
これを書き込むことで、arduinoをruby上のオブジェクトとして扱うことができます。&lt;/p&gt;

&lt;h2 id=&#34;サンプルコード:97955e611a2d8858fe77d22ec1869f8a&#34;&gt;サンプルコード&lt;/h2&gt;

&lt;p&gt;A0ポートに対する入力を拾うプログラムは以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;board = Dino::Board.new(Dino::TxRx::Serial.new)
sensor = Dino::Components::Sensor.new(pin: &#39;A0&#39;, board: board)

sensor.when_data_received do |data|
  puts &amp;quot;data=#{data.to_i}&amp;quot;
end

sleep
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポートに対する入力があるたびにブロックが実行されます。&lt;/p&gt;

&lt;p&gt;このように、arduinoをほぼrubyのオブジェクトのように扱えるため、&lt;br /&gt;
PC上でrubyプログラムを書くだけで、電子部品を制御することができるようになります。&lt;/p&gt;

&lt;p&gt;ただし、当然ながらPCと接続して制御するものであり、&lt;br /&gt;
Arduino単体で動作させたい場合は今まで通りArduinoプログラムを書く必要があります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>参加記録 Go Conference 2015 summer</title>
      <link>http://ota42y.com/blog/2015/06/21/gocon-2015-summer/</link>
      <pubDate>Sun, 21 Jun 2015 23:43:02 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/06/21/gocon-2015-summer/</guid>
      <description>

&lt;p&gt;今回は日経さんとCAさんがスポンサーとのことですが、&lt;br /&gt;
かなりの人がいるのにwifiが普通に繋がっていて凄かったです…&lt;br /&gt;
なんか機械も見たことも無い凄い奴でしたし。&lt;/p&gt;

&lt;p&gt;実際に運用してる上での話が多く、goの時代が来ている…！&lt;br /&gt;
という感じを受けました。&lt;br /&gt;
お仕事でほぼ使ってないのでちゃんと使いたいですねー&lt;/p&gt;

&lt;p&gt;また、みんなcode generateに走っているのはおもしろかったです。&lt;br /&gt;
コピペになるようなコードはgenerateするってのはほぼ統一見解ですね。&lt;/p&gt;

&lt;h1 id=&#34;キーノート:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;キーノート&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;go1.5凄そうです&lt;/li&gt;
&lt;li&gt;go oracleのすごさ

&lt;ul&gt;
&lt;li&gt;関数がどこで使われているかが調べられる&lt;/li&gt;
&lt;li&gt;関数ポインタで呼ぶ場合も大丈夫&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;gomobile、早くiOSに対応してC++を駆逐してほしいです…&lt;/li&gt;
&lt;li&gt;公式の依存管理ツールも楽しみです&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;発表まとめ:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;発表まとめ&lt;/h1&gt;

&lt;p&gt;発表順は覚えてないので、タイムテーブルに順不同で並べられている順です。&lt;/p&gt;

&lt;h2 id=&#34;gaurun-a-general-push-notification-server-in-go:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Gaurun〜A general push notification server in Go〜&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/cubicdaiya/a-general-push-notification-server-in-go&#34;&gt;https://speakerdeck.com/cubicdaiya/a-general-push-notification-server-in-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;go製のpushサーバ&lt;/li&gt;
&lt;li&gt;モニタリング用のAPIを用意してるの、凄い良いなーと思いました。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;debugging-go-code-with-gdb:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Debugging Go Code with GDB&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kaneshin.hateblo.jp/entry/2015/06/21/202850&#34;&gt;http://kaneshin.hateblo.jp/entry/2015/06/21/202850&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GDB、あんまり使いこなしてないのでもっとちゃんと使わないと…と思った。&lt;/li&gt;
&lt;li&gt;Goはコンパイル早いし、落ちたときにちゃんとどの行で落ちたか出してくれるし、無くても何とかなる感はあります

&lt;ul&gt;
&lt;li&gt;使った方が何倍も楽なのでちゃんと使った方が良いかと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;go 1.5からコンパイラがgoで実装されるけど、吐き出されるバイナリにDWARFが入ってれば関係ないよね？

&lt;ul&gt;
&lt;li&gt;リリース直後はバグったDWARFになる可能性はありそう…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;フォントが$300ってwwwwww&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;generative-programming-in-go:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Generative programming in Go.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/monochromegane/generative-programming-in-go&#34;&gt;https://speakerdeck.com/monochromegane/generative-programming-in-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;reflection凄く遅いです…(直接呼ぶのと1000倍違う)&lt;/li&gt;
&lt;li&gt;金槌を持つと何でも釘に見える病…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gore-go-で-repl-のはなし:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;gore - Go で REPL のはなし&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;irbみたいにgoを対話的に実行できるやつの内部事情&lt;/li&gt;
&lt;li&gt;go runしてるだけ&lt;/li&gt;
&lt;li&gt;go runに失敗しないように色々前処理をがんばってるみたいです。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;goと電子工作とロボット:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Goと電子工作とロボット&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;goでロボット制御できて、しかもスタンドアロンで動いていて凄いです&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;goのastをいじくって新しいツールを作る:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;GoのASTをいじくって新しいツールを作る&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/vvakame/gocon-2015-summer&#34;&gt;http://www.slideshare.net/vvakame/gocon-2015-summer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;go/astを使うと、コード解析した結果みたいなのをとれるみたいです。

&lt;ul&gt;
&lt;li&gt;正規表現でがんばる！とかよりかは遙かに楽そう…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ただ、出力部分は気合いとのこと…&lt;/li&gt;
&lt;li&gt;怒りのスライドは良くわかります…

&lt;ul&gt;
&lt;li&gt;1byte=1文字、再帰的なパッケージ、err!=nilめんどい…(´･_･`)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;go言語でコマンドラインツールをつくるときに僕の語ること:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Go言語でコマンドラインツールをつくるときに僕の語ること&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/tcnksm/what-i-talk-about-when-i-talk-about-cli-tool-by-golang-number-gocon&#34;&gt;https://speakerdeck.com/tcnksm/what-i-talk-about-when-i-talk-about-cli-tool-by-golang-number-gocon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CLIツールは何となくこうした方が良いよね…って思ってたのがちゃんとまとめられてます&lt;/li&gt;
&lt;li&gt;さらに、それに沿ったテンプレートを作ってくれるものも作ったらしいです。凄い

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tcnksm/gcli&#34;&gt;https://github.com/tcnksm/gcli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;-vとかでバージョン確認したときに、最新バージョンをチェックするの頭良いですね

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tcnksm/go-latest&#34;&gt;https://github.com/tcnksm/go-latest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;patterns-for-building-a-scalable-testable-web-app-in-go:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Patterns for building a scalable, testable web app in Go&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcegraph.com/&#34;&gt;https://sourcegraph.com/&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;そもそもこのサービス知りませんでしたが、めっちゃ凄いです…(o゜▽゜)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ピクシブ社内広告サーバーでのgoの開発-運用:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;ピクシブ社内広告サーバーでのGoの開発・運用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://catatsuy.hateblo.jp/entry/2015/06/21/214229&#34;&gt;http://catatsuy.hateblo.jp/entry/2015/06/21/214229&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;goのサーバを実際に運用している上での知見が詰まってました。

&lt;ul&gt;
&lt;li&gt;nginxをフロントに立てることで、goサーバは特定の機能を素早く処理することに集中できるとか&lt;/li&gt;
&lt;li&gt;ホットデプロイするためにnginxとの間にunixソケット受付のアプリを立てておくとか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CPU Throttlingによって混んでないときはレスポンスが遅い話がおもしろかったです。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1binary-自己完結型の-形態素解析器-kagome-を-作ってみた話:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;1binary 自己完結型の 形態素解析器 kagome を 作ってみた話&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ikawaha.hateblo.jp/entry/2015/06/21/155636&#34;&gt;http://ikawaha.hateblo.jp/entry/2015/06/21/155636&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;辞書のエンコーディングに悩まなくて良いの凄く良いと思います。&lt;/li&gt;
&lt;li&gt;形態素解析説明が凄くわかりやすかったです

&lt;ul&gt;
&lt;li&gt;ただ、文脈IDをどう使ってるのか良くわかりませんでした…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;goで基盤システムつくってる話:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;GOで基盤システムつくってる話&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CAでLoL並の接続数を捌けるような基盤システムを作ってる話&lt;/li&gt;
&lt;li&gt;パッケージ管理やパッケージ構成…(´･_･`)&lt;/li&gt;
&lt;li&gt;標準パッケージは宝の山。goらしさを調べるにはうってつけとのこと

&lt;ul&gt;
&lt;li&gt;A Tour of GoやEffective Goの後に最適&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;lt:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;LT&lt;/h2&gt;

&lt;h3 id=&#34;goのパッケージ構成で試行錯誤してみた話:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Goのパッケージ構成で試行錯誤してみた話&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/fkmhrk/go-49650783&#34;&gt;http://www.slideshare.net/fkmhrk/go-49650783&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;パッケージの分け方は特にgo特有のやり方はなく、他の言語とおんなじっぽいです&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;appengine-for-go-unittest:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;AppEngine for Go Unittest&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;デバッグ用のサーバの立ち上げが遅いので、Unittestに時間がかかるそうです&lt;/li&gt;
&lt;li&gt;並列化しても最初の分の時間はやっぱりかかってしまうとのこと

&lt;ul&gt;
&lt;li&gt;起動しっぱなしにして、そこに接続して使うとかはダメなのでしょうか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;golangで始めるハードウェアプログラミング:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Golangで始めるハードウェアプログラミング&lt;/h3&gt;

&lt;p&gt;メモり損ねました…(´･_･`)&lt;/p&gt;

&lt;h3 id=&#34;vendoring-golang:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;vendoring @ golang&lt;/h3&gt;

&lt;p&gt;メモり損ねました…(´･_･`)&lt;/p&gt;

&lt;h3 id=&#34;gopherになれ:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;「Gopherになれ！」&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;この人&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;コミケにgopher君がいた &lt;a href=&#34;http://t.co/cMyhSFgIwy&#34;&gt;pic.twitter.com/cMyhSFgIwy&lt;/a&gt;&lt;/p&gt;&amp;mdash; ななやん (@7yan00) &lt;a href=&#34;https://twitter.com/7yan00/status/549767136445333504&#34;&gt;2014, 12月 30&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go製の拡張可能なslackbot-仮:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Go製の拡張可能なslackbot（仮）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kyokomi.hatenablog.com/entry/2015/06/21/213610&#34;&gt;http://kyokomi.hatenablog.com/entry/2015/06/21/213610&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pluginの拡張をどうしてるのか謎でしたが、コードを読んで納得

&lt;ul&gt;
&lt;li&gt;パッケージのinit関数で、pluginsパッケージが保有するプラグインのリストに自分を登録する&lt;/li&gt;
&lt;li&gt;botがpluginsの中を読み込んで動作する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;goの使われ処:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Goの使われ処&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/qt_luigi/gofalseshi-warechu-ri-ben-falsehui-she-bian&#34;&gt;https://speakerdeck.com/qt_luigi/gofalseshi-warechu-ri-ben-falsehui-she-bian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5分間ひたすら採用している会社を羅列していました&lt;/li&gt;
&lt;li&gt;想像以上に多くて、盛り上がってるなーと思いました&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;k0kubun-pp-についてと-reflectパッケージとメタプログラミング:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;k0kubun/pp についてと、reflectパッケージとメタプログラミング&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://k0kubun.hatenablog.com/entry/2015/06/21/195229&#34;&gt;http://k0kubun.hatenablog.com/entry/2015/06/21/195229&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ppをラップしただけの関数を定義しておくってのが凄い便利そうです

&lt;ul&gt;
&lt;li&gt;import書いたり消したりがとても面倒なので…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メタプログラミングは…やっぱり現実的じゃ無いですよね&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;golangはじめて半日後に野球のアプリ書いてltしてきた:1cc9ac2b5800690c1b133bdf3b15ed6b&#34;&gt;Golangはじめて半日後に野球のアプリ書いてLTしてきた&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://shinyorke.hatenablog.com/entry/2015/06/21/195656&#34;&gt;http://shinyorke.hatenablog.com/entry/2015/06/21/195656&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;やったことの時系列になってておもしろいです&lt;/li&gt;
&lt;li&gt;やっぱり学習コストは低いんですねー&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C言語でのスレッド処理</title>
      <link>http://ota42y.com/blog/2015/06/18/c-thread/</link>
      <pubDate>Thu, 18 Jun 2015 07:47:43 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/06/18/c-thread/</guid>
      <description>

&lt;p&gt;C言語でのスレッド処理と、ロックの仕方をまとめました。&lt;br /&gt;
他の言語のようにスレッド用のクラスを継承するのでは無く、&lt;br /&gt;
別スレッドで実行する関数のポインタと、&lt;br /&gt;
その関数に渡すデータのポインタを指定して実行するようです。&lt;/p&gt;

&lt;h1 id=&#34;スレッドによる並行処理:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;スレッドによる並行処理&lt;/h1&gt;

&lt;h2 id=&#34;スレッドの作成-pthread-create:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;スレッドの作成(pthread_create)&lt;/h2&gt;

&lt;p&gt;Cではpthread_createを利用することで、別スレッドで任意の関数を実行できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int pthread_create(pthread_t * thread,
	 pthread_attr_t * attr,
	 void * (*start_routine)(void *),
	 void * arg);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;thread

&lt;ul&gt;
&lt;li&gt;スレッド管理用のpthread_t型の変数&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;attr

&lt;ul&gt;
&lt;li&gt;スレッドの属性を指定する。&lt;/li&gt;
&lt;li&gt;NULLの場合はデフォルトが使われる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;(*start_routine)(void *)

&lt;ul&gt;
&lt;li&gt;別スレッドから呼び出される関数へのポインタ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;arg

&lt;ul&gt;
&lt;li&gt;start_routineの引数として渡すデータのポインタ&lt;/li&gt;
&lt;li&gt;元のスレッドからデータを送るのに使う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;スレッドの終了を待つ-pthread-join:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;スレッドの終了を待つ(pthread_join)&lt;/h2&gt;

&lt;p&gt;pthread_joinで、指定したスレッドが終了するまで待機することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int pthread_join(pthread_t th, void **thread_return);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;th

&lt;ul&gt;
&lt;li&gt;待機するスレッドをpthread_t型の変数で指定する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;**thread_return

&lt;ul&gt;
&lt;li&gt;スレッドの戻り値を格納する領域&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;サンプルコード:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;サンプルコード&lt;/h2&gt;

&lt;p&gt;以下の例はグローバルな値にメインとサブの2つのスレッドから加算処理を行っています。&lt;br /&gt;
排他制御をしていないため、スレッドによる並行処理が行われると、値がおかしくなる可能性があります。&lt;/p&gt;

&lt;p&gt;実際、何度か実行すると値がおかしくなり、並行処理が行われていることが確認できます。&lt;/p&gt;

&lt;p&gt;なお、コンパイルする際はは-pthreadオプションを指定する必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;quot;stdio.h&amp;quot;
#include &amp;quot;pthread.h&amp;quot;

int a = 0;

void *func_thread(void *p) {
  printf(&amp;quot;start %d\n&amp;quot;, *(int*)p);

  int i=0;
  for(i=0; i &amp;lt; 10000; i++){
	int next = a + 1;
	int now = a;
	a = next;
	if (now+1 != next) {
	  printf(&amp;quot;other theard change %d %d\n&amp;quot;, a+1, next);
	}
  }

  return 0;
}

int main(void) {
  printf(&amp;quot;test\n&amp;quot;);

  int b = 42;

  pthread_t pthread;
  pthread_create( &amp;amp;pthread, NULL, &amp;amp;func_thread, &amp;amp;b);

  int i=0;
  for(i=0; i &amp;lt; 10000; i++){
	int next = a + 1;
	int now = a;
	a = next;
	if (now+1 != next) {
	  printf(&amp;quot;other theard change %d %d\n&amp;quot;, a+1, next);
	}
  }

  pthread_join(pthread, NULL); // pthreadで作られたスレッドが終わるまで待つ
  printf(&amp;quot;a=%d\n&amp;quot;, a);

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;mutexによるロック処理:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;mutexによるロック処理&lt;/h1&gt;

&lt;h2 id=&#34;排他制御を行う:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;排他制御を行う&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;pthread_mutex_t&lt;/code&gt;型の変数に対して、&lt;code&gt;pthread_mutex_lock&lt;/code&gt;、&lt;code&gt;pthread_mutex_unlock&lt;/code&gt;を実行することで、&lt;br /&gt;
処理をロックすることができます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pthread_mutex_t&lt;/code&gt;型の変数は&lt;code&gt;pthread_mutex_init&lt;/code&gt;で初期化することができます。&lt;br /&gt;
このとき、第二引数にmutex属性を渡すことができ、NULLを渡した場合はデフォルト値が使われます。&lt;/p&gt;

&lt;h2 id=&#34;サンプルコード-1:7f82349edcf7fd7ee59ba5f448e957cf&#34;&gt;サンプルコード&lt;/h2&gt;

&lt;p&gt;上記の例にロックによる排他制御を入れました。&lt;br /&gt;
そのため、並列処理を行っても値は正しく処理されるため、何度やっても結果が正しくなります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;stdio.h&amp;quot;
#include &amp;quot;pthread.h&amp;quot;

int a = 0;
pthread_mutex_t mutex;

void *func_thread(void *p) {
  printf(&amp;quot;start %d\n&amp;quot;, *(int*)p);

  int i=0;
  for(i=0; i &amp;lt; 10000; i++){
    pthread_mutex_lock(&amp;amp;mutex);
	int next = a + 1;
	int now = a;
	a = next;
    pthread_mutex_unlock(&amp;amp;mutex);

	if (now+1 != next) {
	  printf(&amp;quot;other theard change %d %d\n&amp;quot;, a+1, next);
	}
  }

  return 0;
}

int main(void) {
  pthread_mutex_init(&amp;amp;mutex, NULL);
  
  printf(&amp;quot;test\n&amp;quot;);

  int b = 42;

  pthread_t pthread;
  pthread_create( &amp;amp;pthread, NULL, &amp;amp;func_thread, &amp;amp;b);

  int i=0;
  for(i=0; i &amp;lt; 10000; i++){
    pthread_mutex_lock(&amp;amp;mutex);
	int next = a + 1;
	int now = a;
	a = next;
    pthread_mutex_unlock(&amp;amp;mutex);

	if (now+1 != next) {
	  printf(&amp;quot;other theard change %d %d\n&amp;quot;, a+1, next);
	}
  }

  pthread_join(pthread, NULL); // pthreadで作られたスレッドが終わるまで待つ
  printf(&amp;quot;a=%d\n&amp;quot;, a);

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Linuxのlocaleがおかしくなっていた</title>
      <link>http://ota42y.com/blog/2015/06/03/linux_local/</link>
      <pubDate>Wed, 03 Jun 2015 07:39:36 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/06/03/linux_local/</guid>
      <description>

&lt;p&gt;突然プログラムが起動しなくなったため、&lt;br /&gt;
原因を探ったところ、localesが壊れていました。&lt;br /&gt;
そのため、再インストールすることで直りました。&lt;br /&gt;
言語取得部分は動くけど、おかしい結果を返す壊れ方のため、&lt;br /&gt;
発見にわりと手間取りました。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:6e55b0bffb1729855201d3ad39c63b44&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;プログラム上でlocaleを参照する部分がおかしい結果を返す

&lt;ul&gt;
&lt;li&gt;常にANSI_X3.4-1968&lt;/li&gt;
&lt;li&gt;Debian 7.8&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;dpkg-reconfigure localesが何か壊れているメッセージを出す

&lt;ul&gt;
&lt;li&gt;localeをアップデートすると直る&lt;/li&gt;
&lt;li&gt;apt-get install locales&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;localeの取得がおかしい:6e55b0bffb1729855201d3ad39c63b44&#34;&gt;localeの取得がおかしい&lt;/h1&gt;

&lt;p&gt;pythonではgetpreferredencoding()で設定されている言語情報を取ってこれます。
ですが、&lt;br /&gt;
&lt;code&gt;LANG=&#39;ja_JP.UTF-8&#39; echo &#39;import locale; print locale.getpreferredencoding()&#39; | python&lt;/code&gt;&lt;br /&gt;
を実行しても、&lt;code&gt;ANSI_X3.4-1968&lt;/code&gt;が返ってきてしまい、日本語処理の部分でおかしくなっていました。&lt;br /&gt;
(前にそのプログラムは動いていたので、気がついたらおかしくなっていました)&lt;/p&gt;

&lt;p&gt;localeを実行してみたところ、以下のように表示されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;locale -a
locale: Cannot set LC_CTYPE to default locale: No such file or directory
locale: Cannot set LC_MESSAGES to default locale: No such file or directory
locale: Cannot set LC_COLLATE to default locale: No such file or directory
C
C.UTF-8
POSIX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうやら日本語のlocaleが有効ではないようです。&lt;/p&gt;

&lt;p&gt;ですが、&lt;code&gt;/etc/locale.gen&lt;/code&gt;では、ja_JP.UTF-8がコメントアウトされていて有効になっていました。&lt;/p&gt;

&lt;h1 id=&#34;原因は不明だがとりあえず直る:6e55b0bffb1729855201d3ad39c63b44&#34;&gt;原因は不明だがとりあえず直る&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;sudo su
export LC_ALL=C # jaは使えないのでCにする必要がある
export LANG=C # jaは使えないのでCにする必要がある
sudo dpkg-reconfigure locales
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;したら、localesが壊れているというメッセージが出てきました。&lt;/p&gt;

&lt;p&gt;そのため、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install locales
sudo dpkg-reconfigure locales
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、ja_JP.UTF-8を有効にしてリブートしたら上手くいくようになりました。&lt;/p&gt;

&lt;p&gt;おそらくlocales周りがおかしくなっており、新しいlocalesを入れる際にそれが直ったのだと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go言語でメモリ上の大きさや配置を調べる</title>
      <link>http://ota42y.com/blog/2015/05/06/go-struct-offset/</link>
      <pubDate>Wed, 06 May 2015 20:16:57 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/05/06/go-struct-offset/</guid>
      <description>

&lt;p&gt;golangで構造体を定義した場合、
メモリ上にどのように配置されるのでしょうか。&lt;/p&gt;

&lt;p&gt;通常意識する必要はありませんが、32bitと64bitで挙動がおかしい場合など、&lt;br /&gt;
ごく希に調べる必要に迫られる場合があります。&lt;br /&gt;
そのような場合、各要素のサイズや、構造体先頭からのオフセットを調べることで、&lt;br /&gt;
メモリ上に構造体がどう置かれるかを調べることができます。&lt;/p&gt;

&lt;p&gt;C言語でのsizeofやoffsetofに対応する物が、golangのunsafeパッケージに用意されているため、&lt;br /&gt;
これを利用することで構造体の様子を調べることができます。&lt;br /&gt;
&lt;a href=&#34;https://golang.org/pkg/unsafe/&#34;&gt;https://golang.org/pkg/unsafe/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回は以下のようなテスト構造体を使い、メモリ上にどのように置かれるかを調べました。&lt;br /&gt;
テスト環境はwindows7(32bit)とmac(64bit)になります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type A struct {
  flag bool
  num int64
  ptr *int64
  mini int32
  str string
  nums []int64
  nums5 [5]int64
  strs []string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;要素のサイズ:7df659e690576969cb149167507e359f&#34;&gt;要素のサイズ&lt;/h1&gt;

&lt;p&gt;unsafe.Sizeof関数は、引数の要素のサイズを調べ、バイト数をint型で返してくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;a := A{}
log.Println(unsafe.Sizeof(a)) // 92 (136) 括弧外は32bit環境、括弧内は64bit
log.Println(unsafe.Sizeof(a.flag)) // 1
log.Println(unsafe.Sizeof(a.num)) // 8
log.Println(unsafe.Sizeof(a.ptr)) // 4 (8)
log.Println(unsafe.Sizeof(a.mini)) // 4
log.Println(unsafe.Sizeof(a.str)) // 8 (16)
log.Println(unsafe.Sizeof(a.nums)) // 12 (24)
log.Println(unsafe.Sizeof(a.nums5)) // 40
log.Println(unsafe.Sizeof(a.strs)) // 12 (24)

a.nums = append(a.nums, 42)
a.strs = append(a.strs, &amp;quot;デーデッデー&amp;quot;)
log.Println(unsafe.Sizeof(a.nums)) // 12 (24)
log.Println(unsafe.Sizeof(a.strs)) // 12 (24)

log.Println(unsafe.Sizeof(&amp;amp;a)) // 4 (8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この関数は指定した要素のサイズを返します。
そのため、32bit環境ではint64のポインタであるa.ptrは、&lt;br /&gt;
ポインタのサイズである4byte(=32bit)を返します。&lt;/p&gt;

&lt;p&gt;また、配列の場合は配列全体のサイズ(a.nums5 = 64 * 5)を返しますが、&lt;br /&gt;
スライスの場合はスライス自身の値(12 or 24byte)を返し、スライス全体の値は返しません。&lt;br /&gt;
そのため、要素を追加してもスライス自身の大きさは変化しません。&lt;/p&gt;

&lt;h1 id=&#34;先頭からのオフセット:7df659e690576969cb149167507e359f&#34;&gt;先頭からのオフセット&lt;/h1&gt;

&lt;p&gt;上記の例でbool値のa.flagが1byteかつ、ほかの要素がすべて偶数なのにもかかわらず、&lt;br /&gt;
構造体全体の大きさが92byteの偶数になっています。&lt;br /&gt;
このことから、golangの構造体はパディングされる場合があることがわかります。&lt;br /&gt;
そのため、要素のサイズを足していったところが、実際にメモリ上に置かれる場所とは限りません。&lt;/p&gt;

&lt;p&gt;構造体先頭からのオフセットが何byteかをint型で返す、unsafe.Offsetofを使うことで、&lt;br /&gt;
実際にどの位置に配置されているかを確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.Println(unsafe.Offsetof(a.flag)) // 0
log.Println(unsafe.Offsetof(a.num)) // 4 (8)
log.Println(unsafe.Offsetof(a.ptr)) // 12 (16)
log.Println(unsafe.Offsetof(a.mini)) // 16 (24)
log.Println(unsafe.Offsetof(a.str)) // 20 (32)
log.Println(unsafe.Offsetof(a.nums)) // 28 (48)
log.Println(unsafe.Offsetof(a.nums5)) // 40 (72)
log.Println(unsafe.Offsetof(a.strs)) // 80 (112)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;32bit環境ではa.flagの1byteの後に3byteパディングがされ、&lt;br /&gt;
a.numが先頭から4byte(=32bit)の位置から始まっています。&lt;/p&gt;

&lt;p&gt;64bit環境ではa.flagの後ろに7byteパディングされ、&lt;br /&gt;
a.numが先頭から8byte(=64bit)の位置から始まっています。&lt;br /&gt;
また、int32のa.miniも4byteパディングされ、a.strが32byte目から始まるようになっています。&lt;/p&gt;

&lt;p&gt;このように、32bit環境では32bitに、64bit環境では64bitの倍数から始まるように、&lt;br /&gt;
コンパイラが構造体にパディングをするようです。&lt;/p&gt;

&lt;h1 id=&#34;構造体内の構造体の場合:7df659e690576969cb149167507e359f&#34;&gt;構造体内の構造体の場合&lt;/h1&gt;

&lt;p&gt;以下のように構造体に実態を持つ場合、宣言したとおりに配置されます。&lt;br /&gt;
そのためAの実態であるaの前後で、構造体のサイズ分だけオフセットが移動しています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type B struct {
  bflag bool
  intnum int64
  a A
  bflag2 bool
  a2 *A
  bflag3 bool
  A
  blfag4 bool
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;b := B{
  a2: &amp;amp;A{},
}
log.Println(unsafe.Offsetof(b.bflag)) // 0
log.Println(unsafe.Offsetof(b.intnum)) // 4
log.Println(&amp;quot;b.a&amp;quot;)
log.Println(unsafe.Offsetof(b.a.flag)) // 0
log.Println(unsafe.Offsetof(b.a.strs)) // 80
log.Println(&amp;quot;b.flag2&amp;quot;)
log.Println(unsafe.Offsetof(b.bflag2)) // 104 (4 + 8 + 92)
log.Println(&amp;quot;b.a2&amp;quot;) // a2 is pointer
log.Println(unsafe.Offsetof(b.a2.flag)) // 0
log.Println(unsafe.Offsetof(b.a2.strs)) // 80 (112)
log.Println(&amp;quot;b.bflag3&amp;quot;)
log.Println(unsafe.Offsetof(b.bflag3)) // 112 (104 + 8)
log.Println(&amp;quot;b.flag&amp;quot;)
log.Println(unsafe.Offsetof(b.flag)) // 116
log.Println(unsafe.Offsetof(b.num)) // 120
log.Println(unsafe.Offsetof(b.ptr)) // 128
log.Println(unsafe.Offsetof(b.mini)) // 132
log.Println(unsafe.Offsetof(b.strs)) // 196
log.Println(&amp;quot;b.bflag4&amp;quot;)
log.Println(unsafe.Offsetof(b.blfag4)) // 208 (112 + 92)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;unsafe.Offsetofは対象の要素を持つ構造体の先頭からのオフセットを指すため、&lt;br /&gt;
構造体Bの中にあるAでも、Bからのオフセットではなく、Aの先頭からのオフセットを出力しています。&lt;/p&gt;

&lt;p&gt;また、ポインタとして持つ場合、実態は別のところにあるため、a2のサイズはポインタ分のみになります。&lt;/p&gt;

&lt;p&gt;構造体を埋め込んだ場合、それらの値がそのままそこに置かれたかのように置かれます。&lt;br /&gt;
また、埋め込んだ構造体の値として扱われるらしく、&lt;br /&gt;
実態として持っているときと違い、構造体Aの要素でもBの先頭からのオフセットを出力しています。&lt;/p&gt;

&lt;h1 id=&#34;ソースコード:7df659e690576969cb149167507e359f&#34;&gt;ソースコード&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
  &amp;quot;log&amp;quot;
  &amp;quot;unsafe&amp;quot;
)

type A struct {
  flag bool
  num int64
  ptr *int64
  mini int32
  str string
  nums []int64
  nums5 [5]int64
  strs []string
}

type B struct {
  bflag bool
  intnum int64
  a A
  bflag2 bool
  a2 *A
  bflag3 bool
  A
  blfag4 bool
}

func main() {
  log.Println(&amp;quot;sizeof&amp;quot;)
  a := A{}
  log.Println(unsafe.Sizeof(a)) // 92 (136) 括弧内は64bit
  log.Println(unsafe.Sizeof(a.flag)) // 1
  log.Println(unsafe.Sizeof(a.num)) // 8
  log.Println(unsafe.Sizeof(a.ptr)) // 4 (8)
  log.Println(unsafe.Sizeof(a.mini)) // 4
  log.Println(unsafe.Sizeof(a.str)) // 8 (16)
  log.Println(unsafe.Sizeof(a.nums)) // 12 (24)
  log.Println(unsafe.Sizeof(a.nums5)) // 40
  log.Println(unsafe.Sizeof(a.strs)) // 12 (24)

  a.nums = append(a.nums, 42)
  a.strs = append(a.strs, &amp;quot;デーデッデー&amp;quot;)
  log.Println(unsafe.Sizeof(a.nums)) // 12 (24)
  log.Println(unsafe.Sizeof(a.strs)) // 12 (24)

  log.Println(unsafe.Sizeof(&amp;amp;a)) // 4 (8)

  log.Println(&amp;quot;offest&amp;quot;)
  log.Println(unsafe.Offsetof(a.flag)) // 0
  log.Println(unsafe.Offsetof(a.num)) // 4 (8)
  log.Println(unsafe.Offsetof(a.ptr)) // 12 (16)
  log.Println(unsafe.Offsetof(a.mini)) // 16 (24)
  log.Println(unsafe.Offsetof(a.str)) // 20 (32)
  log.Println(unsafe.Offsetof(a.nums)) // 28 (48)
  log.Println(unsafe.Offsetof(a.nums5)) // 40 (72)
  log.Println(unsafe.Offsetof(a.strs)) // 80 (112)



  log.Println(&amp;quot;b&amp;quot;)
  b := B{
    a2: &amp;amp;A{},
  }
  log.Println(unsafe.Offsetof(b.bflag)) // 0
  log.Println(unsafe.Offsetof(b.intnum)) // 4
  log.Println(&amp;quot;b.a&amp;quot;)
  log.Println(unsafe.Offsetof(b.a.flag)) // 0
  log.Println(unsafe.Offsetof(b.a.strs)) // 80
  log.Println(&amp;quot;b.flag2&amp;quot;)
  log.Println(unsafe.Offsetof(b.bflag2)) // 104 (4 + 8 + 92)
  log.Println(&amp;quot;b.a2&amp;quot;) // a2 is pointer
  log.Println(unsafe.Offsetof(b.a2.flag)) // 0
  log.Println(unsafe.Offsetof(b.a2.strs)) // 80 (112)
  log.Println(&amp;quot;b.bflag3&amp;quot;)
  log.Println(unsafe.Offsetof(b.bflag3)) // 112 (104 + 8)
  log.Println(&amp;quot;b.flag&amp;quot;)
  log.Println(unsafe.Offsetof(b.flag)) // 116
  log.Println(unsafe.Offsetof(b.num)) // 120
  log.Println(unsafe.Offsetof(b.ptr)) // 128
  log.Println(unsafe.Offsetof(b.mini)) // 132
  log.Println(unsafe.Offsetof(b.strs)) // 196
  log.Println(&amp;quot;b.bflag4&amp;quot;)
  log.Println(unsafe.Offsetof(b.blfag4)) // 208 (112 + 92)
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>参加記録 BPStudy#92</title>
      <link>http://ota42y.com/blog/2015/04/29/bpstudy92/</link>
      <pubDate>Wed, 29 Apr 2015 13:49:43 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/29/bpstudy92/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://bpstudy.connpass.com/event/12940/&#34;&gt;BPStudy#92&lt;/a&gt;に参加しました。&lt;br /&gt;
今回は経営やお金の話でした。&lt;/p&gt;

&lt;p&gt;お金って資本主義社会のベースとなる概念ですし、&lt;br /&gt;
インターネットの仕組みがどうなってるのかとか、&lt;br /&gt;
コンピュータがプログラムをどう解釈しているのかと同じぐらい、&lt;br /&gt;
お金の事を知っておいた方がいい気がする…と思って参加しました。&lt;/p&gt;

&lt;h1 id=&#34;エンシ-ニアの経営学:12fec0f6c41001deccd7cf88e484e079&#34;&gt;エンジニアの経営学&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/bejita/bpstudy92&#34;&gt;http://www.slideshare.net/bejita/bpstudy92&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/bejita/ss-45051035&#34;&gt;http://www.slideshare.net/bejita/ss-45051035&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一部詳しく書いている別資料&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;会社は環境の変数にめちゃくちゃ弱い&lt;/li&gt;
&lt;li&gt;2014年の倒産件数

&lt;ul&gt;
&lt;li&gt;9731件&lt;/li&gt;
&lt;li&gt;一日あたり26.6社が倒産している&lt;/li&gt;
&lt;li&gt;これでも前年比10%減&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;利益は車におけるガソリン

&lt;ul&gt;
&lt;li&gt;ガソリンが無いと走れない&lt;/li&gt;
&lt;li&gt;補給は常に必要&lt;/li&gt;
&lt;li&gt;ガソリンの供給源は売り上げのみ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;利益＝売り上げーコスト

&lt;ul&gt;
&lt;li&gt;利益に対するコストの比率が低い、低コストの方が良い&lt;/li&gt;
&lt;li&gt;コストが低い方が安定する

&lt;ul&gt;
&lt;li&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/ota42y&#34;&gt;@ota42y&lt;/a&gt; 必要な資金が少なければ少ないほど内部留保が溜まりやすく、変化に対応できるバッファが産まれるからです。ガソリン切れを起こすのが一番やってはいけないことなので、残るものが一緒なら使うカネが少ないほうが安定します。&lt;/p&gt;&amp;mdash; やきう大好きござ先輩 (@gothedistance) &lt;a href=&#34;https://twitter.com/gothedistance/status/593071626922504194&#34;&gt;2015, 4月 28&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;li&gt;詳しくは二つ目の資料&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;全ての企業活動はコスト

&lt;ul&gt;
&lt;li&gt;資料作成、メールを打つ、問い合わせ対応&lt;/li&gt;
&lt;li&gt;それ自体は１円も生んでいない。&lt;/li&gt;
&lt;li&gt;そのコストを回収するのは売り上げしか無い。
サービス運営で食べていくのは大変&lt;/li&gt;
&lt;li&gt;オーダーメイドを作る方が簡単

&lt;ul&gt;
&lt;li&gt;お金も出してくれやすい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サービス開発は必ず投資が先行する&lt;/li&gt;
&lt;li&gt;月額定額は青天井なので嫌われる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;組織運営

&lt;ul&gt;
&lt;li&gt;一人で全ては出来ない&lt;/li&gt;
&lt;li&gt;誰かにやってもらわないと組織運営は安定しない&lt;/li&gt;
&lt;li&gt;高いスキルを持った人を集めても、ゴミしか生み出せない場合もある&lt;/li&gt;
&lt;li&gt;Good Player is not Good Manager&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;チームの将来は決定の速度で決まる

&lt;ul&gt;
&lt;li&gt;引き延ばしは金と時間の無駄&lt;/li&gt;
&lt;li&gt;決定が遅いと間違いに気づくのも遅い&lt;/li&gt;
&lt;li&gt;決定の妥当性はいま判断できない&lt;/li&gt;
&lt;li&gt;Done is Better Than Perfect.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ゴールから逆算して物事を考える

&lt;ul&gt;
&lt;li&gt;ゴールを決めて、そこに至るためのマイルストーンを決めていく&lt;/li&gt;
&lt;li&gt;ゴールを決めてるから、ギャップも出せる&lt;/li&gt;
&lt;li&gt;リスクアセスメントも忘れずに。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;やっちゃいけないことを明確にする

&lt;ul&gt;
&lt;li&gt;これをやれには個人差が出る&lt;/li&gt;
&lt;li&gt;これはするなについては個人差は出ない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;判断基準を可能な限り簡単にする

&lt;ul&gt;
&lt;li&gt;〜かもしれない、〜すべきである、〜だったらどうするのかを無くす&lt;/li&gt;
&lt;li&gt;結果を出す＝なりようがない状態をつくる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;金にならないコードは負債

&lt;ul&gt;
&lt;li&gt;コードにはマネタイズが必須&lt;/li&gt;
&lt;li&gt;技術それ自体は１円にもならない&lt;/li&gt;
&lt;li&gt;技術は使われてこそ生きるもの&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;エキスパートの評価軸は一つ

&lt;ul&gt;
&lt;li&gt;周りに良い影響を与えられるか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;参考文献

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/%E3%80%8C%E8%B5%A4%E5%AD%97%E3%80%8D%E3%81%AE%E6%B5%B7%E3%81%A8%E3%80%8C%E5%88%A9%E7%9B%8A%E3%80%8D%E3%81%AE%E5%B0%8F%E5%B3%B6%E2%80%95%E4%BA%8B%E6%A5%AD%E3%81%AE%EF%BC%94%E5%89%B2%E3%81%AF%E4%B8%8D%E6%8E%A1%E7%AE%97%E3%81%AA%E3%81%AE%E3%81%AB%E6%94%B9%E5%96%84%E3%81%97%E3%81%AA%E3%81%84%E3%83%AF%E3%82%B1-%E3%82%B8%E3%83%A7%E3%83%8A%E3%82%B5%E3%83%B3%E3%83%BB%EF%BC%AC%E3%83%BB%EF%BC%B3%E3%83%BB%E3%83%90%E3%83%BC%E3%83%B3%E3%82%BA/dp/4532317339&#34;&gt;「赤字」の海と「利益」の小島―事業の４割は不採算なのに改善しないワケ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/%E3%81%A8%E3%81%82%E3%82%8B%E4%BC%9A%E7%A4%BE%E3%81%AE%E7%B5%8C%E7%90%86%E3%81%95%E3%82%93%E3%81%8C%E6%95%99%E3%81%88%E3%82%8B-%E6%A5%BD%E3%81%97%E3%81%8F%E3%82%8F%E3%81%8B%E3%82%8B-%E7%B0%BF%E8%A8%98%E5%85%A5%E9%96%80-%E6%9D%B1%E5%B1%B1-%E7%A9%A3/dp/4534049765&#34;&gt;とある会社の経理さんが教える 楽しくわかる! 簿記入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/%E3%81%93%E3%81%AE%EF%BC%91%E5%86%8A%E3%81%A7%E3%81%99%E3%81%B9%E3%81%A6%E3%82%8F%E3%81%8B%E3%82%8B-%E7%AE%A1%E7%90%86%E4%BC%9A%E8%A8%88%E3%81%AE%E5%9F%BA%E6%9C%AC-%E5%8D%83%E8%B3%80-%E7%A7%80%E4%BF%A1/dp/4534048459&#34;&gt;この１冊ですべてわかる　管理会計の基本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/%E7%A8%B2%E7%9B%9B%E5%92%8C%E5%A4%AB%E3%81%AE%E5%AE%9F%E5%AD%A6%E2%80%95%E7%B5%8C%E5%96%B6%E3%81%A8%E4%BC%9A%E8%A8%88-%E7%A8%B2%E7%9B%9B-%E5%92%8C%E5%A4%AB/dp/4532190061&#34;&gt;稲盛和夫の実学―経営と会計&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/5%E5%B9%B4%E3%81%A7%E5%A3%B2%E4%B8%8A2%E5%80%8D%E3%81%AE%E7%B5%8C%E5%96%B6%E8%A8%88%E7%94%BB%E3%82%92%E3%81%9F%E3%81%A6%E3%81%AA%E3%81%95%E3%81%84-%E5%B0%8F%E5%B1%B1-%E6%98%87/dp/404600097X&#34;&gt;5年で売上2倍の経営計画をたてなさい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/%EF%BC%A8%EF%BC%A1%EF%BC%B2%EF%BC%A4-%EF%BC%B4%EF%BC%A8%EF%BC%A9%EF%BC%AE%EF%BC%A7%EF%BC%B3-%E3%83%99%E3%83%B3%E3%83%BB%E3%83%9B%E3%83%AD%E3%82%A6%E3%82%A3%E3%83%83%E3%83%84/dp/4822250857&#34;&gt;ＨＡＲＤ　ＴＨＩＮＧＳ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;エンジニアのためのお金の話:12fec0f6c41001deccd7cf88e484e079&#34;&gt;エンジニアのためのお金の話&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;会計、キャッシュフロー、税務

&lt;ul&gt;
&lt;li&gt;全て同じお金の物差し&lt;/li&gt;
&lt;li&gt;TPOに応じて物差しを持ち帰ることが大切&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;会計

&lt;ul&gt;
&lt;li&gt;複式簿記に書かれる売上と実際のお金の動きは別

&lt;ul&gt;
&lt;li&gt;納品して検収したタイミングで売上（収益）になる&lt;/li&gt;
&lt;li&gt;検収したタイミングで費用（負債）になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;売上と負債を対応づけたのが貸借対照表&lt;/li&gt;
&lt;li&gt;収益と費用を対応づけたのが損益計算書&lt;/li&gt;
&lt;li&gt;会計は実際のお金の動きなしで完結する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;キャッシュフロー

&lt;ul&gt;
&lt;li&gt;お金が入るのは代金回収時&lt;/li&gt;
&lt;li&gt;お金が出るのは外注費を払った時点&lt;/li&gt;
&lt;li&gt;それらをまとめたのがキャッシュフロー計算書

&lt;ul&gt;
&lt;li&gt;貸借対照表、損益計算書、キャッシュフロー計算書が財務三票&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;黒字倒産

&lt;ul&gt;
&lt;li&gt;利益は出てるけど、お金が無くて倒産する

&lt;ul&gt;
&lt;li&gt;収益は上がっても代金を回収するまではお金が手元に無い状態&lt;/li&gt;
&lt;li&gt;利益とお金の動きは別物&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;回避策&lt;/li&gt;
&lt;li&gt;回収サイトは短く、支払いサイトは長く

&lt;ul&gt;
&lt;li&gt;外注先からは短くしたいので、好きに長く取れない&lt;/li&gt;
&lt;li&gt;日本では一般的に末締め翌月払い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;運転資金を手元に置く&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;貸倒

&lt;ul&gt;
&lt;li&gt;取引先が倒産して回収できない&lt;/li&gt;
&lt;li&gt;そのまま費用になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;税務

&lt;ul&gt;
&lt;li&gt;所得＝益金ー損金

&lt;ul&gt;
&lt;li&gt;大体会計と同じ概念&lt;/li&gt;
&lt;li&gt;ただし、個々の要素に微妙な差異がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;費用≠損金

&lt;ul&gt;
&lt;li&gt;貸倒してもそのまま損金にならない場合がある&lt;/li&gt;
&lt;li&gt;利益が無くても税金がかかる場合&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>参加記録 DroidKaigi</title>
      <link>http://ota42y.com/blog/2015/04/26/droidkaigi/</link>
      <pubDate>Sun, 26 Apr 2015 12:49:12 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/26/droidkaigi/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://droidkaigi.connpass.com/event/13216/&#34;&gt;DroidKaigi&lt;/a&gt;に参加してきたのでメモ。&lt;/p&gt;

&lt;p&gt;Twitterで流れてくる情報によると、あっちのセッションもおもしろそう…&lt;br /&gt;
みたいなのがあったので、ちゃんとセッションの概要も読んで天秤にかけるべきでした。&lt;br /&gt;
（エクセルシートから該当のセッションを探すのが大変だったので挫折した）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Activity, Fragment, CustomView の使い分け - マッチョなActivityにさよならする方法 -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/yanzm/droid-kaigi2015-yanzm&#34;&gt;http://www.slideshare.net/yanzm/droid-kaigi2015-yanzm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ActivityはFragmentのブセット的な印象。&lt;/li&gt;
&lt;li&gt;Fat Activityになりやすい場合はViewとか他の部分にコードを分割しましょうというお話っぽい。

&lt;ul&gt;
&lt;li&gt;RailsのFat Controller問題?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fragmentにできる事はそっちにどんどん任せて、ActivityはActivityにしか出来ない部分に集中しようってこと？&lt;/li&gt;
&lt;li&gt;Activityにしか出来ないことが多すぎるからFat Activity問題になってたので、
似たようなことが出来るけどライフサイクルをコントロールできるクラスの登場によって、
処理の分割ができるようになった感じ？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;開発を効率的に進めるられるまでの道程&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/TakaoSumitomo/ss-47393000&#34;&gt;http://www.slideshare.net/TakaoSumitomo/ss-47393000&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コードを書くのとテストを書くのが一番開発で大変なところ&lt;/li&gt;
&lt;li&gt;どんな風にテストしているかの事例紹介

&lt;ul&gt;
&lt;li&gt;ダミーを作ってがんばる感じ&lt;/li&gt;
&lt;li&gt;複数の間を取り持つクラスは疎通確認のみ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;あるゲームアプリケーションの構成とアップデートサイクル&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/kentaroiizuka/droidkaigi&#34;&gt;http://www.slideshare.net/kentaroiizuka/droidkaigi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;様々なリソースから、バイナリやアップデータを作るまでをすべてJenkinsがやっている

&lt;ul&gt;
&lt;li&gt;専用のパイプラインエンジニアがいるらしい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KLab/PlaygroundOSS/&#34;&gt;Playground&lt;/a&gt;つよい

&lt;ul&gt;
&lt;li&gt;Cocosはお察しなできなので… (´・ω・｀)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Luaでゲーム部分を書く

&lt;ul&gt;
&lt;li&gt;ゲーム部分以外はフレームワークが吸収&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;リソースの追加ダウンロードとかもフレームワーク側が持っているらしい

&lt;ul&gt;
&lt;li&gt;ゲーム側はゲームとしての実装に専念できるっぽい&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Android学ぶを君へ。生き抜くためのナレッジ共有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/operando/DroidKaigi&#34;&gt;https://github.com/operando/DroidKaigi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;有用な情報がたくさん&lt;/li&gt;
&lt;li&gt;adbが思っていた以上に優秀だった

&lt;ul&gt;
&lt;li&gt;任意のアプリのViewTreeが見られるらしい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テスト書こう&lt;/li&gt;
&lt;li&gt;発表と関連する資料が全部まとまっているの凄い便利&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kotlin&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/ntaro/xin-yan-yu-kotlindeandroidpuroguramiingu&#34;&gt;https://speakerdeck.com/ntaro/xin-yan-yu-kotlindeandroidpuroguramiingu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Better Java凄い&lt;/li&gt;
&lt;li&gt;Javaで面倒なところを一通りつぶしてくれてる感じ&lt;/li&gt;
&lt;li&gt;Android Studioのプラグインもしっかり対応している様子&lt;/li&gt;
&lt;li&gt;静的型付けだけどちゃんと型推論してくれるので便利&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;モバイルにおける電力最適化のための1プラクティス&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプリの電力測定をする

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.brilliantservice.co.jp/works/power_kit.html&#34;&gt;http://www.brilliantservice.co.jp/works/power_kit.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;こんな感じのを作る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;満充電状態なら、電源ケーブルを通る電力は大体アプリのために使われる仮定

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://strawberry-linux.com/catalog/items?code=12031&#34;&gt;https://strawberry-linux.com/catalog/items?code=12031&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;どれくらいの電気が使われたかを測定する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;通信や描画が何度も起きるアプリは消費量も多め&lt;/li&gt;
&lt;li&gt;何をしているかで消費量はだいぶ違う&lt;/li&gt;
&lt;li&gt;全体の平均値より、スポットごとの値を比較した方が良い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;アプリを公開する前に、最低限知っておきたいセキュリティ事項&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.taosoftware.co.jp/blog/2015/04/cf5c5d90.html&#34;&gt;http://www.taosoftware.co.jp/blog/2015/04/cf5c5d90.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;セキュリティ学習ツールAnCoLe

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/vuln/ancole/&#34;&gt;https://www.ipa.go.jp/security/vuln/ancole/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;権限管理をしっかりとする&lt;/li&gt;
&lt;li&gt;デバッグコードやライブラリが変な挙動をしないか精査する

&lt;ul&gt;
&lt;li&gt;広告SDKは信頼できる物一覧がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.androider.jp/dev/archives/3087&#34;&gt;http://blog.androider.jp/dev/archives/3087&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;その他&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;複数セッションなのでもう片方も見たいのばかり…

&lt;ul&gt;
&lt;li&gt;特にARTとXMLの話は聞きたかった…&lt;em&gt;(:3 」∠)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/MakotoYamazaki/20150425-droidkaigi-gradle&#34;&gt;http://www.slideshare.net/MakotoYamazaki/20150425-droidkaigi-gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/kmt-t/art-47396171&#34;&gt;http://www.slideshare.net/kmt-t/art-47396171&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/sola1980/androidse-linux&#34;&gt;http://www.slideshare.net/sola1980/androidse-linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/yuki930/ss-47398513&#34;&gt;http://www.slideshare.net/yuki930/ss-47398513&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/chocomelonchan/droidkaigi&#34;&gt;https://speakerdeck.com/chocomelonchan/droidkaigi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/yulily100/tesainakaxmlwoshu-kuahurikai-fa-huro&#34;&gt;https://speakerdeck.com/yulily100/tesainakaxmlwoshu-kuahurikai-fa-huro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/misyobun/da-rong-liang-detafalsedaunrodozhan-lue&#34;&gt;https://speakerdeck.com/misyobun/da-rong-liang-detafalsedaunrodozhan-lue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>