<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on おおたの物置</title>
    <link>http://ota42y.com/blog/</link>
    <description>Recent content in Blogs on おおたの物置</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 07 Feb 2016 12:27:38 +0900</lastBuildDate>
    <atom:link href="http://ota42y.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>dump/restoreコマンドでデータのバックアップ・リストアをする</title>
      <link>http://ota42y.com/blog/2016/02/07/dump_restore_command/</link>
      <pubDate>Sun, 07 Feb 2016 12:27:38 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/02/07/dump_restore_command/</guid>
      <description>

&lt;h1 id=&#34;まとめ:24d1aea959d1a3feee770b5361f2f824&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;dump/restoreコマンドでパーティションごとバックアップ/リストアができる&lt;/li&gt;
&lt;li&gt;SDカードの中身を移行するのに便利

&lt;ul&gt;
&lt;li&gt;もちろんHDDでもいける&lt;/li&gt;
&lt;li&gt;Windowsは基本的にSDカードの第一パーティションしか認識できない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;sdカードのデータ移行がしたい:24d1aea959d1a3feee770b5361f2f824&#34;&gt;SDカードのデータ移行がしたい&lt;/h1&gt;

&lt;p&gt;Androidに使っているMicroSDが速度面で不満が出てきたため、より早い物に入れ替えを行いました。&lt;/p&gt;

&lt;p&gt;ですが、アプリのデータを入れていたりと、通常のMicroSDと使い方がだいぶ違うため、普通にコピペでバックアップ・リストアすると、権限周りやシンボリックリンク周りで問題が起きそうでした。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/blog/2014/12/30/link2sd/&#34;&gt;ASUS MeMO Pad 7 ME572CでLink2SDを動かす&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そこで、dump/restoreコマンドを使い、ファイルシステムを丸ごとバックアップ・リストアしました。今回の対象はSDカードですが、対象のデバイスは関係ないため、  HDDを対象としたバックアップも同じ手順で可能です。&lt;/p&gt;

&lt;h1 id=&#34;sdカードの第二パーティションのマウント:24d1aea959d1a3feee770b5361f2f824&#34;&gt;SDカードの第二パーティションのマウント&lt;/h1&gt;

&lt;p&gt;Link2SDを使っているため、SDカードの第二パーティションにバックアップ対象が保存されています。このパーティションをマウントし、dumpコマンドを利用してバックアップを行います。&lt;/p&gt;

&lt;p&gt;なお、Windowsでは基本的にSDカードの第二パーティションはマウントできないため、Linux上で作業を行いました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 接続された位置をfdiskで調べる
sudo fdisk -l

# 以下のようにSDカードのパーティションの位置が表示される
# /dev/sdc1 42 42424242 4242424242 42 HPFS/NTFS/exFAT
# /dev/sdc2 4242 42424242 42424242 42 Linux

# ext3でフォーマットしているのでマウントする
# (どうフォーマットしているかはその人次第です)
sudo mount -t ext3 /dev/sdc2 /mnt/sd
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;dumpコマンドでバックアップ:24d1aea959d1a3feee770b5361f2f824&#34;&gt;dumpコマンドでバックアップ&lt;/h1&gt;

&lt;p&gt;dumpコマンドを使うことで、ファイルシステムがext2,ext3,ext4のものをバックアップできます。
差分バックアップもサポートしていますが、今回はデータ移行が目的なのでフルバックアップを行います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# mount先の/mnt/sd以下をバックアップ
sudo dump -0 -f /data/sd.dump /mnt/sd

# -0でダンプレベル0(フルバックアップ)
# -fでバックアップしたデータのファイル名を指定
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;restoreコマンドでリストア:24d1aea959d1a3feee770b5361f2f824&#34;&gt;restoreコマンドでリストア&lt;/h1&gt;

&lt;p&gt;restoreコマンドを使うことで、dumpコマンドでバックアップしたデータをリストアできます。
バックアップが終わった時点でSDカードをフォーマット済みの新しい物に差し替え、
上記の手順で同じ場所にマウントしてあります。&lt;/p&gt;

&lt;p&gt;なお、restoreコマンドはリストア先を指定できそうなオプションが存在します。
ですが何故か上手く動かず、デフォルトの挙動であるカレントディレクトリにリストアされてしまうため、
事前にマウント先に移動しています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /mnt/sd
restore -r -f /data/sd.dump
# -rでデータをフルリストア
# -fでバックアップしたファイルを指定
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;時間がかかりますが、以上の手順でデータ移行が完了します。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年のpixiv内ラブライブイラストの分析</title>
      <link>http://ota42y.com/blog/2016/02/04/lovelive-pixiv-character-2016/</link>
      <pubDate>Thu, 04 Feb 2016 21:27:18 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/02/04/lovelive-pixiv-character-2016/</guid>
      <description>

&lt;p&gt;HP先行の結果が出ましたね。&lt;br /&gt;
…………後察しください。&lt;/p&gt;

&lt;p&gt;さて、前回(&lt;a href=&#34;http://ota42y.com/blog/2016/01/22/lovelive-pixiv-illust-2015/&#34;&gt;2015年のpixiv内ラブライブイラストの推移
&lt;/a&gt;)に引き続き、pixiv内のラブライブイラストについて見ていきます。&lt;br /&gt;
本来はもう少し内容を書く予定でしたが、落選のダメージがでかいので少なめです…＿(:3 」∠)＿&lt;/p&gt;

&lt;h1 id=&#34;キャラごとの投稿数増加率:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;キャラごとの投稿数増加率&lt;/h1&gt;

&lt;p&gt;映画で人気が出たキャラがいないかと思い、2014年の12月から2015年の12月までに総投稿数がどれくらい増えたかを調べました。&lt;br /&gt;
特に増加率が大きい場合、映画によって人気が上がった可能性が考えられます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-02-04-chara_inc_rate.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-04-chara_inc_rate.png&#34;  width=&#34;40%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;小泉花陽と園田海未がかなり伸びていますが、この二人は去年12月時点では二期が始まってからの聖誕祭が行われていなかったので、前回が少なすぎただけの可能性があります。
一応投稿数の推移を調べてみたところ、他のキャラと同じく全体的に上がっており、劇場版で爆発的に人気が出たとかそういうのではないようです。&lt;/p&gt;

&lt;p&gt;一方で、星空凛、高坂穂乃果、東條希の3人は2期の恩恵を受けた前回からも伸びているため、全体的に人気が上がったor劇場版で大きく伸びたといえそうです。
とはいえ、ほぼ全員が2倍ぐらい伸びているため、劇場版で人気が伸びたと言うほど差があるとは言いづらい結果になっています。
なお、にこは割合ではちょっと少なめですが、去年の投稿数、および総投稿数では一位であり、増加率では劣ってますが増加数ではものすごい量でした。&lt;/p&gt;

&lt;h1 id=&#34;カップリング人気か-単体人気か:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;カップリング人気か、単体人気か&lt;/h1&gt;

&lt;p&gt;イラストは必ずしもカップリングだけとは限らず、単体でも投稿されています。
前回の結果からわかるとおり、にこまき等のカップリングイラストはとても多いですが、キャラ単体とカップリングとでどちらの方が人気なのでしょうか？
そこで、キャラごとにカップリングとキャラ単体、どっちが人気なのかを集計しました。&lt;/p&gt;

&lt;p&gt;なお、カップリングタグがついたものにはキャラの名前のタグがつけられる傾向にあるため、
キャラ単体でカップリングタグがないものと、カップリングタグがあるもの（キャラ単体のタグもあっていい）で集計しています。
また、投稿数だとキャラ別に比較しにくいので、そのキャラの全イラストとの割合で集計しています。&lt;br /&gt;
（全イラスト＝キャラ単体＋カップリングイラスト）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-02-04-chara_cp_rate.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-04-chara_cp_rate.png&#34;  width=&#34;70%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;多くのキャラはキャラ:カップリングイラストが7:3になっていますが、南ことりはキャラ単体の人気が高く、80％以上が単体のイラストになっています。&lt;/p&gt;

&lt;p&gt;一方で西木野真姫と絢瀬絵里はカップリング人気が特に高く、4割を超えています。
昨日の結果からわかるように、この二人はそれぞれ3種類のカップリングがランクインしており（「にこまき」「りんまき」「ほのまき」、「のぞえり」「うみえり」「ほのえり」）、やはりカップリング人気が高いのもうなずけます。&lt;/p&gt;

&lt;h1 id=&#34;サンシャイン:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;サンシャイン&lt;/h1&gt;

&lt;p&gt;サンシャインが発表されておよそ一年たちましたが、pixiv上の反応はどうだったのでしょうか。
というわけで調べてみました。&lt;/p&gt;

&lt;h2 id=&#34;サンシャインイラスト全体:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;サンシャインイラスト全体&lt;/h2&gt;

&lt;p&gt;サンシャインイラスト全体の投稿数の推移をまとめました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-02-04-sun_illust_all.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-04-sun_illust_all.png&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CD発売で一気に盛り上がり、12月の段階では一段落した感じです。
μ&amp;rsquo;sの初期も同じく発売後2ndまでは落ちていったので、およそ同じ傾向にあるようです。&lt;br /&gt;
(参考: &lt;a href=&#34;http://ota42y.com/blog/2014/12/25/lovelive/&#34;&gt;pixivのタグから読み解くラブライブイラストの歩み&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;ただ、1月にAqoursのイベントが行われたり、アニメ化が発表されたりと大きく動いたため、今月にかけてまた一気に盛り返すと思われます。&lt;/p&gt;

&lt;h2 id=&#34;aqoursキャラごとの投稿数推移:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;Aqoursキャラごとの投稿数推移&lt;/h2&gt;

&lt;p&gt;Aqoursメンバーのキャラごとに投稿数推移を見てみました。&lt;br /&gt;
なお、月ごとの投稿数をグラフ化すると上昇下降が激しすぎたので、累計で集計しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-02-04-sun_aqours_illust.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-04-sun_aqours_illust.png&#34;  width=&#34;70%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;センター総選挙では渡辺曜、黒澤ルビィ、桜内梨子の順でしたが、イラストではルビィがずば抜けて多く、次にヨハネ〜1年2年組と固まっています。&lt;/p&gt;

&lt;p&gt;総選挙でも3年生は下にいましたが、イラストでも同じ結果になっています…
とはいえ絶対数ではそもそもそんなに差は無く、μ&amp;rsquo;sのころに比べれば全然多いため、アニメ化や2ndでこれから先どう変化していくのが楽しみです。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;劇場版で爆発的に人気が出たキャラはいなさそう

&lt;ul&gt;
&lt;li&gt;うみぱなが伸びているが、2期以降初めての聖誕祭が今年だったためと思われる&lt;/li&gt;
&lt;li&gt;他の伸びが大きいキャラもそこまでかけ離れてはいない&lt;/li&gt;
&lt;li&gt;にこは伸び率は悪いが投稿数は一番多い&lt;/li&gt;
&lt;li&gt;伸びてないというより、元から凄い人気だっただけかと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;キャラごとにカップリングか単体かはかなり好みが違う

&lt;ul&gt;
&lt;li&gt;西木野真姫と絢瀬絵里はカップリング相手としてかなり人気&lt;/li&gt;
&lt;li&gt;南ことりはカップリングより一人の方が人気&lt;/li&gt;
&lt;li&gt;他のキャラはだいたい単体7:カップリング3ぐらい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サンシャインはいったん落ち着いた

&lt;ul&gt;
&lt;li&gt;μ&amp;rsquo;sの1st以降と同じ傾向&lt;/li&gt;
&lt;li&gt;ただし数自体は全然多い&lt;/li&gt;
&lt;li&gt;総選挙とpixivの人気は違うみたい&lt;/li&gt;
&lt;li&gt;とはいえ、そこまで差は無い&lt;/li&gt;
&lt;li&gt;2016/01で大きく動いたので今後の動きに期待&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サンシャインに関しては先月にかなり大きく動いたため、ここ最近の変化も調べたいと思います。&lt;br /&gt;
ただし、落選ショックから立ち直れたらの話ですが…(´･_･`)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>オーバーライドとオーバーロードは全く別物</title>
      <link>http://ota42y.com/blog/2016/01/31/override-overload/</link>
      <pubDate>Sun, 31 Jan 2016 14:45:49 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/01/31/override-overload/</guid>
      <description>

&lt;p&gt;EffectiveJavaを読んでて、C++でも当てはまるのかな？と思って試してみたら当てはまったので…&lt;/p&gt;

&lt;h1 id=&#34;まとめ:673abe6170b0f105c1aee0e413f3350c&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;オーバーライドされたvirtualなメソッド呼び出しは実行時に決定

&lt;ul&gt;
&lt;li&gt;実態が子クラスなら、親クラスとして扱っても子クラスのメソッドが実行される&lt;/li&gt;
&lt;li&gt;実態が孫クラスの場合は孫クラスのメソッドが呼ばれる&lt;/li&gt;
&lt;li&gt;親から子、孫へと呼び出される関数が探されていく感じ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;オーバーロードされたメソッド呼び出しはコンパイル時に決定

&lt;ul&gt;
&lt;li&gt;virtual関数のように実態で切り替えが出来ない&lt;/li&gt;
&lt;li&gt;実態が子クラスでも、親クラスとして扱うなら親クラスのメソッドが実行される&lt;/li&gt;
&lt;li&gt;一致するものが無い場合は親クラスにキャストして一致するものを探す&lt;/li&gt;
&lt;li&gt;子から親へと一致するものを探していく感じ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;オーバーライドとは:673abe6170b0f105c1aee0e413f3350c&#34;&gt;オーバーライドとは&lt;/h1&gt;

&lt;p&gt;メソッドのオーバーライドとは、親クラスのメソッドを子クラスで再定義することです。
C++では親クラスでvirtualにされているメソッドをオーバーライドすると、
子クラスのオブジェクトを親クラスにキャストしてメソッドを呼び出しても、再定義された子クラスのメソッドが呼ばれます。
(virtualをつけないと親クラスのメソッドが呼ばれます)&lt;/p&gt;

&lt;p&gt;たとえば以下のコードでは、オーバーライドされているためExtのshowメソッドが実行され、「show ext」が表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;cstdio&amp;gt;

class Base {
public:
  virtual void show() { printf(&amp;quot;show base\n&amp;quot;); }
};

class Ext: public Base {
public:
  virtual void show() { printf(&amp;quot;show ext\n&amp;quot;); }
};

int main() {
    Ext *e = new Ext();
    Base *b = static_cast&amp;lt;Base*&amp;gt;(e);
    b-&amp;gt;show();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように、オーバーライドされたメソッドは実行時にどのメソッドが呼ばれるか決定されます。&lt;/p&gt;

&lt;h1 id=&#34;オーバーロードとは:673abe6170b0f105c1aee0e413f3350c&#34;&gt;オーバーロードとは&lt;/h1&gt;

&lt;p&gt;一方、似たような名前でオーバーロードというものもあります。
こちらは継承とは特に関係なく、同じメソッド名で引数の違うものを定義しておくと、
引数の種類をみて自動的に一致するメソッドが実行されます。&lt;/p&gt;

&lt;p&gt;たとえば以下の場合、呼び出しているのはprintという名前の関数ですが、
それぞれ引数が一致する関数が呼ばれるため、base、extと表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;cstdio&amp;gt;

class Base { };

class Ext: public Base { };

void print(Base *b) {printf(&amp;quot;base\n&amp;quot;);}
void print(Ext *b) {printf(&amp;quot;ext\n&amp;quot;);}

int main() {
    Ext *e = new Ext();
    Base *b = new Base();
    print(e);
    print(b);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;オーバーロードはコンパイル時決定:673abe6170b0f105c1aee0e413f3350c&#34;&gt;オーバーロードはコンパイル時決定&lt;/h2&gt;

&lt;p&gt;オーバーライドを見ているとオーバーロードも実行時にどれを呼び出すか決定していそうですが、
実際はコンパイル時にすでにどれが呼び出されるか決定しています。&lt;/p&gt;

&lt;p&gt;そのため、以下のように実態が子クラスだとしても、親クラスとして引数に渡した場合、親クラスのメソッドが呼ばれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;vector&amp;gt;

class Base {
public:
  virtual void show() { printf(&amp;quot;show base\n&amp;quot;); }
};

class Ext: public Base {
public:
  virtual void show() { printf(&amp;quot;show ext\n&amp;quot;); }
};

void print(Base *b) {printf(&amp;quot;base\n&amp;quot;);}
void print(Ext *b) {printf(&amp;quot;ext\n&amp;quot;);}


int main() {
std::vector&amp;lt;Base*&amp;gt; b;
b.push_back(new Base());
b.push_back(new Ext());

for (int i=0; i &amp;lt; b.size(); ++i){
  print(b.at(i));
  b.at(i)-&amp;gt;show();
  }

 return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力は以下の通りです&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;base
show base
base
show ext
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ただし親クラスは検索対象になる:673abe6170b0f105c1aee0e413f3350c&#34;&gt;ただし親クラスは検索対象になる&lt;/h2&gt;

&lt;p&gt;一方でオーバーロードは型が一致するものが無い場合は引数として渡されたクラスの継承ツリーをたどり、一致する親クラスを探してそれにキャストして実行してくれます。
もちろん親クラスから子クラスへはコンパイル時にはわからないため、子クラスから親クラスに検索を行います。
そのため、以下のコードは「ext」と表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;vector&amp;gt;

class Base {
};

class Ext: public Base {
};

class ExtExt: public Ext {
};

void print(Base *b) {printf(&amp;quot;base\n&amp;quot;);}
void print(Ext *b) {printf(&amp;quot;ext\n&amp;quot;);}

int main() {
    ExtExt *b = new ExtExt();
    print(b);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;一意に定まらない場合:673abe6170b0f105c1aee0e413f3350c&#34;&gt;一意に定まらない場合&lt;/h2&gt;

&lt;p&gt;なお、本当にどっちか決められない場合はambiguousというエラーになります&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;vector&amp;gt;

class InterA{
public:
    virtual void interA() = 0;
};

class InterB{
public:
    virtual void interB() = 0;
};

class Base : public InterA, public InterB {
public:
  virtual void interA() { printf(&amp;quot;interA\n&amp;quot;); }
  virtual void interB() { printf(&amp;quot;interB\n&amp;quot;); }
};


void print(InterA *i) { i-&amp;gt;interA(); }
void print(InterB *i) { i-&amp;gt;interB(); }

int main() {
    Base *b = new Base();
    print(b);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;test.cpp:26:5: error: call to &#39;print&#39; is ambiguous
    print(b);
    ^~~~~
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>tmux-change-paneというコマンドを作った</title>
      <link>http://ota42y.com/blog/2016/01/26/tmux-change-pane/</link>
      <pubDate>Tue, 26 Jan 2016 22:24:44 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/01/26/tmux-change-pane/</guid>
      <description>&lt;p&gt;tmux-change-paneというコマンドを作りました。&lt;br /&gt;
&lt;a href=&#34;https://github.com/ota42y/tmux-change-pane&#34;&gt;https://github.com/ota42y/tmux-change-pane&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;tmuxで現在開いているウィンドウの一覧を表示し、peco(pecol)で絞り込んで任意のタブに切り替えるアプリです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-26-tmux_change_pane.gif&#34; alt=&#34;&amp;lt;img src=&amp;quot;/images/blog/2016/2016-01-26-tmux_change_pane.gif&amp;quot;  width=&amp;quot;100%&amp;quot; /&amp;gt;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;似たようなものでswap-paneというものがすでにあります。&lt;br /&gt;
&lt;a href=&#34;https://github.com/abicky/swap-pane&#34;&gt;https://github.com/abicky/swap-pane&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;swap-paneでは複数画面に分割している際に、全ての分割をいったん消して選択画面を表示します。そのため、切り替えのたびに画面が一度フラッシュし、かつ必ず左上に作業領域が移ります。そのため、右下で作業してるような場合にかなり視線の操作が強制的に発生してとても面倒でした。&lt;/p&gt;

&lt;p&gt;tmux-change-paneでは今いる分割領域しか使わないため、作業する位置が大きく変わることがなく、また切り替え中も他の領域の情報を参考にすることができます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年のpixiv内ラブライブイラストの推移</title>
      <link>http://ota42y.com/blog/2016/01/22/lovelive-pixiv-illust-2015/</link>
      <pubDate>Fri, 22 Jan 2016 14:14:08 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/01/22/lovelive-pixiv-illust-2015/</guid>
      <description>

&lt;p&gt;「はぁい！楽しい人生送ってる？」&lt;br /&gt;
私はファイナルライブ落ちたので楽しい人生は送れてません…&lt;/p&gt;

&lt;p&gt;さてーーー&lt;br /&gt;
去年「&lt;a href=&#34;http://ota42y.com/blog/2014/12/25/lovelive/&#34;&gt;pixivのタグから読み解くラブライブイラストの歩み&lt;/a&gt;」というのを書きましたが、それ以降である2015/12月までの変化をまとめました。&lt;/p&gt;

&lt;p&gt;去年との違いに絞っているため、量は少なめですが、それでも多すぎるので分割して更新しています。
今回はカップリングイラストについての変化、次回はキャラごとのイラストの変化とサンシャインの動向についてを予定しています。&lt;br /&gt;
(次: &lt;a href=&#34;http://ota42y.com/blog/2016/02/04/lovelive-pixiv-character-2016/&#34;&gt;2015年のpixiv内ラブライブイラストの分析&lt;/a&gt;)&lt;/p&gt;

&lt;h1 id=&#34;イラスト投稿数推移:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;イラスト投稿数推移&lt;/h1&gt;

&lt;p&gt;こちらが2013年のアニメ一期以降のイラスト投稿数の推移を月ごとにまとめたものになります。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_01.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_01.png&#34;  width=&#34;70%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;アニメ2期で一気に広まり、いったん落ち着きを見せましたが、映画が始まってから投稿数は一気に伸び、夏コミのある8月には月8000枚を超しています。ここ3ヶ月ほどは横ばいのため、いったん落ち着いたようです。&lt;/p&gt;

&lt;h1 id=&#34;カップリング閲覧数:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;カップリング閲覧数&lt;/h1&gt;

&lt;h2 id=&#34;収集方法:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;収集方法&lt;/h2&gt;

&lt;p&gt;前回と同じく、pixivのタグから各カップリングタグ（にこまき、のぞえり等）と、ラブライブもしくはloveliveが両方つけられているイラストの閲覧数の合計を集計しています。
また、「まきりんぱな」や「ことほのうみ」等の3人タグは除外し、完全一致する場合のみ集計しています。
(ラブライブ、loveliveについては!ありなしどちらでも可)&lt;/p&gt;

&lt;h2 id=&#34;順序を気にしない場合の結果:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;順序を気にしない場合の結果&lt;/h2&gt;

&lt;p&gt;「にこまき」と「まきにこ」を区別しない場合の2015年12月までの表は以下のようになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_2015_nodic.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_2015_nodic.png&#34;  width=&#34;80%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1,000,00以上のものは黒色、2,000,000以上のものは青色、10,000,000以上のものは赤色で表示しています。順序を考慮していないため対角線を挟んで値は同じです。&lt;/p&gt;

&lt;p&gt;「のぞえり」「えりのぞ」と「うみえり」「えりうみ」を除くと、ほとんどが固定の順序になっており、順番を考慮してもしなくてもだいたい同じ結果になりそうです。
そのため、以降は集計を簡単にするために特筆しない限り順序を考慮して見ていきます。&lt;/p&gt;

&lt;h2 id=&#34;順序を気にした場合の結果:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;順序を気にした場合の結果&lt;/h2&gt;

&lt;h3 id=&#34;2015年12月までの閲覧数の表:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;2015年12月までの閲覧数の表&lt;/h3&gt;

&lt;p&gt;順序を気にする場合（「にこまき」と「まきにこ」は別物として扱う）、それぞれの結果は以下の通りになります。 なお、方向無しの場合とは違い、500,00以上のものは黒色、1,000,000以上のものは青色、2,000,000以上のものを赤色で表示しています。&lt;/p&gt;

&lt;p&gt;前回と同じく「にこまき」と「まきにこ」の両方がつけられたようなイラストが存在し、こちらの集計では別々にカウントされるため、順番を気にしない場合のグラフとは結果が異なります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_2015_dic.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_2015_dic.png&#34;  width=&#34;80%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2014年12月までの閲覧数の表:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;2014年12月までの閲覧数の表&lt;/h3&gt;

&lt;p&gt;また、企画開始から2014/12月までに投稿されたイラストの閲覧数は以下になります。
この1年で閲覧数は変化しているため実際に去年の同じ時期とは値がだいぶ異なりますが、
このグラフと2015年12月までの表を見比べることで、一年間の変化を調べるのの参考にはなります。
比較する場合は、去年時点で閲覧数はこれより少なかったということを考慮に入れる必要があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_2014_dic.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_2014_dic.png&#34;  width=&#34;80%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;カップリングイラストのまとめ:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;カップリングイラストのまとめ&lt;/h2&gt;

&lt;p&gt;「にこまき」が圧倒的人気なのは今まで通りですが、去年は倍以上の差があった「のぞえり」が大きく増加し、差が縮まっています。
また、去年に比べて閲覧数1,000,000以上のカップリングが11組から19組と、かなり増加しています。なかでも「ゆきあり」はμ&amp;rsquo;sメンバー以外で唯一1,000,000を超えを達成しています。&lt;/p&gt;

&lt;p&gt;色つきのものはほとんどが1.5~1.9倍ぐらいに伸びていますが、「ことぱな」が3倍近く、「まきぱな」「りんまき」が2倍以上と一年生が大きく伸びている印象です。
この中でも「りんまき」は去年の時点でもかなり高く、今年はもっと高くなっていることからかなり人気が上がっていると考えられます。&lt;/p&gt;

&lt;p&gt;「ことうみ」や「りんぱな」はほかのカップリングを引き離し、メジャーカップリングとしての地位が確立しつつあるようです。
一方で「まきぱな」や「ことぱな」「ことえり」等、去年はそれほど閲覧数が多くなかったカップリングが今年になって2倍程度、「ことぱな」に関しては3倍近く伸びており、ここ一年でいろんなカップリングにも注目が集まっているようです。&lt;/p&gt;

&lt;p&gt;なお、今回比較しているのは去年12月までに投稿されたイラストの現在の閲覧数であり、実際に去年の12月時点では現在よりも閲覧数は少ないため、実際の倍率はより大きいです。&lt;/p&gt;

&lt;h1 id=&#34;カップリングイラストの推移:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;カップリングイラストの推移&lt;/h1&gt;

&lt;h2 id=&#34;2015年度カップリングイラスト推移:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;2015年度カップリングイラスト推移&lt;/h2&gt;

&lt;p&gt;では、実際今のトレンドと去年のトレンドはどう変化していったのでしょうか。
残念ながら閲覧数では時系列で推移を見ることはできませんが、投稿数は日時と紐付いているため、変化を見ることができます。&lt;/p&gt;

&lt;p&gt;そこで、2015年の順序ありカップリングで赤文字になっている、閲覧数2,000,000以上の12カップリングと、それと同じくらい投稿数の多い三人組について、去年からの投稿数の推移をまとめました。
右側の凡例は、2015/12月現在で投稿数の多いもの順に並べています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_cp_graph_all.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_cp_graph_all.png&#34;  width=&#34;80%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2015年度カップリング推移:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;2015年度カップリング推移&lt;/h2&gt;

&lt;p&gt;上記のグラフは「にこまき」、「のぞえり」のぶっちぎり感がよく出ていますが、ほかのカップリングについては見にくいので、最大値を「ことうみ」に合わせて調節したグラフが以下になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_cp_graph_cut.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_cp_graph_cut.png&#34;  width=&#34;80%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「ほのうみ」と「りんまき」はほぼ同数のため被ってしまって見えていませんが、同じ線と考えて問題ありません。&lt;/p&gt;

&lt;h2 id=&#34;カップリング増加率:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;カップリング増加率&lt;/h2&gt;

&lt;p&gt;また、各カップリングの増加率は以下の通りです。&lt;br /&gt;
200%以上のものに関しては赤字にしてあります。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_cp_inc_rate.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_cp_inc_rate.png&#34;  width=&#34;20%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;カップリングイラストの推移まとめ:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;カップリングイラストの推移まとめ&lt;/h2&gt;

&lt;p&gt;「ことうみ」「ほのうみ」「ことほのうみ」と園田海未を含むカップリングが大きく増えています。&lt;br /&gt;
園田海未は2014年の聖誕祭が2期前であり、2015年でその効果が含まれている事を考慮すると、ようやく本来の人気に追いついた感じがします。
また、「りんまき」も増加しており、かつ閲覧数もかなり増加していたことから、「りんまき」は2015年でかなり人気になったと思われます。&lt;/p&gt;

&lt;p&gt;去年もそうでしたが、閲覧数では「ことうみ」の方が「りんぱな」よりも多いのに対し、投稿数では「りんぱな」の方が「ことうみ」よりも多い状態になっています。
この現象は「ことほの」と「ほのえり」にも見られているため、勘違いではなさそうですが、いまいち原因がわからないので、もう少し調査しようと思います…&lt;/p&gt;

&lt;h1 id=&#34;ほのキチの人気が分散している問題:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;ほのキチの人気が分散している問題&lt;/h1&gt;

&lt;p&gt;去年もそうでしたが、カップリング投稿者数では穂乃果を含むカップリングは上位にはいませんが、
代わりに4人との別々のカップリングと、3人組がランクインしており、ランキングに一番多く載っているキャラになっています。（ことほの、ほのえり、ほのうみ、ほのまき、ことほのうみ）
さらにこれらのカップリングはだいたい似たような順位についているため、穂乃果はこれといったカップリングがなく、人気が複数のカップリングに分散していそうです。&lt;br /&gt;
(絢瀬絵里もカップリングだけなら4つ載っていますが、穂乃果ほど分散してるとは考えにくい)&lt;/p&gt;

&lt;p&gt;そこで、仮に4種類のカップリングが分散していなかった場合、どれくらいの投稿数になるかを調べてみました。（ことほのうみは3人組なので同列にしてしまうのはおかしいと思うので省いてあります）&lt;/p&gt;

&lt;h2 id=&#34;他カップリングの分散具合の調査:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;他カップリングの分散具合の調査&lt;/h2&gt;

&lt;p&gt;他のカップリングを見る限り、複数のカップリングが同じ人気になることはなく、偏りが出るのが普通のようです。
今回は4つのカップリングが分散していなかった場合と、2つに分散していた場合とを想定して集計します。&lt;/p&gt;

&lt;p&gt;2つに分散している場合、どのような比率で分散しているかを調べるため、同じく二つに分散している「ことうみ」「ことほの」、「りんまき」「りんぱな」、「のぞえり」「にこのぞ」、「にこまき」「にこのぞ」の比率を参考にします。
これらのカップリングの比率は以下のようになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_cp_div_rate.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_cp_div_rate.png&#34;  width=&#34;30%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;多い方の割合は約0.65~0.88と、どれも違った偏りを見せています。
今回は偏りが最も少ない「りんぱな」の0.649を使って算出します。&lt;/p&gt;

&lt;h2 id=&#34;穂乃果を含むカップリングが分散していなかった場合:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;穂乃果を含むカップリングが分散していなかった場合&lt;/h2&gt;

&lt;p&gt;高坂穂乃果を含むカップリングが分散していなかった場合を想定したグラフは以下の通りになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_honoka.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_honoka.png&#34;  width=&#34;70%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;図のオレンジ色の「ほのキチ」がカップリングが分散していなかった場合の値、黒い「ほのキチ/2」がカップリングが「りんぱな」と同じ割合で二つに分散していた場合のです。
（他の割合ではもっと上になります）&lt;/p&gt;

&lt;p&gt;見ての通り、二種類のカップリングに集約された場合である「ほのキチ/2」は「りんぱな」や「ことうみ」とだいたい同じぐらいの位置につけています。
このように、穂乃果を含むカップリングは投稿数的には人気のあるカップリングではありますが、4つに分散しているためにあまり目立っていない状態のようです。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;イラスト数は凄い伸びてる

&lt;ul&gt;
&lt;li&gt;映画効果凄い&lt;/li&gt;
&lt;li&gt;それは紅白も出ますよね…&lt;/li&gt;
&lt;li&gt;ちょっと落ち着いてるがそれでも去年の夏コミの時期レベル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;カップリングは全体的に伸びてる

&lt;ul&gt;
&lt;li&gt;「にこまき」「のぞえり」は相変わらず人気&lt;/li&gt;
&lt;li&gt;「ことうみ」が「りんぱな」ぐらいメージャーカップリングになった&lt;/li&gt;
&lt;li&gt;メジャーではなかったカップリングも人気が上がっている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;穂乃果を含むカップリングは分散している

&lt;ul&gt;
&lt;li&gt;穂乃果のいるカップリング自体は人気がある&lt;/li&gt;
&lt;li&gt;王道カップリングがなく、いろんなカップリングが同じように人気&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次: &lt;a href=&#34;http://ota42y.com/blog/2016/02/04/lovelive-pixiv-character-2016/&#34;&gt;2015年のpixiv内ラブライブイラストの分析&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>論文紹介「Corona: Positioning Adjacent Device with Asymmetric Bluetooth Low Energy RSSI Distributions」</title>
      <link>http://ota42y.com/blog/2015/12/25/hci_advent_25/</link>
      <pubDate>Fri, 25 Dec 2015 00:39:52 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/12/25/hci_advent_25/</guid>
      <description>

&lt;h1 id=&#34;まとめ:b5ab9fb37652233f44e2716edb31652a&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;BluetoothのRSSIだけで対象のデバイスがどこにいるかわかる

&lt;ul&gt;
&lt;li&gt;動画を見るのが手っ取り早い&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VqAoxVhO4xA&#34;&gt;https://www.youtube.com/watch?v=VqAoxVhO4xA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;BluetoothのRSSIが位置によって違うことを利用している

&lt;ul&gt;
&lt;li&gt;RSSIを学習すれば、どこにあるか予測可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;オリジナルより精度が悪いて実装をしてみたが、それでも結構ちゃんと動く

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ota42y/corona-clone&#34;&gt;https://github.com/ota42y/corona-clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/wsglHEhtYCM&#34;&gt;https://youtu.be/wsglHEhtYCM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;はじめに:b5ab9fb37652233f44e2716edb31652a&#34;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;このエントリは「ヒューマンコンピュータインタラクション論文紹介 Advent Calendar 2015」の25日目のものです。&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/advent-calendar/2015/hci&#34;&gt;http://qiita.com/advent-calendar/2015/hci&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;紹介する論文:b5ab9fb37652233f44e2716edb31652a&#34;&gt;紹介する論文&lt;/h1&gt;

&lt;p&gt;今回もUIST2015から、&lt;a href=&#34;http://dl.acm.org/citation.cfm?doid=2807442.2807485&#34;&gt;Corona: Positioning Adjacent Device with Asymmetric Bluetooth Low Energy RSSI Distributions&lt;/a&gt;という論文を紹介します。&lt;br /&gt;
これはBluetoothのRSSIだけを利用し、デバイスの相対的な位置を検出する手法についての論文です。&lt;/p&gt;

&lt;p&gt;動画はこちらになります。&lt;br /&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/VqAoxVhO4xA&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h1 id=&#34;手法について:b5ab9fb37652233f44e2716edb31652a&#34;&gt;手法について&lt;/h1&gt;

&lt;p&gt;Bluetoothのチップの位置はデバイスの中心からずれたところに置かれているため、
各辺からチップまでの距離はそれぞれ異なり、結果としてRSSIが異なってきます。この距離の違いから来るRSSIの違いを学習しておくことで、
現在のRSSIからどの位置に置かれているかが識別できるというのがこの論文で提案している手法です。&lt;/p&gt;

&lt;p&gt;わかりにくいと思うので図にしました。灰色の長方形内にあり、中心線上にない任意の青色の点から、
オレンジで表された各辺までの距離が全て異なるということがわかると思います。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/images/blog/2015/2015-12-25-corona-example.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2015/2015-12-25-corona-example.png&#34;  width=&#34;20%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実際、私の手元のタブレットでは左上にチップがあるため、右辺や下辺は遠く、上辺や左辺は近くなっており、RSSIも-40~-20までかなりの差が出ます。
値は常に若干上下しますが直近数秒でまとめるとだいたい安定しているので、確かに識別に使えそうです。&lt;/p&gt;

&lt;h1 id=&#34;やってみた:b5ab9fb37652233f44e2716edb31652a&#34;&gt;やってみた&lt;/h1&gt;

&lt;p&gt;RSSIだけで位置が測定できる！と聞いても半信半疑だったので、実際にやってみました。&lt;br /&gt;
(15秒あたりから開始)&lt;br /&gt;
&lt;a href=&#34;https://github.com/ota42y/corona-clone&#34;&gt;https://github.com/ota42y/corona-clone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実際に動いている様子は以下の通りです。&lt;br /&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wsglHEhtYCM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;オリジナルの手法をそのまま実装するのが大変だったので、学習量を少なめに、かつ適当なベイズ識別期に投げるだけとかなり簡素化しています。&lt;br /&gt;
動画の通り、かなり簡素化した状態でもわりといい精度でどの位置にあるかを識別できていますので、
ちゃんとオリジナルのを実装すれば相当な精度になることが予想できます。&lt;/p&gt;

&lt;h1 id=&#34;その他:b5ab9fb37652233f44e2716edb31652a&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;Bluetoothチップが中心からずれていることに依存しているので、今後中心や中心線上に乗ったデバイスに対しては識別できるのか心配です。
たとえば横方向の中心線上（上辺と下辺から等距離）の場合、左右では距離が違いますが上下では距離が同じになります。
もちろん片方のデバイスが等距離でももう片方が等距離でないなら、上に置いたときと下に置いたときで距離が変わるため識別可能ですが、どちらも同じ距離になるようにおいた場合は判別ができなさそうです…&lt;/p&gt;

&lt;p&gt;とはいえ、動画のサムネイルや論文の図にあるRSSIの等高線が円ではなく多角形の形をしていることから、
内部の基板やデバイスの材質によって大きく変動するため、完全にRSSIが同じ2点が存在するというのはほぼあり得ないと考えて良さそうです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>論文紹介「Unravel: Rapid Web Application Reverse Engineering via Interaction Recording, Source Tracing, and Library Detection」</title>
      <link>http://ota42y.com/blog/2015/12/13/hci_advent_13/</link>
      <pubDate>Sun, 13 Dec 2015 07:01:33 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/12/13/hci_advent_13/</guid>
      <description>

&lt;h1 id=&#34;まとめ:9913c53850aa0622c9092d02fc2a6ba6&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Webページのリバースエンジニアリングの支援をする研究&lt;/li&gt;
&lt;li&gt;コール情報やDOMの変化を記録、閲覧可能に&lt;/li&gt;
&lt;li&gt;該当のソースを見つけるまでの時間が早くなる&lt;/li&gt;
&lt;li&gt;chrome拡張が公開されているので実際に試せる&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;はじめに:9913c53850aa0622c9092d02fc2a6ba6&#34;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/hci&#34;&gt;「ヒューマンコンピュータインタラクション論文紹介 Advent Calendar 2015」&lt;/a&gt;の13日目のものです。&lt;/p&gt;

&lt;p&gt;今回はUIST20015からWeb系の論文でいいのがあったので紹介します。&lt;br /&gt;
実は昨日のUIST勉強会で読んだので、参加してる人にとってはまたかよ…ってなりますが、&lt;br /&gt;
去年を見る限りUIST勉強会は資料を公開しないようなので、参加しなかった人にとってはお得なはずです…&lt;/p&gt;

&lt;h1 id=&#34;論文の内容:9913c53850aa0622c9092d02fc2a6ba6&#34;&gt;論文の内容&lt;/h1&gt;

&lt;p&gt;今回紹介する論文は「&lt;a href=&#34;http://dl.acm.org/citation.cfm?id=2807468&#34;&gt;Unravel: Rapid Web Application Reverse Engineering via Interaction Recording, Source Tracing, and Library Detection&lt;/a&gt;」です。
この論文は、UnravelというWebページのリバースエンジニアリングを支援するツールについての論文です。&lt;/p&gt;

&lt;p&gt;このツールはまず、Webページ上で動いているDOMの変化やJSのコール情報を記録していきます、
そして、Chromeのデベロッパーツールにタブを追加し、そこに変更回数や呼び出し回数でソートして情報を表示します。
これにより、Webページ上での動きが、どのようなJSとDOMの変化によって実現されているのかを簡単に調べることができます。&lt;/p&gt;

&lt;p&gt;動画はこちらになります。&lt;br /&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/mhY7jvRFXJ8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h1 id=&#34;先行研究との比較:9913c53850aa0622c9092d02fc2a6ba6&#34;&gt;先行研究との比較&lt;/h1&gt;

&lt;p&gt;論文中でいくつかあげられていますが、先行研究は条件が限定的だったり、巨大なサイトを対象にしたときに動作が遅くなってしまうのに対し、
このツールは任意のサイトに適応可能で、巨大なサイトでも遅くならないと述べられています。&lt;/p&gt;

&lt;h1 id=&#34;実装方法:9913c53850aa0622c9092d02fc2a6ba6&#34;&gt;実装方法&lt;/h1&gt;

&lt;p&gt;documentへの書き込みを全てフックして情報を保存してるらしいです。
そのため、他の研究に比べて取れる情報が限定的になりますが、任意のサイトに適応可能になっているとのことです。
また、後述するようにソースが公開されているので、詳しく知りたい方はコードを読むのがいいと思います。&lt;/p&gt;

&lt;h1 id=&#34;実験:9913c53850aa0622c9092d02fc2a6ba6&#34;&gt;実験&lt;/h1&gt;

&lt;p&gt;このツールのありなしで、TumblerやApple等のサイトのアニメーションを再現するタスクを行い、途中のチェックポイントごとに比較をしたそうです。
結果として、システムアリの方が関連するソースの最初に見つけるまでの時間が50%短縮され、全体としても30%短縮されたそうです。
ただし、関連するコードを見つけてからタスク終了までの時間に差は無いらしく、動きからコードの位置を調べるのには役に立っているが、
ソースコードが理解しやすくなっているわけではなさそうです。
なお、上級者と初級者で特に差は無かったそうです。&lt;/p&gt;

&lt;p&gt;残念なことに、論文ではこのツールのありなしでしか比較しておらず、先行研究との比較がされていませんでした。
このツールの押しの1つであるポータブル製（環境が特殊で無くてもどこでも使える）は比較が難しいですが、
もう一つの巨大なサイトでも遅くならないという速度に関しては比較できそうなので、そっちは既存のやつとの差を調べてほしかったと思いました。&lt;/p&gt;

&lt;h1 id=&#34;その他:9913c53850aa0622c9092d02fc2a6ba6&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;このツールは公開されているので普通に使う事が出来ます。&lt;br /&gt;
&lt;a href=&#34;https://github.com/NUDelta/Unravel&#34;&gt;https://github.com/NUDelta/Unravel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただし、minifyされているとJSのコール情報部分がとてもわかりにくいので、事前にunminifyしておく必要があります。&lt;br /&gt;
（実験ではunminify済みの状態で行った）&lt;/p&gt;

&lt;p&gt;知っているコードならともかく、知らないコードに対しては動きと対応する部分を見つけるのはとても大変なので、
もの凄く便利そうでした。自動minifyとかが出来ると、普通に実用的なツールになると思います。&lt;/p&gt;

&lt;p&gt;なお、今日が&lt;a href=&#34;http://qiita.com/advent-calendar/2015/hci&#34;&gt;「ヒューマンコンピュータインタラクション論文紹介 Advent Calendar 2015」&lt;/a&gt;の13日目ですが、14日目はあいているのでおすすめな論文がある人や面白い論文を読んだことがある人は是非！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GithubのContributionsを使ってアウトプットを500日続ける</title>
      <link>http://ota42y.com/blog/2015/12/09/500_output/</link>
      <pubDate>Wed, 09 Dec 2015 07:00:01 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/12/09/500_output/</guid>
      <description>

&lt;p&gt;前から&lt;a href=&#34;http://ota42y.com/blog/2014/12/31/150-output/&#34;&gt;GithubのContributionsを使ってアウトプットを150日続ける&lt;/a&gt;というものを続けていましたが、ついに500日たちました。ちょうどいい区切りなので振り返ってみようと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/images/blog/2015/2015-12-08-500-output.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2015/2015-12-08-500-output.png&#34;  width=&#34;100%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;良かったこと:8a0d3fbcafca7fe52cfeb7820ee0b7a6&#34;&gt;良かったこと&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;常にプログラムを書いたり、物事を調べてまとめる習慣が出来た&lt;/li&gt;
&lt;li&gt;「いつかやろう」を放置せずに取りかかるようになった&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;およそ前に考えたとおり、アウトプット量を確保するために色々なことに手を出し、良い習慣になっていたと思います。&lt;/p&gt;

&lt;h1 id=&#34;問題点:8a0d3fbcafca7fe52cfeb7820ee0b7a6&#34;&gt;問題点&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;一つ一つのアウトプットの質が安定しない&lt;/li&gt;
&lt;li&gt;読書など長いインプットをしなくなった&lt;/li&gt;
&lt;li&gt;github以外のアウトプットができなくなった&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特に質が悪い部分に関しては前から予想できており、
そのときはまずは質より量の方が重要と思い、特に対策はしませんでした.
ただ、最近は量は担保できるようになったので、次は質かな…と思っています。&lt;/p&gt;

&lt;p&gt;また、本を読むなど量の少ないアウトプットしか出来ない事に対して消極的になってしまいました。
これは質の高い1つのアウトプットより、コードを書くなど試行錯誤した安定しないアウトプットの方が量が稼げるため、
最適戦略をとるとどうしてもいいアウトプットを作る方向に行かないのが原因です。&lt;/p&gt;

&lt;p&gt;また、計測をGithubでやっている関係上、QiitaなどGithub以外のアウトプットは加算されないため、ほとんどしなくなっていました。&lt;/p&gt;

&lt;h1 id=&#34;これから:8a0d3fbcafca7fe52cfeb7820ee0b7a6&#34;&gt;これから&lt;/h1&gt;

&lt;p&gt;利点もいくつかありましたが、同時に欠点も見えてきました。
特にgithubに固定化されてしまうことや、毎日更新という量に縛られる事が問題となっている気がします。&lt;/p&gt;

&lt;p&gt;そのため、次からは月に5回以上の文章によるアウトプットをする方向で行こうと思います。
これにより、github以外のアウトプットも換算できますし、コードを書いてそれを文章でまとめればコーディングも換算できます。
また、回数が減ったことにより量を確保することに縛られなくなるため、時間がかかるような事も出来るようになります。&lt;/p&gt;

&lt;p&gt;とりあえず今月から初めて見ようと思います。
毎月前月の分をまとめることで（まとめエントリはカウント外）、継続しているかのチェックにもなりそうです。&lt;/p&gt;

&lt;p&gt;しばらくやってみて、続かなそうならまた一日一コミットに戻そうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wunderlistでサマリー出力をする</title>
      <link>http://ota42y.com/blog/2015/12/08/wl_report/</link>
      <pubDate>Tue, 08 Dec 2015 07:58:08 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/12/08/wl_report/</guid>
      <description>

&lt;p&gt;最近知った&lt;a href=&#34;https://www.wunderlist.com&#34;&gt;Wunderlist&lt;/a&gt;が、全プラットフォーム使えたり、
モバイルアプリが使いやすかったり、タスクがショートカットで追加できるデスクトップアプリがあったりと、なかなか便利そうなので今試しに使っています。&lt;/p&gt;

&lt;p&gt;ただ、終了したタスク一覧をさっと見られないため、あれやったっけ？とか、今週疲れ気味かも…とか、がんばり具合とかがわかりません。
たぶんあった方が良さそうな気がしたので、過去一週間に完了したタスクを日ごとに分けてレポート出力するやつを作りました。&lt;/p&gt;

&lt;p&gt;すでにCLIから一覧を取ってJSONで書き出せるものがあるので、これの出力を利用します。&lt;br /&gt;
&lt;a href=&#34;https://github.com/robdimsdale/wl&#34;&gt;https://github.com/robdimsdale/wl&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;使い方:5c0e355a2ac83f934f41ecabb47e608e&#34;&gt;使い方&lt;/h1&gt;

&lt;p&gt;以下のように利用します。&lt;br /&gt;
&lt;code&gt;
wl tasks --completed true -j | go run report.go
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;こんな感じに日ごとに終了したタスクがリスト化されていきます。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2015-11-30 10 tasks completed&lt;br /&gt;
07:37:51 mail check&lt;br /&gt;
07:59:23 review PR&lt;br /&gt;
22:06:09 create blog entry&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;コード:5c0e355a2ac83f934f41ecabb47e608e&#34;&gt;コード&lt;/h1&gt;

&lt;p&gt;コードはこれです。
&lt;script src=&#34;https://gist.github.com/ota42y/f40dd18687d3bd5350d8.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;その他:5c0e355a2ac83f934f41ecabb47e608e&#34;&gt;その他&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;全部のタスクを並べるのはつらいので、3日以前は終了タスク数のみとかにしたい&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;コマンドが面倒なので、単体で完結したい

&lt;ul&gt;
&lt;li&gt;単体で完結するようになったらgithubのリポジトリ作るかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;もうちょっと見やすくしたい&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MongoDB の update は部分 update ではない</title>
      <link>http://ota42y.com/blog/2015/12/02/mongodb_update/</link>
      <pubDate>Wed, 02 Dec 2015 07:25:25 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/12/02/mongodb_update/</guid>
      <description>

&lt;h1 id=&#34;まとめ:621f39d31cd5b5462567615247739831&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB の update はレコードのID以外の要素を全て置き換える&lt;/li&gt;
&lt;li&gt;指定したカラムだけ置き換えてはくれない&lt;/li&gt;
&lt;li&gt;部分 update したい場合は専用の方法でクエリを作る&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;mongodb-の-update-はレコードをほぼ全て置き換える:621f39d31cd5b5462567615247739831&#34;&gt;MongoDB の update はレコードをほぼ全て置き換える&lt;/h1&gt;

&lt;p&gt;以下のように insert して update を実行します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.test.insert({a: 1})
db.test.update({a:1}, {b: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# ruby版
mongo = Mongo::Client.new(&amp;quot;mongodb://localhost&amp;quot;)
col = mongo[:test]
col.insert_one({ a: 1 })
col.find(a: 1).replace_one({b:1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;insert と update とでキーが違うため、指定した部分だけが書き換わり&lt;br /&gt;
&lt;code&gt;{a:1, b:1}&lt;/code&gt;&lt;br /&gt;
となりそうですが、実際は&lt;br /&gt;
&lt;code&gt;{b:1}&lt;/code&gt;&lt;br /&gt;
と、後のデータで完全上書きされてしまいます。&lt;/p&gt;

&lt;p&gt;このように、MongoDB の update はデータの全置き換えを実行します。&lt;br /&gt;
なお、ObjectId は変わらないため、消して再度 insert しているのではなく、ObjectId 以外のデータを全て変更しています。&lt;/p&gt;

&lt;h1 id=&#34;回避方法:621f39d31cd5b5462567615247739831&#34;&gt;回避方法&lt;/h1&gt;

&lt;p&gt;もちろん毎度上書きだととても不便なため、回避方法が存在します。&lt;/p&gt;

&lt;p&gt;以下のように、update する際に &lt;code&gt;$set&lt;/code&gt; のキーとして変更するデータのみを渡します。&lt;br /&gt;
これにより、指定したものだけ書き換えられるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.test.update({a:1}, {$set:{b: 1}})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# ruby版
col.insert_one({ a: 1 })
col.find(a: 1).replace_one(&#39;$set&#39; =&amp;gt; {b:1})
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>バッカソン（おばかハック）! #MA11 に参加してきた</title>
      <link>http://ota42y.com/blog/2015/10/18/ma11/</link>
      <pubDate>Sun, 18 Oct 2015 22:23:57 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/10/18/ma11/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://hacklog.jp/events/view/61&#34;&gt;http://hacklog.jp/events/view/61&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こんなの(&lt;a href=&#34;http://hacklog.jp/works/4849&#34;&gt;バッカライザー&lt;/a&gt;)を作ったところ、Microsoft賞を頂きましたヽ(´ー｀)ノ&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/images/blog/2015/2015-10-18 ma11.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2015/2015-10-18 ma11.jpg&#34;  width=&#34;20%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下反省も含めたメモメモ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://c9.io/&#34;&gt;Cloud.9&lt;/a&gt;便利

&lt;ul&gt;
&lt;li&gt;いい点&lt;/li&gt;
&lt;li&gt;オンラインIDE+公開サーバ&lt;/li&gt;
&lt;li&gt;複数人で同時編集可能&lt;/li&gt;
&lt;li&gt;作ってその場で動かせて共有可能なのでもの凄い便利&lt;/li&gt;
&lt;li&gt;sudoも自由にできる&lt;/li&gt;
&lt;li&gt;はまりどころ&lt;/li&gt;
&lt;li&gt;謎の挙動が多い

&lt;ul&gt;
&lt;li&gt;URLの末尾にいつの間にか-1がついてたり&lt;/li&gt;
&lt;li&gt;プログラムから自分のURLを取ると:80がついていたり(URLには無い)&lt;/li&gt;
&lt;li&gt;コンソールが8行ぐらいしか出なかったり(同時に開いている一番小さいサイズになる?)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.projectoxford.ai/&#34;&gt;Microsoft Project Oxford&lt;/a&gt;便利

&lt;ul&gt;
&lt;li&gt;精度のいい文字認識&lt;/li&gt;
&lt;li&gt;顔認識も&lt;/li&gt;
&lt;li&gt;Cloud9の公開ディレクトリに保存してURLを渡すだけで終わる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;チーム分担

&lt;ul&gt;
&lt;li&gt;全員エンジニアなだけあって、役割分担は凄く上手くいった&lt;/li&gt;
&lt;li&gt;特にタスク切らなくても勝手に動いていく感じ&lt;/li&gt;
&lt;li&gt;実装、コンテンツ作成、調査と分担もいい感じ&lt;/li&gt;
&lt;li&gt;結果としては後述するように着地点の設定が甘かった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;アイデアだし

&lt;ul&gt;
&lt;li&gt;そもそも技術的に難しそうなチャレンジにフォーカスして中身に集中できなかった&lt;/li&gt;
&lt;li&gt;認識部分をどう作るか？にフォーカスしすぎた&lt;/li&gt;
&lt;li&gt;今回のハッカソンの趣向的に、モノの仕上がり具合やプレゼンに集中すべきだった&lt;/li&gt;
&lt;li&gt;チャレンジよりコンテンツ作りに振るべき&lt;/li&gt;
&lt;li&gt;思しくすることに時間を割けなかった&lt;/li&gt;
&lt;li&gt;発表プレゼンとかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;技術力不足

&lt;ul&gt;
&lt;li&gt;画像認識によるシール判別をしたかったが時間が足りず断念&lt;/li&gt;
&lt;li&gt;事前にある程度作れるものをまとめておいた方が絶対にいい&lt;/li&gt;
&lt;li&gt;何を作るかだけにフォーカスする&lt;/li&gt;
&lt;li&gt;登録された画像パターンの検索は何かと便利そうだし作っておいていいかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;色々と問題点が明らかになりましたが、やっていてとても楽しかったです。&lt;br /&gt;
今回のMAはもう終わりますが、次のMAは色々なハッカソンに参加してみようと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debian7にapt-getでmongodb3.0が入れられない</title>
      <link>http://ota42y.com/blog/2015/10/14/mongodb3-debian7-32bit/</link>
      <pubDate>Wed, 14 Oct 2015 23:24:16 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/10/14/mongodb3-debian7-32bit/</guid>
      <description>

&lt;h1 id=&#34;まとめ:6fb0a1a816b71cb934be2e92d07fd3af&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Debian 7 32bitではmongodb3.0はapt-getで入れられない&lt;/li&gt;
&lt;li&gt;tarballで入れられるが、前のmongodbとファイル位置が違うので注意&lt;/li&gt;
&lt;li&gt;面倒ならdbファイルを&lt;code&gt;/data/db&lt;/code&gt;に移動してしまうのが楽そう&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;debian-7-32bitのmongodb:6fb0a1a816b71cb934be2e92d07fd3af&#34;&gt;Debian 7 32bitのmongodb&lt;/h1&gt;

&lt;p&gt;Debian 7 のmongodbを以下の公式サイトの手順で入れようとしても、&lt;br /&gt;
3.0が見つからず最高でも2.6までしか入れる事ができません(2015/10/12現在)&lt;br /&gt;
&lt;a href=&#34;https://docs.mongodb.org/master/tutorial/install-mongodb-on-debian/&#34;&gt;Install MongoDB on Debian&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;mongodbのaptのリポジトリを見ると、&lt;a href=&#34;http://repo.mongodb.org/apt/debian/dists/wheezy/mongodb-org/3.0/main/binary-amd64/&#34;&gt;amd64版&lt;/a&gt;にはたくさんありますが、&lt;br /&gt;
&lt;a href=&#34;http://repo.mongodb.org/apt/debian/dists/wheezy/mongodb-org/3.0/main/binary-i386/&#34;&gt;i386版&lt;/a&gt;のリポジトリは空です。&lt;/p&gt;

&lt;p&gt;このため、apt-getでmongodb3.0系を入れるのはできないらしく、&lt;br /&gt;
tarballからインストールする必要があります。&lt;/p&gt;

&lt;p&gt;ただし、aptで入れた2.6からアップデートし、既存のDBファイルを使う場合は若干面倒になります。&lt;/p&gt;

&lt;h1 id=&#34;aptからのアップグレード時の注意点:6fb0a1a816b71cb934be2e92d07fd3af&#34;&gt;aptからのアップグレード時の注意点&lt;/h1&gt;

&lt;p&gt;新規に入れる場合は公式サイトの手順通りですが、aptからのアップグレードの場合は問題が起きます。&lt;br /&gt;
公式サイトの手順では、ログインユーザで&lt;code&gt;/data/db&lt;/code&gt;をDB書き込み先として使いますが、&lt;br /&gt;
aptで入れた2.6系統は特に設定しない場合、mongodbユーザで&lt;code&gt;/var/lib/mongodb&lt;/code&gt;にdbファイルを書き込んでいるため、&lt;br /&gt;
そのままですと前のDBが読み込めません。&lt;/p&gt;

&lt;p&gt;そのため、&lt;code&gt;/usr/bin&lt;/code&gt;以下にmongodbを展開し、mongodbユーザで実行可能にするか、&lt;br /&gt;
mongodbユーザがtarballの解凍と実行をする必要があります。&lt;br /&gt;
今回は後者の方式をとります。&lt;/p&gt;

&lt;h1 id=&#34;インストール手順:6fb0a1a816b71cb934be2e92d07fd3af&#34;&gt;インストール手順&lt;/h1&gt;

&lt;p&gt;公式サイトの手順からインストール先を変え、実行時にオプションを指定しているだけです。&lt;br /&gt;
&lt;a href=&#34;https://docs.mongodb.org/master/tutorial/install-mongodb-on-linux/&#34;&gt;Install MongoDB From Tarbal&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget http://downloads.mongodb.org/linux/mongodb-linux-i686-3.0.6.tgz
tar zxvf mongodb-linux-i686-3.0.6.tgz
sudo cp mongodb-linux-i686-3.0.6/bin/* /usr/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動は以下のようにユーザとdb位置を指定します&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo -u mongodb mongod --dbpath /var/lib/mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;まとめ-1:6fb0a1a816b71cb934be2e92d07fd3af&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;起動が面倒なら、&lt;code&gt;/var/lib/mongodb&lt;/code&gt;を&lt;code&gt;/data/db&lt;/code&gt;に移動して所有権を書き換えるのもいいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IBM BluemixのAlchemyAPIで超簡単に画像認識する</title>
      <link>http://ota42y.com/blog/2015/10/11/alchemyapi/</link>
      <pubDate>Sun, 11 Oct 2015 22:39:33 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/10/11/alchemyapi/</guid>
      <description>

&lt;h1 id=&#34;まとめ:ab936406d233aece22e2039cdf3abfc2&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;AlchemyAPIに画像をアップロードすると識別結果を返してくれる&lt;/li&gt;
&lt;li&gt;無料で使える&lt;/li&gt;
&lt;li&gt;ライブラリも豊富&lt;/li&gt;
&lt;li&gt;画像認識がAPIで呼び出せる世界の可能性凄い

&lt;ul&gt;
&lt;li&gt;画像認識ライブラリすら必要ない世界…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;alchemyapiで画像認識が凄い簡単にできる:ab936406d233aece22e2039cdf3abfc2&#34;&gt;AlchemyAPIで画像認識が凄い簡単にできる&lt;/h1&gt;

&lt;p&gt;先日のABPro2015でこんな&lt;a href=&#34;http://ota42y.com/blog/2015/10/10/abpro2015/&#34;&gt;発表をしました&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/39s0Ljtiud4tKP&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/ota42y/ss-53771391&#34; title=&#34;身近なサイバー攻撃から身を守る&#34; target=&#34;_blank&#34;&gt;身近なサイバー攻撃から身を守る&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/ota42y&#34; target=&#34;_blank&#34;&gt;ota42y&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;ここで画像の判定にAlchemyAPIを利用しています。&lt;br /&gt;
Twitterの画像URLをAPIに投げるだけでかなり精度のいい識別結果を返してくれるため、とても便利です。&lt;/p&gt;

&lt;h1 id=&#34;alchemyapiとは:ab936406d233aece22e2039cdf3abfc2&#34;&gt;AlchemyAPIとは？&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.alchemyapi.com/&#34;&gt;http://www.alchemyapi.com/&lt;/a&gt;&lt;br /&gt;
IBMが買収した機械学習によるデータ分析会社です。&lt;br /&gt;
画像認識や自然言語処理に強い会社だったらしく、その一部を&lt;a href=&#34;https://console.ng.bluemix.net/home/&#34;&gt;IBM Bluemix&lt;/a&gt;で提供しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://console.ng.bluemix.net/home/&#34;&gt;IBM Bluemix&lt;/a&gt;は最小構成なら無料で使え、&lt;br /&gt;
(おそらく)AlchemyAPIの使用権はアカウントを持っていれば1日1000件まで無料らしいので、&lt;br /&gt;
回数は限られますが無料で画像認識ができます。&lt;/p&gt;

&lt;p&gt;どうやらIBM Bluemixは単なるクラウドサービスではなく、&lt;br /&gt;
音声認識や機械翻訳、データ処理等複雑な処理をサービスとして簡単にセットアップできるようになっているらしく、&lt;br /&gt;
その中の1つにAlchemyAPIが含まれているようです。&lt;br /&gt;
なお、IBMが用意した画像認識サービスもあるらしく、そちらの方はBetaですが制限はないようです。&lt;/p&gt;

&lt;h1 id=&#34;使い方:ab936406d233aece22e2039cdf3abfc2&#34;&gt;使い方&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://console.ng.bluemix.net/home/&#34;&gt;IBM Bluemix&lt;/a&gt;のアカウントを作り、適当なアプリケーションを1つ作成します(仮想マシンを一個作る感じ)。&lt;br /&gt;
その後、サービスからAlchemyAPIを選んで作ったアプリケーションに登録するだけです。&lt;/p&gt;

&lt;p&gt;登録が終わると作ったアプリケーションの環境変数としてapikeyが設定されるので、&lt;br /&gt;
それを利用して画像のURLやデータをAPIに投げれば認識結果が帰ってきます。&lt;/p&gt;

&lt;h1 id=&#34;ライブラリ:ab936406d233aece22e2039cdf3abfc2&#34;&gt;ライブラリ&lt;/h1&gt;

&lt;p&gt;公式がいくつかの言語のライブラリを提供しています。&lt;br /&gt;
&lt;a href=&#34;https://github.com/AlchemyAPI&#34;&gt;https://github.com/AlchemyAPI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;golangによる画像認識APIは無かったため、ライブラリを作りました。&lt;br /&gt;
使いたい方はどうぞ。&lt;br /&gt;
&lt;a href=&#34;https://github.com/ota42y/go-alchemyapi&#34;&gt;https://github.com/ota42y/go-alchemyapi&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;サンプルコード:ab936406d233aece22e2039cdf3abfc2&#34;&gt;サンプルコード&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;os&amp;quot;
	&amp;quot;fmt&amp;quot;
	
	alchemyapi &amp;quot;github.com/ota42y/go-alchemyapi&amp;quot;
)

func main() {
	token := os.Getenv(&amp;quot;ALCHEMYAPI_TOKEN&amp;quot;)
	if token == &amp;quot;&amp;quot; {
		fmt.Println(&amp;quot;skip this test because no token&amp;quot;)
		return
	}

	client := alchemyapi.New(token)
	res, err := client.URLGetRankedImageKeywords(&amp;quot;https://pbs.twimg.com/media/CQ7ENtOUwAAZyNF.jpg&amp;quot;, false, false)
	if err == nil {
		for _, keyword := range res.ImageKeywords {
			fmt.Println(keyword.Text, keyword.Score)
		}
	} else {
		fmt.Println(err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% go run test.go
food 0.832018
sushi 0.5
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;感想:ab936406d233aece22e2039cdf3abfc2&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;件数は限定的とはいえ、投げるだけで画像認識できるとか相当凄いです。&lt;br /&gt;
しかも食べ物かそうじゃないかだけでなく、寿司かどうかまで判定しているので、学習精度もかなり良いです。&lt;br /&gt;
ここ1年ぐらいでディープラーニングによる画像識別が流行り、便利なライブラリがたくさん出た印象ですが、&lt;br /&gt;
もう自前でやらずにAPIとして使うのが当たり前になってしまいそうです。&lt;/p&gt;

&lt;p&gt;また、Bluemixについては初めて知りましたが、単にサーバを提供するだけでなく、&lt;br /&gt;
こういった高度なサービスを提供するのは上手いなぁ…と思いました。&lt;br /&gt;
使う側はセットアップや教師データの収集を考えずに使えてしまうので、&lt;br /&gt;
画像認識を使う敷居がぐっと下がるのではないかと思います。&lt;br /&gt;
(制限を超えたときの料金が書いてないのでお値段がどれくらいかはわかりませんが…)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ABPro2015で発表してきた</title>
      <link>http://ota42y.com/blog/2015/10/10/abpro2015/</link>
      <pubDate>Sat, 10 Oct 2015 23:58:16 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/10/10/abpro2015/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://togetter.com/li/884899&#34;&gt;togetterまとめ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/39s0Ljtiud4tKP&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/ota42y/ss-53771391&#34; title=&#34;身近なサイバー攻撃から身を守る&#34; target=&#34;_blank&#34;&gt;身近なサイバー攻撃から身を守る&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/ota42y&#34; target=&#34;_blank&#34;&gt;ota42y&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;ディープラーニングによる画像認識でTL上の飯テロ画像を判定しています。&lt;br /&gt;
事前に発表タイミングをお昼直前にお願いしており、&lt;br /&gt;
その通りにしていただけたため大好評だったと思います。&lt;/p&gt;

&lt;p&gt;なお、画像認識自体は&lt;a href=&#34;http://www.alchemyapi.com/&#34;&gt;AlchemyAPI&lt;/a&gt;に投げているだけです.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第48回情報科学若手の会2015に参加してきた</title>
      <link>http://ota42y.com/blog/2015/09/22/wakate2015/</link>
      <pubDate>Tue, 22 Sep 2015 00:45:03 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/09/22/wakate2015/</guid>
      <description>

&lt;p&gt;2015年9月19日(土)〜21日(月)に静岡県伊東市の山喜旅館で開催された、&lt;br /&gt;
第48回情報科学若手の会2015に参加してきました。&lt;br /&gt;
四回目の参加で、ショートで発表を行いました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://togetter.com/li/875554&#34;&gt;第48回情報科学若手の会まとめ #wakate2015&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;1日目:052cb3961210afac04dd94f202db818b&#34;&gt;1日目&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;はじめてでもわかる!IoTの過去・現在・未来 (特にホームネットワーク)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/TsubasaYumura/iot-52973276&#34;&gt;http://www.slideshare.net/TsubasaYumura/iot-52973276&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TRON電脳住宅

&lt;ul&gt;
&lt;li&gt;1988年にIoTに言及していた&lt;a href=&#34;http://www.amazon.co.jp/%E9%9B%BB%E8%84%B3%E7%A4%BE%E4%BC%9A%E8%AB%96%E2%80%95TRON%E3%81%AE%E4%BA%88%E8%A8%80-%E5%9D%82%E6%9D%91-%E5%81%A5/dp/4870310473&#34;&gt;電脳社会論&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;BLEとか今使われている技術の特徴とか&lt;/li&gt;
&lt;li&gt;最新研究とかも(IllumiRoomとかSquamaとか)&lt;/li&gt;
&lt;li&gt;IoTは最近いろんな製品が出てきてますし、有名なのだとIFTTTや国内だとmyThingsみたいに、インターネット側も実世界の機器との連動ができるサービスが出てきていて、数年でアーリーマジョリティぐらいまでは到達しそうかなーって気がします。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;IoTで進化するミツバチとの交流&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/decobisu/iotdejin-hua-surumitubatitofalsejiao-liu&#34;&gt;https://speakerdeck.com/decobisu/iotdejin-hua-surumitubatitofalsejiao-liu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;知られざるミツバチの実態

&lt;ul&gt;
&lt;li&gt;ミツバチは刺激しない限り刺さない&lt;/li&gt;
&lt;li&gt;ハチミツがとれるぐらい蜜を集めるのはミツバチだけ&lt;/li&gt;
&lt;li&gt;養蜂は意外とブームらしい(観測範囲は狭い)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;巣箱の温度をセンサとRasPiで調べてMackerelに飛ばしてSlackに通知&lt;/li&gt;
&lt;li&gt;めっちゃ簡単に作れそうな構成だけど、凄く役立ちそうでテンション上がる&lt;/li&gt;
&lt;li&gt;動物とのインタラクション研究とかわりとあるので、ミツバチとのインタラクションも普通に研究になりそう…&lt;/li&gt;
&lt;li&gt;TLで言及されていたハチミツを集めやすい巣箱が凄い

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.indiegogo.com/projects/flow-hive-honey-on-tap-directly-from-your-beehive#/story&#34;&gt;https://www.indiegogo.com/projects/flow-hive-honey-on-tap-directly-from-your-beehive#/story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/kyoro353/status/645125093425676288&#34;&gt;https://twitter.com/kyoro353/status/645125093425676288&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ハンドルを回すと六角形が崩れて一直線上になるので、ハチミツが下に流れていく機構&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;プログラムを書くってどういうこと？を哲学的に考える話&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;話は凄い上手いし言ってることも解るのに理解が追いつかない…(´･_･`)&lt;/li&gt;
&lt;li&gt;プログラムは人が計算機で計算をしているor計算のさせ方を教示しているという仮定の下では、プログラムを書く行為はプログラムが表現できる世界への対応付けを行っている…という話だった気がします。&lt;br /&gt;
理解が追いついていないのでスライドがほしい…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;群ロボット&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;複数のロボットを使って1つのタスクを実行する

&lt;ul&gt;
&lt;li&gt;ベイマックスのマイクロロボットみたいなもの？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;複数のロボットを強調させるために動物の動きを模したアルゴリズムを使っているらしい

&lt;ul&gt;
&lt;li&gt;実際の動物とは全く関係ないアルゴリズムとかあるのだろうか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;既存の探索を行うアルゴリズムは通信回数や移動で性能が良くない

&lt;ul&gt;
&lt;li&gt;それを改善するアルゴリズムを作った&lt;/li&gt;
&lt;li&gt;ただしコストが安い代わりに探索時間はかかる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;質疑応答で無線通信ならブロードキャストできるので、既存アルゴリズムも通信コストは安いのでは？という質問

&lt;ul&gt;
&lt;li&gt;無線ってブロードキャストできるんだ…(よく知らない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Alloyで学ぶ形式手法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/marin72_com/alloydexue-buxing-shi-shou-fa&#34;&gt;https://speakerdeck.com/marin72_com/alloydexue-buxing-shi-shou-fa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式手法言語

&lt;ul&gt;
&lt;li&gt;設計時に使うらしい&lt;/li&gt;
&lt;li&gt;仕様バグを調べるみたい？&lt;/li&gt;
&lt;li&gt;AlloyはLL形式手法言語みたいなもの&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;仕様を定義して、ちょっとの記述をするだけで反例があるかを返してくれる

&lt;ul&gt;
&lt;li&gt;自動でテスト条件を検証してくれるみたい？&lt;/li&gt;
&lt;li&gt;めっっっっっっちゃ便利っぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スライド中のサンプルコード&lt;br /&gt;
&lt;a href=&#34;https://gist.github.com/marin72-com/688d47f1e91b3e510c28&#34;&gt;https://gist.github.com/marin72-com/688d47f1e91b3e510c28&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;交流イベント&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マシュマロチャレンジだった&lt;/li&gt;
&lt;li&gt;当初の予定が失敗したのでパスタ1本分の高さに(´･_･`)&lt;/li&gt;
&lt;li&gt;事前にクイズをして、チートアイテム（巨大パスタとか）を配布する改変ルール

&lt;ul&gt;
&lt;li&gt;試行錯誤よりチートアイテムを持っているかで勝負が決まる。富めるものはより富める世界だったww&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2日目:052cb3961210afac04dd94f202db818b&#34;&gt;2日目&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;若手特別講演「ぼくらのプログラミングから、みんなのプログラミングへ」&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://junkato.jp/publications/wakate2015-kato-slides.pdf&#34;&gt;http://junkato.jp/publications/wakate2015-kato-slides.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;これらの論文読んだことがある…ぞ…(((;ﾟДﾟ)))

&lt;ul&gt;
&lt;li&gt;Picodeを発表したWISSに参加してたので、DejaVuとかもそこで知った気がする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;後半は&lt;a href=&#34;http://textalive.jp/&#34;&gt;http://textalive.jp/&lt;/a&gt;の話

&lt;ul&gt;
&lt;li&gt;めっちゃ凄いサービス&lt;/li&gt;
&lt;li&gt;動画編集の仕方を知らなくても、キネティックタイポグラフィできるってのが凄い&lt;/li&gt;
&lt;li&gt;プログラマが機能拡張できたり、非プログラマでも改変可能にしていたり&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Moive as Code凄い

&lt;ul&gt;
&lt;li&gt;文字を指定された位置に表示して動かしているだけ&lt;/li&gt;
&lt;li&gt;FPS変更も動画サイズ変更もパラメータを変えれば対応可能&lt;/li&gt;
&lt;li&gt;将来的にPCの性能が上がったら、パラメータを変えれば全て高画質化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HCI分野の紹介と最新研究&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;こっちに大体書いた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/09/20/wakate2015-hci/&#34;&gt;http://ota42y.com/blog/2015/09/20/wakate2015-hci/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ワンスイッチ Wii コントローラーの製作 〜福祉機器における Arduino 活用〜&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ゲームのコントロールをスイッチ1つでできるように改変する話

&lt;ul&gt;
&lt;li&gt;Wiiのコントローラーハック&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;体をほとんど動かせない人でもゲームができる&lt;/li&gt;
&lt;li&gt;ターンベースは何でもいけそう&lt;/li&gt;
&lt;li&gt;やっぱり制限時間がある系は難しいらしい

&lt;ul&gt;
&lt;li&gt;制限時間を調整できれば解決しそうだけど、コントローラーからの入力部分に手を入れ、ゲームからは通常の入力と完全に同じに見えるようにするアプローチなので、違う話っぽいなぁ…&lt;/li&gt;
&lt;li&gt;シミュレーター上で動くゲームなら、シミュレーターの速度を下げるという荒技が…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;筋電は訓練によって制御出来るようになるという知見(´･_･`)！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;趣味でも使えるクラウド！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;slackで会話、Google Docsで情報共有とか&lt;/li&gt;
&lt;li&gt;物量でICFPCの問題を解く

&lt;ul&gt;
&lt;li&gt;リソース自由に使っていいらしい&lt;/li&gt;
&lt;li&gt;Amazonのスポットインスタンスで安くCPUパワーを確保&lt;/li&gt;
&lt;li&gt;100CPU 1TBが150円とか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AWS Lambda

&lt;ul&gt;
&lt;li&gt;最近出た奴&lt;/li&gt;
&lt;li&gt;CPUのミリ秒単位で課金される&lt;/li&gt;
&lt;li&gt;一瞬で計算を終わらせたいときに役立つっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Internetの仕組み 〜 ISPの作り方&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/chibiegg/the-internet-falseshi-zu-mi-ispfalsezuo-rifang&#34;&gt;https://speakerdeck.com/chibiegg/the-internet-falseshi-zu-mi-ispfalsezuo-rifang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ISPは作れる！！！

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bgp.ne.jp/&#34;&gt;https://www.bgp.ne.jp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IPアドレスがあれば&lt;/li&gt;
&lt;li&gt;複数のASと繋ぐ場合、AS番号が必要&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ルーティングの話(BGPやOSPF)

&lt;ul&gt;
&lt;li&gt;トランジットを避け、ピアに流すように工夫する&lt;/li&gt;
&lt;li&gt;手動で経路設定は人間には無理なのでそういうプロトコルを使う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;インフラ屋の間では「2497です」みたいな自己紹介がされるらしい…

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nic.ad.jp/ja/ip/as-numbers.txt&#34;&gt;https://www.nic.ad.jp/ja/ip/as-numbers.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;招待講演「IT×宇宙で何をしよう!?」&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JAXAのITへの取り組みのお話&lt;/li&gt;
&lt;li&gt;前半は社内のITシステムの話

&lt;ul&gt;
&lt;li&gt;大体独自開発のシステムっぽい&lt;/li&gt;
&lt;li&gt;失敗のリスクが尋常じゃないから、既存のに合わせて失敗するより開発コストをかけてでも使い手に全力で最適化した方が良いのだろうか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;後半は情報公開の話&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;準天頂衛星システム（QZSS）みちびきデータ公開サイト[QZ-vision]&lt;br /&gt;
&lt;a href=&#34;http://qz-vision.jaxa.jp/&#34;&gt;http://qz-vision.jaxa.jp/&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JAXA | JAXAの歩き方 公開データのウェブサイトカタログ&lt;br /&gt;
公開しているデータのまとめ&lt;br /&gt;
&lt;a href=&#34;http://www.jaxa.jp/projects/db/tebiki_j.html&#34;&gt;http://www.jaxa.jp/projects/db/tebiki_j.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JAXA OPEN API&lt;br /&gt;
データが凄い扱いやすいように整備されてる&lt;br /&gt;
夢が広がる…(´･_･`)！&lt;br /&gt;
&lt;a href=&#34;http://www.satnavi.jaxa.jp/jaxa_api_competition/index.html&#34;&gt;http://www.satnavi.jaxa.jp/jaxa_api_competition/index.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;提供したデータが想定していない使われ方をする場合もある&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;海面温度のデータが漁業に活用されたり&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use Open Data with SPARQL&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/denari01/use-open-data-with-sparql&#34;&gt;http://www.slideshare.net/denari01/use-open-data-with-sparql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SPARQL、書くのめっちゃつらそう…&lt;/li&gt;
&lt;li&gt;実際にブラウザ上で書いて動かせるサービス

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sparql.odp.jig.jp/&#34;&gt;http://sparql.odp.jig.jp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;OpenDataについては情報科学若手の会冬の陣2015での発表がわかりやすかったけど、資料は公開されていないっぽい…(´･_･`)

&lt;ul&gt;
&lt;li&gt;ナイトセッションで再演されていた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Denkinovelをどうして作り続けているのか&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ノベルゲームスクリプトを書いてブラウザ上で実行できるっぽい

&lt;ul&gt;
&lt;li&gt;文章以外はいろんな素材がすでに用意済みで、自由に使える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;開発に関する話

&lt;ul&gt;
&lt;li&gt;個人開発ではチーム開発のセオリーは無視した方がいい&lt;br /&gt;
意味の無いオーバーヘッドになるので&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;機能追加時にコンセプトがぶれていないのが凄い

&lt;ul&gt;
&lt;li&gt;立ち絵機能はわざと入れていない&lt;/li&gt;
&lt;li&gt;絵が描けない人のために作ったので、入れると絵が描ける人との差がついてしまうので&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;何を学べばいいか解らないので、作って学ぶという姿勢は共感できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;リッチラボの開発に 集中するための開発環境&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DevOpsはうちもやりたいなー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;LT&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数が多いので気になったのだけ&lt;/li&gt;
&lt;li&gt;筆跡の特徴学習とニューラルネットワーク

&lt;ul&gt;
&lt;li&gt;教師データ凄い少ないのにそこそこの結果&lt;/li&gt;
&lt;li&gt;凄いいい手法なのか偶然なのか…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ビジコン金ある

&lt;ul&gt;
&lt;li&gt;コンセプトを実現する最低限の実装と、いいコンセプトが大事とのこと&lt;/li&gt;
&lt;li&gt;完璧な実装&amp;lt;&amp;lt;&amp;lt;&amp;lt;コンセプトを伝える最低限度のプロトタイプ&lt;br /&gt;
動かなくても動いているように見えればいい&lt;/li&gt;
&lt;li&gt;コンセプトを煮詰める時間を含めると時給下がるのでは…？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;こわくないBLE

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/izumin5210/Bletia&#34;&gt;https://github.com/izumin5210/Bletia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;キーボードを浮かそう

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/decobisu/status/645550061926133761&#34;&gt;https://twitter.com/decobisu/status/645550061926133761&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kinesis使ってるからこの解法出来ないのです…(´・_・`)&lt;/li&gt;
&lt;li&gt;が、マウス遠いのは人類共通の悩み…&lt;/li&gt;
&lt;li&gt;操作時間を計測するKLMモデルにも、機器の切り替えにかかる時間が含まれていてわりと無視できない…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ローリングシャッター芸人の人の発表

&lt;ul&gt;
&lt;li&gt;デジタルネイチャー研究室の人&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/keyword/%A5%ED%A1%BC%A5%EA%A5%F3%A5%B0%A5%B7%A5%E3%A5%C3%A5%BF%A1%BC%B8%BD%BE%DD&#34;&gt;ローリングシャッター現象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CMOSは一度にまとめてではなく順番に素子上の映像を記録していく&lt;/li&gt;
&lt;li&gt;被写体の動きが速いと、記録中に映像が変わって変になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The Relationship between Laughter and Health

&lt;ul&gt;
&lt;li&gt;笑うと健康にいいってのが示されてる&lt;/li&gt;
&lt;li&gt;よく聞くのでジンクスだと思っていたけど、ちゃんと証明されてるっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;3日目:052cb3961210afac04dd94f202db818b&#34;&gt;3日目&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Twitter のデータ処理テクノロジーとTwitterでの仕事について&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;バッチ処理とリアルタイム処理の使い分けが凄い

&lt;ul&gt;
&lt;li&gt;正確だけど時間がかかるバッチ処理と、早いけど誤差の出るリアルタイム処理との組み合わせ&lt;/li&gt;
&lt;li&gt;前回のバッチ処理からの差分だけリアルタイム処理で計算し、それを合算&lt;/li&gt;
&lt;li&gt;早くて正確に結果を返せる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;モノイドを利用して正しい結果になると証明されているっぽい&lt;/li&gt;
&lt;li&gt;やっぱりREPLはデモにも使えて便利っぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ICTトラブルシューティングコンテストのご紹介&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;他のコンテストに比べて運用上実際に起きる問題をベースとした感じのコンテストっぽい？&lt;/li&gt;
&lt;li&gt;スライドで紹介された例題を見る限り、プログラムというよりかはミドルウェア知識的な感じ&lt;/li&gt;
&lt;li&gt;あとは問題の原因を突き止める手順とか&lt;/li&gt;
&lt;li&gt;運営メンバーが学生で、スポンサー11社いるの凄い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ルータで斬り込め！おうちIoT&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenWrt凄い&lt;/li&gt;
&lt;li&gt;「ルータはIoTのハブになる」というのはわりと的を射ている気がする

&lt;ul&gt;
&lt;li&gt;OnHubの登場はもちろんですが、ルータはその役割上、多くの場合外部ネットと内部ネット両方にアクセス出来る位置にいるため、内部ネットに繋がるIoT機器の情報を外部のクラウドに投げるみたいな事をするには、かなり理想的な位置にいそう。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;その他全体の話:052cb3961210afac04dd94f202db818b&#34;&gt;その他全体の話&lt;/h1&gt;

&lt;h2 id=&#34;ネット環境:052cb3961210afac04dd94f202db818b&#34;&gt;ネット環境&lt;/h2&gt;

&lt;p&gt;去年に比べてさらに山喜旅館の無線APが増強されたらしく、いっそう快適になりました。&lt;br /&gt;
ただ、APの同時接続数に引っかかって、たまに接続が切れる事があったようです。&lt;br /&gt;
二台以上にすれば解決しそうですが、若手の会の接続台数は異常なので、普通に使うにはほぼ問題ないと思われます。&lt;/p&gt;

&lt;h2 id=&#34;picala:052cb3961210afac04dd94f202db818b&#34;&gt;PICALA&lt;/h2&gt;

&lt;p&gt;会場では「PICALA: 照明色による聴講者の感情共有システム」が動いていました。&lt;br /&gt;
発表中に色に言及できるほど余裕はなかったですが、ウケているかウケていないかはわかるのでわりとよかったです。&lt;/p&gt;

&lt;p&gt;笑いを狙ったスライドに対しては笑い声で反応がわかりますが、「凄い」「へぇ」といったアクションが薄い反応をしそうなスライドでも、聞いている人がどう思っているかがわかるので、これ凄いでしょ！！みたいなスライドで、みんな凄い！って思ってくれていると発表中にわかるのでよかったです。また、光でちょっとだけ提示するので、発表に割り込まれないのもいいです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;明日の &lt;a href=&#34;https://twitter.com/hashtag/wakate2015?src=hash&#34;&gt;#wakate2015&lt;/a&gt; の僕の発表時間中に「PICALA: 照明色による聴講者の感情共有システム」を運用予定です。詳細は発表開始前に説明します。お楽しみに！（発表者の方で、自分の発表時間に使いたい方がいたら声かけて下さい〜) &lt;a href=&#34;http://t.co/ldVnGhAA2N&#34;&gt;pic.twitter.com/ldVnGhAA2N&lt;/a&gt;&lt;/p&gt;&amp;mdash; 湯村 翼＠10/3おうちハックナイト (@yumu19) &lt;a href=&#34;https://twitter.com/yumu19/status/644863368537309184&#34;&gt;2015, 9月 18&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;togetter超便利:052cb3961210afac04dd94f202db818b&#34;&gt;togetter超便利&lt;/h2&gt;

&lt;p&gt;夜中に過去の年のまとめを読んだりして盛り上がったので、&lt;br /&gt;
毎年まとめてくれる人には超感謝してます…&lt;/p&gt;

&lt;p&gt;また、ブログを書くときも思い出すベースやメモし忘れた部分の補足、&lt;br /&gt;
話していい/ダメとかをtogetterから判別出来るのでとても重宝しています。&lt;/p&gt;

&lt;p&gt;というのをあらためて思いました&lt;/p&gt;

&lt;h2 id=&#34;いつまで若手か:052cb3961210afac04dd94f202db818b&#34;&gt;いつまで若手か&lt;/h2&gt;

&lt;p&gt;若手の会の日程について行けるうちは若手だと思います！！！&lt;br /&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;若手の会めっちゃ疲れた…&lt;em&gt;(:3 」∠)&lt;/em&gt; ふと、上の世代が自然とフェードアウトしていくのは、この日程に体力がついていかないからなんじゃないかって思ったww &lt;a href=&#34;https://twitter.com/hashtag/wakate2015?src=hash&#34;&gt;#wakate2015&lt;/a&gt;&lt;/p&gt;&amp;mdash; おおた (@ota42y) &lt;a href=&#34;https://twitter.com/ota42y/status/645938601587511296&#34;&gt;2015, 9月 21&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;帰り:052cb3961210afac04dd94f202db818b&#34;&gt;帰り&lt;/h1&gt;

&lt;p&gt;熱海から二駅の三島にある柿田川に寄りました。&lt;br /&gt;
日本三大清流の1つで、水がめっちゃ綺麗な川でした。&lt;br /&gt;
&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E6%9F%BF%E7%94%B0%E5%B7%9D&#34;&gt;https://ja.wikipedia.org/wiki/%E6%9F%BF%E7%94%B0%E5%B7%9D&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;元々去年行こうと思っていましたが、桜屋のうなぎに思った以上に並んだので断念してました…&lt;br /&gt;
あのうまいうなぎはこの水で一度泳がせているからなのかーと勝手に感心しました。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/blog/2014/09/15/wakate2014/#その後:5448e46160544c3c78693ad97d653b2a&#34;&gt;http://ota42y.com/blog/2014/09/15/wakate2014/#その後:5448e46160544c3c78693ad97d653b2a&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただ、この川目当てで行くには短すぎるので(日本一短い一級河川)、&lt;br /&gt;
うなぎと組み合わせるとか他の用事のついでに足を運ぶのがいいと思います。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>