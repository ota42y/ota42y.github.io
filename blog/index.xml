<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on おおたの物置</title>
    <link>http://ota42y.com/blog/</link>
    <description>Recent content in Blogs on おおたの物置</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 16 Mar 2016 00:33:01 +0900</lastBuildDate>
    <atom:link href="http://ota42y.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ラブライブ！ありがとうトラックの軌跡をまとめた</title>
      <link>http://ota42y.com/blog/2016/03/16/lovelive-truck/</link>
      <pubDate>Wed, 16 Mar 2016 00:33:01 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/03/16/lovelive-truck/</guid>
      <description>

&lt;p&gt;ラブライブ！μ’sありがとうProjectの一環として、ありがとうトラックが日本全国を巡っているそうです。&lt;br /&gt;
&lt;a href=&#34;http://news.lovelive-anime.jp/app-def/S-102/news/?p=11201&#34;&gt;http://news.lovelive-anime.jp/app-def/S-102/news/?p=11201&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;公式Twitterで毎日どこにいるかがツイートされており、&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/709375500943233024&#34;&gt;3/14に折り返しに入った&lt;/a&gt;とのことですが、
実際どのくらい回ったのかが細切れになっていてわからなかったので、地図上にまとめました。&lt;/p&gt;

&lt;h1 id=&#34;ありがとうトラックの軌跡-3-26まで:d1b7e6d5fba8c33792c8fe6d44bd9ea1&#34;&gt;ありがとうトラックの軌跡(3/26まで)&lt;/h1&gt;

&lt;p&gt;写真付きツイートで位置が判明したものを表示しています。(3/26日分まで)&lt;br /&gt;
オレンジ色がありがとうトラック１号の位置、白色がありがとうトラック２号の位置になります。&lt;/p&gt;

&lt;p&gt;クリックすると大きい画面になるため、そちらの方が見やすいと思います。&lt;br /&gt;
&lt;a href=&#34;https://www.google.com/maps/d/edit?mid=zwHEw-bSdRv8.kZB8IIDaCuzg&amp;amp;usp=sharing&#34;&gt;ありがとうの軌跡&lt;/a&gt;&lt;/p&gt;

&lt;iframe src=&#34;https://www.google.com/maps/d/u/3/embed?mid=zwHEw-bSdRv8.kZB8IIDaCuzg&#34; width=&#34;640&#34; height=&#34;480&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;3-15日の状況:d1b7e6d5fba8c33792c8fe6d44bd9ea1&#34;&gt;3/15日の状況&lt;/h2&gt;

&lt;p&gt;１号は北海道まで太平洋側を北上していき、その後日本海側を南に進んでいるようです。
２号は名古屋~奈良~四国から九州へと、太平洋側を南に進んでいます。&lt;/p&gt;

&lt;p&gt;この後予定では１号は京都から岡山の方へ行き、２号はなんと沖縄に渡り、その後九州の西側へ行くようです。
１号は北海道から岡山までとかなり移動していますが、２号も沖縄に行って帰ってくるため、かなりの距離を移動するようです。
日本横断は相当大変ですね…&lt;/p&gt;

&lt;h2 id=&#34;3-24の状況:d1b7e6d5fba8c33792c8fe6d44bd9ea1&#34;&gt;3/24の状況&lt;/h2&gt;

&lt;p&gt;沖縄へフェリーで渡るのはまる２日以上かかるようです。遠いですね…&lt;br /&gt;
また、残り一週間となりましたが残すは１号が広島と岡山、２号が福岡のみになりました。
残り日数的に東京に戻ってもライブまで時間が余りそうな感じなので、3/28か29あたりから東京も回りそうですね。&lt;/p&gt;

&lt;h1 id=&#34;faq:d1b7e6d5fba8c33792c8fe6d44bd9ea1&#34;&gt;FAQ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;どうやってまとめたの？&lt;br /&gt;
ツイートから気合いで探しています。
Google Mapsからそれらしい場所を探し、ストリートビューで写真と一致している場所を探しています。駅前やランドマークとの写真が多いため、思ったよりも簡単に場所が見つかります。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;若干ずれている気がするけど？&lt;br /&gt;
Google Mapsの地図編集画面から直接ストリートビューを見られないため、数百メートルのずれはどうしても出てきてしまいます。ご了承ください。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;いくつか無い写真があるけど？&lt;br /&gt;
地理にはかなり疎いため、いくつかわからない場所があります。もしその場所を知っている方は情報を頂けると幸いです。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;実物を見たいんだけどどこに行けばいい？&lt;br /&gt;
実際にどこにいるかの予測はできませんが、多くの場合県名になるようなかなり大きめの駅周辺にいるようです。
とはいえ公式Twitterが前日にどこに行くかつぶやいてくれるので、それを頼りに探すのが良いと思います。
見損ねてもたぶん最後にドームに来ると思われるので、ライブ参加者はもう一度見るチャンスがあります。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;場所が不明なもの:d1b7e6d5fba8c33792c8fe6d44bd9ea1&#34;&gt;場所が不明なもの&lt;/h1&gt;

&lt;p&gt;可能な限り位置を調べてはいますが、以下のツイートはどうしても位置がわからなかったものになります。
ご存じの方がおりましたらTwitter等でご連絡ください。&lt;/p&gt;

&lt;p&gt;なお、社内が撮影されているもの等、どうやっても場所の判別が不可能そうなものは除いています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/704889601014505472&#34;&gt;https://twitter.com/LoveLive_staff/status/704889601014505472&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/705003241365491713&#34;&gt;https://twitter.com/LoveLive_staff/status/705003241365491713&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/705288053242384384&#34;&gt;https://twitter.com/LoveLive_staff/status/705288053242384384&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/705740788551049216&#34;&gt;https://twitter.com/LoveLive_staff/status/705740788551049216&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/706777941347328000&#34;&gt;https://twitter.com/LoveLive_staff/status/706777941347328000&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/706834522441170945&#34;&gt;https://twitter.com/LoveLive_staff/status/706834522441170945&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/709003462529445888&#34;&gt;https://twitter.com/LoveLive_staff/status/709003462529445888&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/709762320650661890&#34;&gt;https://twitter.com/LoveLive_staff/status/709762320650661890&lt;/a&gt;&lt;br /&gt;
(鬼の洗濯板のように見えるが、google mapsでは画像のように写真が撮れる位置が見つからず)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/710105060500439044&#34;&gt;https://twitter.com/LoveLive_staff/status/710105060500439044&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/710465459578146816&#34;&gt;https://twitter.com/LoveLive_staff/status/710465459578146816&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/711158993406857216&#34;&gt;https://twitter.com/LoveLive_staff/status/711158993406857216&lt;/a&gt;
(できる人なら反射してる建物から場所がわかりそう…)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/711555116457992192&#34;&gt;https://twitter.com/LoveLive_staff/status/711555116457992192&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/711875536033878016&#34;&gt;https://twitter.com/LoveLive_staff/status/711875536033878016&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/LoveLive_staff/status/713711952380473344&#34;&gt;https://twitter.com/LoveLive_staff/status/713711952380473344&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>うるう日に1番なりやすい曜日は？</title>
      <link>http://ota42y.com/blog/2016/03/01/leap-day/</link>
      <pubDate>Tue, 01 Mar 2016 22:43:14 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/03/01/leap-day/</guid>
      <description>

&lt;p&gt;今年はうるう年のため、昨日の2016-02-29はうるう日でした。
うるう年は4年に一回かつ干支は12種類のため、うるう年になる干支は子と辰と申しかありません。&lt;/p&gt;

&lt;p&gt;さて、うるう年にならない干支が存在しますが、うるう日にならない曜日というのは存在するのでしょうか？
存在しないなら、うるう日になりやすい曜日というのは存在するのでしょうか？&lt;br /&gt;
気になったので調べました。&lt;/p&gt;

&lt;h1 id=&#34;うるう年のルール:d25f66a7a55da90824e850a39bbd6219&#34;&gt;うるう年のルール&lt;/h1&gt;

&lt;p&gt;うるう年は4年に一回、ただし100で割り切れて400で割り切れない年は来ないというルールになっており、400年間で97回うるう年がおきて一周します。
そのため、一周する400年間の傾向を調べれば、後はその繰り返しなので変化がなく、うるう日の傾向をすべて調べたと言えます。
今回は2000年から2399年までのうるう年を調べました。&lt;/p&gt;

&lt;h1 id=&#34;うるう日になりやすい曜日は何曜日か:d25f66a7a55da90824e850a39bbd6219&#34;&gt;うるう日になりやすい曜日は何曜日か&lt;/h1&gt;

&lt;p&gt;97は7で割り切れず、6余るため、全ての曜日が均等にうるう日になることはありません。
数学が得意な人ならば数式でぱっと曜日計算ができそうですが、私は得意ではないのでプログラムで全列挙して集計します。&lt;/p&gt;

&lt;h2 id=&#34;うるう日カウントプログラム:d25f66a7a55da90824e850a39bbd6219&#34;&gt;うるう日カウントプログラム&lt;/h2&gt;

&lt;p&gt;以下のrubyスクリプトを実行する2ことで、2000年から2399年までのうるう日の曜日をカウントして集計します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;date&#39;

w = Hash.new(0)
2000.step(2399, 4) do |year|
    if Date::valid_date?(year, 2, 29)
        d = Date.new(year, 2, 29)
        w[d.wday] += 1        
    end
end

7.times {|wday| puts &amp;quot;#{Date::DAYNAMES[wday]}:#{w[wday]}&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;結果:d25f66a7a55da90824e850a39bbd6219&#34;&gt;結果&lt;/h2&gt;

&lt;p&gt;結果は以下のようになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sunday:13
Monday:15
Tuesday:13
Wednesday:15
Thursday:13
Friday:14
Saturday:14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;月曜日と水曜日がうるう日になりやすく、日曜と火曜と木曜がうるう日になりにくい結果になりました。
もっと差が出るかと思いましたが、均等に起きた場合に比べて一回少ない程度に収まり、思った以上に偏りはないようです。&lt;/p&gt;

&lt;h1 id=&#34;うるう日の偏りの原因:d25f66a7a55da90824e850a39bbd6219&#34;&gt;うるう日の偏りの原因&lt;/h1&gt;

&lt;p&gt;どうしてこのような偏りができるのでしょうか。
どうやら100年に一度のうるう年にならない年が影響していそうです。&lt;/p&gt;

&lt;p&gt;うるう日は基本的に以下の順に曜日が変わっていきます。&lt;br /&gt;
火→日→金→水→月→土→木→火（2000年をスタートとした場合)&lt;/p&gt;

&lt;p&gt;ですが、100で割り切れて400で割り切れない年はうるう年では無いため、曜日がずれてしまいます。
このとき、次のうるう日まで一日少なくなるため、次のうるう日の曜日は一日前の曜日になります（土曜日なら金曜日になる）&lt;/p&gt;

&lt;p&gt;例えば、100年に一度のスキップが無い場合、2104年のうるう日は土曜日になりますが、2100年がスキップされたため一日前の金曜日になります。
これにより、火→日→金→水→金→水→月→土→木→火と、うるう日のループでは3つ前の曜日に戻ります。&lt;/p&gt;

&lt;p&gt;これにより、2092年、2096年に金曜日と水曜日がうるう日になりましたが、2104年と2108年もまた金曜日と水曜日がうるう日になり、他の曜日より2回多くなります。同じように2204年は木曜日になるはずですが2200年の影響により水曜日になり、水曜日と月曜日が、2304年は木曜日になるはずが月曜日になり、月曜日と土曜日が多くうるう日になります。&lt;/p&gt;

&lt;p&gt;まとめると、2100年の影響で金曜日と水曜日が、2200年の影響で水曜日と月曜日が、2300年の影響で月曜日と土曜日が多くうるう日になります。
そのため、400年間で多くならなかった日火木が13回うるう日になり、1回多くなる金土が14回、2回多くなる月水が15回うるう日になるようです。&lt;/p&gt;

&lt;h1 id=&#34;次にうるう日が月曜日になるのはいつか:d25f66a7a55da90824e850a39bbd6219&#34;&gt;次にうるう日が月曜日になるのはいつか？&lt;/h1&gt;

&lt;p&gt;今年と同じく、月曜日がうるう日になるのは最速で28年後の2044年です。
例外でスキップされる場合を除けば28年後になります。&lt;/p&gt;

&lt;p&gt;なお、私は1988年生まれであり、その年のうるう日は月曜日でした。
2000年は例外スキップが無いため、ことしは生まれ年とうるう日が一致する年になります。&lt;/p&gt;

&lt;p&gt;なお、2400年までに月曜日がうるう日になるのは以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2016-02-29 2044-02-29 2072-02-29 2112-02-29 2140-02-29
2168-02-29 2196-02-29 2208-02-29 2236-02-29 2264-02-29
2292-02-29 2304-02-29 2332-02-29 2360-02-29 2388-02-29
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;私が生きている間にはあと2回くるか、人類が老いを克服して無限に生きられるようになり、数えるのが無意味になるかのどっちかですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jenkinsのノード選択をNode and Label parameter pluginでやる</title>
      <link>http://ota42y.com/blog/2016/02/28/jenkins_node_select/</link>
      <pubDate>Sun, 28 Feb 2016 19:37:37 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/02/28/jenkins_node_select/</guid>
      <description>

&lt;h1 id=&#34;概要:0be37591a98e09367cb74beb3aab8bdc&#34;&gt;概要&lt;/h1&gt;

&lt;p&gt;Jenkinsのノード制御はあまりカスタマイズが効きません。そのため、ノードを細かく制御したい場合はジョブを分ける必要があり、ジョブ数が増えて管理コストが上がります。このプラグインはパラメーターでノードを選択できるので、一つのジョブでノードごとにジョブを動かせるようになります。&lt;/p&gt;

&lt;h1 id=&#34;jenkinsのノード選択は柔軟性に欠ける:0be37591a98e09367cb74beb3aab8bdc&#34;&gt;Jenkinsのノード選択は柔軟性に欠ける&lt;/h1&gt;

&lt;p&gt;Jenkinsのノード選択がパラメータでできるプラグインです。
Jenkinsでは基本機能として、実行するノードを制限して特定ノードでだけジョブを実行できます。
ですが、この設定項目は柔軟性に欠け、パラメータでノードを切り替えたり、該当するノード全てでビルドするといったことができません。
そのため、例えばgoでWindowsとMac両方でテストを実行したい場合、windows用とmac用というノードごとの個別のジョブを作る必要があります。
しかし、それを続けるとJenkinsのジョブの数が際限なく増えていき、ジョブのメンテが大変になるという問題が出ます。&lt;/p&gt;

&lt;h1 id=&#34;node-and-label-parameter-plugin:0be37591a98e09367cb74beb3aab8bdc&#34;&gt;Node and Label parameter plugin&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/NodeLabel+Parameter+Plugin&#34;&gt;https://wiki.jenkins-ci.org/display/JENKINS/NodeLabel+Parameter+Plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Node and Label parameter pluginは、以上の問題点を解決できるプラグインです。このプラグインを入れると、ビルド時のパラメータにNodeとLabelを追加することができるようになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/images/blog/2016/2016-02-28-jenkins_label_paramater.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-28-jenkins_label_paramater.png&#34;  width=&#34;40%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nodeの場合は文字通り任意のノード名でビルドノードを選択できます。
また、Labelの場合はノードにつけたLabelでビルドするノードを選択できます。
そのため、ノードにwindowsやmac等の適切なラベルをつけることで、任意のノードでビルドすることができるようになります。
また、全てのノードに共通のラベルを一つ定義しておくことで、どれでもいいからとりあえずビルドするといったこともできます。&lt;/p&gt;

&lt;h1 id=&#34;該当するノード全てでビルドする:0be37591a98e09367cb74beb3aab8bdc&#34;&gt;該当するノード全てでビルドする&lt;/h1&gt;

&lt;p&gt;このプラグインは、特に設定がない場合は該当するノードのどれか一つでjobが実行されますが、以下のオプションをつけることで該当するノード全てで実行されるようになります。
そのため、複数環境でテストしたい場合も１回ビルドを実行するだけで後は自動で全てのノードでビルドが実行されるようになります。
なお、全ノードで実行される一つのビルドではなく、ノードごとに個別のビルドが実行されるようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/images/blog/2016/2016-02-28-jenkins_labe_run_all_nodes.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-28-jenkins_labe_run_all_nodes.png&#34;  width=&#34;40%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;pipeline-pluginとの違い:0be37591a98e09367cb74beb3aab8bdc&#34;&gt;Pipeline Pluginとの違い&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Plugin&#34;&gt;Pipeline Plugin&lt;/a&gt;では、Jenkinsのジョブを丸ごとgroovyで書けるため、このプラグインよりもさらに柔軟に選択できます。
ただ、こちらは本当にジョブの内容を全てgroovyで書く必要があり、既存のJenkinsの知見を活用できなかったり、他のプラグインとの相性はあまり良くないです。
Node and Label parameter pluginはパラメータのみ変更されるため、標準的なジョブ構成であればとても簡単に導入できます。
そのため、どうしても複雑な制御が必要な時にのみPipeline Pluginを使うべきだと思います。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:0be37591a98e09367cb74beb3aab8bdc&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;通常の機能だとノードをあまり制御するのは難しい&lt;/li&gt;
&lt;li&gt;プラグインで任意のノードをパラメーターで選択できる

&lt;ul&gt;
&lt;li&gt;選択方法はノード名とラベル&lt;/li&gt;
&lt;li&gt;ラベルは複数に同じラベルをつけたりといろいろ便利なのでオススメ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ノード選択部分をさらに柔軟にしたいならPipeline Plugin

&lt;ul&gt;
&lt;li&gt;より複雑な事ができるが、導入の敷居も高い&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ota42y.com/blog/2015/02/10/workflow-plugin/&#34;&gt;Jenkins Workflow Pluginで複数slaveを扱うのが楽になる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>開発・実行環境をDockerで整える</title>
      <link>http://ota42y.com/blog/2016/02/25/docker_develop/</link>
      <pubDate>Thu, 25 Feb 2016 22:44:10 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/02/25/docker_develop/</guid>
      <description>

&lt;h1 id=&#34;概要:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;概要&lt;/h1&gt;

&lt;p&gt;開発環境構築はだいたい辛い作業ですが、Dockerを使うことで構築がとても楽になります。もちろん銀の弾丸ではないので別のつらさは存在します。
しかし一歩も進まずに時間だけが過ぎることはなくなるため精神衛生上良く、開発を始める段階においてはとても効果的です。&lt;/p&gt;

&lt;h1 id=&#34;開発環境構築が辛い:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;開発環境構築が辛い&lt;/h1&gt;

&lt;p&gt;開発環境構築はプログラミングをする上で必須の作業ですが、依存関係など非常に多くの落とし穴があることが多いです。
また、環境構築そのものが目的ということは少なく、その先に別にやりたい事が控えていることが多いと思います。
そのため、とりあえずやってみようと思った際に、その試してみるべき部分にたどり着けずに時間を浪費していくのはかなり辛いです…&lt;/p&gt;

&lt;h2 id=&#34;設定自動化スクリプトでは足りない:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;設定自動化スクリプトでは足りない&lt;/h2&gt;

&lt;p&gt;環境構築の手順が煩雑な問題に対しては、chefやAnsible等、自動で環境を構築する方法はいくつかあります。
これらは一度作れば同じ環境を何度でも作ることが出来ますが、2回目以降を楽にするものであるため初回はそれほど楽になりません。
また、すでに入っているものとの依存関係の問題などはこれらのツールでは解決しないため、
複雑な環境になればなるほど環境構築の難易度は上がります。&lt;/p&gt;

&lt;h2 id=&#34;開発環境にdockerを使う:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;開発環境にDockerを使う&lt;/h2&gt;

&lt;p&gt;このような問題に対応するために、Dockerを開発環境として使うことを考えます。
Dockerでは毎回クリーンな環境から必要な分だけインストールするため、
依存関係地獄にはまりにくいです。
さらに、Dockerfileで構築手順を保存できるため、
複数のマシンで同じ環境を揃えるのが簡単で、かつ不要になったらコンテナを消すことで容量の削減にもなります。&lt;/p&gt;

&lt;p&gt;また、Dockerfileを本番環境に持って行き、そのままデプロイすることも可能です。
そのため、本番でだけバグが起きる…といったことも回避出来ます。&lt;/p&gt;

&lt;h1 id=&#34;dockerで開発環境を整える:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;Dockerで開発環境を整える&lt;/h1&gt;

&lt;p&gt;細かい部分はDocker入門を読むのが早いと思います。
そのため、割とさくっとしか説明しません。&lt;/p&gt;

&lt;h2 id=&#34;dockerコンテナの作成:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;Dockerコンテナの作成&lt;/h2&gt;

&lt;p&gt;Dockerコンテナを構築するのに便利なDockerfileは、
ベースとなるコンテナをもとに、指定されたコマンドを実行してコンテナを作ってくれます。
例えば、以下のDockerfileはffmpegがインストール済みのコンテナに対して、
&lt;a href=&#34;https://nico-opendata.jp/ja/index.html&#34;&gt;ニコニコ静画を使ったChainer用の学習済みモデルファイル&lt;/a&gt;を利用出来る環境を整えています。
ffmpeg自体はベースのコンテナに入っているため、その後にpythonの実行環境を入れ、様々なライブラリを入れているだけです。
コンテナの作成はこのDockerfileが置いてあるディレクトリまで移動し、
&lt;code&gt;docker build -t ffmpeg_test .&lt;/code&gt;
で作れます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM cellofellow/ffmpeg:latest

RUN apt-get -y update &amp;amp;&amp;amp; apt-get -y upgrade
RUN apt-get install -y ccache curl g++ gfortran git libhdf5-dev
RUN apt-get install -y python-pip python-dev

RUN pip install numpy==1.10.2

# scipy
RUN apt-get install -y libblas-dev liblapack-dev libatlas-base-dev gfortran
RUN pip install scipy
RUN pip install Pillow
RUN pip install scikit-image
RUN pip install chainer==1.3

# niconico dataset
RUN pip install git+http://github.com/nico-opendata/niconico_chainer_models.git#egg=niconico_chainer_models

CMD [&amp;quot;/bin/bash -c&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;データの永続化:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;データの永続化&lt;/h2&gt;

&lt;p&gt;Dockerfileに変更を加えるとコンテナが新たに作成されるため、データを入れても気がつくと消えてしまいます。
もちろんそれでは使い物にならないので、永続化の手法はいくつか考えられているようです。
開発環境として使う分には、手元のマシンの特定フォルダをDockerマシン上にマウントできるData Volumeを利用するのが良いと思います。&lt;/p&gt;

&lt;p&gt;以下のようにコンテナを実行することで、手元のマシンの~/docker_volume/ffmpeg/を、Dockerマシン上の/tmp/hostにマウントすることが出来ます。&lt;br /&gt;
&lt;code&gt;docker run -v ~/docker_volume/ffmpeg/:/tmp/host --name ffmpeg -i -t ffmpeg_test /bin/bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;マウントしているだけなので変更もリアルタイムに反映されるため、作業用フォルダをマウントするとスムーズに開発出来ると思います。&lt;/p&gt;

&lt;h1 id=&#34;dockerを開発環境にする上での問題点:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;Dockerを開発環境にする上での問題点&lt;/h1&gt;

&lt;p&gt;環境構築は物凄く楽になりましたが、すべてが良いわけではなく、
いくつか問題点があります。&lt;/p&gt;

&lt;h2 id=&#34;環境の使い分けの煩雑さ:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;環境の使い分けの煩雑さ&lt;/h2&gt;

&lt;p&gt;Dockerは実行にだけ利用し、開発は手元のホストマシンで行う場合、
ホストとコンテナとの違いを意識しないといけないため、煩雑さがだいぶ上がります。
ファイルに保存する場合に保存場所を意識しないといけなかったり、gitにコミットしようとしたらコンテナ上だったりと、コンソール作業のたびに今いる環境を確認するのは結構面倒です。&lt;/p&gt;

&lt;p&gt;もちろん、自動実行が整っててコンテナ側をいじる必要が無かったり、
開発もコンテナ内でやるような場合は当てはまりません&lt;/p&gt;

&lt;h2 id=&#34;実行速度の問題:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;実行速度の問題&lt;/h2&gt;

&lt;p&gt;MacだとVirtualBoxのVM上でコンテナが動いているため、実質的に専用のVMを立ち上げているのと変わりません。
そのため、実行速度が遅くなるという問題があります。
実際、私のMacBook Pro上記の環境で画像分類を行うと、ホストのMacで実行すると1秒以内に終わる処理が、コンテナ上だと100秒ぐらいかかってしまいます。
おそらくWindowsも同じ仕組みのはずなので、同じような結果になりそうです。
画像処理など特に重い処理等の場合はとても時間がかかってしまうため、環境構築とは別方面のつらさが出てきます。&lt;/p&gt;

&lt;p&gt;これにたいしては、とりあえず動かしたい初期段階ではDockerを使い、環境が固定化してきた段階で手元のマシンで開発するようにすると、
開発初期のとりあえず使ってみたい状態は楽に環境を整えられ、確定した段階でローカルでの開発に移行することで、速度的な部分も問題にならなくなります。&lt;/p&gt;

&lt;p&gt;もしかしたら、サーバ上のコンテナにローカルのファイルをマウントするといったことが可能かもしれないので、
この辺はもう少し調査が必要です…&lt;/p&gt;

&lt;p&gt;なお、何故遅いのかの原因まではつかめていません。
VMのオーバーヘッドなのかもしれませんし、&lt;a href=&#34;http://qiita.com/masuidrive/items/d71ee1881fffb6ad098f&#34;&gt;VirtualBoxボリュームによるせい&lt;/a&gt;の可能性もあります。
ここをもう少し調べれば回避策はあるかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:b4435baf1accd1f59ab486a39b64af8d&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;開発環境構築は毎回辛い

&lt;ul&gt;
&lt;li&gt;依存関係&lt;/li&gt;
&lt;li&gt;複数台で開発すると何回もセットアップする羽目に&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;環境構築自動化

&lt;ul&gt;
&lt;li&gt;構築用スクリプトでは解決しない

&lt;ul&gt;
&lt;li&gt;スタート地点がそれぞれ違う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Dockerで環境ごと作る

&lt;ul&gt;
&lt;li&gt;毎回クリーンな環境から構築

&lt;ul&gt;
&lt;li&gt;依存関係に悩まされにくい

&lt;ul&gt;
&lt;li&gt;一度成功すれば後は固定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;別ベクトルで辛いところはある

&lt;ul&gt;
&lt;li&gt;作業してるところを意識しないといけない&lt;/li&gt;
&lt;li&gt;環境によっては遅い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;一歩も進まずに四苦八苦するよりも精神衛生上良い

&lt;ul&gt;
&lt;li&gt;心が折れない&lt;/li&gt;
&lt;li&gt;問題点がはっきりとして解決しやすい&lt;/li&gt;
&lt;li&gt;開発初期はDocker、本格的に行けそうなら直接入れるように使い分け&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>dump/restoreコマンドでデータのバックアップ・リストアをする</title>
      <link>http://ota42y.com/blog/2016/02/07/dump_restore_command/</link>
      <pubDate>Sun, 07 Feb 2016 12:27:38 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/02/07/dump_restore_command/</guid>
      <description>

&lt;h1 id=&#34;まとめ:24d1aea959d1a3feee770b5361f2f824&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;dump/restoreコマンドでパーティションごとバックアップ/リストアができる&lt;/li&gt;
&lt;li&gt;SDカードの中身を移行するのに便利

&lt;ul&gt;
&lt;li&gt;もちろんHDDでもいける&lt;/li&gt;
&lt;li&gt;Windowsは基本的にSDカードの第一パーティションしか認識できない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;sdカードのデータ移行がしたい:24d1aea959d1a3feee770b5361f2f824&#34;&gt;SDカードのデータ移行がしたい&lt;/h1&gt;

&lt;p&gt;Androidに使っているMicroSDが速度面で不満が出てきたため、より早い物に入れ替えを行いました。&lt;/p&gt;

&lt;p&gt;ですが、アプリのデータを入れていたりと、通常のMicroSDと使い方がだいぶ違うため、普通にコピペでバックアップ・リストアすると、権限周りやシンボリックリンク周りで問題が起きそうでした。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/blog/2014/12/30/link2sd/&#34;&gt;ASUS MeMO Pad 7 ME572CでLink2SDを動かす&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そこで、dump/restoreコマンドを使い、ファイルシステムを丸ごとバックアップ・リストアしました。今回の対象はSDカードですが、対象のデバイスは関係ないため、  HDDを対象としたバックアップも同じ手順で可能です。&lt;/p&gt;

&lt;h1 id=&#34;sdカードの第二パーティションのマウント:24d1aea959d1a3feee770b5361f2f824&#34;&gt;SDカードの第二パーティションのマウント&lt;/h1&gt;

&lt;p&gt;Link2SDを使っているため、SDカードの第二パーティションにバックアップ対象が保存されています。このパーティションをマウントし、dumpコマンドを利用してバックアップを行います。&lt;/p&gt;

&lt;p&gt;なお、Windowsでは基本的にSDカードの第二パーティションはマウントできないため、Linux上で作業を行いました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 接続された位置をfdiskで調べる
sudo fdisk -l

# 以下のようにSDカードのパーティションの位置が表示される
# /dev/sdc1 42 42424242 4242424242 42 HPFS/NTFS/exFAT
# /dev/sdc2 4242 42424242 42424242 42 Linux

# ext3でフォーマットしているのでマウントする
# (どうフォーマットしているかはその人次第です)
sudo mount -t ext3 /dev/sdc2 /mnt/sd
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;dumpコマンドでバックアップ:24d1aea959d1a3feee770b5361f2f824&#34;&gt;dumpコマンドでバックアップ&lt;/h1&gt;

&lt;p&gt;dumpコマンドを使うことで、ファイルシステムがext2,ext3,ext4のものをバックアップできます。
差分バックアップもサポートしていますが、今回はデータ移行が目的なのでフルバックアップを行います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# mount先の/mnt/sd以下をバックアップ
sudo dump -0 -f /data/sd.dump /mnt/sd

# -0でダンプレベル0(フルバックアップ)
# -fでバックアップしたデータのファイル名を指定
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;restoreコマンドでリストア:24d1aea959d1a3feee770b5361f2f824&#34;&gt;restoreコマンドでリストア&lt;/h1&gt;

&lt;p&gt;restoreコマンドを使うことで、dumpコマンドでバックアップしたデータをリストアできます。
バックアップが終わった時点でSDカードをフォーマット済みの新しい物に差し替え、
上記の手順で同じ場所にマウントしてあります。&lt;/p&gt;

&lt;p&gt;なお、restoreコマンドはリストア先を指定できそうなオプションが存在します。
ですが何故か上手く動かず、デフォルトの挙動であるカレントディレクトリにリストアされてしまうため、
事前にマウント先に移動しています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /mnt/sd
restore -r -f /data/sd.dump
# -rでデータをフルリストア
# -fでバックアップしたファイルを指定
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;時間がかかりますが、以上の手順でデータ移行が完了します。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年のpixiv内ラブライブイラストの分析</title>
      <link>http://ota42y.com/blog/2016/02/04/lovelive-pixiv-character-2016/</link>
      <pubDate>Thu, 04 Feb 2016 21:27:18 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/02/04/lovelive-pixiv-character-2016/</guid>
      <description>

&lt;p&gt;HP先行の結果が出ましたね。&lt;br /&gt;
…………ご察しください。&lt;/p&gt;

&lt;p&gt;さて、前回(&lt;a href=&#34;http://ota42y.com/blog/2016/01/22/lovelive-pixiv-illust-2015/&#34;&gt;2015年のpixiv内ラブライブイラストの推移
&lt;/a&gt;)に引き続き、pixiv内のラブライブイラストについて見ていきます。&lt;br /&gt;
本来はもう少し内容を書く予定でしたが、落選のダメージがでかいので少なめです…＿(:3 」∠)＿&lt;/p&gt;

&lt;h1 id=&#34;キャラごとの投稿数増加率:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;キャラごとの投稿数増加率&lt;/h1&gt;

&lt;p&gt;映画で人気が出たキャラがいないかと思い、2014年の12月から2015年の12月までに総投稿数がどれくらい増えたかを調べました。&lt;br /&gt;
特に増加率が大きい場合、映画によって人気が上がった可能性が考えられます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-02-04-chara_inc_rate.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-04-chara_inc_rate.png&#34;  width=&#34;40%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;小泉花陽と園田海未がかなり伸びていますが、この二人は去年12月時点では二期が始まってからの聖誕祭が行われていなかったので、前回が少なすぎただけの可能性があります。
一応投稿数の推移を調べてみたところ、他のキャラと同じく全体的に上がっており、劇場版で爆発的に人気が出たとかそういうのではないようです。&lt;/p&gt;

&lt;p&gt;一方で、星空凛、高坂穂乃果、東條希の3人は2期の恩恵を受けた前回からも伸びているため、全体的に人気が上がったor劇場版で大きく伸びたといえそうです。
とはいえ、ほぼ全員が2倍ぐらい伸びているため、劇場版で人気が伸びたと言うほど差があるとは言いづらい結果になっています。
なお、にこは割合ではちょっと少なめですが、去年の投稿数、および総投稿数では一位であり、増加率では劣ってますが増加数ではものすごい量でした。&lt;/p&gt;

&lt;h1 id=&#34;カップリング人気か-単体人気か:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;カップリング人気か、単体人気か&lt;/h1&gt;

&lt;p&gt;イラストは必ずしもカップリングだけとは限らず、単体でも投稿されています。
前回の結果からわかるとおり、にこまき等のカップリングイラストはとても多いですが、キャラ単体とカップリングとでどちらの方が人気なのでしょうか？
そこで、キャラごとにカップリングとキャラ単体、どっちが人気なのかを集計しました。&lt;/p&gt;

&lt;p&gt;なお、カップリングタグがついたものにはキャラの名前のタグがつけられる傾向にあるため、
キャラ単体でカップリングタグがないものと、カップリングタグがあるもの（キャラ単体のタグもあっていい）で集計しています。
また、投稿数だとキャラ別に比較しにくいので、そのキャラの全イラストとの割合で集計しています。&lt;br /&gt;
（全イラスト＝キャラ単体＋カップリングイラスト）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-02-04-chara_cp_rate.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-04-chara_cp_rate.png&#34;  width=&#34;70%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;多くのキャラはキャラ:カップリングイラストが7:3になっていますが、南ことりはキャラ単体の人気が高く、80％以上が単体のイラストになっています。&lt;/p&gt;

&lt;p&gt;一方で西木野真姫と絢瀬絵里はカップリング人気が特に高く、4割を超えています。
昨日の結果からわかるように、この二人はそれぞれ3種類のカップリングがランクインしており（「にこまき」「りんまき」「ほのまき」、「のぞえり」「うみえり」「ほのえり」）、やはりカップリング人気が高いのもうなずけます。&lt;/p&gt;

&lt;h1 id=&#34;サンシャイン:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;サンシャイン&lt;/h1&gt;

&lt;p&gt;サンシャインが発表されておよそ一年たちましたが、pixiv上の反応はどうだったのでしょうか。
というわけで調べてみました。&lt;/p&gt;

&lt;h2 id=&#34;サンシャインイラスト全体:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;サンシャインイラスト全体&lt;/h2&gt;

&lt;p&gt;サンシャインイラスト全体の投稿数の推移をまとめました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-02-04-sun_illust_all.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-04-sun_illust_all.png&#34;  width=&#34;50%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CD発売で一気に盛り上がり、12月の段階では一段落した感じです。
μ&amp;rsquo;sの初期も同じく発売後2ndまでは落ちていったので、およそ同じ傾向にあるようです。&lt;br /&gt;
(参考: &lt;a href=&#34;http://ota42y.com/blog/2014/12/25/lovelive/&#34;&gt;pixivのタグから読み解くラブライブイラストの歩み&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;ただ、1月にAqoursのイベントが行われたり、アニメ化が発表されたりと大きく動いたため、今月にかけてまた一気に盛り返すと思われます。&lt;/p&gt;

&lt;h2 id=&#34;aqoursキャラごとの投稿数推移:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;Aqoursキャラごとの投稿数推移&lt;/h2&gt;

&lt;p&gt;Aqoursメンバーのキャラごとに投稿数推移を見てみました。&lt;br /&gt;
なお、月ごとの投稿数をグラフ化すると上昇下降が激しすぎたので、累計で集計しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-02-04-sun_aqours_illust.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-02-04-sun_aqours_illust.png&#34;  width=&#34;70%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;センター総選挙では渡辺曜、黒澤ルビィ、桜内梨子の順でしたが、イラストではルビィがずば抜けて多く、次にヨハネ〜1年2年組と固まっています。&lt;/p&gt;

&lt;p&gt;総選挙でも3年生は下にいましたが、イラストでも同じ結果になっています…
とはいえ絶対数ではそもそもそんなに差は無く、μ&amp;rsquo;sのころに比べれば全然多いため、アニメ化や2ndでこれから先どう変化していくのが楽しみです。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:75ddd37748aba843c77b1dfa46ae15ad&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;劇場版で爆発的に人気が出たキャラはいなさそう

&lt;ul&gt;
&lt;li&gt;うみぱなが伸びているが、2期以降初めての聖誕祭が今年だったためと思われる&lt;/li&gt;
&lt;li&gt;他の伸びが大きいキャラもそこまでかけ離れてはいない&lt;/li&gt;
&lt;li&gt;にこは伸び率は悪いが投稿数は一番多い&lt;/li&gt;
&lt;li&gt;伸びてないというより、元から凄い人気だっただけかと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;キャラごとにカップリングか単体かはかなり好みが違う

&lt;ul&gt;
&lt;li&gt;西木野真姫と絢瀬絵里はカップリング相手としてかなり人気&lt;/li&gt;
&lt;li&gt;南ことりはカップリングより一人の方が人気&lt;/li&gt;
&lt;li&gt;他のキャラはだいたい単体7:カップリング3ぐらい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サンシャインはいったん落ち着いた

&lt;ul&gt;
&lt;li&gt;μ&amp;rsquo;sの1st以降と同じ傾向&lt;/li&gt;
&lt;li&gt;ただし数自体は全然多い&lt;/li&gt;
&lt;li&gt;総選挙とpixivの人気は違うみたい&lt;/li&gt;
&lt;li&gt;とはいえ、そこまで差は無い&lt;/li&gt;
&lt;li&gt;2016/01で大きく動いたので今後の動きに期待&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サンシャインに関しては先月にかなり大きく動いたため、ここ最近の変化も調べたいと思います。&lt;br /&gt;
ただし、落選ショックから立ち直れたらの話ですが…(´･_･`)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>オーバーライドとオーバーロードは全く別物</title>
      <link>http://ota42y.com/blog/2016/01/31/override-overload/</link>
      <pubDate>Sun, 31 Jan 2016 14:45:49 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/01/31/override-overload/</guid>
      <description>

&lt;p&gt;EffectiveJavaを読んでて、C++でも当てはまるのかな？と思って試してみたら当てはまったので…&lt;/p&gt;

&lt;h1 id=&#34;まとめ:673abe6170b0f105c1aee0e413f3350c&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;オーバーライドされたvirtualなメソッド呼び出しは実行時に決定

&lt;ul&gt;
&lt;li&gt;実態が子クラスなら、親クラスとして扱っても子クラスのメソッドが実行される&lt;/li&gt;
&lt;li&gt;実態が孫クラスの場合は孫クラスのメソッドが呼ばれる&lt;/li&gt;
&lt;li&gt;親から子、孫へと呼び出される関数が探されていく感じ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;オーバーロードされたメソッド呼び出しはコンパイル時に決定

&lt;ul&gt;
&lt;li&gt;virtual関数のように実態で切り替えが出来ない&lt;/li&gt;
&lt;li&gt;実態が子クラスでも、親クラスとして扱うなら親クラスのメソッドが実行される&lt;/li&gt;
&lt;li&gt;一致するものが無い場合は親クラスにキャストして一致するものを探す&lt;/li&gt;
&lt;li&gt;子から親へと一致するものを探していく感じ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;オーバーライドとは:673abe6170b0f105c1aee0e413f3350c&#34;&gt;オーバーライドとは&lt;/h1&gt;

&lt;p&gt;メソッドのオーバーライドとは、親クラスのメソッドを子クラスで再定義することです。
C++では親クラスでvirtualにされているメソッドをオーバーライドすると、
子クラスのオブジェクトを親クラスにキャストしてメソッドを呼び出しても、再定義された子クラスのメソッドが呼ばれます。
(virtualをつけないと親クラスのメソッドが呼ばれます)&lt;/p&gt;

&lt;p&gt;たとえば以下のコードでは、オーバーライドされているためExtのshowメソッドが実行され、「show ext」が表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;cstdio&amp;gt;

class Base {
public:
  virtual void show() { printf(&amp;quot;show base\n&amp;quot;); }
};

class Ext: public Base {
public:
  virtual void show() { printf(&amp;quot;show ext\n&amp;quot;); }
};

int main() {
    Ext *e = new Ext();
    Base *b = static_cast&amp;lt;Base*&amp;gt;(e);
    b-&amp;gt;show();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように、オーバーライドされたメソッドは実行時にどのメソッドが呼ばれるか決定されます。&lt;/p&gt;

&lt;h1 id=&#34;オーバーロードとは:673abe6170b0f105c1aee0e413f3350c&#34;&gt;オーバーロードとは&lt;/h1&gt;

&lt;p&gt;一方、似たような名前でオーバーロードというものもあります。
こちらは継承とは特に関係なく、同じメソッド名で引数の違うものを定義しておくと、
引数の種類をみて自動的に一致するメソッドが実行されます。&lt;/p&gt;

&lt;p&gt;たとえば以下の場合、呼び出しているのはprintという名前の関数ですが、
それぞれ引数が一致する関数が呼ばれるため、base、extと表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;cstdio&amp;gt;

class Base { };

class Ext: public Base { };

void print(Base *b) {printf(&amp;quot;base\n&amp;quot;);}
void print(Ext *b) {printf(&amp;quot;ext\n&amp;quot;);}

int main() {
    Ext *e = new Ext();
    Base *b = new Base();
    print(e);
    print(b);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;オーバーロードはコンパイル時決定:673abe6170b0f105c1aee0e413f3350c&#34;&gt;オーバーロードはコンパイル時決定&lt;/h2&gt;

&lt;p&gt;オーバーライドを見ているとオーバーロードも実行時にどれを呼び出すか決定していそうですが、
実際はコンパイル時にすでにどれが呼び出されるか決定しています。&lt;/p&gt;

&lt;p&gt;そのため、以下のように実態が子クラスだとしても、親クラスとして引数に渡した場合、親クラスのメソッドが呼ばれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;vector&amp;gt;

class Base {
public:
  virtual void show() { printf(&amp;quot;show base\n&amp;quot;); }
};

class Ext: public Base {
public:
  virtual void show() { printf(&amp;quot;show ext\n&amp;quot;); }
};

void print(Base *b) {printf(&amp;quot;base\n&amp;quot;);}
void print(Ext *b) {printf(&amp;quot;ext\n&amp;quot;);}


int main() {
std::vector&amp;lt;Base*&amp;gt; b;
b.push_back(new Base());
b.push_back(new Ext());

for (int i=0; i &amp;lt; b.size(); ++i){
  print(b.at(i));
  b.at(i)-&amp;gt;show();
  }

 return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力は以下の通りです&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;base
show base
base
show ext
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ただし親クラスは検索対象になる:673abe6170b0f105c1aee0e413f3350c&#34;&gt;ただし親クラスは検索対象になる&lt;/h2&gt;

&lt;p&gt;一方でオーバーロードは型が一致するものが無い場合は引数として渡されたクラスの継承ツリーをたどり、一致する親クラスを探してそれにキャストして実行してくれます。
もちろん親クラスから子クラスへはコンパイル時にはわからないため、子クラスから親クラスに検索を行います。
そのため、以下のコードは「ext」と表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;vector&amp;gt;

class Base {
};

class Ext: public Base {
};

class ExtExt: public Ext {
};

void print(Base *b) {printf(&amp;quot;base\n&amp;quot;);}
void print(Ext *b) {printf(&amp;quot;ext\n&amp;quot;);}

int main() {
    ExtExt *b = new ExtExt();
    print(b);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;一意に定まらない場合:673abe6170b0f105c1aee0e413f3350c&#34;&gt;一意に定まらない場合&lt;/h2&gt;

&lt;p&gt;なお、本当にどっちか決められない場合はambiguousというエラーになります&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;vector&amp;gt;

class InterA{
public:
    virtual void interA() = 0;
};

class InterB{
public:
    virtual void interB() = 0;
};

class Base : public InterA, public InterB {
public:
  virtual void interA() { printf(&amp;quot;interA\n&amp;quot;); }
  virtual void interB() { printf(&amp;quot;interB\n&amp;quot;); }
};


void print(InterA *i) { i-&amp;gt;interA(); }
void print(InterB *i) { i-&amp;gt;interB(); }

int main() {
    Base *b = new Base();
    print(b);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;test.cpp:26:5: error: call to &#39;print&#39; is ambiguous
    print(b);
    ^~~~~
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>tmux-change-paneというコマンドを作った</title>
      <link>http://ota42y.com/blog/2016/01/26/tmux-change-pane/</link>
      <pubDate>Tue, 26 Jan 2016 22:24:44 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/01/26/tmux-change-pane/</guid>
      <description>&lt;p&gt;tmux-change-paneというコマンドを作りました。&lt;br /&gt;
&lt;a href=&#34;https://github.com/ota42y/tmux-change-pane&#34;&gt;https://github.com/ota42y/tmux-change-pane&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;tmuxで現在開いているウィンドウの一覧を表示し、peco(pecol)で絞り込んで任意のタブに切り替えるアプリです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-26-tmux_change_pane.gif&#34; alt=&#34;&amp;lt;img src=&amp;quot;/images/blog/2016/2016-01-26-tmux_change_pane.gif&amp;quot;  width=&amp;quot;100%&amp;quot; /&amp;gt;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;似たようなものでswap-paneというものがすでにあります。&lt;br /&gt;
&lt;a href=&#34;https://github.com/abicky/swap-pane&#34;&gt;https://github.com/abicky/swap-pane&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;swap-paneでは複数画面に分割している際に、全ての分割をいったん消して選択画面を表示します。そのため、切り替えのたびに画面が一度フラッシュし、かつ必ず左上に作業領域が移ります。そのため、右下で作業してるような場合にかなり視線の操作が強制的に発生してとても面倒でした。&lt;/p&gt;

&lt;p&gt;tmux-change-paneでは今いる分割領域しか使わないため、作業する位置が大きく変わることがなく、また切り替え中も他の領域の情報を参考にすることができます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年のpixiv内ラブライブイラストの推移</title>
      <link>http://ota42y.com/blog/2016/01/22/lovelive-pixiv-illust-2015/</link>
      <pubDate>Fri, 22 Jan 2016 14:14:08 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/01/22/lovelive-pixiv-illust-2015/</guid>
      <description>

&lt;p&gt;「はぁい！楽しい人生送ってる？」&lt;br /&gt;
私はファイナルライブ落ちたので楽しい人生は送れてません…&lt;/p&gt;

&lt;p&gt;さてーーー&lt;br /&gt;
去年「&lt;a href=&#34;http://ota42y.com/blog/2014/12/25/lovelive/&#34;&gt;pixivのタグから読み解くラブライブイラストの歩み&lt;/a&gt;」というのを書きましたが、それ以降である2015/12月までの変化をまとめました。&lt;/p&gt;

&lt;p&gt;去年との違いに絞っているため、量は少なめですが、それでも多すぎるので分割して更新しています。
今回はカップリングイラストについての変化、次回はキャラごとのイラストの変化とサンシャインの動向についてを予定しています。&lt;br /&gt;
(次: &lt;a href=&#34;http://ota42y.com/blog/2016/02/04/lovelive-pixiv-character-2016/&#34;&gt;2015年のpixiv内ラブライブイラストの分析&lt;/a&gt;)&lt;/p&gt;

&lt;h1 id=&#34;イラスト投稿数推移:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;イラスト投稿数推移&lt;/h1&gt;

&lt;p&gt;こちらが2013年のアニメ一期以降のイラスト投稿数の推移を月ごとにまとめたものになります。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_01.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_01.png&#34;  width=&#34;70%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;アニメ2期で一気に広まり、いったん落ち着きを見せましたが、映画が始まってから投稿数は一気に伸び、夏コミのある8月には月8000枚を超しています。ここ3ヶ月ほどは横ばいのため、いったん落ち着いたようです。&lt;/p&gt;

&lt;h1 id=&#34;カップリング閲覧数:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;カップリング閲覧数&lt;/h1&gt;

&lt;h2 id=&#34;収集方法:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;収集方法&lt;/h2&gt;

&lt;p&gt;前回と同じく、pixivのタグから各カップリングタグ（にこまき、のぞえり等）と、ラブライブもしくはloveliveが両方つけられているイラストの閲覧数の合計を集計しています。
また、「まきりんぱな」や「ことほのうみ」等の3人タグは除外し、完全一致する場合のみ集計しています。
(ラブライブ、loveliveについては!ありなしどちらでも可)&lt;/p&gt;

&lt;h2 id=&#34;順序を気にしない場合の結果:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;順序を気にしない場合の結果&lt;/h2&gt;

&lt;p&gt;「にこまき」と「まきにこ」を区別しない場合の2015年12月までの表は以下のようになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_2015_nodic.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_2015_nodic.png&#34;  width=&#34;80%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1,000,00以上のものは黒色、2,000,000以上のものは青色、10,000,000以上のものは赤色で表示しています。順序を考慮していないため対角線を挟んで値は同じです。&lt;/p&gt;

&lt;p&gt;「のぞえり」「えりのぞ」と「うみえり」「えりうみ」を除くと、ほとんどが固定の順序になっており、順番を考慮してもしなくてもだいたい同じ結果になりそうです。
そのため、以降は集計を簡単にするために特筆しない限り順序を考慮して見ていきます。&lt;/p&gt;

&lt;h2 id=&#34;順序を気にした場合の結果:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;順序を気にした場合の結果&lt;/h2&gt;

&lt;h3 id=&#34;2015年12月までの閲覧数の表:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;2015年12月までの閲覧数の表&lt;/h3&gt;

&lt;p&gt;順序を気にする場合（「にこまき」と「まきにこ」は別物として扱う）、それぞれの結果は以下の通りになります。 なお、方向無しの場合とは違い、500,00以上のものは黒色、1,000,000以上のものは青色、2,000,000以上のものを赤色で表示しています。&lt;/p&gt;

&lt;p&gt;前回と同じく「にこまき」と「まきにこ」の両方がつけられたようなイラストが存在し、こちらの集計では別々にカウントされるため、順番を気にしない場合のグラフとは結果が異なります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_2015_dic.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_2015_dic.png&#34;  width=&#34;80%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2014年12月までの閲覧数の表:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;2014年12月までの閲覧数の表&lt;/h3&gt;

&lt;p&gt;また、企画開始から2014/12月までに投稿されたイラストの閲覧数は以下になります。
この1年で閲覧数は変化しているため実際に去年の同じ時期とは値がだいぶ異なりますが、
このグラフと2015年12月までの表を見比べることで、一年間の変化を調べるのの参考にはなります。
比較する場合は、去年時点で閲覧数はこれより少なかったということを考慮に入れる必要があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_2014_dic.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_2014_dic.png&#34;  width=&#34;80%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;カップリングイラストのまとめ:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;カップリングイラストのまとめ&lt;/h2&gt;

&lt;p&gt;「にこまき」が圧倒的人気なのは今まで通りですが、去年は倍以上の差があった「のぞえり」が大きく増加し、差が縮まっています。
また、去年に比べて閲覧数1,000,000以上のカップリングが11組から19組と、かなり増加しています。なかでも「ゆきあり」はμ&amp;rsquo;sメンバー以外で唯一1,000,000を超えを達成しています。&lt;/p&gt;

&lt;p&gt;色つきのものはほとんどが1.5~1.9倍ぐらいに伸びていますが、「ことぱな」が3倍近く、「まきぱな」「りんまき」が2倍以上と一年生が大きく伸びている印象です。
この中でも「りんまき」は去年の時点でもかなり高く、今年はもっと高くなっていることからかなり人気が上がっていると考えられます。&lt;/p&gt;

&lt;p&gt;「ことうみ」や「りんぱな」はほかのカップリングを引き離し、メジャーカップリングとしての地位が確立しつつあるようです。
一方で「まきぱな」や「ことぱな」「ことえり」等、去年はそれほど閲覧数が多くなかったカップリングが今年になって2倍程度、「ことぱな」に関しては3倍近く伸びており、ここ一年でいろんなカップリングにも注目が集まっているようです。&lt;/p&gt;

&lt;p&gt;なお、今回比較しているのは去年12月までに投稿されたイラストの現在の閲覧数であり、実際に去年の12月時点では現在よりも閲覧数は少ないため、実際の倍率はより大きいです。&lt;/p&gt;

&lt;h1 id=&#34;カップリングイラストの推移:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;カップリングイラストの推移&lt;/h1&gt;

&lt;h2 id=&#34;2015年度カップリングイラスト推移:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;2015年度カップリングイラスト推移&lt;/h2&gt;

&lt;p&gt;では、実際今のトレンドと去年のトレンドはどう変化していったのでしょうか。
残念ながら閲覧数では時系列で推移を見ることはできませんが、投稿数は日時と紐付いているため、変化を見ることができます。&lt;/p&gt;

&lt;p&gt;そこで、2015年の順序ありカップリングで赤文字になっている、閲覧数2,000,000以上の12カップリングと、それと同じくらい投稿数の多い三人組について、去年からの投稿数の推移をまとめました。
右側の凡例は、2015/12月現在で投稿数の多いもの順に並べています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_cp_graph_all.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_cp_graph_all.png&#34;  width=&#34;80%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2015年度カップリング推移:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;2015年度カップリング推移&lt;/h2&gt;

&lt;p&gt;上記のグラフは「にこまき」、「のぞえり」のぶっちぎり感がよく出ていますが、ほかのカップリングについては見にくいので、最大値を「ことうみ」に合わせて調節したグラフが以下になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_cp_graph_cut.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_cp_graph_cut.png&#34;  width=&#34;80%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「ほのうみ」と「りんまき」はほぼ同数のため被ってしまって見えていませんが、同じ線と考えて問題ありません。&lt;/p&gt;

&lt;h2 id=&#34;カップリング増加率:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;カップリング増加率&lt;/h2&gt;

&lt;p&gt;また、各カップリングの増加率は以下の通りです。&lt;br /&gt;
200%以上のものに関しては赤字にしてあります。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_cp_inc_rate.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_cp_inc_rate.png&#34;  width=&#34;20%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;カップリングイラストの推移まとめ:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;カップリングイラストの推移まとめ&lt;/h2&gt;

&lt;p&gt;「ことうみ」「ほのうみ」「ことほのうみ」と園田海未を含むカップリングが大きく増えています。&lt;br /&gt;
園田海未は2014年の聖誕祭が2期前であり、2015年でその効果が含まれている事を考慮すると、ようやく本来の人気に追いついた感じがします。
また、「りんまき」も増加しており、かつ閲覧数もかなり増加していたことから、「りんまき」は2015年でかなり人気になったと思われます。&lt;/p&gt;

&lt;p&gt;去年もそうでしたが、閲覧数では「ことうみ」の方が「りんぱな」よりも多いのに対し、投稿数では「りんぱな」の方が「ことうみ」よりも多い状態になっています。
この現象は「ことほの」と「ほのえり」にも見られているため、勘違いではなさそうですが、いまいち原因がわからないので、もう少し調査しようと思います…&lt;/p&gt;

&lt;h1 id=&#34;ほのキチの人気が分散している問題:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;ほのキチの人気が分散している問題&lt;/h1&gt;

&lt;p&gt;去年もそうでしたが、カップリング投稿者数では穂乃果を含むカップリングは上位にはいませんが、
代わりに4人との別々のカップリングと、3人組がランクインしており、ランキングに一番多く載っているキャラになっています。（ことほの、ほのえり、ほのうみ、ほのまき、ことほのうみ）
さらにこれらのカップリングはだいたい似たような順位についているため、穂乃果はこれといったカップリングがなく、人気が複数のカップリングに分散していそうです。&lt;br /&gt;
(絢瀬絵里もカップリングだけなら4つ載っていますが、穂乃果ほど分散してるとは考えにくい)&lt;/p&gt;

&lt;p&gt;そこで、仮に4種類のカップリングが分散していなかった場合、どれくらいの投稿数になるかを調べてみました。（ことほのうみは3人組なので同列にしてしまうのはおかしいと思うので省いてあります）&lt;/p&gt;

&lt;h2 id=&#34;他カップリングの分散具合の調査:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;他カップリングの分散具合の調査&lt;/h2&gt;

&lt;p&gt;他のカップリングを見る限り、複数のカップリングが同じ人気になることはなく、偏りが出るのが普通のようです。
今回は4つのカップリングが分散していなかった場合と、2つに分散していた場合とを想定して集計します。&lt;/p&gt;

&lt;p&gt;2つに分散している場合、どのような比率で分散しているかを調べるため、同じく二つに分散している「ことうみ」「ことほの」、「りんまき」「りんぱな」、「のぞえり」「にこのぞ」、「にこまき」「にこのぞ」の比率を参考にします。
これらのカップリングの比率は以下のようになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_cp_div_rate.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_cp_div_rate.png&#34;  width=&#34;30%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;多い方の割合は約0.65~0.88と、どれも違った偏りを見せています。
今回は偏りが最も少ない「りんぱな」の0.649を使って算出します。&lt;/p&gt;

&lt;h2 id=&#34;穂乃果を含むカップリングが分散していなかった場合:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;穂乃果を含むカップリングが分散していなかった場合&lt;/h2&gt;

&lt;p&gt;高坂穂乃果を含むカップリングが分散していなかった場合を想定したグラフは以下の通りになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/image
s/blog/2016/2016-01-22-lovelive_honoka.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2016/2016-01-22-lovelive_honoka.png&#34;  width=&#34;70%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;図のオレンジ色の「ほのキチ」がカップリングが分散していなかった場合の値、黒い「ほのキチ/2」がカップリングが「りんぱな」と同じ割合で二つに分散していた場合のです。
（他の割合ではもっと上になります）&lt;/p&gt;

&lt;p&gt;見ての通り、二種類のカップリングに集約された場合である「ほのキチ/2」は「りんぱな」や「ことうみ」とだいたい同じぐらいの位置につけています。
このように、穂乃果を含むカップリングは投稿数的には人気のあるカップリングではありますが、4つに分散しているためにあまり目立っていない状態のようです。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:c0efaaa6acd3f5e6bcc1d178f541f9da&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;イラスト数は凄い伸びてる

&lt;ul&gt;
&lt;li&gt;映画効果凄い&lt;/li&gt;
&lt;li&gt;それは紅白も出ますよね…&lt;/li&gt;
&lt;li&gt;ちょっと落ち着いてるがそれでも去年の夏コミの時期レベル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;カップリングは全体的に伸びてる

&lt;ul&gt;
&lt;li&gt;「にこまき」「のぞえり」は相変わらず人気&lt;/li&gt;
&lt;li&gt;「ことうみ」が「りんぱな」ぐらいメージャーカップリングになった&lt;/li&gt;
&lt;li&gt;メジャーではなかったカップリングも人気が上がっている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;穂乃果を含むカップリングは分散している

&lt;ul&gt;
&lt;li&gt;穂乃果のいるカップリング自体は人気がある&lt;/li&gt;
&lt;li&gt;王道カップリングがなく、いろんなカップリングが同じように人気&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次: &lt;a href=&#34;http://ota42y.com/blog/2016/02/04/lovelive-pixiv-character-2016/&#34;&gt;2015年のpixiv内ラブライブイラストの分析&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>論文紹介「Corona: Positioning Adjacent Device with Asymmetric Bluetooth Low Energy RSSI Distributions」</title>
      <link>http://ota42y.com/blog/2015/12/25/hci_advent_25/</link>
      <pubDate>Fri, 25 Dec 2015 00:39:52 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/12/25/hci_advent_25/</guid>
      <description>

&lt;h1 id=&#34;まとめ:b5ab9fb37652233f44e2716edb31652a&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;BluetoothのRSSIだけで対象のデバイスがどこにいるかわかる

&lt;ul&gt;
&lt;li&gt;動画を見るのが手っ取り早い&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VqAoxVhO4xA&#34;&gt;https://www.youtube.com/watch?v=VqAoxVhO4xA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;BluetoothのRSSIが位置によって違うことを利用している

&lt;ul&gt;
&lt;li&gt;RSSIを学習すれば、どこにあるか予測可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;オリジナルより精度が悪いて実装をしてみたが、それでも結構ちゃんと動く

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ota42y/corona-clone&#34;&gt;https://github.com/ota42y/corona-clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/wsglHEhtYCM&#34;&gt;https://youtu.be/wsglHEhtYCM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;はじめに:b5ab9fb37652233f44e2716edb31652a&#34;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;このエントリは「ヒューマンコンピュータインタラクション論文紹介 Advent Calendar 2015」の25日目のものです。&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/advent-calendar/2015/hci&#34;&gt;http://qiita.com/advent-calendar/2015/hci&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;紹介する論文:b5ab9fb37652233f44e2716edb31652a&#34;&gt;紹介する論文&lt;/h1&gt;

&lt;p&gt;今回もUIST2015から、&lt;a href=&#34;http://dl.acm.org/citation.cfm?doid=2807442.2807485&#34;&gt;Corona: Positioning Adjacent Device with Asymmetric Bluetooth Low Energy RSSI Distributions&lt;/a&gt;という論文を紹介します。&lt;br /&gt;
これはBluetoothのRSSIだけを利用し、デバイスの相対的な位置を検出する手法についての論文です。&lt;/p&gt;

&lt;p&gt;動画はこちらになります。&lt;br /&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/VqAoxVhO4xA&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h1 id=&#34;手法について:b5ab9fb37652233f44e2716edb31652a&#34;&gt;手法について&lt;/h1&gt;

&lt;p&gt;Bluetoothのチップの位置はデバイスの中心からずれたところに置かれているため、
各辺からチップまでの距離はそれぞれ異なり、結果としてRSSIが異なってきます。この距離の違いから来るRSSIの違いを学習しておくことで、
現在のRSSIからどの位置に置かれているかが識別できるというのがこの論文で提案している手法です。&lt;/p&gt;

&lt;p&gt;わかりにくいと思うので図にしました。灰色の長方形内にあり、中心線上にない任意の青色の点から、
オレンジで表された各辺までの距離が全て異なるということがわかると思います。&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/images/blog/2015/2015-12-25-corona-example.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2015/2015-12-25-corona-example.png&#34;  width=&#34;20%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実際、私の手元のタブレットでは左上にチップがあるため、右辺や下辺は遠く、上辺や左辺は近くなっており、RSSIも-40~-20までかなりの差が出ます。
値は常に若干上下しますが直近数秒でまとめるとだいたい安定しているので、確かに識別に使えそうです。&lt;/p&gt;

&lt;h1 id=&#34;やってみた:b5ab9fb37652233f44e2716edb31652a&#34;&gt;やってみた&lt;/h1&gt;

&lt;p&gt;RSSIだけで位置が測定できる！と聞いても半信半疑だったので、実際にやってみました。&lt;br /&gt;
(15秒あたりから開始)&lt;br /&gt;
&lt;a href=&#34;https://github.com/ota42y/corona-clone&#34;&gt;https://github.com/ota42y/corona-clone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実際に動いている様子は以下の通りです。&lt;br /&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wsglHEhtYCM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;オリジナルの手法をそのまま実装するのが大変だったので、学習量を少なめに、かつ適当なベイズ識別期に投げるだけとかなり簡素化しています。&lt;br /&gt;
動画の通り、かなり簡素化した状態でもわりといい精度でどの位置にあるかを識別できていますので、
ちゃんとオリジナルのを実装すれば相当な精度になることが予想できます。&lt;/p&gt;

&lt;h1 id=&#34;その他:b5ab9fb37652233f44e2716edb31652a&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;Bluetoothチップが中心からずれていることに依存しているので、今後中心や中心線上に乗ったデバイスに対しては識別できるのか心配です。
たとえば横方向の中心線上（上辺と下辺から等距離）の場合、左右では距離が違いますが上下では距離が同じになります。
もちろん片方のデバイスが等距離でももう片方が等距離でないなら、上に置いたときと下に置いたときで距離が変わるため識別可能ですが、どちらも同じ距離になるようにおいた場合は判別ができなさそうです…&lt;/p&gt;

&lt;p&gt;とはいえ、動画のサムネイルや論文の図にあるRSSIの等高線が円ではなく多角形の形をしていることから、
内部の基板やデバイスの材質によって大きく変動するため、完全にRSSIが同じ2点が存在するというのはほぼあり得ないと考えて良さそうです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>論文紹介「Unravel: Rapid Web Application Reverse Engineering via Interaction Recording, Source Tracing, and Library Detection」</title>
      <link>http://ota42y.com/blog/2015/12/13/hci_advent_13/</link>
      <pubDate>Sun, 13 Dec 2015 07:01:33 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/12/13/hci_advent_13/</guid>
      <description>

&lt;h1 id=&#34;まとめ:9913c53850aa0622c9092d02fc2a6ba6&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Webページのリバースエンジニアリングの支援をする研究&lt;/li&gt;
&lt;li&gt;コール情報やDOMの変化を記録、閲覧可能に&lt;/li&gt;
&lt;li&gt;該当のソースを見つけるまでの時間が早くなる&lt;/li&gt;
&lt;li&gt;chrome拡張が公開されているので実際に試せる&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;はじめに:9913c53850aa0622c9092d02fc2a6ba6&#34;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/hci&#34;&gt;「ヒューマンコンピュータインタラクション論文紹介 Advent Calendar 2015」&lt;/a&gt;の13日目のものです。&lt;/p&gt;

&lt;p&gt;今回はUIST20015からWeb系の論文でいいのがあったので紹介します。&lt;br /&gt;
実は昨日のUIST勉強会で読んだので、参加してる人にとってはまたかよ…ってなりますが、&lt;br /&gt;
去年を見る限りUIST勉強会は資料を公開しないようなので、参加しなかった人にとってはお得なはずです…&lt;/p&gt;

&lt;h1 id=&#34;論文の内容:9913c53850aa0622c9092d02fc2a6ba6&#34;&gt;論文の内容&lt;/h1&gt;

&lt;p&gt;今回紹介する論文は「&lt;a href=&#34;http://dl.acm.org/citation.cfm?id=2807468&#34;&gt;Unravel: Rapid Web Application Reverse Engineering via Interaction Recording, Source Tracing, and Library Detection&lt;/a&gt;」です。
この論文は、UnravelというWebページのリバースエンジニアリングを支援するツールについての論文です。&lt;/p&gt;

&lt;p&gt;このツールはまず、Webページ上で動いているDOMの変化やJSのコール情報を記録していきます、
そして、Chromeのデベロッパーツールにタブを追加し、そこに変更回数や呼び出し回数でソートして情報を表示します。
これにより、Webページ上での動きが、どのようなJSとDOMの変化によって実現されているのかを簡単に調べることができます。&lt;/p&gt;

&lt;p&gt;動画はこちらになります。&lt;br /&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/mhY7jvRFXJ8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h1 id=&#34;先行研究との比較:9913c53850aa0622c9092d02fc2a6ba6&#34;&gt;先行研究との比較&lt;/h1&gt;

&lt;p&gt;論文中でいくつかあげられていますが、先行研究は条件が限定的だったり、巨大なサイトを対象にしたときに動作が遅くなってしまうのに対し、
このツールは任意のサイトに適応可能で、巨大なサイトでも遅くならないと述べられています。&lt;/p&gt;

&lt;h1 id=&#34;実装方法:9913c53850aa0622c9092d02fc2a6ba6&#34;&gt;実装方法&lt;/h1&gt;

&lt;p&gt;documentへの書き込みを全てフックして情報を保存してるらしいです。
そのため、他の研究に比べて取れる情報が限定的になりますが、任意のサイトに適応可能になっているとのことです。
また、後述するようにソースが公開されているので、詳しく知りたい方はコードを読むのがいいと思います。&lt;/p&gt;

&lt;h1 id=&#34;実験:9913c53850aa0622c9092d02fc2a6ba6&#34;&gt;実験&lt;/h1&gt;

&lt;p&gt;このツールのありなしで、TumblerやApple等のサイトのアニメーションを再現するタスクを行い、途中のチェックポイントごとに比較をしたそうです。
結果として、システムアリの方が関連するソースの最初に見つけるまでの時間が50%短縮され、全体としても30%短縮されたそうです。
ただし、関連するコードを見つけてからタスク終了までの時間に差は無いらしく、動きからコードの位置を調べるのには役に立っているが、
ソースコードが理解しやすくなっているわけではなさそうです。
なお、上級者と初級者で特に差は無かったそうです。&lt;/p&gt;

&lt;p&gt;残念なことに、論文ではこのツールのありなしでしか比較しておらず、先行研究との比較がされていませんでした。
このツールの押しの1つであるポータブル製（環境が特殊で無くてもどこでも使える）は比較が難しいですが、
もう一つの巨大なサイトでも遅くならないという速度に関しては比較できそうなので、そっちは既存のやつとの差を調べてほしかったと思いました。&lt;/p&gt;

&lt;h1 id=&#34;その他:9913c53850aa0622c9092d02fc2a6ba6&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;このツールは公開されているので普通に使う事が出来ます。&lt;br /&gt;
&lt;a href=&#34;https://github.com/NUDelta/Unravel&#34;&gt;https://github.com/NUDelta/Unravel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただし、minifyされているとJSのコール情報部分がとてもわかりにくいので、事前にunminifyしておく必要があります。&lt;br /&gt;
（実験ではunminify済みの状態で行った）&lt;/p&gt;

&lt;p&gt;知っているコードならともかく、知らないコードに対しては動きと対応する部分を見つけるのはとても大変なので、
もの凄く便利そうでした。自動minifyとかが出来ると、普通に実用的なツールになると思います。&lt;/p&gt;

&lt;p&gt;なお、今日が&lt;a href=&#34;http://qiita.com/advent-calendar/2015/hci&#34;&gt;「ヒューマンコンピュータインタラクション論文紹介 Advent Calendar 2015」&lt;/a&gt;の13日目ですが、14日目はあいているのでおすすめな論文がある人や面白い論文を読んだことがある人は是非！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GithubのContributionsを使ってアウトプットを500日続ける</title>
      <link>http://ota42y.com/blog/2015/12/09/500_output/</link>
      <pubDate>Wed, 09 Dec 2015 07:00:01 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/12/09/500_output/</guid>
      <description>

&lt;p&gt;前から&lt;a href=&#34;http://ota42y.com/blog/2014/12/31/150-output/&#34;&gt;GithubのContributionsを使ってアウトプットを150日続ける&lt;/a&gt;というものを続けていましたが、ついに500日たちました。ちょうどいい区切りなので振り返ってみようと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ota42y.com/images/blog/2015/2015-12-08-500-output.png&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2015/2015-12-08-500-output.png&#34;  width=&#34;100%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;良かったこと:8a0d3fbcafca7fe52cfeb7820ee0b7a6&#34;&gt;良かったこと&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;常にプログラムを書いたり、物事を調べてまとめる習慣が出来た&lt;/li&gt;
&lt;li&gt;「いつかやろう」を放置せずに取りかかるようになった&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;およそ前に考えたとおり、アウトプット量を確保するために色々なことに手を出し、良い習慣になっていたと思います。&lt;/p&gt;

&lt;h1 id=&#34;問題点:8a0d3fbcafca7fe52cfeb7820ee0b7a6&#34;&gt;問題点&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;一つ一つのアウトプットの質が安定しない&lt;/li&gt;
&lt;li&gt;読書など長いインプットをしなくなった&lt;/li&gt;
&lt;li&gt;github以外のアウトプットができなくなった&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特に質が悪い部分に関しては前から予想できており、
そのときはまずは質より量の方が重要と思い、特に対策はしませんでした.
ただ、最近は量は担保できるようになったので、次は質かな…と思っています。&lt;/p&gt;

&lt;p&gt;また、本を読むなど量の少ないアウトプットしか出来ない事に対して消極的になってしまいました。
これは質の高い1つのアウトプットより、コードを書くなど試行錯誤した安定しないアウトプットの方が量が稼げるため、
最適戦略をとるとどうしてもいいアウトプットを作る方向に行かないのが原因です。&lt;/p&gt;

&lt;p&gt;また、計測をGithubでやっている関係上、QiitaなどGithub以外のアウトプットは加算されないため、ほとんどしなくなっていました。&lt;/p&gt;

&lt;h1 id=&#34;これから:8a0d3fbcafca7fe52cfeb7820ee0b7a6&#34;&gt;これから&lt;/h1&gt;

&lt;p&gt;利点もいくつかありましたが、同時に欠点も見えてきました。
特にgithubに固定化されてしまうことや、毎日更新という量に縛られる事が問題となっている気がします。&lt;/p&gt;

&lt;p&gt;そのため、次からは月に5回以上の文章によるアウトプットをする方向で行こうと思います。
これにより、github以外のアウトプットも換算できますし、コードを書いてそれを文章でまとめればコーディングも換算できます。
また、回数が減ったことにより量を確保することに縛られなくなるため、時間がかかるような事も出来るようになります。&lt;/p&gt;

&lt;p&gt;とりあえず今月から初めて見ようと思います。
毎月前月の分をまとめることで（まとめエントリはカウント外）、継続しているかのチェックにもなりそうです。&lt;/p&gt;

&lt;p&gt;しばらくやってみて、続かなそうならまた一日一コミットに戻そうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wunderlistでサマリー出力をする</title>
      <link>http://ota42y.com/blog/2015/12/08/wl_report/</link>
      <pubDate>Tue, 08 Dec 2015 07:58:08 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/12/08/wl_report/</guid>
      <description>

&lt;p&gt;最近知った&lt;a href=&#34;https://www.wunderlist.com&#34;&gt;Wunderlist&lt;/a&gt;が、全プラットフォーム使えたり、
モバイルアプリが使いやすかったり、タスクがショートカットで追加できるデスクトップアプリがあったりと、なかなか便利そうなので今試しに使っています。&lt;/p&gt;

&lt;p&gt;ただ、終了したタスク一覧をさっと見られないため、あれやったっけ？とか、今週疲れ気味かも…とか、がんばり具合とかがわかりません。
たぶんあった方が良さそうな気がしたので、過去一週間に完了したタスクを日ごとに分けてレポート出力するやつを作りました。&lt;/p&gt;

&lt;p&gt;すでにCLIから一覧を取ってJSONで書き出せるものがあるので、これの出力を利用します。&lt;br /&gt;
&lt;a href=&#34;https://github.com/robdimsdale/wl&#34;&gt;https://github.com/robdimsdale/wl&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;使い方:5c0e355a2ac83f934f41ecabb47e608e&#34;&gt;使い方&lt;/h1&gt;

&lt;p&gt;以下のように利用します。&lt;br /&gt;
&lt;code&gt;
wl tasks --completed true -j | go run report.go
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;こんな感じに日ごとに終了したタスクがリスト化されていきます。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2015-11-30 10 tasks completed&lt;br /&gt;
07:37:51 mail check&lt;br /&gt;
07:59:23 review PR&lt;br /&gt;
22:06:09 create blog entry&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;コード:5c0e355a2ac83f934f41ecabb47e608e&#34;&gt;コード&lt;/h1&gt;

&lt;p&gt;コードはこれです。
&lt;script src=&#34;https://gist.github.com/ota42y/f40dd18687d3bd5350d8.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;その他:5c0e355a2ac83f934f41ecabb47e608e&#34;&gt;その他&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;全部のタスクを並べるのはつらいので、3日以前は終了タスク数のみとかにしたい&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;コマンドが面倒なので、単体で完結したい

&lt;ul&gt;
&lt;li&gt;単体で完結するようになったらgithubのリポジトリ作るかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;もうちょっと見やすくしたい&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MongoDB の update は部分 update ではない</title>
      <link>http://ota42y.com/blog/2015/12/02/mongodb_update/</link>
      <pubDate>Wed, 02 Dec 2015 07:25:25 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/12/02/mongodb_update/</guid>
      <description>

&lt;h1 id=&#34;まとめ:621f39d31cd5b5462567615247739831&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB の update はレコードのID以外の要素を全て置き換える&lt;/li&gt;
&lt;li&gt;指定したカラムだけ置き換えてはくれない&lt;/li&gt;
&lt;li&gt;部分 update したい場合は専用の方法でクエリを作る&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;mongodb-の-update-はレコードをほぼ全て置き換える:621f39d31cd5b5462567615247739831&#34;&gt;MongoDB の update はレコードをほぼ全て置き換える&lt;/h1&gt;

&lt;p&gt;以下のように insert して update を実行します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.test.insert({a: 1})
db.test.update({a:1}, {b: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# ruby版
mongo = Mongo::Client.new(&amp;quot;mongodb://localhost&amp;quot;)
col = mongo[:test]
col.insert_one({ a: 1 })
col.find(a: 1).replace_one({b:1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;insert と update とでキーが違うため、指定した部分だけが書き換わり&lt;br /&gt;
&lt;code&gt;{a:1, b:1}&lt;/code&gt;&lt;br /&gt;
となりそうですが、実際は&lt;br /&gt;
&lt;code&gt;{b:1}&lt;/code&gt;&lt;br /&gt;
と、後のデータで完全上書きされてしまいます。&lt;/p&gt;

&lt;p&gt;このように、MongoDB の update はデータの全置き換えを実行します。&lt;br /&gt;
なお、ObjectId は変わらないため、消して再度 insert しているのではなく、ObjectId 以外のデータを全て変更しています。&lt;/p&gt;

&lt;h1 id=&#34;回避方法:621f39d31cd5b5462567615247739831&#34;&gt;回避方法&lt;/h1&gt;

&lt;p&gt;もちろん毎度上書きだととても不便なため、回避方法が存在します。&lt;/p&gt;

&lt;p&gt;以下のように、update する際に &lt;code&gt;$set&lt;/code&gt; のキーとして変更するデータのみを渡します。&lt;br /&gt;
これにより、指定したものだけ書き換えられるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.test.update({a:1}, {$set:{b: 1}})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# ruby版
col.insert_one({ a: 1 })
col.find(a: 1).replace_one(&#39;$set&#39; =&amp;gt; {b:1})
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>バッカソン（おばかハック）! #MA11 に参加してきた</title>
      <link>http://ota42y.com/blog/2015/10/18/ma11/</link>
      <pubDate>Sun, 18 Oct 2015 22:23:57 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/10/18/ma11/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://hacklog.jp/events/view/61&#34;&gt;http://hacklog.jp/events/view/61&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こんなの(&lt;a href=&#34;http://hacklog.jp/works/4849&#34;&gt;バッカライザー&lt;/a&gt;)を作ったところ、Microsoft賞を頂きましたヽ(´ー｀)ノ&lt;br /&gt;
&lt;a href=&#34;http://ota42y.com/images/blog/2015/2015-10-18 ma11.jpg&#34;&gt;&lt;img src=&#34;http://ota42y.com/images/blog/2015/2015-10-18 ma11.jpg&#34;  width=&#34;20%&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下反省も含めたメモメモ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://c9.io/&#34;&gt;Cloud.9&lt;/a&gt;便利

&lt;ul&gt;
&lt;li&gt;いい点&lt;/li&gt;
&lt;li&gt;オンラインIDE+公開サーバ&lt;/li&gt;
&lt;li&gt;複数人で同時編集可能&lt;/li&gt;
&lt;li&gt;作ってその場で動かせて共有可能なのでもの凄い便利&lt;/li&gt;
&lt;li&gt;sudoも自由にできる&lt;/li&gt;
&lt;li&gt;はまりどころ&lt;/li&gt;
&lt;li&gt;謎の挙動が多い

&lt;ul&gt;
&lt;li&gt;URLの末尾にいつの間にか-1がついてたり&lt;/li&gt;
&lt;li&gt;プログラムから自分のURLを取ると:80がついていたり(URLには無い)&lt;/li&gt;
&lt;li&gt;コンソールが8行ぐらいしか出なかったり(同時に開いている一番小さいサイズになる?)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.projectoxford.ai/&#34;&gt;Microsoft Project Oxford&lt;/a&gt;便利

&lt;ul&gt;
&lt;li&gt;精度のいい文字認識&lt;/li&gt;
&lt;li&gt;顔認識も&lt;/li&gt;
&lt;li&gt;Cloud9の公開ディレクトリに保存してURLを渡すだけで終わる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;チーム分担

&lt;ul&gt;
&lt;li&gt;全員エンジニアなだけあって、役割分担は凄く上手くいった&lt;/li&gt;
&lt;li&gt;特にタスク切らなくても勝手に動いていく感じ&lt;/li&gt;
&lt;li&gt;実装、コンテンツ作成、調査と分担もいい感じ&lt;/li&gt;
&lt;li&gt;結果としては後述するように着地点の設定が甘かった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;アイデアだし

&lt;ul&gt;
&lt;li&gt;そもそも技術的に難しそうなチャレンジにフォーカスして中身に集中できなかった&lt;/li&gt;
&lt;li&gt;認識部分をどう作るか？にフォーカスしすぎた&lt;/li&gt;
&lt;li&gt;今回のハッカソンの趣向的に、モノの仕上がり具合やプレゼンに集中すべきだった&lt;/li&gt;
&lt;li&gt;チャレンジよりコンテンツ作りに振るべき&lt;/li&gt;
&lt;li&gt;思しくすることに時間を割けなかった&lt;/li&gt;
&lt;li&gt;発表プレゼンとかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;技術力不足

&lt;ul&gt;
&lt;li&gt;画像認識によるシール判別をしたかったが時間が足りず断念&lt;/li&gt;
&lt;li&gt;事前にある程度作れるものをまとめておいた方が絶対にいい&lt;/li&gt;
&lt;li&gt;何を作るかだけにフォーカスする&lt;/li&gt;
&lt;li&gt;登録された画像パターンの検索は何かと便利そうだし作っておいていいかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;色々と問題点が明らかになりましたが、やっていてとても楽しかったです。&lt;br /&gt;
今回のMAはもう終わりますが、次のMAは色々なハッカソンに参加してみようと思います。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>