<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Conference on おおたの物置</title>
    <link>http://ota42y.com/tags/conference/</link>
    <description>Recent content in Conference on おおたの物置</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 27 Oct 2016 15:37:37 +0900</lastBuildDate>
    
	<atom:link href="http://ota42y.com/tags/conference/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shinjuku.rb #42でRubocopについて話した</title>
      <link>http://ota42y.com/blog/2016/10/27/shinjuku-rb-42/</link>
      <pubDate>Thu, 27 Oct 2016 15:37:37 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/10/27/shinjuku-rb-42/</guid>
      <description> Shinjuku.rb #42に行ってきました。
http://shinjukurb.connpass.com/event/42245/
今回はコード分析・解析系のgemがテーマで、私はRubocopについて発表しました。
発表内容   Shinjukurb 42  from ota42y 
Rubocopはソースコードをパーサgemを使ってASTに変換し、ちゃんとどういう構造なのかを見ていて凄くちゃんと解析していたので凄いなーと思う反面、 自分でルールを追加するのもの凄く大変そうでした。
また、こういったコードの整形ツールは自転車小屋の議論になって導入するの凄く大変だよね…という闇の深いディスカッションが行われました… やはり何処も苦労するところは同じようです…(´・_・`)
その他 リファクタリングを支援してくれるgemが紹介されていましたが、 基本的に既存部分を切り出す→新しいロジックと同時に実行して実行結果をチェック→結果をDBとかに保存する、 といった手順を踏んでおり、どれもやることは変わらず、rubyのリファクタリング手法としては一般的な方法なのかな…？と思いました。 (稀にしか起きない問題や、副作用をどう消すかといった部分は別途考える必要ありそう)
Rubocopがやってくれる一般的なものではなく、もっと自分たち向けのチェック項目が欲しいけど、 ルール追加がめちゃくちゃ大変だなーと思っていたら、凄くいいgemの発表がありました。
soutaro/querly: Query Method Calls from Ruby Programs
メソッドが呼ばれているかをちゃんと解析してチェックできるので、
ヤバそうなメソッドや使い方が怪しいやつとかを抽出できるらしく、凄く良さそうでした。
他の方々の資料  reading suture scientist.md  </description>
    </item>
    
    <item>
      <title>Ginza.rb 第40回でprmdについて話した</title>
      <link>http://ota42y.com/blog/2016/10/22/ginza-rb-40/</link>
      <pubDate>Sat, 22 Oct 2016 22:37:37 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2016/10/22/ginza-rb-40/</guid>
      <description> Ginza.rb 第40回に行ってきました。
https://ginzarb.doorkeeper.jp/events/52895
今回は参加者がLTをする形式で、14人ぐらい？LTがありました。
発表内容   prmdのドキュメントが読みやすくなる話  from ota42y 
JSON Schema+prmd+committeeは、ドキュメントと実態を揃えられる＆揃える利点を増やしてくれるので、とてもいい構成だと思います。
また、prmdが出力するドキュメントにはcurlのコマンドやレスポンスのJSONが整った形式でついているため、 クライアント側としても手軽にAPIをテストすることができてとても有用なので、 最悪JSON Schema+prmdだけでも導入すると良いと思います。 (元クライアントからの意見)
その他 ruby c extensionが凄い面白かったのでちょっと触ってみようと思います(｀・ω・´)
他の方々の資料 #ginzarbのハッシュタグを見て見つかったものだけ上げています
 Ginza.rb 第40回 - koicの日記 Ginza.rb で &amp;ldquo;grifork&amp;rdquo; について発表してきた - weblog of key_amb 自分の使ったものをみせてみよう // Speaker Deck 勉強会/ginza.rb #40 - esa-pages.io Rails Authorization // Speaker Deck buoys gem の紹介  </description>
    </item>
    
    <item>
      <title>バッカソン（おばかハック）! #MA11 に参加してきた</title>
      <link>http://ota42y.com/blog/2015/10/18/ma11/</link>
      <pubDate>Sun, 18 Oct 2015 22:23:57 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/10/18/ma11/</guid>
      <description>http://hacklog.jp/events/view/61
こんなの(バッカライザー)を作ったところ、Microsoft賞を頂きましたヽ(´ー｀)ノ

以下反省も含めたメモメモ
 Cloud.9便利  いい点 オンラインIDE+公開サーバ 複数人で同時編集可能 作ってその場で動かせて共有可能なのでもの凄い便利 sudoも自由にできる はまりどころ 謎の挙動が多い  URLの末尾にいつの間にか-1がついてたり プログラムから自分のURLを取ると:80がついていたり(URLには無い) コンソールが8行ぐらいしか出なかったり(同時に開いている一番小さいサイズになる?)   Microsoft Project Oxford便利  精度のいい文字認識 顔認識も Cloud9の公開ディレクトリに保存してURLを渡すだけで終わる  チーム分担  全員エンジニアなだけあって、役割分担は凄く上手くいった 特にタスク切らなくても勝手に動いていく感じ 実装、コンテンツ作成、調査と分担もいい感じ 結果としては後述するように着地点の設定が甘かった  アイデアだし  そもそも技術的に難しそうなチャレンジにフォーカスして中身に集中できなかった 認識部分をどう作るか？にフォーカスしすぎた 今回のハッカソンの趣向的に、モノの仕上がり具合やプレゼンに集中すべきだった チャレンジよりコンテンツ作りに振るべき 思しくすることに時間を割けなかった 発表プレゼンとかも  技術力不足  画像認識によるシール判別をしたかったが時間が足りず断念 事前にある程度作れるものをまとめておいた方が絶対にいい 何を作るかだけにフォーカスする 登録された画像パターンの検索は何かと便利そうだし作っておいていいかも   色々と問題点が明らかになりましたが、やっていてとても楽しかったです。
今回のMAはもう終わりますが、次のMAは色々なハッカソンに参加してみようと思います。</description>
    </item>
    
    <item>
      <title>ABPro2015で発表してきた</title>
      <link>http://ota42y.com/blog/2015/10/10/abpro2015/</link>
      <pubDate>Sat, 10 Oct 2015 23:58:16 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/10/10/abpro2015/</guid>
      <description>togetterまとめ
  身近なサイバー攻撃から身を守る  from ota42y 
ディープラーニングによる画像認識でTL上の飯テロ画像を判定しています。
事前に発表タイミングをお昼直前にお願いしており、
その通りにしていただけたため大好評だったと思います。
なお、画像認識自体はAlchemyAPIに投げているだけです.</description>
    </item>
    
    <item>
      <title>第48回情報科学若手の会2015に参加してきた</title>
      <link>http://ota42y.com/blog/2015/09/22/wakate2015/</link>
      <pubDate>Tue, 22 Sep 2015 00:45:03 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/09/22/wakate2015/</guid>
      <description>2015年9月19日(土)〜21日(月)に静岡県伊東市の山喜旅館で開催された、
第48回情報科学若手の会2015に参加してきました。
四回目の参加で、ショートで発表を行いました。
第48回情報科学若手の会まとめ #wakate2015
1日目  はじめてでもわかる!IoTの過去・現在・未来 (特にホームネットワーク)
 http://www.slideshare.net/TsubasaYumura/iot-52973276 TRON電脳住宅  1988年にIoTに言及していた電脳社会論  BLEとか今使われている技術の特徴とか 最新研究とかも(IllumiRoomとかSquamaとか) IoTは最近いろんな製品が出てきてますし、有名なのだとIFTTTや国内だとmyThingsみたいに、インターネット側も実世界の機器との連動ができるサービスが出てきていて、数年でアーリーマジョリティぐらいまでは到達しそうかなーって気がします。  IoTで進化するミツバチとの交流
 https://speakerdeck.com/decobisu/iotdejin-hua-surumitubatitofalsejiao-liu 知られざるミツバチの実態  ミツバチは刺激しない限り刺さない ハチミツがとれるぐらい蜜を集めるのはミツバチだけ 養蜂は意外とブームらしい(観測範囲は狭い)  巣箱の温度をセンサとRasPiで調べてMackerelに飛ばしてSlackに通知 めっちゃ簡単に作れそうな構成だけど、凄く役立ちそうでテンション上がる 動物とのインタラクション研究とかわりとあるので、ミツバチとのインタラクションも普通に研究になりそう… TLで言及されていたハチミツを集めやすい巣箱が凄い  https://www.indiegogo.com/projects/flow-hive-honey-on-tap-directly-from-your-beehive#/story https://twitter.com/kyoro353/status/645125093425676288 ハンドルを回すと六角形が崩れて一直線上になるので、ハチミツが下に流れていく機構   プログラムを書くってどういうこと？を哲学的に考える話
 話は凄い上手いし言ってることも解るのに理解が追いつかない…(´･_･`) プログラムは人が計算機で計算をしているor計算のさせ方を教示しているという仮定の下では、プログラムを書く行為はプログラムが表現できる世界への対応付けを行っている…という話だった気がします。
理解が追いついていないのでスライドがほしい…  群ロボット
 複数のロボットを使って1つのタスクを実行する  ベイマックスのマイクロロボットみたいなもの？  複数のロボットを強調させるために動物の動きを模したアルゴリズムを使っているらしい  実際の動物とは全く関係ないアルゴリズムとかあるのだろうか？  既存の探索を行うアルゴリズムは通信回数や移動で性能が良くない  それを改善するアルゴリズムを作った ただしコストが安い代わりに探索時間はかかる  質疑応答で無線通信ならブロードキャストできるので、既存アルゴリズムも通信コストは安いのでは？という質問  無線ってブロードキャストできるんだ…(よく知らない   Alloyで学ぶ形式手法
 https://speakerdeck.com/marin72_com/alloydexue-buxing-shi-shou-fa 形式手法言語  設計時に使うらしい 仕様バグを調べるみたい？ AlloyはLL形式手法言語みたいなもの  仕様を定義して、ちょっとの記述をするだけで反例があるかを返してくれる  自動でテスト条件を検証してくれるみたい？ めっっっっっっちゃ便利っぽい  スライド中のサンプルコード</description>
    </item>
    
    <item>
      <title>第48回情報科学若手の会2015で発表してきた</title>
      <link>http://ota42y.com/blog/2015/09/20/wakate2015-hci/</link>
      <pubDate>Sun, 20 Sep 2015 17:10:23 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/09/20/wakate2015-hci/</guid>
      <description>というわけで発表しました。
発表資料はこちら。
実際は動画で紹介していますが、めっちゃ重くなったのでそれは外した軽量版になります。
代わりにリンクをスライドに書いてあるので、そちらで見てください。
また、実際は使わなかった非表示スライドも表示していますが、ちゃんと作っていないのでご注意ください。
  HCI分野の紹介と最新研究  from ota42y 
発表内容について 4回目ぐらいの参加ですが、ほぼ毎年CHIの締め切りと重なったり、
UISTの数週間前みたいな時期なのであまりこの分野からの参加者が少なく、
需要がありそうとういうのを去年から考えていました。(去年のエントリ)
何故か今年に限って似た分野の研究が多かったですがw
新しいインタフェース系は結構話題になりますが、改善とか調査系とかはあまりHCI分野の人以外からは話題にされないので、
意図的に新しいインタフェース系は抑えてそれ以外のやつを入れています。(非表示にたくさんあるけど)
実際、その辺についてはあまり聞かないのでためになったという声を頂いたので、
いい案配だったとおもいます。
反省点 質疑応答で盛り上がるだろう場所は予測できていたので、
そこに関しての補足スライドを用意するべきでした…
事前に作ったスライドを、前日にダメダメに見えたので作り直してしまったので、
結果としては良くなったけどもう少し早くに完成させて修正したかったです。
ただ、調査を1ヶ月ぐらい前から始められたので、その点に関してはわりとよかった。
追加情報 今回のはほぼ英語論文から取ってきましたが、日本語での発表を捜すならインタラクションがオススメです。
また、質疑応答時やTwitterで追加情報を流していただきました。感謝です。
HCI分野でも（調査系と比べて）とくに新技術の発表が多いトップカンファレンスACM UISTは、来年アジア初開催、「日本で」開催ですよ！みんなで行こー #wakate2015 / 今年は http://t.co/GY2XiamnkI
&amp;mdash; arc@dmz (@arcatdmz) 2015, 9月 20 
HCI系のトップカンファレンスACM CHIの自主勉強会が毎年東京と北海道で開催され、過去の資料が公開されているので、HCIに興味持った方はまずこの資料見てみるといいと思います！ http://t.co/WTIFCbO04m #wakate2015
&amp;mdash; 湯村 翼＠10/3おうちハックナイト (@yumu19) 2015, 9月 20 
調査系（エスノグラフィー）なども多くユーザビリティを仕事にしてる方も参考になりそうなトップカンファACM CHIは、今年アジア初開催、韓国でした。 http://t.co/7iFp4VFQPG ←6月の勉強会 #wakate2015 https://t.co/VsVFP9y5Ov
&amp;mdash; arc@dmz (@arcatdmz) 2015, 9月 20 
#wakate2015 HRI http://t.</description>
    </item>
    
    <item>
      <title>参加記録 Go Conference 2015 summer</title>
      <link>http://ota42y.com/blog/2015/06/21/gocon-2015-summer/</link>
      <pubDate>Sun, 21 Jun 2015 23:43:02 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/06/21/gocon-2015-summer/</guid>
      <description>今回は日経さんとCAさんがスポンサーとのことですが、
かなりの人がいるのにwifiが普通に繋がっていて凄かったです…
なんか機械も見たことも無い凄い奴でしたし。
実際に運用してる上での話が多く、goの時代が来ている…！
という感じを受けました。
お仕事でほぼ使ってないのでちゃんと使いたいですねー
また、みんなcode generateに走っているのはおもしろかったです。
コピペになるようなコードはgenerateするってのはほぼ統一見解ですね。
キーノート  go1.5凄そうです go oracleのすごさ  関数がどこで使われているかが調べられる 関数ポインタで呼ぶ場合も大丈夫  gomobile、早くiOSに対応してC++を駆逐してほしいです… 公式の依存管理ツールも楽しみです  発表まとめ 発表順は覚えてないので、タイムテーブルに順不同で並べられている順です。
Gaurun〜A general push notification server in Go〜  https://speakerdeck.com/cubicdaiya/a-general-push-notification-server-in-go go製のpushサーバ モニタリング用のAPIを用意してるの、凄い良いなーと思いました。  Debugging Go Code with GDB  http://kaneshin.hateblo.jp/entry/2015/06/21/202850 GDB、あんまり使いこなしてないのでもっとちゃんと使わないと…と思った。 Goはコンパイル早いし、落ちたときにちゃんとどの行で落ちたか出してくれるし、無くても何とかなる感はあります  使った方が何倍も楽なのでちゃんと使った方が良いかと  go 1.5からコンパイラがgoで実装されるけど、吐き出されるバイナリにDWARFが入ってれば関係ないよね？  リリース直後はバグったDWARFになる可能性はありそう…  フォントが$300ってwwwwww  Generative programming in Go.  https://speakerdeck.com/monochromegane/generative-programming-in-go reflection凄く遅いです…(直接呼ぶのと1000倍違う) 金槌を持つと何でも釘に見える病…  gore - Go で REPL のはなし  irbみたいにgoを対話的に実行できるやつの内部事情 go runしてるだけ go runに失敗しないように色々前処理をがんばってるみたいです。  Goと電子工作とロボット  goでロボット制御できて、しかもスタンドアロンで動いていて凄いです  GoのASTをいじくって新しいツールを作る  http://www.</description>
    </item>
    
    <item>
      <title>参加記録 BPStudy#92</title>
      <link>http://ota42y.com/blog/2015/04/29/bpstudy92/</link>
      <pubDate>Wed, 29 Apr 2015 13:49:43 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/29/bpstudy92/</guid>
      <description>BPStudy#92に参加しました。
今回は経営やお金の話でした。
お金って資本主義社会のベースとなる概念ですし、
インターネットの仕組みがどうなってるのかとか、
コンピュータがプログラムをどう解釈しているのかと同じぐらい、
お金の事を知っておいた方がいい気がする…と思って参加しました。
エンジニアの経営学  http://www.slideshare.net/bejita/bpstudy92  http://www.slideshare.net/bejita/ss-45051035 一部詳しく書いている別資料  会社は環境の変数にめちゃくちゃ弱い 2014年の倒産件数  9731件 一日あたり26.6社が倒産している これでも前年比10%減  利益は車におけるガソリン  ガソリンが無いと走れない 補給は常に必要 ガソリンの供給源は売り上げのみ  利益＝売り上げーコスト  利益に対するコストの比率が低い、低コストの方が良い コストが低い方が安定する  @ota42y 必要な資金が少なければ少ないほど内部留保が溜まりやすく、変化に対応できるバッファが産まれるからです。ガソリン切れを起こすのが一番やってはいけないことなので、残るものが一緒なら使うカネが少ないほうが安定します。
&amp;mdash; やきう大好きござ先輩 (@gothedistance) 2015, 4月 28  詳しくは二つ目の資料   全ての企業活動はコスト  資料作成、メールを打つ、問い合わせ対応 それ自体は１円も生んでいない。 そのコストを回収するのは売り上げしか無い。 サービス運営で食べていくのは大変 オーダーメイドを作る方が簡単  お金も出してくれやすい  サービス開発は必ず投資が先行する 月額定額は青天井なので嫌われる  組織運営  一人で全ては出来ない 誰かにやってもらわないと組織運営は安定しない 高いスキルを持った人を集めても、ゴミしか生み出せない場合もある Good Player is not Good Manager  チームの将来は決定の速度で決まる  引き延ばしは金と時間の無駄 決定が遅いと間違いに気づくのも遅い 決定の妥当性はいま判断できない Done is Better Than Perfect.</description>
    </item>
    
    <item>
      <title>参加記録 DroidKaigi</title>
      <link>http://ota42y.com/blog/2015/04/26/droidkaigi/</link>
      <pubDate>Sun, 26 Apr 2015 12:49:12 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/26/droidkaigi/</guid>
      <description>DroidKaigiに参加してきたのでメモ。
Twitterで流れてくる情報によると、あっちのセッションもおもしろそう…
みたいなのがあったので、ちゃんとセッションの概要も読んで天秤にかけるべきでした。
（エクセルシートから該当のセッションを探すのが大変だったので挫折した）
 Activity, Fragment, CustomView の使い分け - マッチョなActivityにさよならする方法 -
 http://www.slideshare.net/yanzm/droid-kaigi2015-yanzm ActivityはFragmentのブセット的な印象。 Fat Activityになりやすい場合はViewとか他の部分にコードを分割しましょうというお話っぽい。  RailsのFat Controller問題?  Fragmentにできる事はそっちにどんどん任せて、ActivityはActivityにしか出来ない部分に集中しようってこと？ Activityにしか出来ないことが多すぎるからFat Activity問題になってたので、 似たようなことが出来るけどライフサイクルをコントロールできるクラスの登場によって、 処理の分割ができるようになった感じ？  開発を効率的に進めるられるまでの道程
 http://www.slideshare.net/TakaoSumitomo/ss-47393000 コードを書くのとテストを書くのが一番開発で大変なところ どんな風にテストしているかの事例紹介  ダミーを作ってがんばる感じ 複数の間を取り持つクラスは疎通確認のみ   あるゲームアプリケーションの構成とアップデートサイクル
 http://www.slideshare.net/kentaroiizuka/droidkaigi 様々なリソースから、バイナリやアップデータを作るまでをすべてJenkinsがやっている  専用のパイプラインエンジニアがいるらしい  Playgroundつよい  Cocosはお察しなできなので… (´・ω・｀)  Luaでゲーム部分を書く  ゲーム部分以外はフレームワークが吸収  リソースの追加ダウンロードとかもフレームワーク側が持っているらしい  ゲーム側はゲームとしての実装に専念できるっぽい
   Android学ぶを君へ。生き抜くためのナレッジ共有
 https://github.com/operando/DroidKaigi 有用な情報がたくさん adbが思っていた以上に優秀だった  任意のアプリのViewTreeが見られるらしい  テスト書こう 発表と関連する資料が全部まとまっているの凄い便利  Kotlin</description>
    </item>
    
    <item>
      <title>参加記録 第四回　ゲームサーバ勉強会</title>
      <link>http://ota42y.com/blog/2015/04/19/game-server-4/</link>
      <pubDate>Sun, 19 Apr 2015 11:03:24 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/19/game-server-4/</guid>
      <description>第四回　ゲームサーバ勉強会に参加しました。
サーバにはあんまり詳しくないですが、そういう人向けの勉強会なので助かりました。
特に名前は聞いたことがあるけど使ったことないorちょっと触ったぐらいの物の理解がある程度深まりました。
IDC Frontierさんの話  IDCクラウドの話
 http://www.idcf.jp/cloud/ 最小プランが500円からとのこと…安い  ゲームでも採用事例あり。
 http://gihyo.jp/admin/column/01/vm/2014/nanohain02 http://ascii.jp/elem/000/000/952/952870/   ゲームサーバの作り方  http://www.slideshare.net/honyax/ss-47136625 簡単なチャットサーバの作り方 ゲームサーバも基本的なメッセージやりとり部分はチャットサーバみたいな物。  fluentdとembulkの話  http://www.slideshare.net/repeatedly/fluentd-and-embulk-game-server-4 外部からはjsonで入力するが、内部はMessagePackらしい tg-agentはfluentdにRubyインタプリタやプラグインをまとめてセットアップしやすくしたもの とりあえずfluentdに送って、そこから適切な場所に割り振る使い方みたい 組み込み環境向け  https://github.com/fluent/fluent-bit  Windows環境で動くやつ  https://github.com/fluent/fluentd-forwarder 名前の通り、ログをfluentdに転送するものっぽい？ これ本体で分類とかはせず、転送先のfluentdで転送する用途？  embulk  https://github.com/embulk/embulk ファイルから一気にデータを入れる用 失敗時に必要なファイルだけ再処理できる データから形式を推測する機能もある  fluentd-ui  https://github.com/fluent/fluentd-ui fluentdのWebUI データ処理のための正規表現をテストできる機能がある  データ欠損  ストリーム処理はデータ欠損が出てしまうもの 欠損が許されないものに使うのは危険  課金ログとか  欠損率0%の人もいるらしい  構成による？  通信失敗とかはfluentdが検知するのでそれで欠損はしない   負荷がたかいいんだから～♪（仮）  ゲームの負荷対策と負荷試験の話 memcached  全部メモリに乗ってるKVS  レプリケーション遅延  (たぶん)masterへの変更がslaveに変更される前に読み込んでデータがおかしくなった 水平分割して対処  特定のIDは特定のDBに書き込むようにする 1台あたりのリクエスト数を減らす？   NoSQL  Cassandra  リング型ノードになるため単一障害点がなくなるらしい DHT？  トランザクション処理は基本弱い  そういうところはMySQLで   負荷試験  リリース前に想定人数をちゃんと裁けるかのテスト  リリースしてから落ちにくい チューニングしやすい  テーブル構造の変更とかしやすい    JMeter  http://jmeter.</description>
    </item>
    
    <item>
      <title>参加記録 GolangNotHttpNight（Gunosy.go#12）</title>
      <link>http://ota42y.com/blog/2015/04/14/golang-no-http-night/</link>
      <pubDate>Tue, 14 Apr 2015 22:39:40 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/14/golang-no-http-night/</guid>
      <description>GolangNotHttpNight（Gunosy.go#12）
に参加しました。
ほぼ周りにgolangを使っている人がほとんどおらず、
情報がほぼ入ってこない環境にいるため、
ためになる話ばかりで、とても有意義な時間でした。
gomaについて  https://speakerdeck.com/kyokomi/gomanituite https://github.com/kyokomi/goma  Domaインスパイア  DBのテーブルから対応する構造体とCRUD用の関数を作ってくれるみたい DBへのアクセスは書き出されたSQLファイルを使う  SQLはgo-bindataでバイナリに入れ込む  いくつかライブラリを利用するが、作成されるコードには含まれないらしい  テーブル情報を取得するためにxormを利用 SQLファイル書き出しのためにegoを利用 CLI用にcliを利用   golintを使おう  いろいろ細かい所までチェックしてくれるgolintの話 pre-commitで実行するといい よくわかってなかったのでちゃんと使おう  go-timeout、もしくはUnixツールをgolangで書く話  http://songmu.github.io/slides/gunosygo-12/#0 mackerel-agentはgo製  https://github.com/mackerelio/mackerel-agent サーバ監視用の情報をmackarelに送る  https://mackerel.io/  pluginで拡張できる  外部コマンドとして呼んでるだけ   pluginが無限ループしたりするとブロックしてしまう  一定時間後にKILLするようにした  timeoutコマンドのようなものをgoで実装    Golang+Raspiで趣味的IoT入門的な話  https://speakerdeck.com/ymatsuwitter/golang-plus-raspidequ-wei-de-iotru-men-de-nahua Raspberry PiでIoT  armなのでgoでクロスコンパイル可能  Gobot  http://gobot.io/ いろんなデバイスをかなり抽象化された形で利用できる ロボットにパーツをつけていくメタファ 対応していないと使えないけど、対応しているととても便利っぽい  embed  https://github.</description>
    </item>
    
    <item>
      <title>参加記録 第6回ニコニコ学会β　データ研究会</title>
      <link>http://ota42y.com/blog/2015/04/12/niconico_data_6/</link>
      <pubDate>Sun, 12 Apr 2015 21:03:35 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/04/12/niconico_data_6/</guid>
      <description>第6回ニコニコ学会β　データ研究会に参加しました。
基調講演  日立のH  スペシャリストのデータに基づいた施策より、超詳細なデータから計算した施策の方が有効  http://web-tan.forum.impressrd.jp/e/2015/03/06/19423  人間では見つけられない要因を特定できる  スキルより休憩中の雑談の盛り上がりが重要だったり 膨大なデータの因果関係を調べ上げるのは人間には無理   ウェアラブルハピネスメーター  人は動き続けているほど止まらなくなる  T時間動き続けると、止まる確率が1/T  実際のデータと1/Tとの乖離が高くなると、集団の幸福度が低下する  1/Tに近いほど集団が幸福度が高くなる  幸福度と業務の生産性は直結する  1/Tを上げることが生産性を上げることになる 生産性や幸福度に関連するデータを短いスパンで計測することができる  日々のKPIとして利用できそうなところが革新的っぽい 日立、集団の幸福感を測定する技術を開発 - PC Watch    参考  データの見えざる手: ウエアラブルセンサが明かす人間・組織・社会の法則  後で買う    人狼知能  脱初心者！経験は人狼力を向上させるのか？～データから見るベテランの実力～  http://www.slideshare.net/toritorix/ss-46899953 人狼BBSの分析 陣営ごとの平均プレイ回数が多い方が勝率が高い  運ゲーじゃなかった  経験によるスキル向上  占い師  的中率は変化なし  狩人  上級者ほど護衛成功しやすい  人狼への投票率  ちょっとだけ高い 上級者が複数人の陣営はわりと高くなる  個人の経験より集団の経験の方が強い  人狼知能プロジェクト  人狼BBSのデータセットとか公開するらしい http://www.</description>
    </item>
    
    <item>
      <title>参加記録 情報科学若手の会冬の陣2015</title>
      <link>http://ota42y.com/blog/2015/01/25/wakate2015w/</link>
      <pubDate>Sun, 25 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2015/01/25/wakate2015w/</guid>
      <description>情報科学若手の会冬の陣2015 #wakate2015wに参加しました
Togetterまとめ
会場は電源完備＆大きめの机が椅子に着いているという豪華仕様でした
まとめ  黒崎優太 (@kuro_m88) ICTトラブルシューティングコンテストの紹介
 http://icttoracon.net/ ネットワーク版CTFみたいなコンテスト Ciscoがスポンサーについているので、高価な機材がいっぱい用意されるみたい 大きな規模のネットワークであれこれするのって普通じゃ出来ないし、面白そうです。  浅野智之 (@asanon_s) Webの世界に散らばるデータをつなぐ技術
 semantic webやPDFの話 人間が読めれば良い形式から、構造化されて機械も読める形式を加えるみたい なんとなく理解が深まった気がします 完全なsemantic webへの道のりはまだまだ  門脇香子 証明プログラミング入門
 http://www.slideshare.net/ussopyon/ss-43846794 OpenSSLの脆弱性をCoqで見つけた話を聞いてから、証明プログラミング凄そうだけどよくわからない状態だったので、 理解が深まりました。 何を証明すれば良いかを補完してくれるのは便利そうでした  佐野岳人 コードを書けば複素数が分かる
 http://www.slideshare.net/taketo1024/ss-43853048 初めて複素数が何なのかを感覚的に理解できた気がする… デモで関数をインタラクティブに可視化しているのが本当に凄かった ここから使える https://github.com/taketo1024/SwiftComplex  辻順平 (@tsujimotter) 日曜数学のススメ
 http://www.slideshare.net/junpeitsuji/2015-43856733 コンパスと定規で作図可能かどうかを判定するガウスの判定法凄い 折り紙だと四次方程式が解けるので、作図できなくても折れる場合があるとか凄い  池尻良平 ニュースと類似した歴史を求めるアルゴリズムを考えてみた – 役に立つ歴史教育を目指して
 現代のニュースと、それに類似する歴史上の出来事を提示するシステムを作っているそうです 過去にどんな解決策をとって、どういう結果になったかを考えるのにとても便利そうです 早く使ってみたいですね  後藤紳 モバイルデータを用いた行動予測
 あんまり書いちゃいけなさそうなので割愛 GPSの行動ログを蓄積して、次に何をしそうか提示するみたいです 同じような日々を送っている人には効果的っぽいです  宮代理弘 (@3846masa) Processin.</description>
    </item>
    
    <item>
      <title>参加記録 Jenkins ユーザ・カンファレンス 2015 東京</title>
      <link>http://ota42y.com/blog/2015/01/11/jenkins-conference/</link>
      <pubDate>Sun, 11 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2015/01/11/jenkins-conference/</guid>
      <description>Jenkins ユーザ・カンファレンス 2015 東京に参加しました。
Togetterまとめ
発表まとめ アンケート結果  参加申し込み時のアンケート結果 多くの人のjobの数が1〜数個程度 Jenkins無くても生きていける人が30％ぐらい
 思ったよりもみんなJenkinsを使い込んでいない印象 アンケート結果は後日公開  Jenkinsプロジェクトの現状とワークフロー  DotCiが良さそう  https://github.com/groupon/DotCi Jenkinsを他のCIサービスみたいにする Github限定 設定をYAMLファイルで管理出来たりする  Workflow Pluginすごい  Build Flow Pluginをいっそう強化した版 ビルドが失敗しても途中から再開とかも出来る 乗り換えよう ただ、DSLを覚えたりと学習コストが高くなるので秘伝のタレ化の危険が   JenkinsとSeleniumの活用事例：試験自動化のプロジェクトへの導入  アジャイル開発だとイテレーション毎に試験項目は増えていくが、開発後半になるほど試験に割ける時間は減る  あるあるすぎる 試験自動化で試験項目の消化にかかるコストを下げる  スクリーンショットを撮って画像比較して変更検知  静的な画面なら効果的っぽい アニメーションする場合は撮るタイミングによりそうなので、目で比較かなぁ…  テストケースの保守大変そう  ちょっと変わっただけで使えなくなるし   Jenkinsを使ったコンシューマゲームでのデプロイとテスト  http://www.slideshare.net/swiftnest/jenkins-43394510 圧縮して6GB、11万ファイルのプロジェクト  2プラットフォーム2言語にビルド これで中規模ぐらいと凄い世界が…  FFとかどんだけなんだろう…   フルビルドに14時間かかる  リソースの事前処理に時間がかかる  リソース内での分岐処理が遅いため、全条件分のリソースを作る  データを実機上でビルドする必要がある  携帯機は貧弱なので差分ビルドでも4時間かかったりする プラットフォームで互換性なし PS3はビッグエンディアン VITAはリトルエンディアン  ファイルをパックするのでキャッシュが効かない  ファイルアクセス回数を減らすため必須 全データを実機でパックするため6時間ぐらい   頑張って並列化して5〜9時間ぐらいまで減らす  データの処理を4台で並列化  一台4時間ぐらいに短縮   テスト  テストフレームワークなど無い スモークテスト  特定ミッションに入れるかどうかをテスト 引数で専用のミッションを始められるように  一定時間たったら終了させる 正常終了しなかったらエラー  起動からスタート、終了までがちゃんと動くか リソースに問題ないか エフェクト再生チェック 一定時間内に終わるか データが変換可能か  モンキーテスト  開始からエンディングまでの通しプレイAI 良い感じに攻撃する  適当にボタン連打  適当に移動 何回もゲームオーバーになったら無敵＆攻撃力１００倍 メニュー操作テスト 普通のUIテストっぽい 長時間テスト特有のバグ発見に繋がる リソースの解放漏れ  携帯機はスリープできるので普通は電源を切らない   問題点  作成やメンテナンスにコストがかかる ゆとりがある時期にどれだけ作れるか勝負 チェックに時間かかる 一日じゃ終わらない 手動テストの置き換えにはならない テストのパターンが固定化されるため、外れた部分のバグは検知不可 人の手のかかるテストを減らす効果    おばかXFDコンテスト  人は慣れる生き物  何度も通知してるとそのうち無視するようになる  エラーメールを迷惑フォルダに入れたり パトランプの上に被せたり  XFDによる通知で、慣れに逆らう   LT大会  Jenkinsを使った継続的Webセキュリティテスト  継続的にセキュリティテストを実施するVAddyの話  http://vaddy.</description>
    </item>
    
    <item>
      <title>大晦日ハッカソン2014&amp;正月ハッカソン2015に参加した</title>
      <link>http://ota42y.com/blog/2015/01/01/1231-hackathon/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2015/01/01/1231-hackathon/</guid>
      <description>2014/12/31にオンラインで行われた、
大晦日ハッカソン2014に参加しました。
Evernoteのリンクをアプリで直接開くChrome拡張を作りました。
evernote app opener - Chrome ウェブストア
(なお、細かい修正やこの記事の執筆等を、
正月ハッカソン2015でやりました)
どんなChrome拡張か 現在、Evernoteのノート固有のリンクを取得すると、
https://www.evernote.com/shard/文字列/文字列/ユーザID/ノートID/
といった、httpsのリンクが使われます。
このリンクを開くと、EvernoteのWebアプリ上でノートを開くことが出来ますが、
Evernoteはログインが最長で一週間しか保てず、また二段階認証をしている場合は、
頻繁に面倒なログインを求められます。
ですが多くの場合、開こうとしているノートはオフラインのEvernoteアプリでも開くことが出来ます。
そのため、Webではなくアプリで開く事が出来れば、わざわざログインせずともノートを開くことが出来ます。
そのため、上記のようなWebアプリでノートを開くようなリンクを、
オフラインのEvernoteアプリ上で同じノートを開くChrome拡張を作りました。
使い方 事前に、適当なノートのノートリンクを取得し、自分のユーザIDとshard名を取得する必要があります。
Chrome拡張のオプションページにあるように、ノートを右クリックし、ノートリンクを取得し、
そのURLに含まれているユーザIDとshard名をオプションページで設定してください。
その状態で、Evernoteのノートリンクを開くと、ログイン/非ログインに関わらず、
Evernoteアプリが立ち上がり、そのノートを開いてくれます。
これで、いちいちWebでログインすることなく、ノートリンクで指定したノートを表示することが出来ます。</description>
    </item>
    
    <item>
      <title>参加記録 Android Bazaar and Conference 2014 Winter</title>
      <link>http://ota42y.com/blog/2014/12/21/abc2014w/</link>
      <pubDate>Sun, 21 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2014/12/21/abc2014w/</guid>
      <description>Android Bazaar and Conference 2014 Winterに参加してきました。
なかなか興味深いお話を聞けたので、気になった部分を抜粋
 携帯は９５％の人類が持ってる
 インターネットを利用するのは４割 スマホ利用者は３２％ スマホは１０年前の携帯と同じ水準まで来てる -１０年後は世界の携帯がスマホに置き換わる 今後１０年間で７０億人がインターネットに繋がる Androidは今のところ全世界で84.4%のシェア  各国のもの作り政策
 ドイツのINDUSTRIE 4.0 第四次産業革命 多数の企業を結んだバリューネットワーク 工場内の結合されたネットワーク　は出来てる
 アメリカ
 AMP立ち上げ
 アメリカで発明し、アメリカで製造する
 Made in Americaの復活
 中国
 2008年以降世界の製造業売り上げTop
 EU全体を合わせて、ようやく中国をちょっと上回る  第１２期５カ年計画
 ５年で１６８兆円使う IoTを重視する   Googleが買収したNest
 http://japan.cnet.com/news/commentary/35042541/ ネットに繋がるサーモスタット  Android Wear
 WearのNotificationはアプリの顔になる ノイジーな通知をするとアンインストールされる リストから選んで起動するのではなく、通知によってしかるべきタイミングで起動する わざわざ起動するのは減っていく   </description>
    </item>
    
    <item>
      <title>参加記録 Go Conference 2014 autumn</title>
      <link>http://ota42y.com/blog/2014/12/01/gocon-2014-autumn/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2014/12/01/gocon-2014-autumn/</guid>
      <description>Go Conference 2014 autumnに参加しました。
togetterまとめ
大体スライドが公開されているので、正確な内容はそちらをどうぞ。
#まとめ - Go言語のシンプルさへのこだわりが凄い - 開発陣の徳の高さが凄い - 難しい部分は俺らに任せておけ！的な - 明日から使えるGo言語的な情報が盛りだくさん - エラーを_で無視して済みません…(´･_･`) - 椅子が痛い - 1時間半じゃなくて、1時間ごとぐらいに休憩を挟んでほしかったです… - 英語頑張ろう - 日本語スライドありがたや…
#Keynote1: Rob Pike (@rob_pike) (45min) スライドは未公開？
Go言語の設計者ロブ・パイクさんのGo言語の思想とかについての話です。
Go言語がいかに単純さ(≒簡潔さ)を重要視しているかについてとても示唆のある話をしていただけました。
他の言語が相互に機能を取り込み、ほぼ同じ機能を持つように進化していっているのに対し、
Goは1.0の時点で言語の機能を固定し、機能をとても少なく持つようにしたそうです。
書く楽しさはなくなるけど、代わりに保守のしやすさを選んだとのことです。
プレゼンの中で特にハッとさせられたのは、単純なコードと簡潔なコードとは異なるということです。
言語の機能を使って、数行程度でいろんな事に対応しようとすると、コードの量自体は少なくて済みますが、
必要とする前提知識が増え、かつその数行を完全に理解するのにとても時間がかかります。
おそらく、適当な言語のワンライナーを理解するのに必要な知識と時間を想像すれば大体わかると思います。
簡潔な記述でも理解するのが大変な複雑な事ができるため、
簡潔なコード≠単純なコードと言えるのかなと思いました。
また、Goではコード側ができる限り簡単になるように、
複雑な事を可能な限り言語側で隠蔽しているとも言われていました。
実際、GoのGCや並行処理、パッケージなどは設計や実装自体は凄く複雑にも関わらず、
使う側からはそれほど大変さを感じることなく使えます。
ここ（複雑な部分）は俺にまかせろーといった感じで、開発者の方々には頭が下がります…
#Keynote2: Goに入ってはGoに従え @fumitoshi_ukai (45min) 資料
Google社内でGo Readability Approverをされている@fumitoshi_ukaiさんの発表です。
Go言語らしく書くにはどうすればいいのか？といった思想的な部分と、
ダメな例と良い例を挙げてひたすら赤ペン先生をする発表でした。
これがGo言語のやり方か！となりっぱなしで、まさに明日から使えるGo言語といった感じなので、
是非ともスライドが公開されるといいなーと思います。
LT1 Gardener &amp;amp; Go 資料
@nuki_ponさんが某位置情報ゲームの色をした、GoCon Tシャツを作ってくださったそうです。
GoCon 2014 Autumn Tシャツ | FreeGufo メール便対</description>
    </item>
    
    <item>
      <title>参加記録 BPStudy ♯87</title>
      <link>http://ota42y.com/blog/2014/11/29/bpstudy-87/</link>
      <pubDate>Sat, 29 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2014/11/29/bpstudy-87/</guid>
      <description>BPStudy#87に参加しました。
togetterまとめ
じっくりと把握する iOS8 / iPhone6 最前線〜ユーザーにとって、開発者にとって何が変わったのか？ http://www.slideshare.net/yukio.andoh/bpstudy-87-ios8-iphone6
iOS8とiPhone6の新機能まとめと、それによって生じる問題紹介でした。
スライド46ページ目の親指の可動範囲の図を見せられると一目瞭然ですが、
画面サイズが大きくなったことによるタッチ領域の変化はとても激しく、
iPhone6や6+では従来のUIはかなり使いづらいものになってしまいます。
あと、リモートで任意の端末をレンタルできるRemote TestKitが凄い便利そうでした。
Remote TestKit
iPhone 6がリリースされて2ヶ月が過ぎました　〜iOSの分断化時代を乗り切ろう〜 http://www.slideshare.net/masashiono1/bpstudy-87
akisute/AutoLayoutTest
前半のスワイプUIのススメは、前の発表のiPhone6や6+向けのUIの回答として、
かなり良い回答ではないかなと思いました。
あと後半のSwiftのまとめが、Swiftの闇をひしひしと感じる内容で凄いです…(:3 」∠)
LT 一件目はiOS7と8で遭遇したブラウザバグの紹介でした。
資料
画像を範囲指定で切り抜くと何故か指定したサイズより大きくなるとか、
同時接続数が2個になったが、レスポンスの受信時間がかぶるとクラッシュするので同時接続してはいけないとか、
かなり辛い感じのバグが多かったです…
二件目ではペアプロ合コンに参加した人が、相手側の女性の手によって公開処刑される様子を見物していました…
恐ろしい…(((;ﾟДﾟ)))ｶﾞｸﾌﾞﾙｶﾞｸﾌﾞﾙ</description>
    </item>
    
    <item>
      <title>Travis CI Meetup Tokyoに行ってきた</title>
      <link>http://ota42y.com/blog/2014/09/18/travisci-meetup/</link>
      <pubDate>Thu, 18 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2014/09/18/travisci-meetup/</guid>
      <description>前半はTravis CIのデモ、真ん中てCEOのお話、最後にLTと三部構成でした。
こちらに動画があるそうです。
http://www.ustream.tv/recorded/52769967
デモは一通りのTravis CIの使い方をデモしていただきました。
何となくわかってるデフォルトの挙動などにちゃんと説明がはいり、
基礎知識を固めるには凄く良かったです。
また、いくつか知らない機能(sudo false)や、
.travis.ymlの書式をオンラインで確認できるTravis WebLint等が紹介されていました。
なお、デモに使ったリポジトリは以下にあるようです。
https://github.com/BanzaiMan/travis-intro-tokyo
CEOの話では、現在のjob数やVM数、サーバの数などを話していただきました。
それと後半では環境によって良くはまる10個が紹介されていました。
ファイルシステムのケースセンシティブや、GNUとBSDの違いだったり、aptから古いバージョンが消えたり、
タイムゾーンやOSの違いによる環境構築や言語自体のバグ等々…
ここ最近に当たった奴がいくつかあり頭が痛かったです…(´･_･`)
最後のLTではいろんな発表が行われました。
見つけた分だけまとめておきます。
Automated releasing iOS app with Travis CI https://speakerdeck.com/kishikawakatsumi/automated-releasing-ios-app-with-travis-ci
私はJenkinsを使っていますが、似たような構成でやってるので参考になりました。
ただ、ビルド時間が5倍ぐらい長いので、こちらのプロジェクトにそのまま導入は難しそうです…
xcarchiveに書き出すと、申請用ビルドでテストフライトに出せるというのは新たな発見でした。
(追記: 発表者様から指摘がありました)　@ota42y 僕の話し方が悪かったのですが、xcarchiveだから、というわけではなくて、AppStoreとAdHocのプロビジョニングは互換性があるので、xcarchiveからipaにするところでプロビジョニングをAdHocにしています。同じビルドで署名だけ変える方法です。
&amp;mdash; kishikawa katsumi (@k_katsumi) 2014, 9月 18 
Travis CI API LT https://speakerdeck.com/pinzolo/travis-ci-api-lt
Travis CIのAPIと、gemの利用例です。
パッと見た限り、必要最低限は揃ってそうなので、hubotから叩くみたいなことが出来そうです。
QUnit on Travis CI @shigemk2 https://shigemk2.github.io/travisci_jp/#/step-1
jsのライブラリを作った際の利用例でした。
実際に作る際に参考に出来そうでした。
When was the build passing? http://sanemat.github.io/talks/20140917-travis-ci-meetup-tachikoma-io/
依存してるライブラリが更新すると、いつの間にかテストが落ちるようになってるけど、
テストが実行されないとわからないので、活発でないプロジェクトだと大変だよね…って話です。
これに対して、定期的にPRを送るTachikoma.io - Interval Pull Request Appというものを作ったそうです。</description>
    </item>
    
    <item>
      <title>第47回情報科学若手の会2014に参加してきた</title>
      <link>http://ota42y.com/blog/2014/09/15/wakate2014/</link>
      <pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2014/09/15/wakate2014/</guid>
      <description>2014年9月13日(土)〜15日(月)に静岡県伊東市の山喜旅館で開催された、
第47回情報科学若手の会2014に参加してきました。
二年ぶり三回目の参加です。
今回はLTもやりました。
当日の様子はこちらのまとめをどうぞ
第47回情報科学若手の会2014 ツイートまとめ #wakate2014
旅館について 山喜旅館さんのネットワークが超強化されていました。
2年前とは雲泥の差でとても快適で、導入した旅館と幹事さんには頭が下がります…
50人数位が普通に使っても回線部分はびくともしなかったため、 開発合宿には最適ではないでしょうか(宣伝)
発表について 今年は大学の講義をこれにしてくれれば…みたいな、凄くわかりやすい発表が多かったです。
私が把握した範囲で、公開されている資料をまとめました。
招待講演: サイバーセキュリティの世界に飛び込こもう！ 招待講演の資料は公開されていないようですが、紹介されていたnicterとDAEDALUSはとても凄いシステムでした。
従来なら、テキストベースのログとしてしか表現されていなかった悪意のある攻撃を、
わかりやすくかつリアルタイムに(さらにかっこよく)可視化しており、まさに機能美を揃えたシステムでした。
映像を見つけたので是非見ておくことをオススメします。
ネットワーク攻撃可視化・分析技術 - nicter #DigInfo
サイバー攻撃をリアルタイムに可視化、警告を発する「DAEDALUS」 #DigInfo
若手特別講演: 本当は楽しいインターネット http://www.slideshare.net/yuyarin/ss-39061287
インターネットへの愛がある上に、基本的な事柄を凄くわかりやすく説明していただいてます。
特にAS周りの話は名前を聞いたことがある…ぐらいの知識でしたので、
この資料で凄く良く理解することが出来ました。
ないんたんの天気予報と画像処理アルゴリズム（2014年9月13日 情報科学若手の会） https://docs.google.com/presentation/d/1KSIVmHvBR57uzJUkDEIMgi7JpAW51KequMCuws5COdY/edit#slide=id.p
画像処理のオプティカルフローを使って、天気の画像からその先の状態を計算して予報しているらしいです。
割と簡単で、計算量もさくらVPSで1秒ぐらいなのに、
精度の高い結果がでていて凄いなーと思いました。はぴぴーん
シュワルツ超関数としての信号処理理論 http://pel.es.hokudai.ac.jp/~akita/SignalAsDistribution.pdf
実際の発表資料とは違いますが参考資料として…
フーリエ変換系のは種類が色々あって、どこに何を使うのかよくわからなかったのですが、
とてもわかりやすく整理して話していただけました。
また、階段関数の微分はぱっと見意味不明だったのが、
話を聞くとちゃんと理解できるようになっていて、おお！って思いました。
私の発表 http://ota42y.com/blog/2014/09/14/wakate2014-presentation/
その他 交流会 交流会では謎解きゲームが行われました。
旅館の一階を全体的に使って謎探しから始まり、旅館やITに関係していそうな謎が用意されていました。
謎をを説いたチームには景品もあり、かなり白熱していました。
難易度やチーム編成も工夫されており、とても良かったです。
ナイトセッション 例年のごとく、中々濃い話や他では言えない話が繰り広げられていました。
例によって４時や５時ぐらいまで行われていたみたいですが、
さすがに体がついていかなく、２時３時でダウンしていました…
参加者の中に機械式計算機を持ってきてくださった方がいました。
所々の機械式ならではの工夫が見られ、初めて見た私にとっては凄く新鮮でした。
特にオーバーフロー、アンダーフローした時にベルがなるのは素晴らしかったです。

まとめ 帰りにkuro_m88さんと、「HCI系の人いないですよね−」と話していたんですが、
いないなら多分HCI系の話をするのは凄い有用だろうし、
来年はHCI系の話で一般かショート発表に申し込みたいと思います。
その後 帰りは三島の桜屋でうな重を食べました。</description>
    </item>
    
    <item>
      <title>情報科学若手の会2014で発表してきた</title>
      <link>http://ota42y.com/blog/2014/09/14/wakate2014-presentation/</link>
      <pubDate>Sun, 14 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2014/09/14/wakate2014-presentation/</guid>
      <description> LT発表してきました。
最近CIとか継続的デリバリーとか流行ってるけど、
ネット上にあふれている事例は、テスト(ビルド)が頑張れば5分程度で出来たり、
ユーザにすぐに提供できるWebサービスの話が多く、
それ以外の事例に適応した話が全然無いなーと思っていました。
特にスマホアプリでは、一つのjobに時間がかかったり、
ユーザに届けるのにもの凄く時間がかかるため、
良くあるやり方をそのまま持って行っても、
全然上手くいかないんですよね。
ただし、やり方をそっくり持ってくるんじゃなくって、
その手法をやると何がうれしいの？を考えていくと、
自ずとその環境に沿ったいい方法、というのが見つかる気がします。
より実践的なTipsになるので削った補足事項等
 コンパイルだけに出来ないのか  ビルドのほとんどがコンパイル時間なのでそれほど効果がありません…(´･_･`)  キャッシュは使っていないのか  キャッシュが悪さをする可能性が考えられるため意図的に切っています。
手元で開発する場合は活用しています。  ビルド自体の速度は速くしないのか  分散コンパイル等で早くできますが、Xcodeは対応していないのでAndroidのみになり、
そんなに効果がありません。  スライドで並列ビルドすればいいじゃん！と書いてますが、それも問題があります  アップロード先が並列で受け付けていないので、デプロイ時に失敗しまくります 排他制御しようとすると、Jenkinsの仕様とJob割り振りがよろしくないので
もの凄く辛いことになります。   </description>
    </item>
    
    <item>
      <title>CEDEC2014 9月3日まとめ</title>
      <link>http://ota42y.com/blog/2014/09/06/cedec2014-09-03/</link>
      <pubDate>Sat, 06 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2014/09/06/cedec2014-09-03/</guid>
      <description>この日だけ参加したのでまとめ
ウェアラブルコンピューティングの動向とウェアラブルゲームへの展開  ウェアラブルの特徴
 コンピュータを服のように着る 常時ON 生活密着 ハンズフリー Occlusは基本的にウェアラブルではない  ウェアラブルは実は難しい
 装着して利用してみないと解らないことがたくさん ウェアラブルは一日中身につける（≠持ち歩く） モバイル機器とはまた別のノウハウが必要なのか。  汎用vs専用
 汎用 SmartWatch 高性能高機能 まだ実用性低い 専用 アクションカメラとか　 デジカメ、音楽プレーヤー等と同じく、少しづつ汎用の性能が上がっていく  ウェアラブルゲームではリアルの遊びが重要
 ちょっとした時間に暇つぶし ジョギングなど、別のことをしながら ファッション コンピュータはバーチャル空間に伸びたので、それとは違う道   「楽しさ」の設計と評価～我々はどこで失敗し，どこへ向かうのか  楽しさの評価
 完成するよりも前に、それが面白いものなのか、どうすれば面白くなるのか？ 経験則やコンテンツに左右されない、一般的な評価手法を探すのが目的らしい  心理学的手法
 アンケートとか かなりあやふや 過去にやったゲームとか 調整しました！と言われると、変わって無くても変わったと感じる  ３つ以上のパラメータを同時に調整するのは困難
 職人はベターは出せるがベストとは限らない パラメータか困難なものはよりわからない 調整可能な項目をクリアして、調整困難な協会に時間をかけるのがベター 調整可能  ロード時間のストレス ボタン反応の応答時間等  調整困難 ユーザに書ける適切なストレスとか  人間らしいAIの自動獲得
 見ていて機械的な不自然さを感じない 相手に合わせて強さを調整できるAI  人間の生物学的制約、人為的ミス・エラーの導入 揺らぎ、遅れ、使える、技術・知識の不足、錯誤・失念   人間らしさの評価</description>
    </item>
    
    <item>
      <title>GitHub Kaigiに行ってきた</title>
      <link>http://ota42y.com/blog/2014/06/03/github-kaigi/</link>
      <pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2014/06/03/github-kaigi/</guid>
      <description>スライドまとめ  GitHub実践入門は活用するためのガイドブック
 はてなブログチームの開発フローとGitHub
 OSS と GitHub
 How GitHub Works (GitHub Kaigi, Tokyo, 2014)
 GitHubで雑誌・書籍を作る
 Atom, the Programmable Text Editor
 入門書には載ってない Git &amp;amp; GitHub Tips
  LTは用事があって聞けませんでした…(´･_･`)
感想 全体的な感想 githubのハックや事例はもちろんですが、
どちらかというとgithubを利用してのワークフローとか、
エンジニアを含む環境がどう変化したか的なお話が多かったです。
一番はじめの、GitHub実践入門や、Gitのティップスに関しては、
すぐに導入したいような内容ばかりでした。
特に前者は凄くいい本っぽかったので(載せられてる)、会場で注文しましたw
Atomの発表が凄かった 他にもいろいろ発表がありましたが、特に私にヒットしたのは、Atomのプレゼンでした。
AtomはChromiumベースで、エディタ部分をHTML5/CSSで作っているので、
Developer Toolsを使ってWebサイトのように、Atomのデザインを変えられます。
プレゼン中に変更している様子を見せてもらいましたが、
本当に何でもリアルタイムで変更できて凄く未来を感じました。
また、DOM要素を直接いじることで、APIが提供されていなくても、
画面上の全ての要素(Macのメニューバーに出てる部分ですら！）を
自由に変更することが可能で、javascriptをコンソールに書いて、
新しいメニューがついたのは本当に度肝を抜かれました。
スライドの資料には映像がないため、
後日映像がアップロードされるのを待つしか無いのが凄く残念ですが、
とにかく未来を感じるエディタでした。
もの凄くおもしろかったので、第二回開催はまだですかね。</description>
    </item>
    
  </channel>
</rss>