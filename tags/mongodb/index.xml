<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mongodb on おおたの物置</title>
    <link>http://localhost:1313/tags/mongodb/</link>
    <description>Recent content in Mongodb on おおたの物置</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 03 Sep 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/mongodb/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>mgoのConsistencyについて</title>
      <link>http://localhost:1313/blog/2014/09/03/mgo-consistency/</link>
      <pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014/09/03/mgo-consistency/</guid>
      <description>

&lt;p&gt;mgoのサンプルにあった&lt;br /&gt;
&lt;code&gt;session.SetMode(mgo.Monotonic, true)&lt;/code&gt;&lt;br /&gt;
の意味がよくわからないので調べてみました。&lt;/p&gt;

&lt;p&gt;結論から書きますと、これは複数DBを利用した際の、&lt;br /&gt;
データの一貫性をどの程度保証するかの設定です。&lt;/p&gt;

&lt;h1 id=&#34;一貫性制御:a3afd0be767c5d82506ee68c700d83ee&#34;&gt;一貫性制御&lt;/h1&gt;

&lt;p&gt;mgoには複数のDB間での一貫性を制御する３種類のモードがあります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (
  Eventual  mode = 0
  Monotonic mode = 1
  Strong    mode = 2
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SetModeにこれを渡すことで、モードを切り替えられます。&lt;/p&gt;

&lt;p&gt;それぞれの内容は以下の通りです。&lt;br /&gt;
おそらく一貫性がちゃんとしていくに従って、複雑化&amp;amp;遅くなっていきます。&lt;/p&gt;

&lt;h2 id=&#34;eventual-consistency:a3afd0be767c5d82506ee68c700d83ee&#34;&gt;Eventual Consistency&lt;/h2&gt;

&lt;p&gt;最終的に辻褄が合えばいいよね設定です。&lt;br /&gt;
データに変更が無く十分な時間が過ぎると、最終的に全ての更新が反映されます。&lt;/p&gt;

&lt;p&gt;更新済みのノードと、そうでないノードが混在する可能性があるため、&lt;br /&gt;
どのノードから読み込むのかが固定されない場合、&lt;br /&gt;
新しい値を読み込んだ後に、別のノードから古い値を読み込んでしまう…&lt;br /&gt;
といったことが起きる可能性があるはずです。&lt;/p&gt;

&lt;p&gt;同じノードから読み取る場合は、後述するMonotonic Consistencyと同じになると思います。&lt;/p&gt;

&lt;h2 id=&#34;monotonic-consistency:a3afd0be767c5d82506ee68c700d83ee&#34;&gt;Monotonic Consistency&lt;/h2&gt;

&lt;p&gt;あるプロセスが値を参照したら、以降はその値かそれより新しい値が読み込まれるという設定です。&lt;br /&gt;
おそらく、値を参照したタイミングで最新かどうかは保証されないが、&lt;br /&gt;
少なくとも古い値が読み込まれることはない、という状態だと思われます。&lt;/p&gt;

&lt;h2 id=&#34;strong-consistency:a3afd0be767c5d82506ee68c700d83ee&#34;&gt;Strong Consistency&lt;/h2&gt;

&lt;p&gt;常に必ず最新の値が読み込めるという状態です。&lt;br /&gt;
一見すると良さそうですが、最新の値が読めるようになるまで読み込めないため、&lt;br /&gt;
注意が必要です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>golangでmongodbを使う</title>
      <link>http://localhost:1313/blog/2014/09/02/go-mongodb/</link>
      <pubDate>Tue, 02 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014/09/02/go-mongodb/</guid>
      <description>&lt;p&gt;mgoというライブラリが便利そうです。&lt;br /&gt;
&lt;a href=&#34;http://labix.org/mgo&#34;&gt;http://labix.org/mgo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下はtwitterからツイートを取ってきて、&lt;br /&gt;
未登録のツイートをmongodbに保存するスクリプトです。&lt;/p&gt;

&lt;p&gt;今のところ、検索結果が存在するかどうかを調べる方法が解らなかったので、&lt;br /&gt;
件数を数えてその結果をチェックしています。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/ota42y/7e493449beec0fe73f62.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>MongoDBでインデックスとexplainを使う</title>
      <link>http://localhost:1313/blog/2014/09/01/mongodb-explain/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014/09/01/mongodb-explain/</guid>
      <description>

&lt;h1 id=&#34;事前データ準備:7c69230a45f10ec129d1ee4fa0ab55a3&#34;&gt;事前データ準備&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt; for (var i=0; i&amp;lt;100; i++) { db.test_object.save({name: &amp;quot;test1&amp;quot;, num: i}) }
 for (var i=0; i&amp;lt;100; i++) { db.test_object.save({name: &amp;quot;test2&amp;quot;, num: i*1000}) }
 for (var i=0; i&amp;lt;100; i++) { db.test_object.save({name: &amp;quot;test3&amp;quot;, num: i*10000}) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;stringは3種類100個ずつ、numはuniqueなオブジェクトを作成します。&lt;/p&gt;

&lt;h1 id=&#34;インデックス作成:7c69230a45f10ec129d1ee4fa0ab55a3&#34;&gt;インデックス作成&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;db.test_object.ensureIndex({&amp;quot;name&amp;quot;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、test_objectコレクションのnameに対してインデックスを作成できます。&lt;/p&gt;

&lt;p&gt;また、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.test_object.getIndexes()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でインデックスを確認出来ます。&lt;/p&gt;

&lt;p&gt;なお、MongoDBのばあい、インデックスに使用したキーが存在しない場合もあります。
そのような場合は、キーを持っていないものはNULLとして扱われます。&lt;/p&gt;

&lt;h1 id=&#34;explain:7c69230a45f10ec129d1ee4fa0ab55a3&#34;&gt;explain&lt;/h1&gt;

&lt;p&gt;検索したときにindexが使われているかはexplainで確認出来ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.test_object.find({&amp;quot;name&amp;quot;: &amp;quot;test1&amp;quot;, &amp;quot;num&amp;quot;: 10}).explain()
{
        &amp;quot;cursor&amp;quot; : &amp;quot;BtreeCursor name_1&amp;quot;,
        &amp;quot;isMultiKey&amp;quot; : false,
        &amp;quot;n&amp;quot; : 1,
        &amp;quot;nscannedObjects&amp;quot; : 100,
        &amp;quot;nscanned&amp;quot; : 100,
        &amp;quot;nscannedObjectsAllPlans&amp;quot; : 100,
        &amp;quot;nscannedAllPlans&amp;quot; : 100,
        &amp;quot;scanAndOrder&amp;quot; : false,
        &amp;quot;indexOnly&amp;quot; : false,
        &amp;quot;nYields&amp;quot; : 0,
        &amp;quot;nChunkSkips&amp;quot; : 0,
        &amp;quot;millis&amp;quot; : 0,
        &amp;quot;indexBounds&amp;quot; : {
                &amp;quot;string&amp;quot; : [
                        [
                                &amp;quot;test1&amp;quot;,
                                &amp;quot;test1&amp;quot;
                        ]
                ]
        },
        &amp;quot;server&amp;quot; : &amp;quot;ota42y:27017&amp;quot;,
        &amp;quot;filterSet&amp;quot; : false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cursorが BasicCursorではなく、&lt;br /&gt;
getIndexesで表示されたインデックス名が表示されていれば大丈夫です。&lt;/p&gt;

&lt;p&gt;nscannedはキーを使って絞り込みをしたオブジェクトの数です。&lt;br /&gt;
この場合は事前の設定通り、100個の&amp;rdquo;test1&amp;rdquo;をキーに持つオブジェクトが引っかかっています。&lt;br /&gt;
その後numキーによって検索が行われ、&lt;br /&gt;
&amp;ldquo;n&amp;rdquo;の個数分(1件)表示されます。&lt;/p&gt;

&lt;p&gt;できる限りn=nscannedに近くなるようにインデックスを貼ったり、&lt;br /&gt;
検索クエリを工夫するといいと思います。&lt;/p&gt;

&lt;p&gt;詳しくはこちら&lt;br /&gt;
&lt;a href=&#34;http://docs.mongodb.org/manual/reference/method/cursor.explain/&#34;&gt;http://docs.mongodb.org/manual/reference/method/cursor.explain/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>