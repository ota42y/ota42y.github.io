<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Book on おおたの物置</title>
    <link>http://ota42y.com/tags/book/</link>
    <description>Recent content in Book on おおたの物置</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 04 Jan 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://ota42y.com/tags/book/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>UNIXという考え方という本を読んだ</title>
      <link>http://ota42y.com/blog/2015/01/04/unix-boox/</link>
      <pubDate>Sun, 04 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2015/01/04/unix-boox/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/UNIX%E3%81%A8%E3%81%84%E3%81%86%E8%80%83%E3%81%88%E6%96%B9%E2%80%95%E3%81%9D%E3%81%AE%E8%A8%AD%E8%A8%88%E6%80%9D%E6%83%B3%E3%81%A8%E5%93%B2%E5%AD%A6-Mike-Gancarz/dp/4274064069&#34;&gt;UNIXという考え方&lt;/a&gt;という本を読みました。&lt;br /&gt;
原著は1994年に書かれている本で、
&lt;a href=&#34;http://ja.wikipedia.org/wiki/UNIX%E5%93%B2%E5%AD%A6&#34;&gt;UNIXの哲学&lt;/a&gt;を一つ一つ、その意味と利点について解説しています。&lt;/p&gt;

&lt;p&gt;「一つのことを、うまくやれ」や「小さいものは美しい」等、ある程度ハッカー文化に詳しい人ならばどれかは聞いたことがあるぐらい有名な哲学です。&lt;/p&gt;

&lt;p&gt;面白いのは、例えば「できるだけ早く試作を作成する」という項目では、設計を完璧にしてから取りかかるのではなく、
プロトタイプを作り、それをユーザに見せてフィードバックをもらい、良い設計にしていくべきと述べられています。&lt;br /&gt;
これはアジャイル開発のイテレーションを回していく手法ととても似ており、開発手法の歴史を感じます。&lt;/p&gt;

&lt;p&gt;また、「一つのことを、うまくやれ」は色々やる巨大な関数より、ちゃんと機能毎に分割しろと解釈できますし、「ソフトウェアの挺子（てこ）を有効に活用する」は他のいいプログラムからコードを借りてきたり、gemやnpmで既にあるソフトウェアを利用するといった、コードの再利用性の話だと解釈できます。&lt;/p&gt;

&lt;p&gt;原著は1994年に書かれたにもかかわらず、今日でも普通に通用する哲学がちりばめられており、UNIX哲学の現代のプログラミング文化への強い影響と、その普遍性をかんじます。&lt;/p&gt;

&lt;p&gt;ただ、本書の中でシェルスクリプトが移植性もいいし簡潔に書けるしと礼賛されていますが、デバッグしにくい上に、コマンドがGNUかBSDかで結果が変わる場合があるので実は移植性がそんなに無いですし、現代ではちょっとどうなのかな…みたいな部分もあります。&lt;br /&gt;
今ですと、スクリプト言語かクロスコンパイルが簡単にできるGo言語が良い選択肢でしょうか。&lt;/p&gt;

&lt;p&gt;そういった具体的な部分に関しては時代の変化で合わなくなっている部分もありますが、その哲学自体は普遍的なもので、今読んでも、おそらくは10年後に読んでも得るものが多い本だと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webで何かを作る人誰もが読むべき本だった - ハイパフォーマンス ブラウザネットワーキング</title>
      <link>http://ota42y.com/blog/2014/05/13/browser-networking/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ota42y.com/blog/2014/05/13/browser-networking/</guid>
      <description>&lt;p&gt;丸一日かけて読んだので書評っぽいのを。&lt;/p&gt;

&lt;p&gt;Webで何かしようとする人はどのレイヤの人も必読だと思います。&lt;br /&gt;
インフラはもちろんのこと、アプリを作っている人も知らないでは済まされません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873116767/ota42y-22/ref=nosim/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51x2sA8N%2BTL._SL160_.jpg&#34; alt=&#34;ハイパフォーマンス ブラウザネットワーキング ―ネットワークアプリケーションのためのパフォーマンス最適化&#34; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873116767/ota42y-22/ref=nosim/&#34; target=&#34;_blank&#34;&gt;ハイパフォーマンス ブラウザネットワーキング ―ネットワークアプリケーションのためのパフォーマンス最適化&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;#概要&lt;/p&gt;

&lt;p&gt;目次としてはこんな感じで、TCP/UDPから無線ネットワークの特性から最新のプロトコルまで、&lt;br /&gt;
今のインターネットに触れる場合に触りそうな部分を、だいたいカバーしてます。&lt;br /&gt;
特にTCPとHTTP、WebRTCについてはとてもしっかりと書かれていました。&lt;/p&gt;

&lt;p&gt;また具体的な最適化や、目次に乗っていない関係する技術に関してはかなりばっさり切り落としており、&lt;br /&gt;
取り扱っている内容の割にはすんなり読むことができました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1章　レイテンシ・帯域幅入門
2章　TCPの構成要素
3章　UDPの構成要素
4章　TLS

II部　ワイヤレスネットワークのパフォーマンス

5章　ワイヤレスネットワーク入門
6章　WiFi
7章　モバイルネットワーク
8章　モバイルネットワークの最適化

III部　HTTP

9章　HTTPの歴史
10章　Webパフォーマンス入門
11章　HTTP 1.x
12章　HTTP 2.0
13章　アプリケーション配信最適化

IV部　ブラウザAPIとプロトコル

14章　ブラウザネットワーク入門
15章　XMLHttpRequest
16章　Server-Sent Events
17章　WebSocket
18章　WebRTC
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本のレベルとしては、3ウェイ・ハンドシェイクの基礎から教えてくれたりと、&lt;br /&gt;
かなり詳細に説明してくれるため、TCPやHTTPの詳しい知識は必要ありません。&lt;br /&gt;
だだし、ネットワークとは何かとかサーバとは何かとかの説明はないので、&lt;br /&gt;
最低限のネットワークの知識は必須です。&lt;/p&gt;

&lt;p&gt;#感想&lt;/p&gt;

&lt;p&gt;この本で特にいいと思ったところは、定義通りの何もしていない状態から、&lt;br /&gt;
順序立てて一つ一つ効率良くしていく様子を示している所です。&lt;/p&gt;

&lt;p&gt;これはキープアライブからHTTPパイプラインの説明のところが顕著ですが、&lt;br /&gt;
まずはじめに何も考えずに愚直にやって、どれだけ無駄が多いかを説明し、&lt;br /&gt;
次にキープアライブを有効にすることでこれだけ無駄が省ける、&lt;br /&gt;
さらにHTTPパイプラインでこんなに無駄が省ける。&lt;/p&gt;

&lt;p&gt;といったように、いきなり仕組みの解説から入るのではなく、&lt;br /&gt;
今までの方法と比較しつつ、新しい仕組みの利点と欠点を説明しており、&lt;br /&gt;
ものすごく理解しやすく書いてあります。&lt;/p&gt;

&lt;p&gt;#まとめ
これ一冊読めば、Webで何かを作る際に実際は何が起こっているのか、&lt;br /&gt;
ということが大体わかるようになるので、&lt;br /&gt;
是非ともwebに関わる人は読んでおくべきだと思います。&lt;/p&gt;

&lt;p&gt;また、献本の話を持ちかけてくれたレビュアの@flano_yukiさんに感謝です。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>