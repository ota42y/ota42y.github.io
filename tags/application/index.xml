<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Application on おおたの物置</title>
    <link>/tags/application/</link>
    <description>Recent content in Application on おおたの物置</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 31 Jan 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/application/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Evernoteのリンクをアプリで開くChrome拡張を更新した</title>
      <link>/blog/2015/01/31/evernote-opener-update/</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/2015/01/31/evernote-opener-update/</guid>
      <description>evernote url openerを更新しました。
使うためには、EvernoteのユーザIDとShardを調べる必要がありますが、
ちょっと面倒だったので、ユーザが自分のノートリンクをペーストするだけで、設定するように変更しました。
Evernoteからコピーできる、
https://www.evernote.com/shard/USER_SHARD//WORD/USER_ID/NODE_ID/
といった形式のリンクを張ることで、USER_SHARDとUSER_IDを保存します。</description>
    </item>
    
    <item>
      <title>大晦日ハッカソン2014&amp;正月ハッカソン2015に参加した</title>
      <link>/blog/2015/01/01/1231-hackathon/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/2015/01/01/1231-hackathon/</guid>
      <description>2014/12/31にオンラインで行われた、
大晦日ハッカソン2014に参加しました。
Evernoteのリンクをアプリで直接開くChrome拡張を作りました。
evernote app opener - Chrome ウェブストア
(なお、細かい修正やこの記事の執筆等を、
正月ハッカソン2015でやりました)
どんなChrome拡張か 現在、Evernoteのノート固有のリンクを取得すると、
https://www.evernote.com/shard/文字列/文字列/ユーザID/ノートID/
といった、httpsのリンクが使われます。
このリンクを開くと、EvernoteのWebアプリ上でノートを開くことが出来ますが、
Evernoteはログインが最長で一週間しか保てず、また二段階認証をしている場合は、
頻繁に面倒なログインを求められます。
ですが多くの場合、開こうとしているノートはオフラインのEvernoteアプリでも開くことが出来ます。
そのため、Webではなくアプリで開く事が出来れば、わざわざログインせずともノートを開くことが出来ます。
そのため、上記のようなWebアプリでノートを開くようなリンクを、
オフラインのEvernoteアプリ上で同じノートを開くChrome拡張を作りました。
使い方 事前に、適当なノートのノートリンクを取得し、自分のユーザIDとshard名を取得する必要があります。
Chrome拡張のオプションページにあるように、ノートを右クリックし、ノートリンクを取得し、
そのURLに含まれているユーザIDとshard名をオプションページで設定してください。
その状態で、Evernoteのノートリンクを開くと、ログイン/非ログインに関わらず、
Evernoteアプリが立ち上がり、そのノートを開いてくれます。
これで、いちいちWebでログインすることなく、ノートリンクで指定したノートを表示することが出来ます。</description>
    </item>
    
    <item>
      <title>スクフェス用パッケージの更新</title>
      <link>/blog/2014/11/12/scfes-update/</link>
      <pubDate>Wed, 12 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/11/12/scfes-update/</guid>
      <description>前に作ったスクフェス用パッケージを更新しました。
https://github.com/ota42y/hubot-scfes
今回は、いつぐらいにレベルアップするかを計算するコマンドを用意しました。
真夜中にレベルアップが起きたりすると面倒なので、これを見て事前に石を使うなり、
別の難易度をやって遅らせるなりして、レベルアップのタイミング調整をすることが簡単になります。
# 次のレベルアップまでexを何回プレイするか hubot scfes levelup count 830 ex =&amp;gt; 10 # 次のレベルアップはいつか hubot scfes levelup time 830 ex =&amp;gt; next levelup is Sun Aug 3 2014 2:52:52 GMT+0900 (JST)  なお、現在のスタミナ値は考慮していないため、実際は今たまってる分だけ早くなります。</description>
    </item>
    
    <item>
      <title>スクフェス用の機能が詰まったHubotパッケージを作った</title>
      <link>/blog/2014/10/28/hubot-scfes/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/10/28/hubot-scfes/</guid>
      <description>スクフェス用の色々便利な機能が入ったHubotパッケージを作りました。
https://github.com/ota42y/hubot-scfes
今のところ主な機能は2つです。
スタミナがMaxになる時間になったら通知する hubot scfes remind stamina 10 50
で、スタミナの現在値が10、最大値が50の場合に、Maxになる時刻に通知してくれます。
それ以外の値の場合は調節してください。
スタミナがnの倍数になったときに通知する hubot scfes remind stamina 10 50 25
で、スタミナの現在値が10、最大値が50として、25の倍数の時に通知してくれます。
EXでちょうど使い切れるタイミングで通知するといった使い方を想定しています。
未実装機能 イベント終了までにどれくらいスタミナが回復するかとか、
レベルアップするのはいつぐらいになるかとか、
そういった頭の中で適当に計算してる奴を機能化していこうと思います。
ちなみにこいつは前に作ったstamina-calculatorを内部で使用しています。
node.jsで細かくパッケージに分けて開発ってどうやるんだろうなーと思って、実益と練習がてら作った感じです。</description>
    </item>
    
    <item>
      <title>進捗どうですか？を訪ねるhubotスクリプトを作った</title>
      <link>/blog/2014/10/05/shinchoku/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/10/05/shinchoku/</guid>
      <description> 作りました。
30分ごとに進捗どうですか？と聞いてきます。
何をやったかを計測するために定期的にログを残そうと思うのですが、
大体忘れるので、こうやって適度に通知することで思いだそう！という試みです。
使い方 進捗 startで30分ごとに進捗どうですか？と聞いてきます。
進捗 stopでストップします。
ホラー体験 setTimeoutが秒設定だと間違えて…(´･_･`)
コード  </description>
    </item>
    
    <item>
      <title>ソシャゲ用のスタミナ計算機を作った</title>
      <link>/blog/2014/10/02/social-game-stamina-calc/</link>
      <pubDate>Thu, 02 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/10/02/social-game-stamina-calc/</guid>
      <description> 作りました。
スタミナmaxまでどれくらいかなー？とか、次イベント曲(25消費)をやるのに区切りがいいのはいつかなー
みたいなのを計算するのが面倒だったので、その辺の計算を自動でやってくれます。
使い方 初期化 スタミナ1あたりいくつ回復するかはゲームによって違うので、コンストラクタで渡します。
なお、指定は秒で行います。
stamina_calculator = new StaminaCalculator 6*60
この例ですと、6分で1スタミナ回復するゲームになります。
指定した値までの回復時間(getNextMaxStaminaTime) 現在値と指定値を渡すと、指定した値までに何秒かかるかを返します。
Maxまでどれくらいかな？とか、50になるのは何分後か？みたいな計算に使います。
stamina_calculator.getNextMaxStaminaTime(10, 60)
指定した倍数の値まで回復する時間(getMultipleRecoveryTime) 現在値とMAX値、それと倍数を渡すことで、指定した倍数になる時間を返します。
今30で、一回25消費できるから、50か75か100になる時間を知りたい…みたいな時に使います。
next_multiple_time = calc.getMultipleRecoveryTime(10, 80, 25)
結果をDateオブジェクトにする メソッドを呼んだ時間から指定秒たった時点のDateオブジェクトを返します。
Dateオブジェクトのコンストラクタには、指定時間後のオブジェクトを作る方法が見当たらなかったので作りました。
stamina_calculator.convertToDate(second)
サンプルコード StaminaCalculator = require(&#39;stamina-calculator&#39;).StaminaCalculator; stamina_calculator = new StaminaCalculator 6*60 second = stamina_calculator.getNextMaxStaminaTime(10, 60) console.log second # 今から何秒後にスタミナが５０回復するか console.log stamina_calculator.convertToDate(second) # 現在時刻からスタミナが５０回復する時間がDateオブジェクトで帰ってくる  </description>
    </item>
    
    <item>
      <title>受け取ったPOSTデータをチャットに送信するHubotスクリプトを作った</title>
      <link>/blog/2014/08/29/hubot-post-server/</link>
      <pubDate>Fri, 29 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/08/29/hubot-post-server/</guid>
      <description>実はHubotはWebサーバを立ち上げており、チャットからの入力以外にも、
Webサーバへのアクセスに対して反応することができます。
例: scripts/httpd.coffee
今回はその機能を利用し、
/hubot/send_messageにPOSTされたデータをチャットに流すスクリプトを作りました。
Hubot以外のアプリからこのURLを叩くことで、hubotの接続しているチャットに対して簡単にデータを送信できます。
 </description>
    </item>
    
    <item>
      <title>Evernoteのノートリンクが仕様変更で使い物にならないので何とかしようとした</title>
      <link>/blog/2014/08/10/evernote-link/</link>
      <pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/08/10/evernote-link/</guid>
      <description>まとめ  Evernoteのノートリンクの仕様が変わって使い物にならなくなった 前の仕様でも動くので変換スクリプトを書いた ただし、Macではスクリプトの実行方法で問題あり  Evernoteのノートリンク仕様の変更 Evernoteでは図のように、「ノートリンクをコピー」で特定のノートに一対一対応するURIを取れます。
この機能でコピーされるのは、これまでは evernote:///という独自スキームが使われていました。
そのため、開こうとするとEvernoteアプリが立ち上がり、対応するノートを開いてくれていました。
AndroidやiPhoneでもEvernoteアプリをインストールしてあれば、
同じようにアプリでノートを開いてくれるため、とても便利でした。
しかし、最近の変更により、https://www.evernote.com/ へのリンクに変わってしまい、
ブラウザが起動してノートがEvernoteのサイト上で表示され、
そこからさらにEvernoteのアプリが開くという挙動になりました。
これにより、モバイル端末などではEvernoteへの通信時間が余計にかかるようになったうえに、
オフライン状態ではノートを開くことができなくなってしまいました。
正直使い物にならないレベルになってしまったのですが、
幸いなことにevernote:///スキームは未だ有効です。
また、必要な情報はどちらにも含まれているため、URIの変換スクリプトを書くことで対応可能です。
リンク置換スクリプトの作成 ノートリンクの仕様 以下は予想であり、正確なものではありません
Evernoteのhttpsリンクは以下のようになっています。
https://www.evernote.com/shard/s2/nl/ユーザ固有の文字列/ノート固有の文字列/
対して、evernote:///スキームは以下のようになっています。
evernote:///view/ユーザ固有の文字列/s2/ノート固有の文字列/ノート固有の文字列/
(ノート固有の文字列は二回とも同じ値になります)　どちらもユーザ固有の文字列とノート固有の文字列は含まれているため、相互に変換可能です。
Windowsならクリップボードの置換ソフトはたくさんあるのですが、
Macでは残念ながらまともな物はありませんでした。
一応、ClipMenuは正規表現で置換ができますが、
それを実行するまでにかなりキーストロークが必要なため、見送りました。
理想は自動置換、最低でもスクリプトを簡単に実行できるのが最低条件です。
リンク置換スクリプト 結局、クリップボードのURLをevernote:///に変換するスクリプトを作りました。
事前にclipboard gemをインストールしておく必要があります。
#!/bin/bash pushd $(dirname $0) bundle exec ruby -e &amp;quot; require &#39;clipboard&#39; url = Clipboard.paste r = Regexp.new(\&amp;quot;https://www.evernote.com/shard/s2/nl/([0-9]*)/(.*)/\&amp;quot;) result = r.match url if result new_url = \&amp;quot;evernote:///view/#{result[1]}/s2/#{result[2]}/#{result[2]}/\&amp;quot; p new_url Clipboard.copy new_url end &amp;quot; popd  これをevernote.</description>
    </item>
    
  </channel>
</rss>