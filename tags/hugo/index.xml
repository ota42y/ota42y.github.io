<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on おおたの物置</title>
    <link>http://ota42y.com/tags/hugo/</link>
    <description>Recent content in Hugo on おおたの物置</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 29 Jul 2015 23:25:20 +0900</lastBuildDate>
    
	<atom:link href="http://ota42y.com/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugoのブログテーマを作った</title>
      <link>http://ota42y.com/blog/2015/07/29/blog_theme/</link>
      <pubDate>Wed, 29 Jul 2015 23:25:20 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/07/29/blog_theme/</guid>
      <description>ブログテーマ更新を更新しました。
今回は、Bootstrapを元にしたHonokaを利用して作りました。
リポジトリはこちら
https://github.com/ota42y/honokichi
Bootstrapの作りにあったHTMLを出力するようにテンプレートを作ると、
ほぼそれっぽいデザインになったためとても楽でした。
一応、ブログでよく使う見出し間の間隔や、記事一覧画面でのマージンをちょっと変更しています。</description>
    </item>
    
    <item>
      <title>OctopressからHugoに乗り換えた</title>
      <link>http://ota42y.com/blog/2015/03/16/octopress_to_hugo/</link>
      <pubDate>Mon, 16 Mar 2015 07:40:11 +0900</pubDate>
      
      <guid>http://ota42y.com/blog/2015/03/16/octopress_to_hugo/</guid>
      <description>このサイトは元々静的サイト作成ツールのOctopressを使い、Github Pages上に構築していましたが、
サイト作成ツールの部分をGolangで作られたHugoに置き換えました。
まとめ  Octopress  Ruby制の静的サイト作成ツール 大量の記事を扱うと遅くなっていく  100記事で新しい記事のHTML出力まで10秒ぐらいかかる 見た目を確認したいときなどにとても不便   Hugo  Golang制の静的サイト作成ツール 利点 早い  100記事で200msぐらい  環境構築いらず  公式がバイナリ配布 手を加えないならそのまま使える Win-Mac両方使う人にはとても楽  欠点  テーマが少ない  このサイトも自作 https://github.com/ota42y/orange42   手を加えにくい  手を加えると環境構築いらずの利点が失われる クロスコンパイルは楽なのでそれほどでもない？  手を加える必要が無いのでそのとき考える     Octopressの問題点 HTMLのレンダリングが遅いです。
Octopressにはローカルにサーバを立てて、実際に表示される画面をブラウザで表示する機能があります。
この機能はファイルを監視しており、変更があるたびに再読込をしてくれるので、
表示されるHTMLをみながらmarkdownを編集でき、とても役に立っていました。
現在このブログは100記事ぐらいありますが、その状態だと1記事のHTMLを作るのに10秒ぐらいかかってしまいます。
ちょっとした修正ごとに10秒待つのはなかなかにつらく、
かつ記事が増えて行くにしたがって速度がより遅くなっていくことが予想できました。
そのときちょうどGolangで作られたHugoのことを知り、速度もとても速いとのことなので乗り換えを検討しました
乗り換え方はこちらのサイトを参考にさせていただきました。
OctopressからHugoへ移行した
Hugoの利点 HTMLのレンダリングが早い Octopressだと10秒ぐらいかかっていた状態をそのまま移行しましたが、
ファイルを更新してからHTMLに変換されるまでの時間が400msにまで短縮され、
ほとんど待ち時間が感じられないレベルになりました。
特にチューニングとかを考えずにこの速度なので、とても助かります。
環境構築いらず Hugo本体に手を入れないのであれば、様々な環境用の実行ファイルが配布されているため、
環境構築でがんばる必要がありません。
私はWindowsとMacの両方を使っていますが、WindowsでのRubyはつらいものがあるので、
Windows向けのバイナリをダウンロードするだけですむのは大変便利です。
Hugoの問題点 テーマがない テーマの数が圧倒的に少なく、思った通りのサイトを作るためには自分で作らないと行けません。</description>
    </item>
    
  </channel>
</rss>